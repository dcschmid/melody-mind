---
/**
 * PlaylistCard Component - Responsive & Accessible
 *
 * A comprehensive playlist display component for music trivia with streaming platform integration.
 * Fully responsive with WCAG AAA compliance and optimized for all screen sizes.
 *
 * @component
 * @example
 * ```astro
 * <PlaylistCard
 *   headline="80s Rock Classics"
 *   imageUrl="/images/80s-rock.jpg"
 *   introSubline="The best rock anthems from the 1980s"
 *   spotifyPlaylist="https://open.spotify.com/playlist/example"
 *   index={0}
 *   lang="en"
 * />
 * ```
 */
import OptimizedImage from "./OptimizedImage.astro";
import { useTranslations } from "../utils/i18n";
import Headline from "./Headline.astro";
import Paragraph from "./Paragraph.astro";
import MusicButtons from "./MusicButtons.astro";

export interface PlaylistCardProps {
  /** Main title of the playlist */
  headline: string;
  /** URL to the playlist cover image */
  imageUrl: string;
  /** Short description of the playlist */
  introSubline: string;
  /** Optional Spotify playlist URL */
  spotifyPlaylist?: string;
  /** Optional Deezer playlist URL */
  deezerPlaylist?: string;
  /** Optional Apple Music playlist URL */
  appleMusicPlaylist?: string;
  /** Index of the playlist in the list (used for animation and loading priority) */
  index: number;
  /** Language code for translations */
  lang: string;
}

// Extract props with comprehensive TypeScript validation and accessibility setup
const {
  headline,
  imageUrl,
  introSubline,
  spotifyPlaylist,
  deezerPlaylist,
  appleMusicPlaylist,
  index,
  lang,
} = Astro.props as PlaylistCardProps;

// Initialize translation function for i18n support
const t = useTranslations(lang);

// Extract decade information for filtering and categorization
const decadeMatch = headline.match(/\d{4}/);
const decade = decadeMatch ? `${decadeMatch[0].substring(0, 3)}0s` : "Other";

// Performance optimization: determine loading priority based on viewport visibility
const isPriority = index < 2;
const loadingStrategy = isPriority ? "eager" : "lazy";
const fetchPriority = isPriority ? "high" : "auto";

// Feature detection: determine if the card has streaming service links
const hasStreamingLinks = spotifyPlaylist || deezerPlaylist || appleMusicPlaylist;
---

<article
  class="relative isolate flex h-full w-full max-w-full flex-col overflow-hidden rounded-2xl border border-gray-700 bg-gray-800 shadow-lg transition-all duration-300 focus-within:ring-2 focus-within:ring-purple-500 focus-within:ring-offset-2 focus-within:ring-offset-gray-900 focus-within:outline-none hover:-translate-y-1 hover:shadow-xl"
  aria-labelledby={`playlist-title-${index}`}
  data-personalization="music-card"
  data-genre={decade}
  data-content-type="playlist"
  data-index={index}
>
  <!-- Decade indicator bar -->
  <div
    class="mb-3 h-1 w-16 rounded-full bg-gradient-to-r from-purple-400 to-blue-400"
    aria-hidden="true"
  >
  </div>

  <!-- Image container -->
  <div class="relative aspect-video overflow-hidden rounded-t-2xl">
    <OptimizedImage
      group="playlist"
      slug={imageUrl}
      alt={t("playlist.image.alt", { headline, introSubline, decade })}
      loading={loadingStrategy}
      priority={isPriority}
      fetchpriority={fetchPriority}
      class="h-full w-full object-cover"
      widthHint={1280}
      heightHint={720}
    />

    {/* Enhanced image description for WCAG 2.2 AAA */}
    <div id={`playlist-detailed-desc-${index}`} class="sr-only">
      {t("playlist.image.description", { decade, headline })}
    </div>
  </div>

  <!-- Content area -->
  <div class="flex flex-1 flex-col gap-4 bg-gradient-to-b from-gray-800 to-gray-900 p-6">
    <Headline level="h2" textSize="xl">
      {headline}
    </Headline>
    <Paragraph textSize="xl">
      {introSubline}
    </Paragraph>

    {
      hasStreamingLinks && (
        <MusicButtons
          category={{
            spotifyPlaylist,
            deezerPlaylist,
            appleMusicPlaylist,
          }}
          title={headline}
        />
      )
    }
  </div>

  {/* Live region for basic playlist information */}
  <div aria-live="polite" aria-atomic="true" class="sr-only" id={`playlist-live-${index}`}>
    {t("playlist.music.from.decade", { decade })}
  </div>

  {/* Public playlist information for authentication-free access */}
  <div class="sr-only" aria-label={t("playlist.accessibility.info")}>
    {t("playlist.accessibility.public")}
  </div>
</article>
