---
/**
 * SEO Component for MelodyMind
 *
 * This component manages all SEO-related meta tags, structured data,
 * and accessibility improvements for better page indexing and user experience.
 * It follows WCAG AAA standards for content and provides proper language support.
 *
 * @component
 * @example
 * ```astro
 * <SEO
 *   title="Rock Music Quiz"
 *   description="Test your knowledge of classic rock hits"
 *   type="game"
 * />
 * ```
 */
import { getLangFromUrl } from "@utils/i18n";
import { languages } from "../i18n/ui"; // Direct relative path instead of alias

interface Props {
  /** Page title - will be appended with site name */
  title: string;
  /** Page description - important for SEO and accessibility */
  description?: string;
  /** Keywords for search engines */
  keywords?: string;
  /** Path to OpenGraph/social share image (absolute or relative) */
  image?: string;
  /** Content type classification */
  type?: "website" | "article" | "music" | "game";
  /** Publication date - important for articles/content */
  publishDate?: Date;
  /** Last modification date - helps with SEO freshness signals */
  modifiedDate?: Date;
  /** Path to audio content - used for music schema */
  audioSrc?: string;
  /** Content section category - used for article schema */
  section?: string;
  /** Music-specific OpenGraph meta tags */
  ogMusic?: {
    creator?: string;
    album?: string;
    musician?: string;
  };
}

const {
  title,
  description = "Melody Mind - The Musical Quiz Game",
  keywords = "Music, Quiz, Game, Cover, Entertainment",
  image = "/social-share.jpg",
  type = "website",
  publishDate,
  modifiedDate,
  audioSrc,
  section = "game",
  ogMusic,
} = Astro.props;

const lang = getLangFromUrl(Astro.url);
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const imageURL = new URL(image, Astro.site);
const siteUrl = Astro.site?.toString() || "https://melodymind.app";

// Improved URL handling for hreflang tags
const alternateLanguages = Object.keys(languages).map((langCode) => {
  // Safer method to replace language in URL path
  let path = Astro.url.pathname;

  // If current path starts with /{lang}/, replace only that part
  const langPathRegex = new RegExp(`^/${lang}/`);
  if (langPathRegex.test(path)) {
    path = path.replace(langPathRegex, `/${langCode}/`);
  } else {
    // Fallback for different URL structures
    path = `/${langCode}${path.startsWith("/") ? path : "/" + path}`;
  }

  const url = new URL(path, Astro.site || siteUrl);
  return { langCode, url: url.toString() };
});

/**
 * JSON-LD structured data with TypeScript type safety
 * Follows schema.org standards for better search engine interpretation
 */
interface StructuredData {
  "@context": string;
  "@type": string;
  [key: string]: any;
}

// Base website schema
let structuredData: StructuredData = {
  "@context": "https://schema.org",
  "@type": "WebSite",
  name: "Melody Mind",
  url: siteUrl,
  description: description,
  potentialAction: {
    "@type": "SearchAction",
    target: {
      "@type": "EntryPoint",
      urlTemplate: `${siteUrl}${lang}/search?q={search_term_string}`,
    },
    "query-input": "required name=search_term_string",
  },
  inLanguage: lang,
  author: {
    "@type": "Organization",
    name: "Melody Mind Team",
  },
  accessibilityControl: [
    "fullKeyboardControl",
    "fullMouseControl",
    "fullTouchControl",
  ],
  accessibilityFeature: [
    "alternativeText",
    "highContrast",
    "structuralNavigation",
  ],
};

// Enhanced structured data based on page type
if (type === "article") {
  structuredData = {
    "@context": "https://schema.org",
    "@type": "Article",
    headline: title, // Use headline for Article schema (not name)
    description: description,
    image: imageURL.toString(),
    datePublished: publishDate
      ? publishDate.toISOString()
      : new Date().toISOString(),
    dateModified: modifiedDate
      ? modifiedDate.toISOString()
      : new Date().toISOString(),
    author: {
      "@type": "Organization",
      name: "Melody Mind Team",
    },
    publisher: {
      "@type": "Organization",
      name: "Melody Mind",
      logo: {
        "@type": "ImageObject",
        url: new URL("/melody-mind.png", Astro.site || siteUrl).toString(),
        width: 192,
        height: 192,
      },
    },
    mainEntityOfPage: {
      "@type": "WebPage",
      "@id": canonicalURL.toString(),
    },
    inLanguage: lang,
    articleSection: section,
    accessibilityControl: [
      "fullKeyboardControl",
      "fullMouseControl",
      "fullTouchControl",
    ],
    accessibilityFeature: [
      "alternativeText",
      "highContrast",
      "structuralNavigation",
    ],
  };
} else if (type === "music") {
  structuredData = {
    "@context": "https://schema.org",
    "@type": "MusicGroup",
    name: title,
    description: description,
    image: imageURL.toString(),
    url: canonicalURL.toString(),
    audio: audioSrc
      ? new URL(audioSrc, Astro.site || siteUrl).toString()
      : null,
    inLanguage: lang,
    accessibilityControl: [
      "fullKeyboardControl",
      "fullMouseControl",
      "fullTouchControl",
    ],
    accessibilityFeature: [
      "alternativeText",
      "highContrast",
      "structuralNavigation",
    ],
  };
} else if (type === "game") {
  structuredData = {
    "@context": "https://schema.org",
    "@type": "Game",
    name: "Melody Mind",
    description: description,
    genre: "Music Quiz",
    audience: {
      "@type": "Audience",
      audienceType: "Music lovers",
    },
    inLanguage: lang,
    accessibilityControl: [
      "fullKeyboardControl",
      "fullMouseControl",
      "fullTouchControl",
    ],
    accessibilityFeature: [
      "alternativeText",
      "highContrast",
      "structuralNavigation",
    ],
  };
}

// Generate concise page title with site name
const pageTitle = `${title} | Melody Mind`;

// Calculate critical resources for preloading
const criticalResources = [
  { as: "image", href: "/favicon.svg", type: "image/svg+xml" },
  {
    as: "font",
    href: "/fonts/Inter-variable.woff2",
    type: "font/woff2",
    crossorigin: true,
  },
];
---

<!-- Primary Meta Tags -->
<title>{pageTitle}</title>
<meta name="title" content={pageTitle} />
<meta name="description" content={description} />
<meta name="keywords" content={keywords} />
<meta name="author" content="Melody Mind Team" />
<meta name="robots" content="index, follow" />
<meta name="language" content={lang} />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Hreflang Tags for Internationalization -->
{
  alternateLanguages.map(({ langCode, url }) => (
    <link rel="alternate" href={url} hreflang={langCode} />
  ))
}
<link rel="alternate" href={canonicalURL} hreflang="x-default" />

<!-- Open Graph / Facebook -->
<meta property="og:type" content={type === "article" ? "article" : "website"} />
<meta property="og:url" content={canonicalURL} />
<meta property="og:title" content={pageTitle} />
<meta property="og:description" content={description} />
<meta property="og:image" content={imageURL} />
<meta property="og:image:alt" content={`Melody Mind - ${title}`} />
<meta property="og:locale" content={lang.replace("-", "_")} />
<meta property="og:site_name" content="Melody Mind" />
{
  publishDate && (
    <meta
      property="article:published_time"
      content={publishDate.toISOString()}
    />
  )
}
{
  modifiedDate && (
    <meta
      property="article:modified_time"
      content={modifiedDate.toISOString()}
    />
  )
}
{section && <meta property="article:section" content={section} />}

<!-- Music-specific OpenGraph tags -->
{
  ogMusic?.creator && (
    <meta property="og:music:creator" content={ogMusic.creator} />
  )
}
{ogMusic?.album && <meta property="og:music:album" content={ogMusic.album} />}
{
  ogMusic?.musician && (
    <meta property="og:music:musician" content={ogMusic.musician} />
  )
}

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={canonicalURL} />
<meta property="twitter:title" content={pageTitle} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={imageURL} />
<meta name="twitter:image:alt" content={`Melody Mind - ${title}`} />
<meta name="twitter:site" content="@melodymindgame" />
<meta name="twitter:creator" content="@melodymindgame" />

<!-- Performance: Resource Hints -->
<link rel="preconnect" href={new URL(imageURL).origin} crossorigin />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link rel="dns-prefetch" href="https://fonts.gstatic.com" />

<!-- Performance: Preload Critical Resources -->
{
  criticalResources.map((resource) => (
    <link
      rel="preload"
      as={resource.as}
      href={resource.href}
      type={resource.type}
      crossorigin={resource.crossorigin ? "anonymous" : undefined}
    />
  ))
}

<!-- Mobile App Integration -->
<meta name="apple-mobile-web-app-capable" content="yes" />
<meta
  name="apple-mobile-web-app-status-bar-style"
  content="black-translucent"
/>
<meta name="application-name" content="Melody Mind" />
<meta name="theme-color" content="#18181b" />

<!-- Structured Data / JSON-LD - Compressed for performance -->
<script type="application/ld+json" set:html={JSON.stringify(structuredData)} />

<!-- Favicons with explicit sizes for better performance -->
<link rel="icon" type="image/png" href="/favicon-96x96.png" sizes="96x96" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="shortcut icon" href="/favicon.ico" />
<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
<link rel="manifest" href="/site.webmanifest" />

<!-- Generator -->
<meta name="generator" content={Astro.generator} />
