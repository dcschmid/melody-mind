---
/**
 * AuthFormField Component for MelodyMind Authentication Forms
 *
 * A reusable, WCAG AAA compliant form field component that provides consistent styling
 * and behavior for authentication forms.
 *
 * ## Features
 * - Support for email, password, text, tel, url, search, and number inputs
 * - Built-in label & error handling with integrated password visibility toggle
 * - WCAG AAA compliance with 7:1 contrast ratios and enhanced focus indicators
 * - Progressive enhancement with fallback styling
 * - Touch optimized with enhanced mobile interactions
 * - Full i18n support with client-side validation messages
 *
 * @component
 * @example
 * ```astro
 * <!-- Basic email input -->
 * <AuthFormField
 *   id="loginEmail"
 *   name="email"
 *   type="email"
 *   label={t("auth.login.email")}
 *   placeholder={t("auth.login.email.placeholder")}
 *   required={true}
 *   autocomplete="email"
 * />
 *
 * <!-- Password input with toggle -->
 * <AuthFormField
 *   id="loginPassword"
 *   name="password"
 *   type="password"
 *   label={t("auth.login.password")}
 *   placeholder={t("auth.login.password.placeholder")}
 *   required={true}
 *   autocomplete="current-password"
 *   showPasswordToggle={true}
 *   helpText={t("auth.form.password_requirements")}
 * />
 * ```
 *
 * @since 2.0.0
 * @version 3.1.0
 */
import PasswordToggleButton from "./PasswordToggleButton.astro";
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import Paragraph from "../Paragraph.astro";

// Get current language and translations for client-side scripts
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Prepare translations for client-side validation
const clientTranslations = {
  "auth.form.email_invalid": t("auth.form.email_invalid"),
  "auth.form.password_min_length": t("auth.form.password_min_length"),
  "auth.accessibility.field_error": t("auth.accessibility.field_error"),
  "auth.accessibility.error_resolved": t("auth.accessibility.error_resolved"),
};

/**
 * Props interface for AuthFormField component
 */
export interface Props {
  /** Unique identifier for the input field */
  id: string;
  /** Name attribute for the input (used for form submission) */
  name: string;
  /** Input type - determines the input behavior and validation */
  type: "email" | "password" | "text" | "tel" | "url" | "search" | "number";
  /** Label text for the input (supports internationalization) */
  label: string;
  /** Placeholder text shown when input is empty */
  placeholder?: string;
  /** Whether the field is required for form submission */
  required?: boolean;
  /** Autocomplete attribute value for browser auto-filling */
  autocomplete?: string;
  /** Additional CSS classes to apply to the wrapper element */
  class?: string;
  /** Custom HTML content to display after the label (e.g., forgot password link) */
  labelSuffix?: string;
  /** Whether to show password toggle button (automatically enabled for password type) */
  showPasswordToggle?: boolean;
  /** Accessible label for the password toggle button */
  passwordToggleLabel?: string;
  /** Additional HTML attributes to pass directly to the input element */
  inputAttributes?: Record<string, string | number | boolean>;
  /** Optional help text to provide additional context and guidance */
  helpText?: string;
}

const {
  id,
  name,
  type,
  label,
  placeholder,
  required = false,
  autocomplete,
  class: className = "",
  labelSuffix,
  showPasswordToggle = type === "password",
  passwordToggleLabel = t("auth.accessibility.password_toggle"),
  inputAttributes = {},
  helpText,
} = Astro.props;

const isPasswordType = type === "password";
const errorId = `${id}Error`;
const helpId = helpText ? `${id}Help` : undefined;
const toggleId = `toggle${id.charAt(0).toUpperCase() + id.slice(1)}`;

// Build aria-describedby attribute - combine help text and error IDs
const describedByIds = [helpId, errorId].filter(Boolean).join(" ");
---

<div class={`auth-form-field ${className}`}>
  <div class="auth-form-field__label-group">
    <label for={id} class="auth-form-field__label">
      {label}
      {
        required && (
          <>
            <span class="auth-form-field__required-mark" aria-hidden="true">
              *
            </span>
            <span class="sr-only">{t("auth.form.required")}</span>
          </>
        )
      }
    </label>
    {labelSuffix && <div class="auth-form-field__label-suffix" set:html={labelSuffix} />}
  </div>

  <div class="auth-form-field__input-wrapper">
    {
      helpText && (
        <Paragraph
          id={helpId}
          text={helpText}
          size="sm"
          variant="secondary"
          className="auth-form-field__help-text"
        />
      )
    }

    <input
      {type}
      {id}
      {name}
      class="auth-form-field__input"
      {placeholder}
      {required}
      {autocomplete}
      aria-required={required ? "true" : "false"}
      aria-describedby={describedByIds}
      {...inputAttributes}
    />

    {
      isPasswordType && showPasswordToggle && (
        <PasswordToggleButton id={toggleId} targetPasswordId={id} ariaLabel={passwordToggleLabel} />
      )
    }

    <div id={errorId} class="auth-form-field__error-message" role="alert" aria-live="polite"></div>
  </div>
</div>

<!-- Progressive Enhancement: NoScript fallback for error states -->
<noscript>
  <style>
    .auth-form-field__input--error {
      border-color: var(--border-error) !important;
      background-color: var(--bg-error-aaa) !important;
    }

    .auth-form-field__error-message[data-error] {
      display: block !important;
      color: var(--text-error-aaa) !important;
    }
  </style>
</noscript>

<!-- Setup client-side translations for validation messages -->
<script type="module" define:vars={{ translations: clientTranslations }}>
  // Make translations available to the client-side validation using modern ES6+
  window.authTranslations = translations;
</script>

<script type="module">
  // Import the auth form field functionality with modern ES6+ features
  // This provides client-side validation and enhanced interactions
  import("/src/utils/authFormField.ts");
</script>

<style lang="scss">
  /**
   * AuthFormField Component Styles - Modern SCSS
   * 
   * ✅ Modern form field design with fluid responsive scaling
   * ✅ 100% CSS variables from global.css - NO hardcoded values
   * ✅ WCAG AAA 2.2 compliant colors and spacing
   * ✅ Performance optimized with CSS containment and modern transforms
   * ✅ Enhanced accessibility with proper focus management
   * ✅ Consistent with other components
   */

  .auth-form-field {
    // Fluid responsive margin
    margin-bottom: clamp(var(--space-md), 4vw, var(--space-lg));
    
    // Modern CSS containment for performance
    contain: layout style paint;
    
    // GPU acceleration
    transform: translateZ(0);

    * {
      box-sizing: border-box;
    }

    // Modern label group with fluid design
    &__label-group {
      display: flex;
      align-items: center;
      justify-content: space-between;
      
      // Fluid responsive spacing
      margin-bottom: clamp(var(--space-sm), 3vw, var(--space-md));
      gap: clamp(var(--space-sm), 3vw, var(--space-md));
      
      // Modern CSS containment
      contain: layout style;
      
      // Responsive behavior
      @media (max-width: 39.9375em) {
        flex-direction: column;
        align-items: flex-start;
        gap: var(--space-xs);
      }
    }

    &__label {
      display: block;
      
      // Fluid responsive typography
      font-size: clamp(var(--text-base), 3vw, var(--text-lg));
      font-weight: var(--font-semibold);
      color: var(--text-primary);
      line-height: var(--leading-relaxed);
      letter-spacing: var(--letter-spacing-base);
      
      // Better text wrapping
      text-wrap: balance;
      
      // Modern CSS containment
      contain: layout style;
    }

    &__required-mark {
      color: var(--text-error-aaa);
      margin-left: var(--space-xs);
      font-weight: var(--font-bold);
      
      // Fluid responsive sizing
      font-size: clamp(var(--text-lg), 4vw, var(--text-xl));
      
      // Enhanced accessibility
      text-shadow: 0 0 var(--space-micro) var(--bg-primary);
    }

    &__label-suffix {
      // Fluid responsive typography
      font-size: clamp(var(--text-sm), 3vw, var(--text-base));
      color: var(--text-secondary);
      line-height: var(--leading-relaxed);
      
      // Better text wrapping
      text-wrap: balance;
    }

    // Modern input wrapper with fluid design
    &__input-wrapper {
      position: relative;
      display: flex;
      flex-direction: column;
      
      // Fluid responsive gap
      gap: clamp(var(--space-xs), 2vw, var(--space-sm));
      
      // Modern CSS containment
      contain: layout style;
    }

    &__help-text {
      // Fluid responsive typography
      font-size: clamp(var(--text-sm), 3vw, var(--text-base));
      color: var(--text-secondary);
      line-height: var(--leading-relaxed);
      letter-spacing: var(--letter-spacing-base);
      
      // Fluid responsive padding
      padding: clamp(var(--space-xs), 2vw, var(--space-sm)) clamp(var(--space-sm), 3vw, var(--space-md));
      
      background-color: var(--bg-help-info);
      border: var(--border-width-thin) solid var(--border-help-info);
      border-radius: var(--radius-sm);
      
      // Modern CSS containment and GPU acceleration
      contain: layout style;
      transform: translateZ(0);
      will-change: opacity;
      
      transition: opacity var(--transition-normal);
      
      // Better text wrapping
      text-wrap: balance;
    }

    &__input {
      width: 100%;
      min-height: var(--min-touch-size);
      
      // Fluid responsive padding
      padding: clamp(var(--space-md), 4vw, var(--space-lg));
      
      background-color: var(--form-bg);
      border: var(--border-width-thick) solid var(--form-border);
      border-radius: var(--radius-md);
      color: var(--form-text);
      
      // Fluid responsive typography
      font-size: clamp(var(--text-base), 3vw, var(--text-lg));
      line-height: var(--leading-relaxed);
      letter-spacing: var(--letter-spacing-base);
      
      appearance: none;
      
      // Modern CSS containment and GPU acceleration
      contain: layout style;
      transform: translateZ(0);
      will-change: border-color, background-color, box-shadow, transform;
      
      touch-action: manipulation;

      transition:
        border-color var(--transition-normal),
        background-color var(--transition-normal),
        box-shadow var(--transition-normal),
        transform var(--transition-fast);

      // Enhanced input states with fluid design
      &::placeholder {
        color: var(--form-placeholder);
        opacity: var(--opacity-medium);
        
        // Fluid responsive typography
        font-size: clamp(var(--text-base), 3vw, var(--text-lg));
        
        // Better text wrapping
        text-wrap: balance;
      }

      &:focus,
      &:focus-visible {
        border-color: var(--border-focus);
        background-color: var(--bg-tertiary);
        transform: translateY(calc(-1 * var(--space-micro))) translateZ(0);
        outline: none;
        box-shadow: var(--focus-ring);
      }

      &:focus-visible {
        outline: var(--focus-outline);
        outline-offset: var(--focus-ring-offset);
        box-shadow: var(--focus-enhanced-shadow);
      }

      &--focused {
        border-color: var(--interactive-primary);
        background-color: var(--bg-tertiary);
      }

      &--error {
        border-color: var(--border-error);
        background-color: var(--bg-error-aaa);
        animation: error-shake var(--transition-normal) ease-in-out;
        will-change: transform;

        &:focus {
          border-color: var(--border-error);
          box-shadow: var(--focus-enhanced-shadow);
          transform: translateY(calc(-1 * var(--space-micro))) translateZ(0);
        }
      }
    }

    // Modern error message with fluid design
    &__error-message {
      display: none;
      
      // Fluid responsive spacing
      margin-top: clamp(var(--space-sm), 3vw, var(--space-md));
      padding: clamp(var(--space-sm), 3vw, var(--space-md)) clamp(var(--space-md), 4vw, var(--space-lg));
      
      // Fluid responsive typography
      font-size: clamp(var(--text-sm), 3vw, var(--text-base));
      color: var(--text-error-aaa);
      background-color: var(--bg-error-aaa);
      border: var(--border-width-thick) solid var(--border-error);
      border-radius: var(--radius-sm);
      line-height: var(--leading-relaxed);
      font-weight: var(--font-medium);
      
      // Modern CSS containment and GPU acceleration
      contain: layout style;
      transform: translateZ(0);
      
      // Better text wrapping
      text-wrap: balance;
      
      // Enhanced animations
      transition: opacity var(--transition-normal);
      
      &:not(:empty) {
        display: block;
      }
    }
  }

  // Modern animations with GPU acceleration
  @keyframes error-shake {
    0%,
    100% {
      transform: translateX(0) translateZ(0);
    }
    25% {
      transform: translateX(calc(-1 * var(--space-xs))) translateZ(0);
    }
    75% {
      transform: translateX(var(--space-xs)) translateZ(0);
    }
  }

  // Enhanced responsive design with modern breakpoints
  @media (min-width: 48em) {
    .auth-form-field {
      &__input {
        min-height: calc(var(--min-touch-size) + var(--space-sm));
      }
    }
  }

  @media (max-width: 23.4375em) {
    .auth-form-field {
      &__input {
        min-height: var(--min-touch-size);
      }
    }
  }

  // Enhanced accessibility support
  @media (prefers-contrast: high) {
    .auth-form-field {
      &__input {
        border-width: var(--border-width-enhanced);
        border-color: var(--text-primary);
        background-color: var(--bg-primary);
        filter: var(--filter-high-contrast-select);

        &:focus {
          border-color: var(--interactive-primary);
          box-shadow: var(--focus-enhanced-shadow);
        }
      }

      &__required-mark,
      &__label {
        font-weight: var(--font-bold);
      }

      &__required-mark {
        text-shadow: var(--space-micro) var(--space-micro) var(--space-xs) var(--bg-primary);
      }

      &__error-message {
        background-color: var(--bg-error-aaa);
        border-width: var(--border-width-enhanced);
        font-weight: var(--font-semibold);
      }
    }
  }

  // Reduced motion support
  @media (prefers-reduced-motion: reduce) {
    .auth-form-field {
      &__input,
      &__help-text,
      &__error-message {
        transition: none;
        will-change: auto;
        animation: none;

        &--error {
          transition: none;
          animation: none;
        }
      }
    }

    @keyframes error-shake {
      0%,
      100% {
        transform: none;
      }
    }
  }

  // Enhanced touch device support
  @media (hover: none) and (pointer: coarse) {
    .auth-form-field {
      &__input {
        min-height: calc(var(--min-touch-size) + var(--space-sm));
        padding: var(--space-lg);
        font-size: var(--text-lg);
        touch-action: manipulation;

        &:focus {
          transform: scale(1.02) translateZ(0);
          transition: transform var(--transition-fast);
        }
      }

      &__help-text {
        min-height: calc(var(--min-touch-size) - var(--space-sm));
        display: flex;
        align-items: center;
      }

      &__input-wrapper {
        gap: var(--space-md);
      }
    }
  }
</style>
