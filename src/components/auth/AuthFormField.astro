---
/**
 * AuthFormField Component for MelodyMind Authentication Forms
 *
 * A reusable, WCAG AAA compliant form field component that provides consistent styling
 * and behavior for authentication forms. This component eliminates code duplication
 * across different input fields while maintaining high accessibility standards.
 *
 * ## Features
 * - **Flexible Input Types**: Support for email, password, text, tel, url, search, and number inputs
 * - **Built-in Label & Error Handling**: Integrated label positioning and error message display
 * - **WCAG AAA Compliance**: 7:1 contrast ratios, enhanced focus indicators, screen reader support
 * - **Password Visibility Toggle**: Integrated password show/hide functionality
 * - **Consistent Styling**: Uses CSS variables from global.css for unified design system
 * - **Progressive Enhancement**: Works without JavaScript with fallback styling
 * - **Touch Optimized**: Enhanced touch targets and mobile-friendly interactions
 * - **Internationalization**: Full i18n support with client-side validation messages
 *
 * ## Accessibility Features
 * - Semantic HTML structure with proper ARIA attributes
 * - Screen reader optimized with descriptive labels and error announcements
 * - Keyboard navigation support with enhanced focus indicators
 * - High contrast mode support for better visibility
 * - Reduced motion support for users with vestibular disorders
 * - Minimum 44px touch targets for mobile accessibility
 * - 7:1 color contrast ratios exceeding WCAG AAA standards
 * - Error messages announced via aria-live regions
 *
 * ## Performance Optimizations
 * - CSS containment for optimized rendering
 * - Hardware accelerated transitions using transform properties
 * - Debounced validation to reduce processing overhead
 * - Cached CSS variables to minimize getComputedStyle calls
 * - Efficient DOM manipulation with minimal reflow/repaint
 *
 * @component
 * @example
 * ```astro
 * <!-- Basic email input -->
 * <AuthFormField
 *   id="loginEmail"
 *   name="email"
 *   type="email"
 *   label={t("auth.login.email")}
 *   placeholder={t("auth.login.email.placeholder")}
 *   required={true}
 *   autocomplete="email"
 * />
 *
 * <!-- Password input with toggle -->
 * <AuthFormField
 *   id="loginPassword"
 *   name="password"
 *   type="password"
 *   label={t("auth.login.password")}
 *   placeholder={t("auth.login.password.placeholder")}
 *   required={true}
 *   autocomplete="current-password"
 *   showPasswordToggle={true}
 *   helpText={t("auth.form.password_requirements")}
 * />
 *
 * <!-- Input with help text and custom styling -->
 * <AuthFormField
 *   id="userEmail"
 *   name="email"
 *   type="email"
 *   label={t("auth.register.email")}
 *   placeholder={t("auth.register.email.placeholder")}
 *   required={true}
 *   autocomplete="email"
 *   helpText={t("auth.form.email_help")}
 *   class="custom-field-spacing"
 *   labelSuffix={`<a href="/forgot" class="auth-link">${t("auth.forgot_password")}</a>`}
 * />
 * ```
 *
 * @see {@link ./PasswordToggleButton.astro} - Password visibility toggle component
 * @see {@link ../../utils/authFormField.ts} - Client-side validation and interaction logic
 * @see {@link ../../utils/password-validation.ts} - Validation utility functions
 * @see {@link ../../styles/global.css} - CSS variables and design system
 *
 * @since 2.0.0 - Added WCAG AAA compliance and performance optimizations
 * @version 3.1.0 - Enhanced accessibility features and mobile optimization
 */
import PasswordToggleButton from "./PasswordToggleButton.astro";
import { getLangFromUrl, useTranslations } from "@utils/i18n";

// Get current language and translations for client-side scripts
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Prepare translations for client-side validation
const clientTranslations = {
  "auth.form.email_invalid": t("auth.form.email_invalid"),
  "auth.form.password_min_length": t("auth.form.password_min_length"),
  "auth.accessibility.field_error": t("auth.accessibility.field_error"),
  "auth.accessibility.error_resolved": t("auth.accessibility.error_resolved"),
};

/**
 * Props interface for AuthFormField component
 *
 * Defines all available properties for configuring the form field component.
 * All props are strongly typed to ensure type safety and proper usage.
 *
 * @interface Props
 * @since 2.0.0
 */
export interface Props {
  /**
   * Unique identifier for the input field
   * @required
   * @example "loginEmail", "registerPassword"
   */
  id: string;

  /**
   * Name attribute for the input (used for form submission)
   * @required
   * @example "email", "password", "username"
   */
  name: string;

  /**
   * Input type - determines the input behavior and validation
   * @required
   * @example "email", "password", "text"
   */
  type: "email" | "password" | "text" | "tel" | "url" | "search" | "number";

  /**
   * Label text for the input (supports internationalization)
   * @required
   * @example t("auth.login.email"), "Email Address"
   */
  label: string;

  /**
   * Placeholder text shown when input is empty
   * @optional
   * @example t("auth.login.email.placeholder"), "Enter your email"
   */
  placeholder?: string;

  /**
   * Whether the field is required for form submission
   * @optional
   * @default false
   */
  required?: boolean;

  /**
   * Autocomplete attribute value for browser auto-filling
   * @optional
   * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete
   * @example "email", "current-password", "new-password"
   */
  autocomplete?: string;

  /**
   * Additional CSS classes to apply to the wrapper element
   * @optional
   * @example "mb-6", "custom-spacing"
   */
  class?: string;

  /**
   * Custom HTML content to display after the label (e.g., forgot password link)
   * @optional
   * @example `<a href="/forgot">${t("auth.forgot_password")}</a>`
   */
  labelSuffix?: string;

  /**
   * Whether to show password toggle button (automatically enabled for password type)
   * @optional
   * @default true for password type, false for others
   */
  showPasswordToggle?: boolean;

  /**
   * Accessible label for the password toggle button
   * @optional
   * @default t("auth.accessibility.password_toggle")
   */
  passwordToggleLabel?: string;

  /**
   * Additional HTML attributes to pass directly to the input element
   * @optional
   * @example { "data-testid": "email-input", maxlength: 100 }
   */
  inputAttributes?: Record<string, string | number | boolean>;

  /**
   * Optional help text to provide additional context and guidance
   * Displayed below the label and above the input field
   * @optional
   * @example t("auth.form.password_requirements"), "Must contain at least 8 characters"
   */
  helpText?: string;
}

const {
  id,
  name,
  type,
  label,
  placeholder,
  required = false,
  autocomplete,
  class: className = "",
  labelSuffix,
  showPasswordToggle = type === "password",
  passwordToggleLabel = t("auth.accessibility.password_toggle"),
  inputAttributes = {},
  helpText,
} = Astro.props;

const isPasswordType = type === "password";
const errorId = `${id}Error`;
const helpId = helpText ? `${id}Help` : undefined;
const toggleId = `toggle${id.charAt(0).toUpperCase() + id.slice(1)}`;

// Build aria-describedby attribute - combine help text and error IDs
const describedByIds = [helpId, errorId].filter(Boolean).join(" ");
---

<div class={`auth-form-field ${className}`}>
  <div class="auth-form-field__label-group">
    <label for={id} class="auth-form-field__label">
      {label}
      {
        required && (
          <>
            <span class="auth-form-field__required-mark" aria-hidden="true">
              *
            </span>
            <span class="sr-only">{t("auth.form.required")}</span>
          </>
        )
      }
    </label>
    {labelSuffix && <div class="auth-form-field__label-suffix" set:html={labelSuffix} />}
  </div>

  <div class="auth-form-field__input-wrapper">
    {
      helpText && (
        <div id={helpId} class="auth-form-field__help-text">
          {helpText}
        </div>
      )
    }

    <input
      {type}
      {id}
      {name}
      class="auth-form-field__input"
      {placeholder}
      {required}
      {autocomplete}
      aria-required={required ? "true" : "false"}
      aria-describedby={describedByIds}
      {...inputAttributes}
    />

    {
      isPasswordType && showPasswordToggle && (
        <PasswordToggleButton id={toggleId} targetPasswordId={id} ariaLabel={passwordToggleLabel} />
      )
    }

    <div id={errorId} class="auth-form-field__error-message" role="alert" aria-live="polite"></div>
  </div>
</div>

<!-- Progressive Enhancement: NoScript fallback for error states -->
<noscript>
  <style>
    .auth-form-field__input--error {
      border-color: var(--border-error) !important;
      background-color: var(--bg-error-aaa) !important;
    }

    .auth-form-field__error-message[data-error] {
      display: block !important;
      color: var(--text-error-aaa) !important;
    }
  </style>
</noscript>

<!-- Setup client-side translations for validation messages -->
<script type="module" define:vars={{ translations: clientTranslations }}>
  // Make translations available to the client-side validation
  window.authTranslations = translations;
</script>

<script type="module">
  // Import the auth form field functionality
  // This provides client-side validation and enhanced interactions
  import("/src/utils/authFormField.ts");
</script>

<style lang="scss">
  /**
   * Auth Form Field Component Styles
   * Uses BEM methodology and CSS variables from global.css
   * WCAG AAA 2.2 compliant with enhanced accessibility features
   * 
   * Performance optimizations:
   * - CSS containment for layout optimization
   * - Hardware acceleration for animations
   * - Efficient transitions using transform properties
   * - Optimized selectors for faster rendering
   */

  /* =======================================
   * COMPONENT: AUTH FORM FIELD
   * ======================================= */

  .auth-form-field {
    margin-bottom: var(--space-lg);
    contain: layout style; /* Performance: CSS containment for better rendering */

    // Performance: Critical path rendering optimization
    * {
      box-sizing: border-box;
    }

    /* ======================================
     * LABEL GROUP SECTION
     * ====================================== */

    &__label-group {
      display: flex;
      align-items: var(--align-items-center);
      justify-content: space-between;
      margin-bottom: var(--space-sm);
      gap: var(--space-sm);
    }

    &__label {
      display: block;
      font-size: var(--text-lg); /* WCAG AAA: Minimum 18px for readability */
      font-weight: var(--font-semibold);
      color: var(--text-primary);
      line-height: var(--leading-relaxed); /* WCAG AAA: Enhanced line height */
      letter-spacing: var(--letter-spacing-base);
    }

    &__required-mark {
      color: var(--text-error-aaa);
      margin-left: var(--space-xs);
      font-weight: var(--font-bold);
      font-size: var(--text-xl); /* Ensure visibility */
    }

    &__label-suffix {
      font-size: var(--text-lg);
      color: var(--text-secondary);
      line-height: var(--leading-relaxed);
    }

    /* ======================================
     * INPUT SECTION
     * ====================================== */

    &__input-wrapper {
      position: relative;
      display: flex;
      flex-direction: var(--flex-direction-column);
    }

    &__help-text {
      font-size: var(--text-lg); /* WCAG AAA: Minimum 18px for readability */
      color: var(--text-secondary);
      line-height: var(--leading-relaxed); /* WCAG AAA: Enhanced readability */
      letter-spacing: var(--letter-spacing-base);
      margin-bottom: var(--space-sm);
      padding: var(--space-xs) var(--space-sm);
      background-color: var(--bg-help-info);
      border: var(--border-width-thin) solid var(--border-help-info);
      border-radius: var(--radius-sm);
      will-change: opacity; /* Performance: Use will-change for potential interactions */
      transition: opacity var(--transition-normal);
    }

    &__input {
      width: 100%;
      min-height: var(--min-touch-size); /* WCAG AAA: Minimum touch target */
      padding: var(--button-padding-standard);
      background-color: var(--form-bg);
      border: var(--border-width-thick) solid var(--form-border);
      border-radius: var(--radius-md);
      color: var(--form-text);
      font-size: var(--text-lg); /* WCAG AAA: Minimum 18px */
      line-height: var(--leading-relaxed); /* WCAG AAA: 1.5+ line height */
      letter-spacing: var(--letter-spacing-base);
      appearance: none;
      will-change: border-color, background-color, box-shadow; /* Performance hint */
      touch-action: manipulation; /* Performance: Optimize touch handling */
      transform: translateZ(0); /* Performance: Minimize layout shifts during loading */

      /* Performance: Use transform-based transitions for better performance */
      transition:
        border-color var(--transition-normal),
        background-color var(--transition-normal),
        box-shadow var(--transition-normal),
        transform var(--transition-fast);

      /* ======================================
       * INPUT STATES
       * ====================================== */

      &::placeholder {
        color: var(--form-placeholder);
        opacity: var(--opacity-medium);
        font-size: var(--text-lg);
      }

      // Shared focus state styles for better DRY compliance
      &:focus,
      &:focus-visible {
        border-color: var(--border-focus);
        background-color: var(--bg-tertiary);
        transform: translateZ(0); /* Performance: Force hardware acceleration */
        outline: none;
        box-shadow: var(--focus-ring);
      }

      // WCAG 2.2 Enhanced Focus Indicators
      &:focus-visible {
        outline: var(--focus-outline);
        outline-offset: var(--focus-ring-offset);
        box-shadow: var(--focus-enhanced-shadow);
      }

      // Modifier: focused state
      &--focused {
        border-color: var(--interactive-primary);
        background-color: var(--bg-tertiary);
      }

      // Modifier: error state - WCAG AAA Enhanced with GPU acceleration
      &--error {
        border-color: var(--border-error);
        background-color: var(--bg-error-aaa);
        animation: error-shake var(--transition-normal) ease-in-out;
        will-change: transform; /* Performance hint for animation */

        &:focus {
          border-color: var(--border-error);
          box-shadow: var(--focus-enhanced-shadow);
        }
      }
    }

    /* ======================================
     * ERROR MESSAGE SECTION
     * ====================================== */

    &__error-message {
      display: none;
      margin-top: var(--space-sm);
      padding: var(--space-sm) var(--space-md);
      font-size: var(--text-lg); /* WCAG AAA: Minimum 18px */
      color: var(--text-error-aaa);
      background-color: var(--bg-error-aaa);
      border: var(--border-width-thick) solid var(--border-error);
      border-radius: var(--radius-sm);
      line-height: var(--leading-relaxed);
      font-weight: var(--font-medium);
      contain: layout style; /* Performance: Optimize for layout changes */
      transform: translateZ(0); /* Performance: Minimize layout shifts during loading */
    }
  }

  /* =======================================
   * ANIMATIONS
   * ======================================= */

  // Performance optimized shake animation using transform
  @keyframes error-shake {
    0%,
    100% {
      transform: translateX(0) translateZ(0);
    }
    25% {
      transform: translateX(calc(-1 * var(--space-xs))) translateZ(0);
    }
    75% {
      transform: translateX(var(--space-xs)) translateZ(0);
    }
  }

  /* =======================================
   * RESPONSIVE DESIGN
   * ======================================= */

  // Shared responsive text scaling - DRY principle
  @media (min-width: var(--breakpoint-sm)) {
    .auth-form-field {
      &__label,
      &__error-message,
      &__help-text {
        font-size: var(--text-xl);
      }

      &__input {
        font-size: var(--text-xl);
        padding: var(--button-padding-enhanced);
      }
    }
  }

  @media (min-width: var(--breakpoint-md)) {
    .auth-form-field {
      &__input {
        min-height: calc(var(--min-touch-size) + var(--space-sm));
      }
    }
  }

  /* =======================================
   * ACCESSIBILITY ENHANCEMENTS
   * ======================================= */

  // High contrast mode support - WCAG AAA - DRY optimized
  @media (prefers-contrast: high) {
    .auth-form-field {
      &__input {
        border-width: var(--border-width-enhanced);
        border-color: var(--text-primary);
        background-color: var(--bg-primary);
        filter: var(--filter-high-contrast-select);

        &:focus {
          border-color: var(--interactive-primary);
          box-shadow: var(--focus-enhanced-shadow);
        }
      }

      &__required-mark,
      &__label {
        font-weight: var(--font-bold);
      }

      &__required-mark {
        text-shadow: var(--space-micro) var(--space-micro) var(--space-xs) var(--bg-primary);
      }

      &__error-message {
        background-color: var(--bg-error-aaa);
        border-width: var(--border-width-enhanced);
        font-weight: var(--font-semibold);
      }
    }
  }

  // Performance: Reduced Motion Support - WCAG AAA
  @media (prefers-reduced-motion: reduce) {
    .auth-form-field {
      &__input {
        transition: none;
        will-change: auto; /* Remove performance hints when motion is reduced */
        animation: none;

        &--error {
          transition: none;
          animation: none;
        }
      }
    }

    @keyframes error-shake {
      0%,
      100% {
        transform: none;
      }
    }
  }

  // Performance: Touch devices optimization - WCAG AAA
  @media (hover: none) and (pointer: coarse) {
    .auth-form-field {
      &__input {
        min-height: var(--enhanced-gap-mobile); /* Enhanced touch target using predefined gap */
        padding: var(--button-padding-enhanced);
        font-size: var(--text-xl); /* Prevent zoom on mobile */
        touch-action: manipulation; /* Performance: Optimize touch handling */
        filter: var(--filter-enhanced-mobile); /* Enhanced visibility on mobile */

        &:focus {
          transform: scale(var(--scale-focus));
          transition: transform var(--transition-fast);
        }
      }

      &__label,
      &__error-message,
      &__help-text {
        font-size: var(--text-xl);
      }

      &__label {
        margin-bottom: var(--space-md);
      }

      &__error-message {
        padding: var(--space-md) var(--space-lg);
      }

      // Enhanced Mobile Touch Optimization
      &__help-text {
        padding: var(--space-md) var(--space-lg);
        font-size: var(--text-xl);
        line-height: var(--leading-relaxed);
        min-height: calc(var(--min-touch-size) - var(--space-sm));
        display: flex;
        align-items: var(--align-items-center);
      }

      // Enhanced touch targets for interactive elements
      &__input-wrapper {
        gap: var(--space-md);
      }
    }
  }
</style>
