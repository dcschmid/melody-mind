---
/**
 * OAuth Providers Component
 *
 * Displays a list of OAuth authentication providers with proper loading states
 * and accessibility features.
 */
import { getLangFromUrl, useTranslations } from "../../utils/i18n";
import { Icon } from "astro-icon/components";

interface Props {
  isLinking?: boolean;
  className?: string;
}

const { isLinking = false, className = "" } = Astro.props;
const lang = String(getLangFromUrl(Astro.url));
const t = useTranslations(lang);

// Define OAuth providers
const oauthProviders = [
  {
    name: "google",
    displayName: "Google",
    icon: "google",
    color: "#4285F4",
  },
  {
    name: "spotify",
    displayName: "Spotify",
    icon: "spotify",
    color: "#1DB954",
  },
  {
    name: "discord",
    displayName: "Discord",
    icon: "discord",
    color: "#5865F2",
  },
  {
    name: "github",
    displayName: "GitHub",
    icon: "github",
    color: "#333",
  },
];
---

<div class={`oauth-providers ${className}`}>
  <div class="oauth-providers__loading" aria-hidden="true">
    <div class="oauth-providers__loading-spinner"></div>
    <span class="oauth-providers__loading-text">
      {t("auth.oauth.loading_providers")}
    </span>
  </div>

  <div class="oauth-providers__error" role="alert" aria-live="assertive">
    <span class="oauth-providers__error-text">
      {t("auth.oauth.providers_error")}
    </span>
    <button type="button" class="oauth-providers__retry-button">
      {t("auth.oauth.retry")}
    </button>
  </div>

  <div class="oauth-providers__list" role="list">
    <div class="oauth-providers__header">
      <span class="oauth-providers__divider">
        <span class="oauth-providers__divider-text">
          {isLinking ? t("auth.oauth.link_accounts") : t("auth.oauth.continue_with")}
        </span>
      </span>
    </div>

    {
      oauthProviders.map((provider) => (
        <button
          type="button"
          class={`oauth-button oauth-button--${provider.name}`}
          data-provider={provider.name}
          data-action={isLinking ? "link" : "auth"}
          style={`--provider-color: ${provider.color}`}
          aria-label={
            isLinking
              ? `${t("auth.oauth.link")} ${provider.displayName}`
              : `${t("auth.oauth.continue_with")} ${provider.displayName}`
          }
        >
          <div class="oauth-button__content">
            <div class="oauth-button__icon">
              <Icon name={provider.icon} width="24" height="24" aria-hidden="true" />
            </div>
            <span class="oauth-button__text">
              {isLinking
                ? `${t("auth.oauth.link")} ${provider.displayName}`
                : `${t("auth.oauth.continue_with")} ${provider.displayName}`}
            </span>
          </div>
          <div class="oauth-button__loading" aria-hidden="true">
            <div class="oauth-button__spinner" />
          </div>
        </button>
      ))
    }
  </div>

  <div class="oauth-providers__empty">
    <span class="oauth-providers__empty-text">
      {t("auth.oauth.no_providers")}
    </span>
  </div>
</div>

<script>
  const initOAuthProviders = (): void => {
    const containers = document.querySelectorAll(".oauth-providers");

    containers.forEach((container) => {
      const loadingEl = container.querySelector(".oauth-providers__loading") as HTMLElement;
      const errorEl = container.querySelector(".oauth-providers__error") as HTMLElement;
      const listEl = container.querySelector(".oauth-providers__list") as HTMLElement;
      const emptyEl = container.querySelector(".oauth-providers__empty") as HTMLElement;
      const retryButton = container.querySelector(
        ".oauth-providers__retry-button"
      ) as HTMLButtonElement;
      const lang = document.documentElement.lang || "en";

      const showError = (): void => {
        if (loadingEl) {
          loadingEl.style.display = "none";
        }
        if (errorEl) {
          errorEl.style.display = "flex";
        }
        if (listEl) {
          listEl.style.display = "none";
        }
        if (emptyEl) {
          emptyEl.style.display = "none";
        }
      };

      const showList = (): void => {
        if (loadingEl) {
          loadingEl.style.display = "none";
        }
        if (errorEl) {
          errorEl.style.display = "none";
        }
        if (listEl) {
          listEl.style.display = "block";
        }
        if (emptyEl) {
          emptyEl.style.display = "none";
        }
      };

      const handleOAuthClick = async (button: HTMLButtonElement): Promise<void> => {
        const provider = button.getAttribute("data-provider");
        const action = button.getAttribute("data-action");

        if (!provider || button.disabled) {
          return;
        }

        button.setAttribute("data-loading", "true");
        button.disabled = true;

        try {
          const isLinking = action === "link";
          const params = new URLSearchParams();
          params.set("lang", lang);
          if (isLinking) {
            params.set("link", "true");
          }

          const authUrl = `/api/auth/oauth/authorize/${provider}?${params.toString()}`;
          window.location.href = authUrl;
        } catch (error) {
          console.error(`OAuth error for ${provider}:`, error);
          button.setAttribute("data-loading", "false");
          button.disabled = false;
          showError();
        }
      };

      // Show the statically rendered provider list
      showList();

      // Add click handlers to the statically rendered buttons
      listEl?.addEventListener("click", (event: Event) => {
        const button = (event.target as HTMLElement).closest(".oauth-button") as HTMLButtonElement;
        if (button) {
          handleOAuthClick(button);
        }
      });

      retryButton?.addEventListener("click", () => {
        showList();
      });
    });
  };

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initOAuthProviders);
  } else {
    initOAuthProviders();
  }
</script>

<style lang="scss" is:global>
  .oauth-providers {
    width: 100%;
    position: relative;

    &__loading {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: var(--space-md);
      padding: var(--space-xl);

      &-spinner {
        width: 1.5em;
        height: 1.5em;
        border: 2px solid var(--color-neutral-300);
        border-top: 2px solid var(--interactive-primary);
        border-radius: 50%;
        animation: spin 1s linear infinite;
      }

      &-text {
        font-size: var(--text-sm);
        color: var(--text-secondary);
      }
    }

    &__error {
      display: none;
      flex-direction: column;
      align-items: center;
      gap: var(--space-md);
      padding: var(--space-xl);
      background: var(--color-error-50);
      border: var(--border-width-thin) solid var(--color-error-300);
      border-radius: var(--radius-md);

      &-text {
        font-size: var(--text-sm);
        color: var(--color-error-700);
        text-align: center;
      }
    }

    &__retry-button {
      padding: var(--space-sm) var(--space-md);
      background: var(--color-error-600);
      color: var(--color-white);
      border: none;
      border-radius: var(--radius-sm);
      font-size: var(--text-sm);
      font-weight: var(--font-medium);
      cursor: pointer;
      transition: background-color var(--transition-normal);

      &:hover {
        background: var(--color-error-700);
      }

      &:focus-visible {
        outline: var(--focus-outline);
        outline-offset: var(--focus-ring-offset);
      }
    }

    &__list {
      display: flex;
      flex-direction: column;
      gap: var(--space-md);
    }

    &__header {
      margin-bottom: var(--space-lg);
    }

    &__divider {
      position: relative;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: var(--space-xl) 0;

      &::before {
        content: "";
        position: absolute;
        top: 50%;
        left: 0;
        right: 0;
        height: 2px;
        background: var(--border-secondary);
        border-radius: 1px;
      }

      &-text {
        background: var(--bg-primary);
        padding: var(--space-sm) var(--space-lg);
        font-size: var(--text-sm);
        color: var(--text-primary);
        font-weight: var(--font-semibold);
        position: relative;
        z-index: 1;
        border-radius: var(--radius-full);
        border: var(--border-width-thin) solid var(--border-secondary);
        box-shadow: var(--shadow-sm);
      }
    }

    &__item {
      margin-bottom: var(--space-lg);

      &:last-child {
        margin-bottom: 0;
      }
    }

    &__empty {
      display: none;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: var(--space-xl);

      &-text {
        font-size: var(--text-sm);
        color: var(--text-secondary);
        text-align: center;
      }
    }

    @media (max-width: 39.9375em) {
      &__loading,
      &__error,
      &__empty {
        padding: var(--space-lg);
      }

      &__item {
        margin-bottom: var(--space-sm);
      }

      &__divider-text {
        font-size: var(--text-xs);
      }
    }

    @media (prefers-reduced-motion: reduce) {
      &__loading-spinner {
        animation: none;
      }
    }
  }

  .oauth-providers .oauth-button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    border: none;
    border-radius: var(--radius-lg);
    font-weight: var(--font-bold);
    text-decoration: none;
    cursor: pointer;
    position: relative;
    min-width: var(--min-touch-size);
    min-height: var(--min-touch-size);
    line-height: var(--leading-normal);
    letter-spacing: var(--letter-spacing-base);
    font-family: var(--font-family-primary);
    padding: var(--space-lg) var(--space-xl);
    background: var(--provider-color, var(--color-primary-600));
    color: white;
    border: 2px solid transparent;
    box-shadow: var(--shadow-md);
    transition:
      background-color var(--transition-normal),
      box-shadow var(--transition-normal);

    &__content {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: var(--space-sm);
      width: 100%;
      z-index: 2;
      position: relative;
    }

    &__icon {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 2em;
      height: 2em;
      flex-shrink: 0;
      background: rgba(255, 255, 255, 0.15);
      border-radius: var(--radius-sm);
      transition: background-color var(--transition-normal);

      svg,
      .astro-icon {
        width: 1.5em;
        height: 1.5em;
        color: currentColor;
      }
    }

    &__text {
      font-weight: var(--font-bold);
      font-size: var(--text-base);
      text-align: center;
      flex: 1;
    }

    &__loading {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      opacity: 0;
      transition: opacity var(--transition-normal);
    }

    &__spinner {
      width: 1.5em;
      height: 1.5em;
      border: 2px solid var(--color-neutral-300);
      border-top: 2px solid var(--provider-color, var(--interactive-primary));
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    &:hover:not(:disabled) {
      background: color-mix(in srgb, var(--provider-color, var(--color-primary-600)) 80%, black);
      box-shadow: var(--shadow-lg);

      .oauth-button__icon {
        background: rgba(255, 255, 255, 0.25);
      }
    }

    &:focus-visible {
      outline: var(--focus-outline);
      outline-offset: var(--focus-ring-offset);
      box-shadow: var(--focus-ring), var(--shadow-lg);
    }

    &:active:not(:disabled) {
      background: color-mix(in srgb, var(--provider-color, var(--color-primary-600)) 70%, black);
      box-shadow: var(--shadow-sm);
    }

    &[data-loading="true"] {
      cursor: not-allowed;

      .oauth-button__content {
        opacity: 0;
      }

      .oauth-button__loading {
        opacity: 1;
      }
    }

    &:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      box-shadow: none;
    }

    &--spotify {
      &::after {
        content: "";
        position: absolute;
        top: 2px;
        right: 2px;
        width: 6px;
        height: 6px;
        background: #1db954;
        border-radius: 50%;
        opacity: 0.8;
        z-index: 3;
      }
    }

    &--google {
      &::after {
        content: "";
        position: absolute;
        top: 2px;
        right: 2px;
        width: 6px;
        height: 6px;
        background: #4285f4;
        border-radius: 50%;
        opacity: 0.8;
        z-index: 3;
      }
    }

    &--discord {
      &::after {
        content: "";
        position: absolute;
        top: 2px;
        right: 2px;
        width: 6px;
        height: 6px;
        background: #5865f2;
        border-radius: 50%;
        opacity: 0.8;
        z-index: 3;
      }
    }

    &--yahoo {
      &::after {
        content: "";
        position: absolute;
        top: 2px;
        right: 2px;
        width: 6px;
        height: 6px;
        background: #6001d2;
        border-radius: 50%;
        opacity: 0.8;
        z-index: 3;
      }
    }

    @media (max-width: 47.9375em) {
      padding: var(--space-md) var(--space-lg);
      font-size: var(--text-sm);

      &__content {
        gap: var(--space-xs);
      }

      &__icon {
        width: 1.75em;
        height: 1.75em;

        svg {
          width: 1.25em;
          height: 1.25em;
        }
      }

      &__text {
        font-size: var(--text-sm);
      }
    }

    @media (prefers-reduced-motion: reduce) {
      transition: none;

      .oauth-button__spinner {
        animation: none;
      }

      .oauth-button__icon {
        transition: none;
      }
    }

    @media (prefers-contrast: high) {
      border: 2px solid var(--color-white);
      background: var(--color-primary-600);

      &:hover:not(:disabled) {
        border-color: var(--color-white);
        background: var(--color-primary-700);
      }

      &:focus-visible {
        outline-width: 3px;
        outline-color: var(--color-white);
      }
    }
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
</style>
