---
/**
 * AuthSubmitButton Component for MelodyMind Auth Forms
 *
 * A reusable submit button component with loading state and consistent styling
 * for authentication forms. This eliminates duplication between login/register forms.
 *
 * Features:
 * - Loading state with spinner animation
 * - WCAG AAA compliant accessibility
 * - Consistent styling with auth form design system using global CSS variables
 * - Proper ARIA attributes for screen readers
 * - Automatic button state management
 *
 * @component
 * @example
 * ```astro
 * <AuthSubmitButton
 *   id="loginSubmit"
 *   textId="loginSubmitText"
 *   spinnerId="loginLoadingSpinner"
 *   buttonText={t("auth.login.submit")}
 * />
 * ```
 */
import { Icon } from "astro-icon/components";

export interface Props {
  /** Unique identifier for the submit button */
  id: string;
  /** Unique identifier for the button text element */
  textId: string;
  /** Unique identifier for the loading spinner element */
  spinnerId: string;
  /** Text to display on the button */
  buttonText: string;
  /** Additional CSS classes */
  class?: string;
  /** Button type, defaults to submit */
  type?: "submit" | "button";
  /** Whether the button is disabled */
  disabled?: boolean;
}

const {
  id,
  textId,
  spinnerId,
  buttonText,
  class: className = "",
  type = "submit",
  disabled = false,
} = Astro.props;
---

<button
  {type}
  {id}
  class={`auth-form__submit-button ${className}`}
  {disabled}
  aria-describedby={`${textId} ${spinnerId}`}
  aria-live="polite"
  aria-busy="false"
>
  <span id={textId} class="auth-form__submit-text">{buttonText}</span>
  <span id={spinnerId} class="auth-form__spinner" aria-hidden="true">
    <Icon name="refresh" class="auth-form__spinner-icon icon-loader" aria-hidden="true" />
  </span>
</button>

<style lang="scss">
  /* ======================================
   * AUTH SUBMIT BUTTON COMPONENT STYLES
   * WCAG AAA 2.2 Compliant - Optimized with CSS Variables Only
   * ====================================== */

  // SCSS Mixins for reusable patterns
  @mixin button-base {
    position: relative;
    display: flex;
    align-items: var(--align-items-center);
    justify-content: center;
    cursor: pointer;
    border: none;
    transition: var(--transition-normal);
    contain: layout style;
    user-select: none;
  }

  @mixin gpu-acceleration {
    transform: translateZ(0);
    will-change: transform;
  }

  @mixin enhanced-touch-target {
    min-height: var(--touch-target-enhanced);
    padding: var(--button-padding-enhanced);
  }

  .auth-form {
    &__submit-button {
      @include button-base;

      // Layout and positioning using CSS variables
      width: var(--container-xs);
      min-height: var(--touch-target-min);
      gap: var(--space-sm);
      padding: var(--button-padding-standard);

      // Visual styling using CSS variables only
      background: var(--btn-primary-bg);
      color: var(--btn-primary-text);
      border-radius: var(--radius-lg);
      box-shadow: var(--card-shadow);

      // Typography using CSS variables
      font-size: var(--text-base);
      font-weight: var(--font-semibold);
      line-height: var(--leading-normal);
      letter-spacing: var(--letter-spacing-enhanced);
      word-spacing: var(--word-spacing-enhanced);

      // Performance optimization
      will-change: transform, background-color;

      // Interactive states using nested selectors
      &:hover:not(:disabled) {
        background: var(--btn-primary-hover);
        transform: translateY(calc(-1 * var(--space-xs)));
        box-shadow: var(--card-shadow-hover);
        filter: var(--filter-enhanced-visibility);
      }

      &:focus-visible {
        outline: var(--focus-enhanced-outline-dark);
        outline-offset: var(--focus-ring-offset);
        box-shadow: var(--focus-enhanced-shadow), var(--card-shadow-hover);
      }

      &:active:not(:disabled) {
        transform: translateY(0) scale(var(--scale-active));
        background: var(--interactive-primary-active);
        box-shadow: var(--card-shadow);
      }

      &:disabled {
        opacity: var(--opacity-disabled);
        cursor: not-allowed;
        transform: none;
        box-shadow: none;
        pointer-events: none;
      }

      // Loading state modifier
      &--loading {
        pointer-events: none;

        .auth-form__submit-text {
          opacity: 0;
          @include gpu-acceleration;
        }

        .auth-form__spinner {
          display: flex;
        }
      }
    }

    &__submit-text {
      font-weight: inherit;
      color: inherit;
      user-select: none;
      transition: opacity var(--transition-fast);
      will-change: opacity;
    }

    &__spinner {
      display: none;
      align-items: var(--align-items-center);
      justify-content: center;
      position: absolute;
      left: var(--gradient-start);
      top: var(--gradient-start);
      transform: translate(calc(-1 * var(--gradient-start)), calc(-1 * var(--gradient-start)));
      contain: layout style;

      &-icon {
        height: var(--text-base);
        width: var(--text-base);
        color: var(--btn-primary-text);
        animation: auth-spinner-rotate var(--transition-normal) linear infinite;
        filter: var(--filter-enhanced-visibility);
        @include gpu-acceleration;
      }
    }
  }

  // Keyframes animations
  @keyframes auth-spinner-rotate {
    0% {
      transform: translateZ(0) rotate(0deg);
    }
    100% {
      transform: translateZ(0) rotate(360deg);
    }
  }

  @keyframes auth-spinner-pulse {
    0%,
    100% {
      opacity: var(--opacity-medium);
    }
    50% {
      opacity: var(--opacity-low);
    }
  }

  /* ======================================
   * RESPONSIVE DESIGN - Organized with SCSS nesting
   * ====================================== */

  @media (min-width: 768px) {
    .auth-form__submit-button {
      @include enhanced-touch-target;
      font-size: var(--text-lg);
      min-height: calc(var(--touch-target-enhanced) + var(--space-xs));
    }
  }

  /* ======================================
   * ACCESSIBILITY ENHANCEMENTS - WCAG AAA 2.2
   * ====================================== */

  // High contrast mode support
  @media (prefers-contrast: high) {
    .auth-form__submit-button {
      border: var(--enhanced-border-thickness) solid var(--border-focus);
      background: var(--interactive-primary);
      filter: var(--filter-high-contrast-button);

      &:focus-visible {
        outline-width: var(--border-width-enhanced);
        background: var(--interactive-primary-hover);
      }
    }
  }

  // Reduced motion support
  @media (prefers-reduced-motion: reduce) {
    .auth-form__submit-button,
    .auth-form__spinner-icon {
      transition: none;
      animation: none;
    }

    .auth-form__submit-button:hover:not(:disabled) {
      transform: none;
    }

    // Alternative loading indicator for reduced motion
    .auth-form__spinner-icon {
      animation: auth-spinner-pulse var(--transition-slow) ease-in-out infinite;
    }
  }

  // Touch device optimization
  @media (hover: none) and (pointer: coarse) {
    .auth-form__submit-button {
      @include enhanced-touch-target;

      &:hover {
        transform: none;
        box-shadow: var(--card-shadow);
        background: var(--interactive-primary);
      }
    }
  }

  // Enhanced zoom support for 400% magnification (WCAG 2.2 AAA)
  @supports (zoom: 4) {
    .auth-form__submit-button {
      font-size: max(var(--text-base), 16px);
      min-height: max(var(--touch-target-enhanced), 44px);
      padding: max(var(--space-md), 12px) max(var(--space-xl), 16px);
    }
  }

  // Print styles
  @media print {
    .auth-form__submit-button {
      background: var(--print-bg) !important;
      color: var(--print-text) !important;
      border: var(--print-border) !important;
      box-shadow: none !important;
    }

    .auth-form__spinner {
      display: none !important;
    }
  }
</style>

<script>
  /**
   * AuthSubmitButton Enhanced Accessibility Script
   *
   * Optimized with DRY principles - delegates to existing authFormUtils
   * for loading state management to eliminate code duplication.
   */
  import { setAuthButtonLoadingState } from "../../utils/auth/authFormUtils";

  /**
   * Enhanced announce function for screen reader accessibility
   * @param {string} message - The message to announce
   */
  function announceToScreenReader(message: string): void {
    // Create or find existing live region
    let liveRegion = document.getElementById("auth-live-region");
    if (!liveRegion) {
      liveRegion = document.createElement("div");
      liveRegion.id = "auth-live-region";
      liveRegion.setAttribute("aria-live", "polite");
      liveRegion.setAttribute("aria-atomic", "true");
      liveRegion.className = "sr-only";
      document.body.appendChild(liveRegion);
    }

    // Clear and set new message with optimized timing
    liveRegion.textContent = "";
    setTimeout(() => {
      if (liveRegion) {
        liveRegion.textContent = message;
      }
    }, 100); // Using constant for now, CSS variables don't work in JS
  }

  /**
   * Initialize enhanced accessibility features
   * Uses existing authFormUtils to avoid code duplication
   */
  function initializeAuthButtonAccessibility(): void {
    // Expose utilities globally for programmatic access (DRY principle)
    if (typeof window !== "undefined") {
      interface AuthButtonUtils {
        setLoadingState: typeof setAuthButtonLoadingState;
        announce: typeof announceToScreenReader;
      }

      (window as Window & { __authButtonUtils?: AuthButtonUtils }).__authButtonUtils = {
        setLoadingState: setAuthButtonLoadingState, // Use existing utility from authFormUtils
        announce: announceToScreenReader,
      };
    }

    // Initialize all submit buttons with enhanced accessibility
    const submitButtons = document.querySelectorAll(".auth-form__submit-button");
    submitButtons.forEach((button) => {
      // Ensure proper initial ARIA state
      if (!button.hasAttribute("aria-busy")) {
        button.setAttribute("aria-busy", "false");
      }

      // Add enhanced focus management with multi-language support
      button.addEventListener("focus", () => {
        const buttonText = button.querySelector(".auth-form__submit-text")?.textContent;
        if (buttonText) {
          const lang = document.documentElement.lang || "en";

          // Get the translation function for the current language
          const getTranslation = (key: string, params?: Record<string, string>): string => {
            // This is a simplified client-side translation - in a real implementation,
            // you might want to pass translations from the server or use a client-side i18n library
            const translations: Record<string, Record<string, string>> = {
              en: {
                "auth.accessibility.button_focus_instruction":
                  "Button: {buttonText}. Press Enter to submit",
              },
              de: {
                "auth.accessibility.button_focus_instruction":
                  "Schaltfläche: {buttonText}. Drücken Sie die Eingabetaste zum Absenden",
              },
              es: {
                "auth.accessibility.button_focus_instruction":
                  "Botón: {buttonText}. Presiona Enter para enviar",
              },
              fr: {
                "auth.accessibility.button_focus_instruction":
                  "Bouton : {buttonText}. Appuyez sur Entrée pour soumettre",
              },
              it: {
                "auth.accessibility.button_focus_instruction":
                  "Pulsante: {buttonText}. Premi Invio per inviare",
              },
              pt: {
                "auth.accessibility.button_focus_instruction":
                  "Botão: {buttonText}. Pressione Enter para enviar",
              },
              da: {
                "auth.accessibility.button_focus_instruction":
                  "Knap: {buttonText}. Tryk på Enter for at indsende",
              },
              nl: {
                "auth.accessibility.button_focus_instruction":
                  "Knop: {buttonText}. Druk op Enter om te verzenden",
              },
              sv: {
                "auth.accessibility.button_focus_instruction":
                  "Knapp: {buttonText}. Tryck på Enter för att skicka",
              },
              fi: {
                "auth.accessibility.button_focus_instruction":
                  "Painike: {buttonText}. Paina Enter lähettääksesi",
              },
            };

            let text = translations[lang]?.[key] || translations["en"]?.[key] || key;
            if (params) {
              Object.entries(params).forEach(([k, v]) => {
                text = text.replace(new RegExp(`{${k}}`, "g"), v);
              });
            }
            return text;
          };

          const announcement = getTranslation("auth.accessibility.button_focus_instruction", {
            buttonText,
          });

          // Use optimized delay timing
          setTimeout(() => announceToScreenReader(announcement), 300);
        }
      });
    });
  }

  // Initialize when DOM is ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeAuthButtonAccessibility);
  } else {
    initializeAuthButtonAccessibility();
  }
</script>
