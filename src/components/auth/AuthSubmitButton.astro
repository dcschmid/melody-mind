---
/**
 * AuthSubmitButton Component for MelodyMind Auth Forms
 *
 * A reusable submit button component with loading state and consistent styling
 * for authentication forms. This eliminates duplication between login/register forms.
 *
 * Features:
 * - Loading state with spinner animation
 * - WCAG AAA compliant accessibility
 * - Consistent styling with auth form design system using global CSS variables
 * - Proper ARIA attributes for screen readers
 * - Automatic button state management
 *
 * @component
 * @example
 * ```astro
 * <AuthSubmitButton
 *   id="loginSubmit"
 *   textId="loginSubmitText"
 *   spinnerId="loginLoadingSpinner"
 *   buttonText={t("auth.login.submit")}
 * />
 * ```
 */
import { Icon } from "astro-icon/components";

export interface Props {
  /** Unique identifier for the submit button */
  id: string;
  /** Unique identifier for the button text element */
  textId: string;
  /** Unique identifier for the loading spinner element */
  spinnerId: string;
  /** Text to display on the button */
  buttonText: string;
  /** Additional CSS classes */
  class?: string;
  /** Button type, defaults to submit */
  type?: "submit" | "button";
  /** Whether the button is disabled */
  disabled?: boolean;
}

const {
  id,
  textId,
  spinnerId,
  buttonText,
  class: className = "",
  type = "submit",
  disabled = false,
} = Astro.props;
---

<button
  {type}
  {id}
  class={`auth-form__submit-button ${className}`}
  {disabled}
  aria-describedby={`${textId} ${spinnerId}`}
  aria-live="polite"
  aria-busy="false"
>
  <span id={textId} class="auth-form__submit-text">{buttonText}</span>
  <span id={spinnerId} class="auth-form__spinner" aria-hidden="true">
    <Icon name="refresh" class="auth-form__spinner-icon icon-loader" aria-hidden="true" />
  </span>
</button>

<style>
  /* ======================================
   * AUTH SUBMIT BUTTON COMPONENT STYLES
   * WCAG AAA 2.2 Compliant - Optimized with CSS Variables Only
   * ====================================== */

  .auth-form__submit-button {
    /* Layout and positioning using CSS variables */
    position: relative;
    display: flex;
    align-items: var(--align-items-center);
    justify-content: center;
    width: var(--container-xs); /* Use semantic width variable */
    min-height: var(--touch-target-min); /* WCAG AAA compliant touch target */
    gap: var(--space-sm);

    /* Spacing using global CSS variables */
    padding: var(--button-padding-standard); /* Use semantic button padding */

    /* Visual styling using CSS variables only */
    background: var(--btn-primary-bg); /* Use semantic button background */
    color: var(--btn-primary-text);
    border: none;
    border-radius: var(--radius-lg);
    box-shadow: var(--card-shadow);

    /* Typography using CSS variables */
    font-size: var(--text-base);
    font-weight: var(--font-semibold);
    line-height: var(--leading-normal);

    /* Enhanced text spacing for accessibility (WCAG 2.2 AAA) */
    letter-spacing: var(--letter-spacing-enhanced);
    word-spacing: var(--word-spacing-enhanced);

    /* Interaction and performance optimizations */
    cursor: pointer;
    transition: var(--transition-normal);
    contain: layout style; /* Performance optimization */
    will-change: transform, background-color; /* Performance hint */
  }

  /* Interactive states using CSS variables only */
  .auth-form__submit-button:hover:not(:disabled) {
    background: var(--btn-primary-hover); /* Use semantic button hover */
    transform: translateY(calc(-1 * var(--space-xs)));
    box-shadow: var(--card-shadow-hover);
    filter: var(--filter-enhanced-visibility); /* Enhanced visibility filter */
  }

  .auth-form__submit-button:focus-visible {
    outline: var(--focus-enhanced-outline-dark);
    outline-offset: var(--focus-ring-offset);
    box-shadow: var(--focus-enhanced-shadow), var(--card-shadow-hover);
  }

  .auth-form__submit-button:active:not(:disabled) {
    transform: translateY(0) scale(var(--scale-active)); /* Use scale variable */
    background: var(--interactive-primary-active);
    box-shadow: var(--card-shadow);
  }

  /* Disabled state */
  .auth-form__submit-button:disabled {
    opacity: var(--opacity-disabled);
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
    pointer-events: none;
  }

  /* Loading state modifier */
  .auth-form__submit-button--loading {
    pointer-events: none;
  }

  /* Button text element with performance optimization */
  .auth-form__submit-text {
    font-weight: inherit;
    color: inherit;
    user-select: none;
    transition: opacity var(--transition-fast);
    will-change: opacity; /* Performance hint for loading transitions */
  }

  /* Hide text in loading state with optimized transition */
  .auth-form__submit-button--loading .auth-form__submit-text {
    opacity: 0;
    transform: translateZ(0); /* GPU acceleration for smooth fade */
  }

  /* Loading spinner container with performance optimization */
  .auth-form__spinner {
    display: none;
    align-items: var(--align-items-center);
    justify-content: center;
    position: absolute;
    left: var(--gradient-start); /* Use semantic percentage variable */
    top: var(--gradient-start); /* Use semantic percentage variable */
    transform: translate(
      calc(-1 * var(--gradient-start)),
      calc(-1 * var(--gradient-start))
    ); /* Use semantic transform */
    contain: layout style; /* Performance optimization */
  }

  /* Show spinner in loading state */
  .auth-form__submit-button--loading .auth-form__spinner {
    display: flex;
  }

  /* Optimized spinner animation with CSS variables */
  .auth-form__spinner-icon {
    height: var(--text-base);
    width: var(--text-base);
    color: var(--btn-primary-text);
    animation: auth-spinner-rotate var(--transition-normal) linear infinite;
    transform: translateZ(0); /* GPU acceleration */
    will-change: transform; /* Performance hint */
    filter: var(--filter-enhanced-visibility); /* Enhanced visibility */
  }

  @keyframes auth-spinner-rotate {
    0% {
      transform: translateZ(0) rotate(0deg);
    }
    100% {
      transform: translateZ(0) rotate(360deg);
    }
  }

  /* ======================================
   * RESPONSIVE DESIGN - Optimized with CSS variables
   * ====================================== */

  @media (min-width: 768px) {
    .auth-form__submit-button {
      padding: var(--button-padding-enhanced); /* Use enhanced button padding */
      font-size: var(--text-lg);
      min-height: calc(
        var(--touch-target-enhanced) + var(--space-xs)
      ); /* Use enhanced touch target */
    }
  }

  /* ======================================
   * ACCESSIBILITY ENHANCEMENTS - WCAG AAA 2.2
   * ====================================== */

  /* High contrast mode support with enhanced CSS variables */
  @media (prefers-contrast: high) {
    .auth-form__submit-button {
      border: var(--enhanced-border-thickness) solid var(--border-focus); /* Use enhanced border thickness */
      background: var(--interactive-primary);
      filter: var(--filter-high-contrast-button); /* Enhanced high contrast filter */
    }

    .auth-form__submit-button:focus-visible {
      outline-width: var(--border-width-enhanced);
      background: var(--interactive-primary-hover);
    }
  }

  /* Reduced motion support with CSS variables */
  @media (prefers-reduced-motion: reduce) {
    .auth-form__submit-button,
    .auth-form__spinner-icon {
      transition: none;
      animation: none;
    }

    .auth-form__submit-button:hover:not(:disabled) {
      transform: none;
    }

    /* Alternative loading indicator for reduced motion using CSS variables */
    .auth-form__spinner-icon {
      animation: auth-spinner-pulse var(--transition-slow) ease-in-out infinite;
    }

    @keyframes auth-spinner-pulse {
      0%,
      100% {
        opacity: var(--opacity-medium);
      }
      50% {
        opacity: var(--opacity-low);
      }
    }
  }

  /* Touch device optimization with enhanced CSS variables */
  @media (hover: none) and (pointer: coarse) {
    .auth-form__submit-button {
      min-height: var(--touch-target-enhanced); /* Use enhanced touch target for mobile */
      padding: var(--button-padding-enhanced); /* Use enhanced padding for mobile */
    }

    .auth-form__submit-button:hover {
      transform: none;
      box-shadow: var(--card-shadow);
      background: var(--interactive-primary);
    }
  }

  /* Enhanced zoom support for 400% magnification (WCAG 2.2 AAA) with CSS variables */
  @supports (zoom: 4) {
    .auth-form__submit-button {
      font-size: max(var(--text-base), 16px);
      min-height: max(var(--touch-target-enhanced), 44px); /* Use enhanced touch target */
      padding: max(var(--space-md), 12px) max(var(--space-xl), 16px);
    }
  }

  /* Print styles using CSS variables */
  @media print {
    .auth-form__submit-button {
      background: var(--print-bg) !important;
      color: var(--print-text) !important;
      border: var(--print-border) !important;
      box-shadow: none !important;
    }

    .auth-form__spinner {
      display: none !important;
    }
  }
</style>

<script>
  /**
   * AuthSubmitButton Enhanced Accessibility Script
   *
   * Optimized with DRY principles - delegates to existing authFormUtils
   * for loading state management to eliminate code duplication.
   */
  import { setAuthButtonLoadingState } from "../../utils/auth/authFormUtils";

  /**
   * Enhanced announce function for screen reader accessibility
   * @param {string} message - The message to announce
   */
  function announceToScreenReader(message: string): void {
    // Create or find existing live region
    let liveRegion = document.getElementById("auth-live-region");
    if (!liveRegion) {
      liveRegion = document.createElement("div");
      liveRegion.id = "auth-live-region";
      liveRegion.setAttribute("aria-live", "polite");
      liveRegion.setAttribute("aria-atomic", "true");
      liveRegion.className = "sr-only";
      document.body.appendChild(liveRegion);
    }

    // Clear and set new message with optimized timing
    liveRegion.textContent = "";
    setTimeout(() => {
      if (liveRegion) {
        liveRegion.textContent = message;
      }
    }, 100); // Using constant for now, CSS variables don't work in JS
  }

  /**
   * Initialize enhanced accessibility features
   * Uses existing authFormUtils to avoid code duplication
   */
  function initializeAuthButtonAccessibility(): void {
    // Expose utilities globally for programmatic access (DRY principle)
    if (typeof window !== "undefined") {
      interface AuthButtonUtils {
        setLoadingState: typeof setAuthButtonLoadingState;
        announce: typeof announceToScreenReader;
      }

      (window as Window & { __authButtonUtils?: AuthButtonUtils }).__authButtonUtils = {
        setLoadingState: setAuthButtonLoadingState, // Use existing utility from authFormUtils
        announce: announceToScreenReader,
      };
    }

    // Initialize all submit buttons with enhanced accessibility
    const submitButtons = document.querySelectorAll(".auth-form__submit-button");
    submitButtons.forEach((button) => {
      // Ensure proper initial ARIA state
      if (!button.hasAttribute("aria-busy")) {
        button.setAttribute("aria-busy", "false");
      }

      // Add enhanced focus management with multi-language support
      button.addEventListener("focus", () => {
        const buttonText = button.querySelector(".auth-form__submit-text")?.textContent;
        if (buttonText) {
          const lang = document.documentElement.lang || "en";
          const announcement =
            lang === "de"
              ? `Schaltfläche: ${buttonText}. Drücken Sie die Eingabetaste zum Absenden`
              : `Button: ${buttonText}. Press Enter to submit`;

          // Use optimized delay timing
          setTimeout(() => announceToScreenReader(announcement), 300);
        }
      });
    });
  }

  // Initialize when DOM is ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeAuthButtonAccessibility);
  } else {
    initializeAuthButtonAccessibility();
  }
</script>
