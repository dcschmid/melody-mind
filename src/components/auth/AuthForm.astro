---
/**
 * AuthForm Component for MelodyMind
 *
 * This component combines login and registration forms into a single component
 * with animated transitions between modes. It is fully responsive and
 * optimized according to WCAG AAA standards.
 *
 * Features:
 * - Tab-based switching between login and registration
 * - Client-side form validation using modular components
 * - Password strength meter
 * - Password visibility toggle
 * - Comprehensive password requirements checking
 * - Responsive design for all screen sizes
 * - WCAG AAA compliant accessibility
 * - Reduced motion support
 * - Modular component architecture
 *
 * @component
 * @example
 * ```astro
 * <AuthForm initialMode="login" />
 * ```
 */
import { getLangFromUrl, useTranslations } from "../../utils/i18n";
import AuthFormField from "./AuthFormField.astro";
import AuthSubmitButton from "./AuthSubmitButton.astro";
import PasswordRequirementsPanel from "./PasswordRequirementsPanel.astro";

interface Props {
  /** Initial mode of the component: "login" or "register" */
  initialMode?: "login" | "register";
}

const { initialMode = "login" } = Astro.props;
const lang = String(getLangFromUrl(Astro.url));
const t = useTranslations(lang);
---

<!-- Main auth form container -->
<div class="auth-form__container">
  <!-- Error message display area -->
  <div
    id="formError"
    class="auth-form__message auth-form__message--error"
    role="alert"
    aria-live="assertive"
  >
  </div>
  <!-- Success message display area -->
  <div
    id="formSuccess"
    class="auth-form__message auth-form__message--success"
    role="alert"
    aria-live="assertive"
  >
  </div>

  <!-- Tab navigation for switching between login and registration -->
  <div class="auth-form__tabs">
    <button
      id="loginTab"
      class={`auth-form__tab ${initialMode === "login" ? "auth-form__tab--active" : ""}`}
      aria-selected={initialMode === "login" ? "true" : "false"}
      role="tab"
      aria-controls="loginForm"
    >
      {t("auth.login.title")}
    </button>
    <button
      id="registerTab"
      class={`auth-form__tab ${initialMode === "register" ? "auth-form__tab--active" : ""}`}
      aria-selected={initialMode === "register" ? "true" : "false"}
      role="tab"
      aria-controls="registerForm"
    >
      {t("auth.register.title")}
    </button>
  </div>

  <div class="auth-form__forms-container">
    <!-- Login Form -->
    <form
      id="loginForm"
      class={`auth-form__form ${initialMode === "login" ? "auth-form__form--active" : ""}`}
      novalidate
      aria-labelledby="loginFormHeading"
      role="tabpanel"
      aria-hidden={initialMode === "login" ? "false" : "true"}
    >
      <h2 id="loginFormHeading" class="sr-only">{t("auth.login.title")}</h2>

      <!-- Email field for login -->
      <AuthFormField
        id="loginEmail"
        name="email"
        type="email"
        label={t("auth.login.email")}
        placeholder={t("auth.login.email.placeholder")}
        required={true}
        autocomplete="email"
      />

      <!-- Password field for login with reset link -->
      <AuthFormField
        id="loginPassword"
        name="password"
        type="password"
        label={t("auth.login.password")}
        placeholder={t("auth.login.password.placeholder")}
        required={true}
        autocomplete="current-password"
        showPasswordToggle={true}
        labelSuffix={`<a href="/${String(lang)}/auth/reset-password" class="auth-form__forgot-password">${t("auth.login.forgot_password")}</a>`}
      />

      <!-- Submit button for login -->
      <AuthSubmitButton
        id="loginSubmit"
        textId="loginSubmitText"
        spinnerId="loginLoadingSpinner"
        buttonText={t("auth.login.submit")}
      />
    </form>

    <!-- Registration Form -->
    <form
      id="registerForm"
      class={`auth-form__form ${initialMode === "register" ? "auth-form__form--active" : ""}`}
      novalidate
      aria-labelledby="registerFormHeading"
      role="tabpanel"
      aria-hidden={initialMode === "register" ? "false" : "true"}
    >
      <h2 id="registerFormHeading" class="sr-only">{t("auth.register.title")}</h2>

      <!-- Email field for registration -->
      <AuthFormField
        id="registerEmail"
        name="email"
        type="email"
        label={t("auth.register.email")}
        placeholder={t("auth.register.email.placeholder")}
        required={true}
        autocomplete="email"
      />

      <!-- Username field (optional) -->
      <AuthFormField
        id="registerUsername"
        name="username"
        type="text"
        label={t("auth.register.username")}
        placeholder={t("auth.register.username.placeholder")}
        required={false}
        autocomplete="username"
      />

      <!-- Password field for registration -->
      <AuthFormField
        id="registerPassword"
        name="password"
        type="password"
        label={t("auth.register.password")}
        placeholder={t("auth.register.password.placeholder")}
        required={true}
        autocomplete="new-password"
        showPasswordToggle={true}
      />

      <!-- Password requirements panel -->
      <PasswordRequirementsPanel
        passwordFieldId="registerPassword"
        confirmFieldId="registerPasswordConfirm"
        toggleButtonText={t("auth.register.password_requirements")}
      />

      <!-- Password confirmation field -->
      <AuthFormField
        id="registerPasswordConfirm"
        name="passwordConfirm"
        type="password"
        label={t("auth.register.password_confirm")}
        placeholder={t("auth.register.password_confirm.placeholder")}
        required={true}
        autocomplete="new-password"
        showPasswordToggle={true}
      />

      <!-- Submit button for registration -->
      <AuthSubmitButton
        id="registerSubmit"
        textId="registerSubmitText"
        spinnerId="registerLoadingSpinner"
        buttonText={t("auth.register.submit")}
      />
    </form>
  </div>
</div>

<script>
  import {
    initializeAuthForm,
    switchTab,
    handleLoginSubmit,
    handleRegisterSubmit,
  } from "../../utils/auth/authFormUtils";
  import { useTranslations } from "../../utils/i18n";

  /**
   * Initialize the auth form when DOM is loaded
   */
  function setupAuthForm(): void {
    // Add reduced motion support
    if (window.matchMedia && window.matchMedia("(prefers-reduced-motion: reduce)").matches) {
      document.documentElement.classList.add("reduced-motion");
    }

    // Get current language and initialize translations
    const currentLang = document.documentElement.lang || "en";
    const t = useTranslations(currentLang);

    // Initialize form with translations
    const translations = {
      invalidCredentials: t("auth.service.invalid_credentials"),
      tooManyAttempts: t("auth.service.too_many_attempts"),
    };

    initializeAuthForm(translations);

    // Setup tab switching
    const loginTab = document.getElementById("loginTab");
    const registerTab = document.getElementById("registerTab");

    if (loginTab && registerTab) {
      loginTab.addEventListener("click", () => switchTab("login"));
      registerTab.addEventListener("click", () => switchTab("register"));

      loginTab.addEventListener("keydown", (e) => {
        if (e.key === "Enter" || e.key === " ") {
          e.preventDefault();
          switchTab("login");
        }
      });

      registerTab.addEventListener("keydown", (e) => {
        if (e.key === "Enter" || e.key === " ") {
          e.preventDefault();
          switchTab("register");
        }
      });
    }

    // Setup form submissions
    const loginForm = document.getElementById("loginForm") as HTMLFormElement;
    const registerForm = document.getElementById("registerForm") as HTMLFormElement;

    if (loginForm) {
      loginForm.addEventListener("submit", (event) => handleLoginSubmit(event, translations));
    }

    if (registerForm) {
      registerForm.addEventListener("submit", handleRegisterSubmit);
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", setupAuthForm);
  } else {
    setupAuthForm();
  }
</script>

<style>
  /* ============================================================================
   * Auth Form Component Styles
   * Follows BEM methodology and uses global CSS variables
   * WCAG AAA compliant with proper contrast ratios and accessibility features
   * ============================================================================ */

  /* ============================================================================
   * Auth Form Container and Layout
   * ============================================================================ */
  .auth-form__container {
    max-width: 28rem; /* 448px */
    margin: 0 auto;
    padding: var(--spacing-lg);
    background: var(--color-background-card);
    border-radius: var(--border-radius-lg);
    box-shadow: var(--shadow-lg);
    border: 1px solid var(--color-border);
    position: relative;
    isolation: isolate;
  }

  /* ============================================================================
   * Message Display Styles
   * ============================================================================ */
  .auth-form__message {
    padding: var(--spacing-md);
    border-radius: var(--border-radius-md);
    margin-bottom: var(--spacing-lg);
    font-size: var(--font-size-sm);
    font-weight: var(--font-weight-medium);
    line-height: var(--line-height-relaxed);
    display: none;
    border-width: 1px;
    border-style: solid;
  }

  .auth-form__message--error {
    background-color: var(--color-error-background);
    border-color: var(--color-error-border);
    color: var(--color-error-text);
  }

  .auth-form__message--success {
    background-color: var(--color-success-background);
    border-color: var(--color-success-border);
    color: var(--color-success-text);
  }

  .auth-form__message:not(:empty) {
    display: block;
  }

  /* ============================================================================
   * Tab Navigation Styles
   * Implements accessible tab navigation with WCAG AAA compliance
   * ============================================================================ */
  .auth-form__tabs {
    display: flex;
    background: var(--color-gray-800);
    border-radius: var(--border-radius-md);
    padding: var(--spacing-xs);
    margin-bottom: var(--spacing-lg);
    gap: var(--spacing-xs);
    position: relative;
    role: tablist;
  }

  .auth-form__tab {
    flex: 1;
    padding: var(--spacing-sm) var(--spacing-md);
    background: transparent;
    border: none;
    border-radius: var(--border-radius-sm);
    color: var(--color-text-secondary);
    font-size: var(--font-size-sm);
    font-weight: var(--font-weight-medium);
    line-height: var(--line-height-normal);
    cursor: pointer;
    transition:
      background-color var(--transition-duration-200) var(--transition-timing-in-out),
      color var(--transition-duration-200) var(--transition-timing-in-out),
      transform var(--transition-duration-150) var(--transition-timing-in-out);
    position: relative;
    min-height: 44px; /* WCAG AAA touch target size */
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
  }

  .auth-form__tab:hover {
    background: var(--color-gray-700);
    color: var(--color-text-primary);
    transform: translateY(-1px);
  }

  .auth-form__tab:focus-visible {
    outline: 3px solid var(--color-focus);
    outline-offset: 2px;
    z-index: 1;
  }

  .auth-form__tab:active {
    transform: translateY(0);
  }

  .auth-form__tab--active {
    background: var(--color-primary);
    color: var(--color-white);
    position: relative;
  }

  .auth-form__tab--active:hover {
    background: var(--color-primary-hover);
  }

  .auth-form__tab--active:focus-visible {
    outline-color: var(--color-white);
  }

  /* ============================================================================
   * Form Container and Animation
   * Smooth transitions with reduced motion support
   * ============================================================================ */
  .auth-form__forms-container {
    position: relative;
    overflow: hidden;
    border-radius: var(--border-radius-md);
  }

  .auth-form__form {
    display: none;
    opacity: 0;
    transform: translateX(var(--spacing-md));
    transition:
      opacity var(--transition-duration-300) var(--transition-timing-in-out),
      transform var(--transition-duration-300) var(--transition-timing-in-out);
  }

  .auth-form__form--active {
    display: block;
    opacity: 1;
    transform: translateX(0);
  }

  /* ============================================================================
   * Forgot Password Link Styles
   * ============================================================================ */
  .auth-form__forgot-password {
    color: var(--color-primary);
    text-decoration: none;
    font-size: var(--font-size-xs);
    font-weight: var(--font-weight-medium);
    line-height: var(--line-height-normal);
    transition:
      color var(--transition-duration-200) var(--transition-timing-in-out),
      text-decoration-color var(--transition-duration-200) var(--transition-timing-in-out);
    display: inline-block;
    padding: var(--spacing-xs);
    border-radius: var(--border-radius-sm);
  }

  .auth-form__forgot-password:hover {
    color: var(--color-primary-hover);
    text-decoration: underline;
    text-decoration-color: var(--color-primary-hover);
  }

  .auth-form__forgot-password:focus-visible {
    outline: 3px solid var(--color-focus);
    outline-offset: 2px;
  }

  /* ============================================================================
   * Reduced Motion Support
   * Respects user's motion preferences for accessibility
   * ============================================================================ */
  @media (prefers-reduced-motion: reduce) {
    .auth-form__form,
    .auth-form__tab,
    .auth-form__forgot-password {
      transition: none;
      transform: none;
    }

    .auth-form__tab:hover {
      transform: none;
    }

    .auth-form__tab:active {
      transform: none;
    }
  }

  /* ============================================================================
   * Responsive Design
   * Mobile-first approach with progressive enhancement
   * ============================================================================ */
  @media (min-width: 640px) {
    .auth-form__container {
      padding: var(--spacing-xl);
    }
  }

  @media (max-width: 639px) {
    .auth-form__container {
      margin: var(--spacing-md);
      padding: var(--spacing-md);
      border-radius: var(--border-radius-md);
    }

    .auth-form__tab {
      padding: var(--spacing-xs) var(--spacing-sm);
      font-size: var(--font-size-xs);
      min-height: 44px; /* Maintain touch target size */
    }

    .auth-form__tabs {
      padding: var(--spacing-xs);
      gap: var(--spacing-xs);
    }
  }

  @media (max-width: 479px) {
    .auth-form__container {
      margin: var(--spacing-sm);
      padding: var(--spacing-sm);
    }

    .auth-form__message {
      padding: var(--spacing-sm);
      font-size: var(--font-size-xs);
    }
  }

  /* ============================================================================
   * High Contrast Mode Support
   * Enhanced visibility for users with vision needs
   * ============================================================================ */
  @media (prefers-contrast: high) {
    .auth-form__container {
      border: 2px solid var(--color-border);
      background: var(--color-black);
    }

    .auth-form__tab {
      border: 1px solid var(--color-border);
    }

    .auth-form__tab--active {
      border: 2px solid var(--color-primary);
      background: var(--color-white);
      color: var(--color-black);
    }

    .auth-form__message--error {
      border-width: 2px;
    }

    .auth-form__message--success {
      border-width: 2px;
    }
  }

  /* ============================================================================
   * Print Styles
   * Optimized for printing with high contrast and simplified layout
   * ============================================================================ */
  @media print {
    .auth-form__container {
      box-shadow: none;
      border: 1px solid var(--color-black);
      background: var(--color-white);
      color: var(--color-black);
    }

    .auth-form__tab,
    .auth-form__message {
      background: transparent !important;
      color: var(--color-black) !important;
      border-color: var(--color-black) !important;
    }

    .auth-form__tab--active {
      background: var(--color-black) !important;
      color: var(--color-white) !important;
    }
  }

  /* ============================================================================
   * Container Queries for Component-Specific Responsiveness
   * Modern CSS feature for better component isolation
   * ============================================================================ */
  @container (max-width: 400px) {
    .auth-form__tabs {
      flex-direction: column;
      gap: var(--spacing-xs);
    }

    .auth-form__tab {
      width: 100%;
    }
  }
</style>
