---
/**
 * AuthForm - Tabbed authentication form with login/register modes
 *
 * Features:
 * - Tab-based navigation between login and registration
 * - Real-time form validation with accessibility announcements
 * - WCAG AAA compliant with keyboard navigation and screen reader support
 * - Full responsive design
 * - Internationalization support for all languages
 */

import { getLangFromUrl, useTranslations } from "../../utils/i18n";
import AuthFormField from "./AuthFormField.astro";
import AuthSubmitButton from "./AuthSubmitButton.astro";
import OAuthProviders from "./OAuthProviders.astro";
import Headline from "../Headline.astro";
import { Icon } from "astro-icon/components";

interface Props {
  initialMode?: "login" | "register";
}

const { initialMode = "login" } = Astro.props;
const lang = String(getLangFromUrl(Astro.url));
const t = useTranslations(lang);
---

<div class="auth-form__container">
  <div id="tabSwitchAnnouncer" class="sr-only" aria-live="polite" aria-atomic="true"></div>

  <div class="auth-form__progress" aria-labelledby="progressTitle">
    <Headline
      level="h3"
      id="progressTitle"
      title={t("auth.form.progress.title")}
      size="base"
      variant="default"
      className="auth-form__progress-title sr-only"
    />

    <div
      class="auth-form__progress-bar"
      role="progressbar"
      aria-valuenow="0"
      aria-valuemin="0"
      aria-valuemax="100"
      aria-labelledby="progressStatus"
    >
      <div class="auth-form__progress-fill"></div>
    </div>

    <div
      id="progressStatus"
      class="auth-form__progress-status"
      aria-live="polite"
      aria-atomic="true"
    >
    </div>

    <div class="auth-form__field-indicators" aria-label={t("auth.form.progress.title")}>
      <div
        id="loginFieldIndicators"
        class="auth-form__indicators auth-form__indicators--login"
        role="list"
      >
        <div class="auth-form__indicator" data-field="loginEmail" role="listitem">
          <Icon name="circle" class="auth-form__indicator-icon" aria-hidden="true" />
          <span class="auth-form__indicator-label"
            >{t("auth.login.email")}
            <span class="auth-form__indicator-required">({t("auth.form.progress.required")})</span>
          </span>
        </div>
        <div class="auth-form__indicator" data-field="loginPassword" role="listitem">
          <Icon name="circle" class="auth-form__indicator-icon" aria-hidden="true" />
          <span class="auth-form__indicator-label"
            >{t("auth.login.password")}
            <span class="auth-form__indicator-required">({t("auth.form.progress.required")})</span>
          </span>
        </div>
      </div>

      <div
        id="registerFieldIndicators"
        class="auth-form__indicators auth-form__indicators--register"
        role="list"
      >
        <div class="auth-form__indicator" data-field="registerEmail" role="listitem">
          <Icon name="circle" class="auth-form__indicator-icon" aria-hidden="true" />
          <span class="auth-form__indicator-label"
            >{t("auth.register.email")}
            <span class="auth-form__indicator-required">({t("auth.form.progress.required")})</span>
          </span>
        </div>
        <div class="auth-form__indicator" data-field="registerUsername" role="listitem">
          <Icon name="circle" class="auth-form__indicator-icon" aria-hidden="true" />
          <span class="auth-form__indicator-label"
            >{t("auth.register.username")}
            <span class="auth-form__indicator-optional">({t("auth.form.progress.optional")})</span>
          </span>
        </div>
        <div class="auth-form__indicator" data-field="registerPassword" role="listitem">
          <Icon name="circle" class="auth-form__indicator-icon" aria-hidden="true" />
          <span class="auth-form__indicator-label"
            >{t("auth.register.password")}
            <span class="auth-form__indicator-required">({t("auth.form.progress.required")})</span>
          </span>
        </div>
        <div class="auth-form__indicator" data-field="registerPasswordConfirm" role="listitem">
          <Icon name="circle" class="auth-form__indicator-icon" aria-hidden="true" />
          <span class="auth-form__indicator-label"
            >{t("auth.register.password_confirm")}
            <span class="auth-form__indicator-required">({t("auth.form.progress.required")})</span>
          </span>
        </div>
      </div>
    </div>
  </div>

  <div class="auth-form__tabs">
    <button
      id="loginTab"
      class={`auth-form__tab ${initialMode === "login" ? "auth-form__tab--active" : ""}`}
      aria-selected={initialMode === "login" ? "true" : "false"}
      role="tab"
      aria-controls="loginForm"
    >
      {t("auth.login.title")}
    </button>
    <button
      id="registerTab"
      class={`auth-form__tab ${initialMode === "register" ? "auth-form__tab--active" : ""}`}
      aria-selected={initialMode === "register" ? "true" : "false"}
      role="tab"
      aria-controls="registerForm"
    >
      {t("auth.register.title")}
    </button>
  </div>

  <div class="auth-form__forms-container">
    <div
      id="formError"
      class="auth-form__message auth-form__message--error"
      role="alert"
      aria-live="assertive"
    >
    </div>
    <div
      id="formSuccess"
      class="auth-form__message auth-form__message--success"
      role="alert"
      aria-live="assertive"
    >
    </div>

    <div class="auth-form__oauth-section">
      <OAuthProviders />
    </div>

    <div class="auth-form__guest-section">
      <div class="auth-form__guest-divider">
        <span class="auth-form__guest-divider-text">{t("auth.guest.or")}</span>
      </div>

      <div class="auth-form__guest-content">
        <button
          id="guestModeButton"
          class="auth-form__guest-button"
          type="button"
          aria-describedby="guestDescription guestBenefits"
        >
          <Icon name="user-check" class="auth-form__guest-icon" aria-hidden="true" />
          {t("auth.guest.button")}
        </button>

        <p id="guestDescription" class="auth-form__guest-description">
          {t("auth.guest.description")}
        </p>

        <div id="guestBenefits" class="auth-form__guest-benefits">
          <p class="auth-form__guest-benefits-title">{t("auth.guest.benefits")}</p>
          <ul class="auth-form__guest-benefits-list">
            <li class="auth-form__guest-benefit">
              <Icon name="save" class="auth-form__guest-benefit-icon" aria-hidden="true" />
              {t("auth.guest.benefit.progress")}
            </li>
            <li class="auth-form__guest-benefit">
              <Icon name="trophy" class="auth-form__guest-benefit-icon" aria-hidden="true" />
              {t("auth.guest.benefit.achievements")}
            </li>
            <li class="auth-form__guest-benefit">
              <Icon name="chart-bar" class="auth-form__guest-benefit-icon" aria-hidden="true" />
              {t("auth.guest.benefit.leaderboard")}
            </li>
            <li class="auth-form__guest-benefit">
              <Icon name="analytics" class="auth-form__guest-benefit-icon" aria-hidden="true" />
              {t("auth.guest.benefit.stats")}
            </li>
          </ul>
        </div>
      </div>
    </div>

    <form
      id="loginForm"
      class={`auth-form__form ${initialMode === "login" ? "auth-form__form--active" : ""}`}
      novalidate
      aria-labelledby="loginFormHeading"
      role="tabpanel"
      aria-hidden={initialMode === "login" ? "false" : "true"}
    >
      <Headline
        level="h2"
        id="loginFormHeading"
        title={t("auth.login.title")}
        size="lg"
        variant="default"
        className="sr-only"
      />

      <AuthFormField
        id="loginEmail"
        name="email"
        type="email"
        label={t("auth.login.email")}
        placeholder={t("auth.login.email.placeholder")}
        required={true}
        autocomplete="email"
      />

      <AuthFormField
        id="loginPassword"
        name="password"
        type="password"
        label={t("auth.login.password")}
        placeholder={t("auth.login.password.placeholder")}
        required={true}
        autocomplete="current-password"
        showPasswordToggle={true}
        labelSuffix={`<a href="/${String(lang)}/auth/reset-password" class="auth-form__forgot-password">${t("auth.login.forgot_password")}</a>`}
      />

      <AuthSubmitButton
        id="loginSubmit"
        textId="loginSubmitText"
        spinnerId="loginLoadingSpinner"
        buttonText={t("auth.login.submit")}
      />
    </form>

    <form
      id="registerForm"
      class={`auth-form__form ${initialMode === "register" ? "auth-form__form--active" : ""}`}
      novalidate
      aria-labelledby="registerFormHeading"
      role="tabpanel"
      aria-hidden={initialMode === "register" ? "false" : "true"}
    >
      <Headline
        level="h2"
        id="registerFormHeading"
        title={t("auth.register.title")}
        size="lg"
        variant="default"
        className="sr-only"
      />

      <AuthFormField
        id="registerEmail"
        name="email"
        type="email"
        label={t("auth.register.email")}
        placeholder={t("auth.register.email.placeholder")}
        required={true}
        autocomplete="email"
      />

      <AuthFormField
        id="registerUsername"
        name="username"
        type="text"
        label={t("auth.register.username")}
        placeholder={t("auth.register.username.placeholder")}
        required={false}
        autocomplete="username"
      />

      <AuthFormField
        id="registerPassword"
        name="password"
        type="password"
        label={t("auth.register.password")}
        placeholder={t("auth.register.password.placeholder")}
        required={true}
        autocomplete="new-password"
        showPasswordToggle={true}
      />

      <AuthFormField
        id="registerPasswordConfirm"
        name="passwordConfirm"
        type="password"
        label={t("auth.register.password_confirm")}
        placeholder={t("auth.register.password_confirm.placeholder")}
        required={true}
        autocomplete="new-password"
        showPasswordToggle={true}
      />

      <AuthSubmitButton
        id="registerSubmit"
        textId="registerSubmitText"
        spinnerId="registerLoadingSpinner"
        buttonText={t("auth.register.submit")}
      />
    </form>
  </div>
</div>

<script>
  import { handleLoginSubmit, handleRegisterSubmit } from "../../utils/auth/authFormUtils";
  import { createFormProgressManager } from "../../utils/auth/formProgressManager";
  import { setupTabSwitching, initializeAuthFormElements } from "../../utils/auth/ui-interactions";
  import { useTranslations } from "../../utils/i18n";

  const setupAuthForm = (): void => {
    const prefersReducedMotion = window.matchMedia?.("(prefers-reduced-motion: reduce)").matches;
    const isTouchDevice = window.matchMedia?.("(any-hover: none)").matches;

    if (prefersReducedMotion) {
      document.documentElement.classList.add("reduced-motion");
    }

    if (isTouchDevice) {
      document.documentElement.classList.add("enhanced-text-spacing");
    }

    const currentLang = document.documentElement.lang || "en";
    const t = useTranslations(currentLang);

    const translations = {
      invalidCredentials: t("auth.service.invalid_credentials"),
      tooManyAttempts: t("auth.service.too_many_attempts"),
      loginFormActive: t("auth.accessibility.login_form_active"),
      registerFormActive: t("auth.accessibility.register_form_active"),
      initError: t("auth.form.init_error"),
      errorMessageDismissed: t("auth.accessibility.error_message_dismissed"),
      successMessageDismissed: t("auth.accessibility.success_message_dismissed"),
    };

    const elements = initializeAuthFormElements();
    if (!elements) {
      console.error(translations.initError);
      return;
    }

    setupTabSwitching(
      elements.loginTab,
      elements.registerTab,
      elements.loginForm,
      elements.registerForm,
      elements.formError,
      elements.formSuccess
    );

    const announcer = document.getElementById("tabSwitchAnnouncer");
    if (announcer && elements.loginTab && elements.registerTab) {
      elements.loginTab.addEventListener("click", () => {
        announcer.textContent = translations.loginFormActive;
      });

      elements.registerTab.addEventListener("click", () => {
        announcer.textContent = translations.registerFormActive;
      });
    }

    document.addEventListener("keydown", (event: KeyboardEvent) => {
      if (event.key === "Escape") {
        const errorEl = document.getElementById("formError");
        const successEl = document.getElementById("formSuccess");
        let messageCleared = false;

        if (errorEl?.textContent?.trim()) {
          errorEl.textContent = "";
          errorEl.style.display = "none";
          messageCleared = true;
          if (announcer) {
            announcer.textContent = translations.errorMessageDismissed;
          }
        }

        if (successEl?.textContent?.trim()) {
          successEl.textContent = "";
          successEl.style.display = "none";
          messageCleared = true;
          if (announcer) {
            announcer.textContent = translations.successMessageDismissed;
          }
        }

        if (messageCleared) {
          event.preventDefault();
        }
      }
    });

    const progressManager = createFormProgressManager();
    progressManager.initialize();

    elements.loginForm?.addEventListener("submit", (event: Event) => {
      handleLoginSubmit(event, translations);
    });

    elements.registerForm?.addEventListener("submit", (event: Event) => {
      handleRegisterSubmit(event);
    });

    const guestButton = document.getElementById("guestModeButton");
    if (guestButton) {
      guestButton.addEventListener("click", () => {
        handleGuestMode();
      });
    }
  };

  const handleGuestMode = (): void => {
    try {
      const guestUser = {
        id: `guest_${Date.now()}`,
        username: "Guest",
        email: null,
        isGuest: true,
        created_at: new Date().toISOString(),
      };

      import("../../utils/client/authStatus")
        .then(({ setLocalStorage }) => {
          setLocalStorage("auth_status", "guest");
          setLocalStorage("user", JSON.stringify(guestUser));

          window.dispatchEvent(new CustomEvent("auth:guest-login"));

          const currentPath = window.location.pathname;
          const currentLang = document.documentElement.lang || "de";

          const urlParams = new URLSearchParams(window.location.search);
          const returnTo = urlParams.get("returnTo") || sessionStorage.getItem("returnTo");

          if (returnTo) {
            sessionStorage.removeItem("returnTo");
            window.location.href = returnTo;
          } else if (currentPath.includes("/auth/login")) {
            window.location.href = `/${currentLang}/`;
          } else {
            const authModal = document.querySelector(
              ".auth-modal, .auth-overlay, .auth-form-container"
            );
            if (authModal) {
              if ((authModal as HTMLElement).style) {
                (authModal as HTMLElement).style.display = "none";
              }
              authModal.classList?.add("hidden");

              const closeBtn = authModal.querySelector("[data-closes], .close, .modal-close");
              if (closeBtn && typeof (closeBtn as HTMLElement).click === "function") {
                (closeBtn as HTMLElement).click();
              }
            }

            setTimeout(() => {
              window.dispatchEvent(new CustomEvent("auth:ui-update"));
              window.dispatchEvent(
                new CustomEvent("storage", {
                  detail: { key: "auth_status", newValue: "guest" },
                })
              );
            }, 100);
          }
        })
        .catch((error) => {
          console.error("Error in guest mode setup:", error);
        });
    } catch (error) {
      console.error("Error setting up guest mode:", error);

      const errorEl = document.getElementById("formError");
      if (errorEl) {
        errorEl.textContent = "Fehler beim Einrichten des Gastmodus";
        errorEl.style.display = "block";
      }
    }
  };

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", setupAuthForm);
  } else {
    setupAuthForm();
  }
</script>

<style lang="scss">
  .auth-form {
    &__container {
      max-width: var(--container-md);
      margin: 0 auto;
      background: transparent;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-lg);
      position: relative;
      transition: box-shadow var(--transition-normal);

      &:hover {
        box-shadow: var(--shadow-xl);
      }
    }

    &__message {
      padding: var(--space-md);
      margin-bottom: var(--space-lg);
      border-radius: var(--radius-md);
      font-size: var(--text-sm);
      font-weight: var(--font-medium);
      line-height: var(--leading-relaxed);
      display: none;
      border-width: var(--border-width-thin);
      border-style: solid;
      transition: opacity var(--transition-normal);

      &--error {
        background-color: var(--color-error-50);
        border-color: var(--color-error-300);
        color: var(--color-error-800);
      }

      &--success {
        background-color: var(--color-success-50);
        border-color: var(--color-success-300);
        color: var(--color-success-800);
      }

      &:not(:empty) {
        display: block;
      }
    }

    &__tabs {
      display: flex;
      flex-direction: row;
      background: transparent;
      margin: 0;
      padding: 0;
      gap: var(--space-xs);
      position: relative;
      transition: background-color var(--transition-normal);
    }

    &__tab {
      flex: 1;
      padding: var(--space-md) var(--space-xl);
      background: var(--color-neutral-700);
      border: var(--border-width-thin) solid var(--border-secondary);
      border-bottom: none;
      border-radius: var(--radius-lg) var(--radius-lg) 0 0;
      color: var(--color-neutral-300);
      font-size: var(--text-base);
      font-weight: var(--font-medium);
      line-height: var(--leading-normal);
      cursor: pointer;
      transition:
        background-color var(--transition-normal),
        color var(--transition-normal),
        transform var(--transition-normal),
        box-shadow var(--transition-normal);
      position: relative;
      min-height: var(--touch-target-enhanced);
      display: flex;
      align-items: center;
      justify-content: center;
      text-align: center;

      &:first-child {
        border-top-left-radius: var(--radius-lg);
        border-top-right-radius: var(--radius-lg);
      }

      &:last-child {
        border-top-left-radius: var(--radius-lg);
        border-top-right-radius: var(--radius-lg);
      }

      &:hover {
        background: var(--color-neutral-600);
        color: var(--color-neutral-200);
        transform: translateY(-1px);
      }

      &:focus-visible {
        outline: var(--focus-outline);
        outline-offset: var(--focus-ring-offset);
        z-index: var(--z-dropdown);
        box-shadow: var(--focus-ring);
      }

      &:active {
        transform: translateY(0);
      }

      &--active {
        background: var(--bg-secondary);
        color: var(--text-primary);
        position: relative;
        z-index: 2;
        border-bottom: var(--border-width-thin) solid var(--bg-secondary);
        margin-bottom: calc(-1 * var(--border-width-thin));

        &:hover {
          background: var(--bg-secondary);
          transform: none;
        }

        &:focus-visible {
          outline-color: var(--text-primary);
          box-shadow: var(--focus-ring);
        }
      }
    }

    &__forms-container {
      position: relative;
      overflow: hidden;
      background: var(--bg-secondary);
      border: var(--border-width-thin) solid var(--border-secondary);
      border-top: none;
      border-radius: 0 0 var(--radius-lg) var(--radius-lg);
      z-index: 1;
      padding: var(--space-xl);
    }

    &__oauth-section {
      margin-bottom: var(--space-xl);
      padding-bottom: var(--space-lg);
      border-bottom: var(--border-width-thin) solid var(--border-secondary);
    }

    &__guest-section {
      margin-bottom: var(--space-xl);
      padding: var(--space-lg) 0;
    }

    &__guest-divider {
      position: relative;
      text-align: center;
      margin-bottom: var(--space-lg);

      &::before {
        content: "";
        position: absolute;
        top: 50%;
        left: 0;
        right: 0;
        height: var(--border-width-thin);
        background: var(--border-secondary);
        z-index: 1;
      }

      &-text {
        position: relative;
        z-index: 2;
        background: var(--bg-secondary);
        padding: 0 var(--space-md);
        font-size: var(--text-sm);
        color: var(--text-secondary);
        font-weight: var(--font-medium);
      }
    }

    &__guest-content {
      text-align: center;
    }

    &__guest-button {
      position: relative;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      border: none;
      user-select: none;
      width: var(--width-full);
      min-height: var(--touch-target-enhanced);
      gap: var(--space-sm);
      padding: var(--space-md) var(--space-lg);
      margin-bottom: var(--space-md);
      background: var(--color-neutral-600);
      color: var(--color-white);
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
      font-size: var(--text-base);
      font-weight: var(--font-semibold);
      line-height: var(--leading-normal);
      letter-spacing: var(--letter-spacing-base);
      transition:
        background-color var(--transition-normal),
        box-shadow var(--transition-normal),
        transform var(--transition-normal);

      @media (min-width: 30em) {
        gap: var(--space-md);
        padding: var(--space-lg) var(--space-xl);
        font-size: var(--text-lg);
      }

      &:hover:not(:disabled) {
        background: var(--color-neutral-500);
        transform: translateY(-2px);
        box-shadow: var(--shadow-lg);
      }

      &:focus-visible {
        outline: var(--focus-outline);
        outline-offset: var(--focus-ring-offset);
        background: var(--color-neutral-500);
        box-shadow: var(--shadow-lg), var(--focus-ring);
      }

      &:active:not(:disabled) {
        transform: translateY(0);
        background: var(--color-neutral-700);
        box-shadow: var(--shadow-sm);
      }

      &:disabled {
        cursor: not-allowed;
        opacity: 0.6;
        transform: none;
        background: var(--color-neutral-300);
      }
    }

    &__guest-icon {
      width: 1.25rem;
      height: 1.25rem;
      color: currentColor;
      flex-shrink: 0;
    }

    &__guest-description {
      font-size: var(--text-sm);
      color: var(--text-secondary);
      margin-bottom: var(--space-lg);
      line-height: var(--leading-relaxed);
    }

    &__guest-benefits {
      text-align: left;
      background: var(--color-info-50);
      border: var(--border-width-thin) solid var(--color-info-200);
      border-radius: var(--radius-md);
      padding: var(--space-lg);

      &-title {
        font-size: var(--text-sm);
        font-weight: var(--font-semibold);
        color: var(--color-info-800);
        margin-bottom: var(--space-md);
      }

      &-list {
        list-style: none;
        margin: 0;
        padding: 0;
        display: flex;
        flex-direction: column;
        gap: var(--space-sm);
      }
    }

    &__guest-benefit {
      display: flex;
      align-items: center;
      gap: var(--space-sm);
      font-size: var(--text-sm);
      color: var(--color-info-700);

      &-icon {
        width: 1rem;
        height: 1rem;
        color: var(--color-info-600);
        flex-shrink: 0;
      }
    }

    &__form {
      display: none;
      opacity: 0;
      transform: translateX(var(--space-md));
      transition:
        opacity var(--transition-normal),
        transform var(--transition-normal);

      &--active {
        display: block !important;
        opacity: 1;
        transform: translateX(0);
      }
    }

    &__forms-container {
      .auth-form__form:not(.auth-form__form--active) {
        display: none !important;
      }
    }

    &__forgot-password {
      color: var(--interactive-primary);
      text-decoration: none;
      font-size: var(--text-xs);
      font-weight: var(--font-medium);
      line-height: var(--leading-normal);
      transition:
        color var(--transition-normal),
        text-decoration-color var(--transition-normal);
      display: inline-block;
      padding: var(--space-xs);
      border-radius: var(--radius-sm);

      &:hover {
        color: var(--interactive-primary-hover);
        text-decoration: underline;
        text-decoration-color: var(--interactive-primary-hover);
        text-decoration-thickness: var(--border-width-thin);
        text-underline-offset: var(--space-xs);
      }

      &:focus-visible {
        outline: var(--focus-outline);
        outline-offset: var(--focus-ring-offset);
      }
    }

    .enhanced-text-spacing & {
      &__container * {
        letter-spacing: var(--letter-spacing-enhanced) !important;
        word-spacing: var(--word-spacing-enhanced) !important;
        line-height: var(--leading-enhanced) !important;
      }

      &__container p,
      &__message {
        margin-bottom: var(--space-lg) !important;
      }

      &__tab {
        padding: calc(var(--space-sm) * 1.2) calc(var(--space-md) * 1.2);
      }
    }

    @media (prefers-reduced-motion: reduce) {
      &__form,
      &__tab,
      &__forgot-password,
      &__progress-fill,
      &__indicator,
      &__guest-button {
        transition: var(--transition-instant);
        transform: none;
        animation: none;
      }

      &__tab {
        &:hover,
        &:active {
          transform: none;
        }
      }

      &__guest-button {
        &:hover,
        &:active {
          transform: none;
        }
      }
    }

    @media (max-width: 39.9375em) {
      &__container {
        margin: var(--space-md);
        border-radius: var(--radius-md);
      }

      &__tab {
        padding: var(--space-md) var(--space-lg);
        font-size: var(--text-sm);
        min-height: var(--touch-target-enhanced);
      }

      &__forms-container {
        padding: var(--space-lg);
      }

      &__guest-button {
        min-height: var(--touch-target-enhanced);
        font-size: var(--text-sm);
        padding: var(--space-md) var(--space-lg);
        gap: var(--space-sm);
      }

      &__progress {
        padding: var(--space-sm);
        margin-bottom: var(--space-md);
      }

      &__field-indicators {
        gap: var(--space-xs);
      }

      &__indicator {
        padding: var(--space-xs);
        font-size: var(--text-xs);
      }
    }

    @media (max-width: 23.4375em) {
      &__container {
        margin: var(--space-sm);
      }

      &__forms-container {
        padding: var(--space-md);
      }

      &__tab {
        padding: var(--space-sm) var(--space-md);
        font-size: var(--text-xs);
      }

      &__message {
        padding: var(--space-sm);
        font-size: var(--text-xs);
      }
    }

    @media (prefers-contrast: high) {
      &__container {
        border: var(--border-width-thick) solid var(--border-primary);
        background: var(--color-black);
      }

      &__tab {
        border: var(--border-width-thin) solid var(--border-primary);

        &--active {
          border: var(--border-width-thick) solid var(--interactive-primary);
          background: var(--color-white);
          color: var(--color-black);
        }
      }

      &__message {
        &--error,
        &--success {
          border-width: var(--border-width-thick);
        }
      }

      &__progress {
        border: var(--border-width-thick) solid var(--border-primary);

        &-bar {
          border: var(--border-width-thick) solid var(--border-primary);
        }
      }

      &__indicator--completed {
        border: var(--border-width-thin) solid var(--color-success-600);
      }

      &__guest-button {
        border: var(--border-width-thick) solid var(--border-primary);
        background: var(--color-neutral-800);
        color: var(--color-white);

        &:hover:not(:disabled),
        &:focus-visible {
          background: var(--color-neutral-700);
          border-color: var(--interactive-primary);
        }
      }
    }

    @media print {
      &__container {
        box-shadow: none;
        border: var(--border-width-thin) solid var(--color-black);
        background: var(--color-white);
        color: var(--color-black);
      }

      &__tab,
      &__message {
        background: transparent !important;
        color: var(--color-black) !important;
        border-color: var(--color-black) !important;
      }

      &__tab--active {
        background: var(--color-black) !important;
        color: var(--color-white) !important;
      }

      &__progress,
      &__field-indicators {
        display: none;
      }
    }

    &__progress {
      margin-bottom: var(--space-lg);
      padding: var(--space-md);
      background: var(--color-neutral-100);
      border-radius: var(--radius-md);
      border: var(--border-width-thin) solid var(--border-secondary);
      order: -1;
      display: none;

      &-title {
        margin-bottom: var(--space-sm);
        font-size: var(--text-sm);
        font-weight: var(--font-medium);
        color: var(--text-secondary);
      }

      &-bar {
        width: var(--width-full);
        height: var(--space-sm);
        background: var(--bg-secondary);
        border-radius: var(--radius-full);
        overflow: hidden;
        margin-bottom: var(--space-sm);
        border: var(--border-width-thin) solid var(--border-secondary);
      }

      &-fill {
        height: var(--height-full);
        background: linear-gradient(
          90deg,
          var(--interactive-primary),
          var(--interactive-primary-hover)
        );
        border-radius: var(--radius-full);
        transition: width var(--transition-normal);
        width: 0;
      }

      &-status {
        font-size: var(--text-xs);
        color: var(--text-secondary);
        margin-bottom: var(--space-sm);
        min-height: var(--text-lg);
      }
    }

    &__field-indicators {
      display: flex;
      flex-direction: column;
      gap: var(--space-xs);
    }

    &__indicators {
      display: none;
      flex-direction: column;
      gap: var(--space-xs);

      &--active {
        display: flex;
      }
    }

    &__indicator {
      display: flex;
      align-items: center;
      gap: var(--space-xs);
      font-size: var(--text-xs);
      color: var(--text-secondary);
      padding: var(--space-xs);
      border-radius: var(--radius-sm);
      transition: all var(--transition-normal);

      &--completed {
        color: var(--color-success-700);
        background: var(--color-success-50);

        .auth-form__indicator-icon {
          color: var(--color-success-700);
        }
      }

      &-icon {
        font-size: var(--text-sm);
        font-weight: var(--font-bold);
        width: 1em;
        text-align: center;
        transition: all var(--transition-normal);
      }

      &-label {
        flex: 1;
      }

      &-required {
        font-weight: var(--font-medium);
        color: var(--color-warning-600);
      }

      &-optional {
        font-style: italic;
        color: var(--text-muted);
      }
    }
  }

  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
</style>
