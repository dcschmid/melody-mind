---
/**
 * EmailVerification Component for MelodyMind
 *
 * Handles email verification flow with three states: loading, success, error.
 * WCAG AAA compliant with full internationalization support.
 *
 * @component
 * @example
 * ```astro
 * ---
 * const { token } = Astro.params;
 * ---
 * <EmailVerification token={token} />
 * ```
 *
 * @features
 * - WCAG AAA accessibility compliance
 * - Full internationalization support
 * - Responsive design
 * - Performance optimized
 * - Timeout handling (30 seconds)
 * - Reduced motion support
 *
 * @accessibility
 * - Semantic HTML with ARIA attributes
 * - Automatic focus management
 * - Screen reader announcements
 * - Keyboard navigation support
 * - Touch targets minimum 44Ã—44px
 *
 * @api_dependencies
 * - POST /{lang}/api/auth/verify-email
 * - i18n system
 * - astro-icon
 *
 * @since 3.1.0
 */

// Imports
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import { Icon } from "astro-icon/components";
import Headline from "@components/Headline.astro";
import Paragraph from "@components/Paragraph.astro";

// Component props
interface Props {
  /**
   * Verification token from email confirmation URL
   * @required
   * @format URL-safe string (a-zA-Z0-9\-_)
   */
  token: string;
}

const { token } = Astro.props;
const lang = String(getLangFromUrl(Astro.url));
const t = useTranslations(String(lang));
---

<div
  class="email-verification"
  aria-live="polite"
  id="verification-container"
  data-verification-token={token}
  {lang}
>
  <!-- Skip link for screen readers -->
  <a href="#verification-container" class="sr-only-focusable sr-only">
    {t("auth.skip_to_verification")}
  </a>

  <!-- Loading state -->
  <div
    id="loadingState"
    class="email-verification__state"
    role="status"
    aria-label={t("auth.email_verification.loading_label")}
  >
    <div class="email-verification__spinner" aria-hidden="true" role="presentation"></div>
    <Paragraph
      id="loading-message"
      aria-live="polite"
      textSize="lg"
      align="center"
      description={t("auth.email_verification.loading_label")}
    />
  </div>

  <div
    id="successState"
    class="email-verification__state email-verification__state--hidden"
    role="status"
    aria-labelledby="verification-heading"
  >
    <div
      class="email-verification__icon email-verification__icon--success"
      role="img"
      aria-label={t("auth.email_verification.success_icon_label")}
    >
      <Icon name="check" class="email-verification__svg" aria-hidden="true" />
    </div>
    <Headline
      id="verification-heading"
      level="h1"
      size="2xl"
      variant="primary"
      textAlign="center"
      focusable={true}
      title={t("auth.email_verification.title")}
    />
    <Paragraph
      id="success-message"
      aria-live="polite"
      textSize="lg"
      align="center"
      description={t("auth.email_verification.message")}
    />
    <a
      href={`/${String(lang)}/auth/login`}
      class="email-verification__button"
      role="button"
      aria-describedby="success-message"
    >
      {t("auth.email_verification.login")}
    </a>
  </div>

  <div
    id="errorState"
    class="email-verification__state email-verification__state--hidden"
    role="alert"
    aria-labelledby="error-heading"
  >
    <div
      class="email-verification__icon email-verification__icon--error"
      role="img"
      aria-label={t("auth.email_verification.error_icon_label")}
    >
      <Icon name="exclamation-triangle" class="email-verification__svg" aria-hidden="true" />
    </div>
    <Headline
      id="error-heading"
      level="h1"
      size="2xl"
      variant="primary"
      textAlign="center"
      focusable={true}
      aria-live="assertive"
      title={t("auth.email_verification.title")}
    />
    <Paragraph
      id="error-message"
      aria-live="assertive"
      textSize="lg"
      align="center"
      description={t("auth.email_verification.error")}
    />
    <a
      href={`/${String(lang)}/auth/login`}
      class="email-verification__button"
      role="button"
      aria-describedby="error-message"
    >
      {t("auth.email_verification.login")}
    </a>
  </div>
</div>

<style lang="scss">
  /* Email Verification Component Styles */

  // Breakpoints for responsive design
  $breakpoint-mobile: 39.9375em; // 639px
  $breakpoint-small-mobile: 23.4375em; // 375px

  // Animation durations
  $transition-normal: 0.3s ease-in-out;
  $transition-fast: 0.15s ease-in-out;

  // Spacing variables
  $spacing-xs: 0.25rem;
  $spacing-sm: 0.5rem;
  $spacing-md: 1rem;
  $spacing-lg: 1.5rem;
  $spacing-xl: 2rem;
  $spacing-2xl: 3rem;
  $spacing-3xl: 4rem;

  // Border radius
  $radius-sm: 0.25rem;
  $radius-md: 0.5rem;
  $radius-lg: 0.75rem;
  $radius-full: 50%;

  // Icon sizes
  $icon-size-lg: 3rem;
  $icon-size-xl: 4rem;
  $icon-size-2xl: 5rem;

  // Touch target minimum size
  $min-touch-size: 2.75rem;

  .email-verification {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 50vh;
    padding: var(--space-xl);
    max-width: var(--form-container-max-width, 28rem);
    margin: 0 auto;
    text-align: center;
    background: var(--bg-secondary);
    border-radius: var(--radius-lg);
    box-shadow: var(--card-shadow);
    border: 1px solid var(--border-primary);

    // State management with smooth transitions
    &__state {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: var(--space-lg);
      width: 100%;
      opacity: 1;
      transform: translateY(0);
      transition:
        opacity $transition-normal,
        transform $transition-normal,
        visibility $transition-normal;
      visibility: visible;

      &--hidden {
        display: none;
        opacity: 0;
        transform: translateY($spacing-md);
        visibility: hidden;
      }
    }

    // Icon styling with enhanced accessibility
    &__icon {
      display: flex;
      align-items: center;
      justify-content: center;
      width: $icon-size-2xl;
      height: $icon-size-2xl;
      border-radius: $radius-full;
      margin-bottom: $spacing-md;
      transition: transform $transition-fast;

      &:hover {
        transform: scale(1.05);
      }

      &--success {
        background: linear-gradient(135deg, var(--bg-success-aaa), var(--color-success-800));
        color: var(--text-success-aaa);
        box-shadow: 0 4px 12px rgba(34, 197, 94, 0.3);
      }

      &--error {
        background: linear-gradient(135deg, var(--bg-error-aaa), var(--color-error-800));
        color: var(--text-error-aaa);
        box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
      }
    }

    &__svg {
      width: $icon-size-lg;
      height: $icon-size-lg;
      filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.1));
    }

    // Enhanced spinner animation
    &__spinner {
      width: $icon-size-lg;
      height: $icon-size-lg;
      border: 3px solid var(--border-primary);
      border-top: 3px solid var(--interactive-primary);
      border-radius: $radius-full;
      animation: spin 1s linear infinite;
      box-shadow: 0 2px 8px rgba(139, 92, 246, 0.2);
    }

    // Modern button styling with enhanced interactions
    &__button {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      min-height: $min-touch-size;
      min-width: $min-touch-size;
      padding: $spacing-md $spacing-xl;
      background: linear-gradient(135deg, var(--interactive-primary), var(--color-primary-700));
      color: var(--color-white);
      border: none;
      border-radius: $radius-md;
      font-size: var(--text-base);
      font-weight: var(--font-medium, 500);
      text-decoration: none;
      transition: all $transition-normal;
      cursor: pointer;
      box-shadow: 0 4px 12px rgba(139, 92, 246, 0.3);
      position: relative;
      overflow: hidden;

      // Hover effect with transform
      &:hover {
        background: linear-gradient(
          135deg,
          var(--interactive-primary-hover),
          var(--color-primary-800)
        );
        transform: translateY(-2px);
        box-shadow: 0 6px 16px rgba(139, 92, 246, 0.4);
      }

      // Focus states for accessibility
      &:focus {
        outline: var(--focus-outline);
        outline-offset: var(--focus-ring-offset);
        box-shadow: var(--focus-ring);
      }

      &:focus-visible {
        outline: var(--focus-enhanced-outline-dark);
        box-shadow: var(--focus-enhanced-shadow);
      }

      // Active state
      &:active {
        transform: translateY(0);
        background: linear-gradient(
          135deg,
          var(--interactive-primary-active),
          var(--color-primary-900)
        );
        box-shadow: 0 2px 8px rgba(139, 92, 246, 0.3);
      }

      // Ripple effect for modern feel
      &::before {
        content: "";
        position: absolute;
        top: 50%;
        left: 50%;
        width: 0;
        height: 0;
        border-radius: $radius-full;
        background: rgba(255, 255, 255, 0.3);
        transform: translate(-50%, -50%);
        transition:
          width 0.6s,
          height 0.6s;
      }

      &:active::before {
        width: 300px;
        height: 300px;
      }
    }
  }

  // Spinner animation with smooth rotation
  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  // Responsive design for mobile devices
  @media (max-width: $breakpoint-mobile) {
    .email-verification {
      padding: $spacing-lg;
      min-height: 40vh;
      margin: $spacing-md;
      border-radius: $radius-md;

      &__icon {
        width: $icon-size-xl;
        height: $icon-size-xl;
      }

      &__svg {
        width: $icon-size-lg;
        height: $icon-size-lg;
      }

      &__button {
        padding: $spacing-sm $spacing-lg;
        font-size: var(--text-sm);
        min-height: 2.5rem;
      }
    }
  }

  // Small mobile devices
  @media (max-width: $breakpoint-small-mobile) {
    .email-verification {
      padding: $spacing-md;
      min-height: 35vh;
      margin: $spacing-sm;
      border-radius: $radius-sm;

      &__icon {
        width: $icon-size-lg;
        height: $icon-size-lg;
      }

      &__svg {
        width: $spacing-xl;
        height: $spacing-xl;
      }

      &__button {
        padding: $spacing-xs $spacing-md;
        font-size: var(--text-xs);
        min-height: 2.25rem;
        width: 100%;
        max-width: 12rem;
      }
    }
  }

  // Reduced motion support for accessibility
  @media (prefers-reduced-motion: reduce) {
    .email-verification {
      &__state,
      &__button,
      &__icon {
        transition: none;
      }

      &__spinner {
        animation: none;
        border-top-color: var(--interactive-primary);
      }

      &__button {
        &:hover {
          transform: none;
        }

        &::before {
          display: none;
        }
      }

      &__icon:hover {
        transform: none;
      }
    }
  }

  // High contrast mode support
  @media (prefers-contrast: high) {
    .email-verification {
      border: 2px solid var(--border-primary);

      &__icon {
        &--success {
          border: 3px solid var(--text-success-aaa);
          background: var(--bg-success-aaa);
        }

        &--error {
          border: 3px solid var(--text-error-aaa);
          background: var(--bg-error-aaa);
        }
      }

      &__button {
        border: 2px solid var(--color-white);
        background: var(--interactive-primary);

        &:focus {
          outline-width: 3px;
        }
      }
    }
  }

  // Touch device optimization
  @media (hover: none) and (pointer: coarse) {
    .email-verification {
      &__button {
        min-height: $min-touch-size;
        padding: $spacing-lg $spacing-xl;
        font-size: var(--text-lg);

        &:hover {
          transform: none;
        }
      }

      &__icon:hover {
        transform: none;
      }
    }
  }

  // Dark mode enhancements
  @media (prefers-color-scheme: dark) {
    .email-verification {
      background: var(--bg-tertiary);
      border-color: var(--border-secondary);
    }
  }

  // Print styles
  @media print {
    .email-verification {
      box-shadow: none;
      border: 1px solid var(--border-primary);
      background: transparent;

      &__button {
        background: var(--interactive-primary);
        color: var(--color-white);
        border: 1px solid var(--interactive-primary);
      }
    }
  }
</style>

<script>
  /**
   * Email Verification Component - Modern ES6+ Implementation
   *
   * Handles email verification flow with enhanced error handling,
   * accessibility features, and modern JavaScript patterns.
   */

  // Type definitions for better type safety
  type VerificationState = "loading" | "success" | "error";
  type VerificationResult = { success: boolean; message?: string };

  // Constants
  const VERIFICATION_TIMEOUT = 30000; // 30 seconds
  const STATES: VerificationState[] = ["loading", "success", "error"];

  /**
   * Display verification state with enhanced accessibility
   * @param state - The state to display
   */
  const showState = (state: VerificationState): void => {
    // Hide all states first with proper ARIA management
    STATES.forEach((stateName) => {
      const element = document.getElementById(`${stateName}State`);
      if (element) {
        element.classList.add("email-verification__state--hidden");
        element.setAttribute("aria-hidden", "true");
      }
    });

    // Show the requested state
    const targetElement = document.getElementById(`${state}State`);
    if (targetElement) {
      targetElement.classList.remove("email-verification__state--hidden");
      targetElement.setAttribute("aria-hidden", "false");

      // Set focus to title for screen readers
      const title = targetElement.querySelector("h1");
      if (title && typeof title.focus === "function") {
        title.focus();
      }

      // Announce state change to screen readers
      const announcement = document.createElement("div");
      announcement.setAttribute("aria-live", "assertive");
      announcement.setAttribute("aria-label", `Verification ${state}`);
      announcement.className = "sr-only";
      document.body.appendChild(announcement);

      setTimeout(() => {
        document.body.removeChild(announcement);
      }, 1000);
    }
  };

  /**
   * Extract language from URL path
   * @returns The language code or 'en' as default
   */
  const getLanguageFromUrl = (): string => {
    const path = window.location.pathname;
    const langMatch = path.match(/^\/([a-z]{2})\//);
    return langMatch ? langMatch[1] : "en";
  };

  /**
   * Create timeout promise for verification
   * @returns Promise that rejects after timeout
   */
  const createTimeoutPromise = (): Promise<never> =>
    new Promise((_resolve, reject) => {
      setTimeout(() => reject(new Error("Verification timeout")), VERIFICATION_TIMEOUT);
    });

  /**
   * Verify email token with enhanced error handling
   * @param token - The verification token
   * @returns Promise with verification result
   */
  const verifyEmailToken = async (token: string): Promise<VerificationResult> => {
    const lang = getLanguageFromUrl();

    const response = await fetch(`/${lang}/api/auth/verify-email`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      body: JSON.stringify({ token }),
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    return await response.json();
  };

  /**
   * Main verification process with timeout and error handling
   */
  const performVerification = async (): Promise<void> => {
    const container = document.getElementById("verification-container");
    const token = container?.dataset.verificationToken;

    if (!token) {
      console.error("No verification token found");
      showState("error");
      return;
    }

    try {
      // Race between verification and timeout
      const result = (await Promise.race([
        verifyEmailToken(token),
        createTimeoutPromise(),
      ])) as VerificationResult;

      if (result.success) {
        showState("success");
      } else {
        showState("error");
      }
    } catch (error) {
      console.error("Email verification error:", error);
      showState("error");
    }
  };

  /**
   * Initialize email verification when DOM is ready
   */
  const initializeEmailVerification = (): void => {
    // Add loading state management
    const loadingState = document.getElementById("loadingState");
    if (loadingState) {
      loadingState.setAttribute("aria-busy", "true");
    }

    // Start verification process
    performVerification().finally(() => {
      if (loadingState) {
        loadingState.setAttribute("aria-busy", "false");
      }
    });
  };

  // Modern DOM ready check with fallback
  const isDOMReady = (): boolean => (document.readyState === "loading" ? false : true);

  // Initialize when DOM is ready
  if (isDOMReady()) {
    initializeEmailVerification();
  } else {
    document.addEventListener("DOMContentLoaded", initializeEmailVerification, { once: true });
  }

  // Export for potential external use
  (window as any).emailVerification = {
    showState,
    performVerification,
    initializeEmailVerification,
  };
</script>
