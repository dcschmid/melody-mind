---
/**
 * EmailVerification - Email verification flow with loading, success, error states
 *
 * Features:
 * - Three verification states with smooth transitions
 * - WCAG AAA compliant with enhanced accessibility
 * - Full responsive design
 * - Timeout handling with robust error management
 * - Internationalization support
 */

import { getLangFromUrl, useTranslations } from "@utils/i18n";
import { Icon } from "astro-icon/components";
import Headline from "@components/Headline.astro";
import Paragraph from "@components/Paragraph.astro";

export interface Props {
  token: string;
}

const { token } = Astro.props;
const lang = String(getLangFromUrl(Astro.url));
const t = useTranslations(String(lang));
---

<div
  class="email-verification"
  aria-live="polite"
  id="verification-container"
  data-verification-token={token}
  {lang}
>
  <a href="#verification-container" class="sr-only-focusable sr-only">
    {t("auth.skip_to_verification")}
  </a>

  <div
    id="loadingState"
    class="email-verification__state"
    role="status"
    aria-label={t("auth.email_verification.loading_label")}
  >
    <div class="email-verification__spinner" aria-hidden="true" role="presentation"></div>
    <Paragraph
      id="loading-message"
      aria-live="polite"
      textSize="lg"
      align="center"
      description={t("auth.email_verification.loading_label")}
    />
  </div>

  <div
    id="successState"
    class="email-verification__state email-verification__state--hidden"
    role="status"
    aria-labelledby="verification-heading"
  >
    <div
      class="email-verification__icon email-verification__icon--success"
      role="img"
      aria-label={t("auth.email_verification.success_icon_label")}
    >
      <Icon name="check" class="email-verification__svg" aria-hidden="true" />
    </div>
    <Headline
      id="verification-heading"
      level="h1"
      size="2xl"
      variant="primary"
      textAlign="center"
      focusable={true}
      title={t("auth.email_verification.title")}
    />
    <Paragraph
      id="success-message"
      aria-live="polite"
      textSize="lg"
      align="center"
      description={t("auth.email_verification.message")}
    />
    <a
      href={`/${String(lang)}/auth/login`}
      class="email-verification__button"
      role="button"
      aria-describedby="success-message"
    >
      {t("auth.email_verification.login")}
    </a>
  </div>

  <div
    id="errorState"
    class="email-verification__state email-verification__state--hidden"
    role="alert"
    aria-labelledby="error-heading"
  >
    <div
      class="email-verification__icon email-verification__icon--error"
      role="img"
      aria-label={t("auth.email_verification.error_icon_label")}
    >
      <Icon name="exclamation-triangle" class="email-verification__svg" aria-hidden="true" />
    </div>
    <Headline
      id="error-heading"
      level="h1"
      size="2xl"
      variant="primary"
      textAlign="center"
      focusable={true}
      aria-live="assertive"
      title={t("auth.email_verification.title")}
    />
    <Paragraph
      id="error-message"
      aria-live="assertive"
      textSize="lg"
      align="center"
      description={t("auth.email_verification.error")}
    />
    <a
      href={`/${String(lang)}/auth/login`}
      class="email-verification__button"
      role="button"
      aria-describedby="error-message"
    >
      {t("auth.email_verification.login")}
    </a>
  </div>
</div>

<style lang="scss">
  .email-verification {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 50vh;
    max-width: var(--container-sm);
    margin: 0 auto;
    padding: var(--space-lg);
    background: var(--bg-secondary);
    border: var(--border-width-thin) solid var(--border-primary);
    border-radius: var(--radius-lg);
    box-shadow: var(--shadow-lg);
    text-align: center;
    transition: box-shadow var(--transition-normal);

    @media (min-width: 30em) {
      padding: var(--space-2xl);
    }

    &:hover {
      box-shadow: var(--shadow-xl);
    }

    &__state {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: var(--space-lg);
      width: var(--width-full);
      opacity: 1;
      transform: translateY(0);
      transition:
        opacity var(--transition-normal),
        transform var(--transition-normal),
        visibility var(--transition-normal);
      visibility: visible;

      @media (min-width: 30em) {
        gap: var(--space-2xl);
      }

      &--hidden {
        display: none;
        opacity: 0;
        transform: translateY(var(--space-md));
        visibility: hidden;
      }
    }

    &__icon {
      display: flex;
      align-items: center;
      justify-content: center;
      width: var(--icon-size-xl);
      height: var(--icon-size-xl);
      border-radius: var(--radius-full);
      margin-bottom: var(--space-md);
      transition: transform var(--transition-normal);

      @media (min-width: 30em) {
        width: var(--icon-size-2xl);
        height: var(--icon-size-2xl);
        margin-bottom: var(--space-lg);
      }

      &:hover {
        transform: scale(1.05);
      }

      &--success {
        background: linear-gradient(135deg, var(--color-success-500), var(--color-success-700));
        color: var(--btn-success-text);
        box-shadow: var(--shadow-success);
      }

      &--error {
        background: linear-gradient(135deg, var(--color-error-500), var(--color-error-700));
        color: var(--btn-error-text);
        box-shadow: var(--shadow-error);
      }
    }

    &__svg {
      width: var(--icon-size-lg);
      height: var(--icon-size-lg);
      filter: drop-shadow(var(--shadow-text));

      @media (min-width: 30em) {
        width: var(--icon-size-xl);
        height: var(--icon-size-xl);
      }
    }

    &__spinner {
      width: var(--icon-size-lg);
      height: var(--icon-size-lg);
      border: var(--border-width-thick) solid var(--border-primary);
      border-top: var(--border-width-thick) solid var(--interactive-primary);
      border-radius: var(--radius-full);
      box-shadow: var(--shadow-primary);
      animation: email-spinner-rotate 1s linear infinite;

      @media (min-width: 30em) {
        width: var(--icon-size-xl);
        height: var(--icon-size-xl);
      }
    }

    &__button {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      min-height: var(--touch-target-enhanced);
      min-width: var(--touch-target-enhanced);
      padding: var(--space-md) var(--space-xl);
      background: var(--interactive-primary);
      color: var(--btn-primary-text);
      border: none;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-md);
      font-size: var(--text-base);
      font-weight: var(--font-medium);
      line-height: var(--leading-normal);
      letter-spacing: var(--letter-spacing-base);
      text-decoration: none;
      cursor: pointer;
      transition:
        background-color var(--transition-normal),
        box-shadow var(--transition-normal),
        transform var(--transition-normal);

      @media (min-width: 30em) {
        padding: var(--space-lg) var(--space-2xl);
        font-size: var(--text-lg);
      }

      &:hover:not(:disabled) {
        background: var(--interactive-primary-hover);
        transform: translateY(-2px);
        box-shadow: var(--shadow-lg);
      }

      &:focus-visible {
        outline: var(--focus-outline);
        outline-offset: var(--focus-ring-offset);
        box-shadow: var(--focus-ring), var(--shadow-lg);
      }

      &:active:not(:disabled) {
        transform: translateY(0);
        background: var(--interactive-primary-hover);
        box-shadow: var(--shadow-md);
      }
    }
  }

  @keyframes email-spinner-rotate {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  @media (max-width: 39.9375em) {
    .email-verification {
      min-height: 40vh;
      margin: var(--space-md);
      padding: var(--space-lg);
      border-radius: var(--radius-md);

      &__button {
        min-height: calc(var(--touch-target-enhanced) - var(--space-xs));
        font-size: var(--text-sm);
      }
    }
  }

  @media (max-width: 23.4375em) {
    .email-verification {
      min-height: 35vh;
      margin: var(--space-sm);
      padding: var(--space-md);
      border-radius: var(--radius-sm);

      &__button {
        min-height: var(--touch-target-enhanced);
        font-size: var(--text-xs);
        width: var(--width-full);
        max-width: 12rem;
      }
    }
  }

  @media (prefers-contrast: high) {
    .email-verification {
      border: var(--border-width-thick) solid var(--border-primary);

      &__icon {
        &--success {
          border: var(--border-width-thick) solid var(--color-success-700);
          background: var(--color-success-500);
        }

        &--error {
          border: var(--border-width-thick) solid var(--color-error-700);
          background: var(--color-error-500);
        }
      }

      &__button {
        border: var(--border-width-thick) solid var(--btn-primary-text);
        background: var(--interactive-primary);

        &:focus-visible {
          outline-width: var(--border-width-thick);
        }
      }
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .email-verification {
      &__state,
      &__button,
      &__icon,
      &__spinner {
        transition: var(--transition-instant);
        animation: none;
      }

      &__spinner {
        border-top-color: var(--interactive-primary);
      }

      &__button {
        &:hover {
          transform: none;
        }
      }

      &__icon:hover {
        transform: none;
      }
    }
  }

  @media (hover: none) and (pointer: coarse) {
    .email-verification {
      &__button {
        min-height: calc(var(--touch-target-enhanced) + var(--space-sm));
        padding: var(--space-lg) var(--space-xl);
        font-size: var(--text-lg);

        &:hover {
          transform: none;
          box-shadow: var(--shadow-md);
          background: var(--interactive-primary);
        }
      }

      &__icon:hover {
        transform: none;
      }
    }
  }

  @media (prefers-color-scheme: dark) {
    .email-verification {
      background: var(--bg-tertiary);
      border-color: var(--border-secondary);
    }
  }

  @media print {
    .email-verification {
      box-shadow: none;
      border: var(--border-width-thin) solid var(--color-black);
      background: var(--color-white);
      color: var(--color-black);

      &__button {
        background: var(--color-white) !important;
        color: var(--color-black) !important;
        border: var(--border-width-thin) solid var(--color-black) !important;
        box-shadow: none !important;
      }

      &__spinner {
        display: none !important;
      }
    }
  }

  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  .sr-only-focusable:focus {
    position: static;
    width: auto;
    height: auto;
    margin: 0;
    overflow: visible;
    clip: auto;
    white-space: normal;
  }
</style>

<script>
  const VERIFICATION_TIMEOUT = 30000;

  const showState = (state: string) => {
    const states = ["loading", "success", "error"];

    states.forEach((stateName) => {
      const element = document.getElementById(`${stateName}State`);
      if (element) {
        element.classList.add("email-verification__state--hidden");
        element.setAttribute("aria-hidden", "true");
      }
    });

    const targetElement = document.getElementById(`${state}State`);
    if (targetElement) {
      targetElement.classList.remove("email-verification__state--hidden");
      targetElement.setAttribute("aria-hidden", "false");

      const title = targetElement.querySelector("h1");
      if (title && typeof title.focus === "function") {
        title.focus();
      }
    }
  };

  const getLanguageFromUrl = () => {
    const path = window.location.pathname;
    const langMatch = path.match(/^\/([a-z]{2})\//);
    return langMatch ? langMatch[1] : "en";
  };

  const verifyEmailToken = async (token: string) => {
    const lang = getLanguageFromUrl();

    const response = await fetch(`/${lang}/api/auth/verify-email`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      body: JSON.stringify({ token }),
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    return await response.json();
  };

  const performVerification = async () => {
    const container = document.getElementById("verification-container");
    const token = container?.dataset.verificationToken;

    if (!token) {
      console.error("No verification token found");
      showState("error");
      return;
    }

    try {
      const timeoutPromise = new Promise((_resolve, reject) => {
        setTimeout(() => reject(new Error("Verification timeout")), VERIFICATION_TIMEOUT);
      });

      const result = await Promise.race([verifyEmailToken(token), timeoutPromise]);

      if (result.success) {
        showState("success");
      } else {
        showState("error");
      }
    } catch (error) {
      console.error("Email verification error:", error);
      showState("error");
    }
  };

  const initializeEmailVerification = () => {
    const loadingState = document.getElementById("loadingState");
    if (loadingState) {
      loadingState.setAttribute("aria-busy", "true");
    }

    performVerification()
      .finally(() => {
        if (loadingState) {
          loadingState.setAttribute("aria-busy", "false");
        }
      })
      .catch((error) => {
        console.error("Failed to initialize email verification:", error);
      });
  };

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeEmailVerification, { once: true });
  } else {
    initializeEmailVerification();
  }
</script>
