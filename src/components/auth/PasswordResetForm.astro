---
/**
 * PasswordResetForm Component for MelodyMind
 *
 * This component provides a form for resetting passwords with two distinct modes:
 * 1. Request mode: Allows users to request a password reset by entering their email address
 * 2. Confirmation mode: Allows users to set a new password using a valid reset token
 *
 * Features:
 * - Client-side form validation with detailed error feedback
 * - Password strength meter with real-time validation
 * - WCAG AAA accessibility compliance
 * - Multi-language support
 * - Password visibility toggle
 * - Password requirements checklist with visual indicators
 * - Responsive design using vanilla CSS
 *
 * Security features:
 * - Strong password enforcement
 * - Common password detection
 * - Protection against sequential character patterns
 * - Protection against repeated characters
 * - Password strength calculation
 *
 * @component
 * @example
 * ```astro
 * <PasswordResetForm token="reset-token" isConfirmReset={true} />
 * ```
 */

// 1. Imports
import { getLangFromUrl, useTranslations } from "../../utils/i18n";
import Headline from "../Headline.astro";
import { Icon } from "astro-icon/components";

// 2. Props definition
interface Props {
  /** Token for password reset, if any */
  token?: string | null;
  /** Whether we're in confirm reset mode or request mode */
  isConfirmReset?: boolean;
}

// 3. Props processing
const { token = null, isConfirmReset = false } = Astro.props;

// 4. Reactive variables and helper functions
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(String(lang));  // Übersetzungen für den JavaScript-Teil
  const translations = {
    "auth.form.email_required": t("auth.form.email_required"),
    "auth.form.email_invalid": t("auth.form.email_invalid"),
    "auth.form.email_invalid_format": t("auth.form.email_invalid_format") || "Please enter a valid email address in the format: user@example.com",
    "auth.form.loading_text": t("auth.form.loading_text"),
    "auth.form.send_reset_link": t("auth.form.send_reset_link"),
    "auth.form.password_required": t("auth.form.password_required"),
    "auth.form.password_requirements": t("auth.form.password_requirements"),
    "auth.form.password_confirm_required": t("auth.form.password_confirm_required"),
    "auth.form.passwords_not_match": t("auth.form.passwords_not_match"),
    "auth.password_reset.success_message": t("auth.password_reset.success_message"),
    "auth.password_reset.error_message": t("auth.password_reset.error_message"),
    "auth.password_reset.complete_success": t("auth.password_reset.complete_success"),
    "auth.password_reset.complete_error": t("auth.password_reset.complete_error"),
    
    // Enhanced error messages for better accessibility
    "auth.form.password_length_error": t("auth.form.password_length_error") || "Password must be at least 8 characters long",
    "auth.form.password_uppercase_error": t("auth.form.password_uppercase_error") || "Password must contain at least one uppercase letter (A-Z)",
    "auth.form.password_lowercase_error": t("auth.form.password_lowercase_error") || "Password must contain at least one lowercase letter (a-z)",
    "auth.form.password_number_error": t("auth.form.password_number_error") || "Password must contain at least one number (0-9)",
    "auth.form.password_special_error": t("auth.form.password_special_error") || "Password must contain at least one special character (!@#$%^&*)",
    "auth.form.password_common_error": t("auth.form.password_common_error") || "Please choose a less common password",
    "auth.form.password_repeats_error": t("auth.form.password_repeats_error") || "Password cannot contain more than 2 consecutive identical characters",
    "auth.form.password_sequences_error": t("auth.form.password_sequences_error") || "Password cannot contain common sequences like '123' or 'abc'",
    
    // Session timeout translations
    "auth.session.timeout.title": t("auth.session.timeout.title"),
    "auth.session.timeout.message": t("auth.session.timeout.message"),
    "auth.session.timeout.extend": t("auth.session.timeout.extend"),
    "auth.session.timeout.close": t("auth.session.timeout.close"),
    
    // Accessibility translations
    "auth.accessibility.requirement.met": t("auth.accessibility.requirement.met"),
    "auth.accessibility.requirement.unmet": t("auth.accessibility.requirement.unmet"),
    "auth.accessibility.password.visible": t("auth.accessibility.password.visible"),
    "auth.accessibility.password.hidden": t("auth.accessibility.password.hidden"),
    "auth.accessibility.requirements.expanded": t("auth.accessibility.requirements.expanded"),
    "auth.accessibility.requirements.collapsed": t("auth.accessibility.requirements.collapsed"),
    "auth.accessibility.focus_trapped": t("auth.accessibility.focus_trapped") || "Focus is now trapped within this dialog. Use Tab to navigate and Escape to close.",
    
    // Password strength translations
    "auth.password.strength.weak": t("auth.password.strength.weak"),
    "auth.password.strength.medium": t("auth.password.strength.medium"),
    "auth.password.strength.strong": t("auth.password.strength.strong"),
    "auth.password.strength.very_strong": t("auth.password.strength.very_strong"),
    
    // Form instructions and help
    "auth.form.instructions.title": t("auth.form.instructions.title") || "How to complete this form",
    "auth.form.instructions.request.step1": t("auth.form.instructions.request.step1") || "Enter your email address in the field below",
    "auth.form.instructions.request.step2": t("auth.form.instructions.request.step2") || "Click 'Send Reset Link' to receive password reset instructions",
    "auth.form.instructions.request.step3": t("auth.form.instructions.request.step3") || "Check your email for the reset link and follow the instructions",
    "auth.form.instructions.confirm.step1": t("auth.form.instructions.confirm.step1") || "Create a strong password that meets all requirements",
    "auth.form.instructions.confirm.step2": t("auth.form.instructions.confirm.step2") || "Confirm your password by typing it again",
    "auth.form.instructions.confirm.step3": t("auth.form.instructions.confirm.step3") || "Click 'Reset Password' to complete the process",
    "auth.form.help.password_suggestions": t("auth.form.help.password_suggestions") || "Try using a combination of words, numbers, and symbols. Avoid common passwords like 'password123'.",
  };
---

<div class="password-reset-form">
  {
    !isConfirmReset ? (
      <>
        <!-- Form Instructions for better accessibility -->
        <div class="password-reset-form__instructions" id="formInstructions">
          <Headline level="h2" className="password-reset-form__instructions-title" title={t("auth.form.instructions.title")} />
          <ol class="password-reset-form__instructions-list">
            <li>{t("auth.form.instructions.request.step1")}</li>
            <li>{t("auth.form.instructions.request.step2")}</li>
            <li>{t("auth.form.instructions.request.step3")}</li>
          </ol>
        </div>

        <Headline level="h1" className="password-reset-form__title" title={t("auth.password_reset.title")} />

        <div
          id="formError"
          class="password-reset-form__message password-reset-form__message--error password-reset-form__message--hidden"
          role="alert"
          aria-live="assertive"
        />
        <div
          id="formSuccess"
          class="password-reset-form__message password-reset-form__message--success password-reset-form__message--hidden"
          role="alert"
          aria-live="assertive"
        />

        <form
          id="passwordResetForm"
          class="password-reset-form__form"
          novalidate
          aria-labelledby="passwordResetFormHeading"
          aria-describedby="formInstructions"
        >
          <Headline level="h2" id="passwordResetFormHeading" className="sr-only" title={t("auth.password_reset.title")} />

          <div class="password-reset-form__field">
            <label for="email" class="password-reset-form__label">
              {t("auth.password_reset.email")}
              <span class="password-reset-form__required" aria-hidden="true">
                *
              </span>
              <span class="sr-only">{t("auth.form.required")}</span>
            </label>
            <div class="password-reset-form__input-wrapper">
              <input
                type="email"
                id="email"
                name="email"
                autocomplete="email"
                required
                class="password-reset-form__input"
                placeholder={t("auth.password_reset.email.placeholder")}
                aria-required="true"
              />
              <div
                id="emailError"
                class="password-reset-form__error password-reset-form__error--hidden"
              />
            </div>
          </div>

          <div class="password-reset-form__field">
            <button type="submit" class="password-reset-form__submit">
              <span id="submitText">{t("auth.password_reset.submit")}</span>
              <span
                id="loadingSpinner"
                class="password-reset-form__spinner password-reset-form__spinner--hidden"
              >
                <Icon 
                  name="refresh" 
                  class="password-reset-form__spinner-icon" 
                  aria-hidden="true" 
                />
              </span>
            </button>
          </div>
        </form>
      </>
    ) : (
      <>
        <!-- Form Instructions for better accessibility -->
        <div class="password-reset-form__instructions" id="confirmFormInstructions">
          <Headline level="h2" className="password-reset-form__instructions-title" title={t("auth.form.instructions.title")} />
          <ol class="password-reset-form__instructions-list">
            <li>{t("auth.form.instructions.confirm.step1")}</li>
            <li>{t("auth.form.instructions.confirm.step2")}</li>
            <li>{t("auth.form.instructions.confirm.step3")}</li>
          </ol>
        </div>

        <Headline level="h1" className="password-reset-form__title" title={t("auth.password_reset_confirm.title")} />

        <div
          id="formError"
          class="password-reset-form__message password-reset-form__message--error password-reset-form__message--hidden"
          role="alert"
          aria-live="assertive"
        />
        <div
          id="formSuccess"
          class="password-reset-form__message password-reset-form__message--success password-reset-form__message--hidden"
          role="alert"
          aria-live="assertive"
        />

        <form
          id="passwordResetConfirmForm"
          class="password-reset-form__form"
          novalidate
          aria-labelledby="passwordResetConfirmFormHeading"
          aria-describedby="confirmFormInstructions"
        >
          <Headline level="h2" id="passwordResetConfirmFormHeading" className="sr-only" title={t("auth.password_reset_confirm.title")} />

          <input type="hidden" id="token" name="token" value={token} />

          <!-- Fieldset for password fields grouping (Issue #1) -->
          <fieldset class="password-reset-form__fieldset">
            <legend class="password-reset-form__fieldset-legend">
              {t("auth.password_reset_confirm.password_section")}
            </legend>
            
            <div class="password-reset-form__field">
              <label for="password" class="password-reset-form__label">
                {t("auth.password_reset_confirm.password")}
                <span class="password-reset-form__required" aria-hidden="true">
                  *
                </span>
                <span class="sr-only">{t("auth.form.required")}</span>
              </label>
              <div class="password-reset-form__input-wrapper">
                <input
                  type="password"
                  id="password"
                  name="password"
                  autocomplete="new-password"
                  required
                  class="password-reset-form__input password-reset-form__input--with-toggle"
                  placeholder={t("auth.password_reset_confirm.password.placeholder")}
                  aria-required="true"
                  aria-describedby="passwordRequirements passwordError passwordStrengthDescription"
                />
                <button
                  type="button"
                  id="togglePassword"
                  class="password-reset-form__toggle"
                  aria-label={t("auth.accessibility.password_toggle")}
                  aria-pressed="false"
                  aria-describedby="passwordVisibilityStatus"
                >
                  <span class="show-password">
                    <Icon 
                      name="eye" 
                      class="password-reset-form__toggle-icon" 
                      aria-hidden="true" 
                    />
                  </span>
                  <span class="hide-password password-reset-form__toggle-hidden">
                    <Icon 
                      name="eye-off" 
                      class="password-reset-form__toggle-icon" 
                      aria-hidden="true" 
                    />
                  </span>
                </button>
                <!-- Hidden status announcements for screen readers -->
                <div id="passwordVisibilityStatus" class="sr-only" aria-live="polite" aria-atomic="true"></div>
                <div
                  id="passwordError"
                  class="password-reset-form__error password-reset-form__error--hidden"
                />
              </div>
            </div>

            <div class="password-reset-form__field">
              <label for="passwordConfirm" class="password-reset-form__label">
                {t("auth.password_reset_confirm.password_confirm")}
                <span class="password-reset-form__required" aria-hidden="true">
                  *
                </span>
                <span class="sr-only">{t("auth.form.required")}</span>
              </label>
              <div class="password-reset-form__input-wrapper">
                <input
                  type="password"
                  id="passwordConfirm"
                  name="passwordConfirm"
                  autocomplete="new-password"
                  required
                  class="password-reset-form__input password-reset-form__input--with-toggle"
                  placeholder={t("auth.password_reset_confirm.password_confirm.placeholder")}
                  aria-required="true"
                  aria-describedby="passwordConfirmError"
                />
                <button
                  type="button"
                  id="togglePasswordConfirm"
                  class="password-reset-form__toggle"
                  aria-label={t("auth.accessibility.password_toggle")}
                  aria-pressed="false"
                  aria-describedby="passwordConfirmVisibilityStatus"
                >
                  <span class="show-password">
                    <Icon 
                      name="eye" 
                      class="password-reset-form__toggle-icon" 
                      aria-hidden="true" 
                    />
                  </span>
                  <span class="hide-password password-reset-form__toggle-hidden">
                    <Icon 
                      name="eye-off" 
                      class="password-reset-form__toggle-icon" 
                      aria-hidden="true" 
                    />
                  </span>
                </button>
                <!-- Hidden status announcements for screen readers -->
                <div id="passwordConfirmVisibilityStatus" class="sr-only" aria-live="polite" aria-atomic="true"></div>
                <div
                  id="passwordConfirmError"
                  class="password-reset-form__error password-reset-form__error--hidden"
                />
              </div>
            </div>
          </fieldset>

          <div class="password-reset-form__requirements-section">
            <button
              type="button"
              id="toggleRequirements"
              class="password-reset-form__requirements-toggle"
              aria-expanded="false"
              aria-controls="passwordRequirements"
              aria-label={t("auth.accessibility.password_requirements")}
            >
              <Icon 
                name="information-circle" 
                class="password-reset-form__requirements-icon" 
                aria-hidden="true" 
              />
              {t("auth.password.requirements")}
              <!-- Screen reader status announcement for panel state -->
              <span id="requirementsPanelStatus" class="sr-only" aria-live="polite"></span>
            </button>

            <!-- Contextual Help Button -->
            <button 
              type="button" 
              id="passwordHelpButton"
              class="password-reset-form__help-button"
              aria-describedby="passwordHelpTooltip"
              aria-expanded="false"
              aria-label={t("auth.form.help.password_button") || "Get help with creating a strong password"}
            >
              <Icon 
                name="question-mark-circle" 
                class="password-reset-form__help-icon" 
                aria-hidden="true" 
              />
              <span class="sr-only">Help</span>
            </button>

            <!-- Help Tooltip -->
            <div 
              id="passwordHelpTooltip" 
              role="tooltip" 
              class="password-reset-form__help-tooltip password-reset-form__help-tooltip--hidden"
              aria-hidden="true"
            >
              <div class="password-reset-form__help-content">
                <Headline level="h4" className="password-reset-form__help-title" title={t("auth.form.help.password_title") || "Password Creation Tips"} />
                <p class="password-reset-form__help-text">{t("auth.form.help.password_suggestions")}</p>
                <ul class="password-reset-form__help-list">
                  <li>{t("auth.form.help.tip1") || "Use a mix of uppercase and lowercase letters"}</li>
                  <li>{t("auth.form.help.tip2") || "Include numbers and special characters"}</li>
                  <li>{t("auth.form.help.tip3") || "Avoid common words and sequences"}</li>
                  <li>{t("auth.form.help.tip4") || "Consider using a passphrase"}</li>
                </ul>
              </div>
            </div>

            <div
              id="passwordRequirements"
              class="password-reset-form__requirements password-reset-form__requirements--hidden"
              aria-hidden="true"
              role="region"
              aria-labelledby="passwordRequirementsTitle"
            >
              <Headline level="h3" id="passwordRequirementsTitle" className="password-reset-form__requirements-title" title={t("auth.password.requirements")} />
              
              <!-- Password strength description for screen readers -->
              <div id="passwordStrengthDescription" class="sr-only" aria-live="polite" aria-atomic="true">
                {t("auth.password.strength_description")}
              </div>
              
              <ul class="password-reset-form__requirements-list">
                <li
                  id="req-length"
                  class="password-reset-form__requirement password-reset-form__requirement--invalid"
                  aria-describedby="req-length-desc"
                >
                  <span class="password-reset-form__requirement-icon" aria-hidden="true">✗</span>
                  <span class="password-reset-form__requirement-text">{t("auth.password.min_length")}</span>
                  <span id="req-length-desc" class="sr-only">Requirement not met</span>
                </li>
                <li
                  id="req-uppercase"
                  class="password-reset-form__requirement password-reset-form__requirement--invalid"
                  aria-describedby="req-uppercase-desc"
                >
                  <span class="password-reset-form__requirement-icon" aria-hidden="true">✗</span>
                  <span class="password-reset-form__requirement-text">{t("auth.password.uppercase")}</span>
                  <span id="req-uppercase-desc" class="sr-only">Requirement not met</span>
                </li>
                <li
                  id="req-lowercase"
                  class="password-reset-form__requirement password-reset-form__requirement--invalid"
                  aria-describedby="req-lowercase-desc"
                >
                  <span class="password-reset-form__requirement-icon" aria-hidden="true">✗</span>
                  <span class="password-reset-form__requirement-text">{t("auth.password.lowercase")}</span>
                  <span id="req-lowercase-desc" class="sr-only">Requirement not met</span>
                </li>
                <li
                  id="req-number"
                  class="password-reset-form__requirement password-reset-form__requirement--invalid"
                  aria-describedby="req-number-desc"
                >
                  <span class="password-reset-form__requirement-icon" aria-hidden="true">✗</span>
                  <span class="password-reset-form__requirement-text">{t("auth.password.number")}</span>
                  <span id="req-number-desc" class="sr-only">Requirement not met</span>
                </li>
                <li
                  id="req-special"
                  class="password-reset-form__requirement password-reset-form__requirement--invalid"
                  aria-describedby="req-special-desc"
                >
                  <span class="password-reset-form__requirement-icon" aria-hidden="true">✗</span>
                  <span class="password-reset-form__requirement-text">{t("auth.password.special")}</span>
                  <span id="req-special-desc" class="sr-only">Requirement not met</span>
                </li>
                <li
                  id="req-common"
                  class="password-reset-form__requirement password-reset-form__requirement--invalid"
                  aria-describedby="req-common-desc"
                >
                  <span class="password-reset-form__requirement-icon" aria-hidden="true">✗</span>
                  <span class="password-reset-form__requirement-text">{t("auth.password.no_common")}</span>
                  <span id="req-common-desc" class="sr-only">Requirement not met</span>
                </li>
                <li
                  id="req-repeats"
                  class="password-reset-form__requirement password-reset-form__requirement--invalid"
                  aria-describedby="req-repeats-desc"
                >
                  <span class="password-reset-form__requirement-icon" aria-hidden="true">✗</span>
                  <span class="password-reset-form__requirement-text">{t("auth.password.no_repeats")}</span>
                  <span id="req-repeats-desc" class="sr-only">Requirement not met</span>
                </li>
                <li
                  id="req-sequences"
                  class="password-reset-form__requirement password-reset-form__requirement--invalid"
                  aria-describedby="req-sequences-desc"
                >
                  <span class="password-reset-form__requirement-icon" aria-hidden="true">✗</span>
                  <span class="password-reset-form__requirement-text">{t("auth.password.no_sequences")}</span>
                  <span id="req-sequences-desc" class="sr-only">Requirement not met</span>
                </li>
                <li
                  id="req-match"
                  class="password-reset-form__requirement password-reset-form__requirement--invalid"
                  aria-describedby="req-match-desc"
                >
                  <span class="password-reset-form__requirement-icon" aria-hidden="true">✗</span>
                  <span class="password-reset-form__requirement-text">{t("auth.password.match")}</span>
                  <span id="req-match-desc" class="sr-only">Requirement not met</span>
                </li>
              </ul>

              <div class="password-reset-form__strength" role="group" aria-labelledby="strengthLabel">
                <p id="strengthLabel" class="password-reset-form__strength-label">{t("auth.password.strength")}</p>
                <div class="password-reset-form__strength-bar" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0">
                  <div
                    id="passwordStrength"
                    class="password-reset-form__strength-progress password-reset-form__strength-progress--weak"
                    style="width: 0%"
                  />
                </div>
                <p
                  id="strengthText"
                  class="password-reset-form__strength-text password-reset-form__strength-text--weak"
                  aria-live="polite"
                  aria-atomic="true"
                >
                  {t("auth.password.strength.weak")}
                </p>
              </div>
            </div>
          </div>

          <div class="password-reset-form__field">
            <button type="submit" class="password-reset-form__submit">
              <span id="submitText">{t("auth.password_reset_confirm.submit")}</span>
              <span
                id="loadingSpinner"
                class="password-reset-form__spinner password-reset-form__spinner--hidden"
              >
                <Icon 
                  name="refresh" 
                  class="password-reset-form__spinner-icon" 
                  aria-hidden="true" 
                />
              </span>
            </button>
          </div>
        </form>
      </>
    )
  }

  <div class="password-reset-form__footer">
    <a href={`/${String(lang)}/auth/login`} class="password-reset-form__link">
      {t("auth.password_reset.login")}
    </a>
  </div>
</div>

<script is:inline define:vars={{ translations }}>
  /* eslint-disable @typescript-eslint/explicit-function-return-type */
  /**
   * Password Reset Form Client-Side Logic
   * 
   * Optimized inline script following MelodyMind project standards:
   * - TypeScript-style code with type annotations in comments
   * - Inline solution preferred over external files
   * - Performance-optimized validation functions
   * - WCAG AAA accessibility compliance
   * 
   * @fileoverview Handles password reset form interactions and validation
   */

  // Type annotations as comments for inline script compatibility
  /** @typedef {Object} ValidationResult
   * @property {boolean} valid - Whether validation passed
   * @property {string[]} errors - Array of validation errors
   */

  /** @typedef {Object} StrengthInfo
   * @property {number} score - Strength score 0-100
   * @property {string} level - Strength level (weak|medium|strong|very-strong)
   */

  // Cached translations for performance (inline access)

  // Optimized inline validation functions using centralized error keys and patterns
  // These functions mirror the logic from the centralized utilities to maintain DRY principles
  // while working within Astro's client-side script limitations
  function validatePassword(password) {
    const errors = [];
    
    if (password.length < 8) {
      errors.push("auth.password.min_length_error");
    }
    if (!/[A-Z]/.test(password)) {
      errors.push("auth.password.uppercase_error");
    }
    if (!/[a-z]/.test(password)) {
      errors.push("auth.password.lowercase_error");
    }
    if (!/[0-9]/.test(password)) {
      errors.push("auth.password.number_error");
    }
    if (!/[!@#$%^&*(),.?":{}|<>]/.test(password)) {
      errors.push("auth.password.special_char_error");
    }
    
    // Check for common passwords (simplified)
    const commonPasswords = ["password", "123456", "password123", "admin", "qwerty"];
    if (commonPasswords.some(common => password.toLowerCase().includes(common))) {
      errors.push("auth.password.common_password_error");
    }
    
    // Check for repeated characters (more than 2 consecutive)
    if (/(.)\1{2,}/.test(password)) {
      errors.push("auth.password.repeats_error");
    }
    
    // Check for sequences (simplified)
    if (/123|abc|qwe|asd|zxc/i.test(password)) {
      errors.push("auth.password.sequence_error");
    }
    
    return { valid: errors.length === 0, errors };
  }

  function calculatePasswordStrengthLocal(password) {
    if (!password) {
      return { score: 0, level: "very_weak" };
    }
    
    let score = Math.min(40, password.length * 2);
    if (/[a-z]/.test(password)) {
      score += 10;
    }
    if (/[A-Z]/.test(password)) {
      score += 10;
    }
    if (/[0-9]/.test(password)) {
      score += 10;
    }
    if (/[!@#$%^&*(),.?":{}|<>]/.test(password)) {
      score += 10;
    }
    if (password.length > 12) {
      score += 10;
    }
    
    // Penalty for common patterns
    const commonPasswords = ["password", "123456", "password123", "admin", "qwerty"];
    if (commonPasswords.some(common => password.toLowerCase().includes(common))) {
      score -= 30;
    }
    
    if (/(.)\1{2,}/.test(password)) {
      score -= 10;
    }
    if (/123|abc|qwe|asd|zxc/i.test(password)) {
      score -= 10;
    }
    
    score = Math.max(0, Math.min(100, score));
    
    let level = "very_weak";
    if (score >= 80) {
      level = "very_strong";
    } else if (score >= 60) {
      level = "strong";
    } else if (score >= 40) {
      level = "medium";
    } else if (score >= 20) {
      level = "weak";
    }
    
    return { score, level };
  }

  // Core validation functions with optimized performance
  
  /**
   * Provides suggestions for common input errors with advanced recovery
   * @param {string} errorType - Type of error (email, password)
   * @param {string} inputValue - Current input value
   * @returns {string} - Suggestion text or empty string
   */
  function provideSuggestion(errorType, inputValue) {
    if (errorType === 'email' && inputValue) {
      // Common email domain suggestions
      const commonDomains = ['gmail.com', 'yahoo.com', 'outlook.com', 'hotmail.com', 'icloud.com', 'web.de', 'gmx.de'];
      const atIndex = inputValue.lastIndexOf('@');
      
      if (atIndex > 0 && atIndex < inputValue.length - 1) {
        const domain = inputValue.substring(atIndex + 1).toLowerCase();
        
        // Check for exact matches first
        if (commonDomains.includes(domain)) {
          return '';
        }
        
        // Find suggestions based on edit distance
        const suggestion = findClosestDomain(domain, commonDomains);
        if (suggestion && domain !== suggestion) {
          return `Did you mean: ${inputValue.substring(0, atIndex + 1)}${suggestion}?`;
        }
      } else if (atIndex === -1 && inputValue.length > 0) {
        // Missing @ symbol
        return 'Email addresses require an @ symbol. Try: yourname@example.com';
      } else if (atIndex === inputValue.length - 1) {
        // Missing domain
        return 'Please add a domain after @. Try: yourname@gmail.com';
      }
    }
    
    if (errorType === 'password' && inputValue) {
      // Provide specific password improvement suggestions
      const suggestions = [];
      
      if (inputValue.length < 8) {
        suggestions.push('Make it at least 8 characters long');
      }
      
      if (!/[A-Z]/.test(inputValue)) {
        suggestions.push('Add an uppercase letter (A-Z)');
      }
      
      if (!/[a-z]/.test(inputValue)) {
        suggestions.push('Add a lowercase letter (a-z)');
      }
      
      if (!/[0-9]/.test(inputValue)) {
        suggestions.push('Add a number (0-9)');
      }
      
      if (!/[!@#$%^&*(),.?":{}|<>]/.test(inputValue)) {
        suggestions.push('Add a special character (!@#$%^&*)');
      }
      
      if (suggestions.length > 0) {
        return `To improve your password: ${suggestions.join(', ')}`;
      }
    }
    
    return '';
  }

  /**
   * Find closest domain using Levenshtein distance
   * @param {string} input - Input domain
   * @param {string[]} domains - Array of common domains
   * @returns {string|null} - Closest domain or null
   */
  function findClosestDomain(input, domains) {
    let closestDomain = null;
    let minDistance = Infinity;
    
    domains.forEach(domain => {
      const distance = levenshteinDistance(input, domain);
      if (distance < minDistance && distance <= 2) { // Allow up to 2 character differences
        minDistance = distance;
        closestDomain = domain;
      }
    });
    
    return closestDomain;
  }

  /**
   * Calculate Levenshtein distance between two strings
   * @param {string} a - First string
   * @param {string} b - Second string
   * @returns {number} - Edit distance
   */
  function levenshteinDistance(a, b) {
    const matrix = [];
    
    for (let i = 0; i <= b.length; i++) {
      matrix[i] = [i];
    }
    
    for (let j = 0; j <= a.length; j++) {
      matrix[0][j] = j;
    }
    
    for (let i = 1; i <= b.length; i++) {
      for (let j = 1; j <= a.length; j++) {
        if (b.charAt(i - 1) === a.charAt(j - 1)) {
          matrix[i][j] = matrix[i - 1][j - 1];
        } else {
          matrix[i][j] = Math.min(
            matrix[i - 1][j - 1] + 1, // substitution
            matrix[i][j - 1] + 1,     // insertion
            matrix[i - 1][j] + 1      // deletion
          );
        }
      }
    }
    
    return matrix[b.length][a.length];
  }

  // Form initialization - optimized for inline usage
  const isConfirmReset = !!document.getElementById("token");

  // Initialize appropriate form based on mode
  if (!isConfirmReset) {
    initializeRequestForm();
  } else {
    initializeConfirmationForm();
  }

  // Initialize session timeout warning (Issue #1)
  initializeSessionTimeoutWarning();

  /**
   * Initialize password reset request form with optimized event handling
   */
  function initializeRequestForm() {
    const form = document.getElementById("passwordResetForm");
    if (!form) {
      return;
    }

    const elements = {
      email: document.getElementById("email"),
      emailError: document.getElementById("emailError"),
      formError: document.getElementById("formError"),
      formSuccess: document.getElementById("formSuccess"),
      submitText: document.getElementById("submitText"),
      loadingSpinner: document.getElementById("loadingSpinner")
    };

    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      let isValid = true;

      // Reset error displays
      resetErrorDisplays([elements.emailError, elements.formError, elements.formSuccess]);

      // Email validation
      if (!elements.email?.value) {
        showError(elements.emailError, translations["auth.form.email_required"]);
        isValid = false;
      } else if (!validateEmail(elements.email.value)) {
        // Enhanced error message with suggestion
        const suggestion = provideSuggestion('email', elements.email.value);
        const errorMessage = suggestion ? 
          `${translations["auth.form.email_invalid_format"]} ${suggestion}` : 
          translations["auth.form.email_invalid_format"];
        showError(elements.emailError, errorMessage);
        isValid = false;
      }

      if (!isValid) {
        return;
      }

      // Show loading state
      setLoadingState(elements.submitText, elements.loadingSpinner, translations["auth.form.loading_text"], true);

      try {
        const currentLang = document.documentElement.lang || "de";
        
        // Add performance optimizations to fetch request
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout
        
        await fetch(`/${currentLang}/api/auth/reset-password`, {
          method: "POST",
          headers: { 
            "Content-Type": "application/json",
            "Accept": "application/json"
          },
          body: JSON.stringify({ email: elements.email.value }),
          signal: controller.signal,
          priority: "high" // Modern browsers priority hint
        });

        clearTimeout(timeoutId);
        
        // Always show success for security
        showSuccess(elements.formSuccess, translations["auth.password_reset.success_message"]);
        form.reset();
      } catch (error) {
        // Handle timeout specifically
        if (error.name === 'AbortError') {
          showError(elements.formError, translations["auth.password_reset.timeout_error"] || translations["auth.password_reset.error_message"]);
        } else {
          showError(elements.formError, translations["auth.password_reset.error_message"]);
        }
      } finally {
        setLoadingState(
          elements.submitText,
          elements.loadingSpinner,
          translations["auth.form.send_reset_link"],
          false
        );
      }
    });
  }

  /**
   * Initialize password reset confirmation form with optimized validation
   */
  function initializeConfirmationForm() {
    const form = document.getElementById("passwordResetConfirmForm");
    if (!form) {
      return;
    }

    const elements = {
      password: document.getElementById("password"),
      passwordConfirm: document.getElementById("passwordConfirm"),
      token: document.getElementById("token"),
      passwordError: document.getElementById("passwordError"),
      passwordConfirmError: document.getElementById("passwordConfirmError"),
      formError: document.getElementById("formError"),
      formSuccess: document.getElementById("formSuccess"),
      submitText: document.getElementById("submitText"),
      loadingSpinner: document.getElementById("loadingSpinner")
    };

    // Initialize UI components
    initializePasswordToggles();
    initializeRequirementsToggle();
    initializeContextualHelp();
    initializeContextualHelp();

    // Real-time validation with performance optimization using passive listeners
    let validationTimeout;
    
    // Optimized debouncing with adaptive delay based on input frequency
    let inputCount = 0;
    const debouncedValidation = () => {
      clearTimeout(validationTimeout);
      inputCount++;
      
      // Adaptive debounce: shorter delay for first few inputs, longer for rapid typing
      const delay = inputCount < 3 ? 100 : 200;
      
      validationTimeout = setTimeout(() => {
        updatePasswordRequirements();
        inputCount = 0; // Reset counter after validation
      }, delay);
    };

    // Use passive event listeners for better scroll performance on mobile
    const eventOptions = { passive: true };
    elements.password?.addEventListener("input", debouncedValidation, eventOptions);
    elements.passwordConfirm?.addEventListener("input", debouncedValidation, eventOptions);

    // Form submission with comprehensive validation
    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      let isValid = true;

      // Reset error displays
      resetErrorDisplays([
        elements.passwordError, 
        elements.passwordConfirmError, 
        elements.formError, 
        elements.formSuccess
      ]);

      // Password validation
      if (!elements.password?.value) {
        showError(elements.passwordError, translations["auth.form.password_required"]);
        isValid = false;
      } else {
        const validation = validatePassword(elements.password.value);
        if (!validation.valid) {
          showError(elements.passwordError, translations["auth.form.password_requirements"]);
          isValid = false;
        }
      }

      // Password confirmation validation
      if (!elements.passwordConfirm?.value) {
        showError(elements.passwordConfirmError, translations["auth.form.password_confirm_required"]);
        isValid = false;
      } else if (elements.password?.value !== elements.passwordConfirm.value) {
        showError(elements.passwordConfirmError, translations["auth.form.passwords_not_match"]);
        isValid = false;
      }

      if (!isValid) {
        return;
      }

      // Show loading state
      setLoadingState(elements.submitText, elements.loadingSpinner, translations["auth.form.loading_text"], true);

      try {
        const currentLang = document.documentElement.lang || "de";
        
        // Add performance optimizations to fetch request
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 second timeout for password change
        
        const response = await fetch(`/${currentLang}/api/auth/reset-password`, {
          method: "PUT",
          headers: { 
            "Content-Type": "application/json",
            "Accept": "application/json"
          },
          body: JSON.stringify({
            token: elements.token?.value,
            newPassword: elements.password.value,
          }),
          signal: controller.signal,
          priority: "high" // Modern browsers priority hint
        });

        clearTimeout(timeoutId);
        
        const data = await response.json();

        if (response.ok) {
          showSuccess(
            elements.formSuccess,
            data.message || translations["auth.password_reset.complete_success"]
          );
          form.reset();
          updatePasswordRequirements();

          // Redirect after success
          setTimeout(() => {
            const currentLang = document.documentElement.lang || "de";
            window.location.href = `/${currentLang}/auth/login`;
          }, 3000);
        } else {
          showError(elements.formError, data.error || translations["auth.password_reset.complete_error"]);
        }
      } catch (error) {
        // Handle timeout specifically
        if (error.name === 'AbortError') {
          showError(elements.formError, translations["auth.password_reset.timeout_error"] || translations["auth.password_reset.error_message"]);
        } else {
          showError(elements.formError, translations["auth.password_reset.error_message"]);
        }
      } finally {
        setLoadingState(
          elements.submitText,
          elements.loadingSpinner,
          translations["auth.password_reset_confirm.submit"],
          false
        );
      }
    });
  }

  /**
   * Initialize password visibility toggles with optimized event handling
   */
  function initializePasswordToggles() {
    const elements = {
      togglePassword: document.getElementById("togglePassword"),
      togglePasswordConfirm: document.getElementById("togglePasswordConfirm"),
      passwordInput: document.getElementById("password"),
      passwordConfirmInput: document.getElementById("passwordConfirm")
    };

    elements.togglePassword?.addEventListener("click", () => {
      togglePasswordVisibility(elements.passwordInput, elements.togglePassword);
    });

    elements.togglePasswordConfirm?.addEventListener("click", () => {
      togglePasswordVisibility(elements.passwordConfirmInput, elements.togglePasswordConfirm);
    });
  }

  /**
   * Initialize contextual help functionality
   */
  function initializeContextualHelp() {
    const helpButton = document.getElementById("passwordHelpButton");
    const helpTooltip = document.getElementById("passwordHelpTooltip");

    if (!helpButton || !helpTooltip) {
      return;
    }

    let isTooltipVisible = false;

    // Toggle tooltip visibility
    function toggleTooltip() {
      isTooltipVisible = !isTooltipVisible;
      
      helpButton.setAttribute("aria-expanded", isTooltipVisible.toString());
      helpTooltip.setAttribute("aria-hidden", (!isTooltipVisible).toString());
      
      if (isTooltipVisible) {
        helpTooltip.classList.remove("password-reset-form__help-tooltip--hidden");
        // Focus the tooltip content for screen readers
        helpTooltip.focus();
      } else {
        helpTooltip.classList.add("password-reset-form__help-tooltip--hidden");
        // Return focus to the help button
        helpButton.focus();
      }
    }

    // Show tooltip on hover (mouse users)
    helpButton.addEventListener("mouseenter", () => {
      if (!isTooltipVisible) {
        toggleTooltip();
      }
    });

    // Hide tooltip on mouse leave (mouse users)
    helpButton.addEventListener("mouseleave", () => {
      if (isTooltipVisible) {
        setTimeout(() => {
          if (!helpTooltip.matches(':hover') && !helpButton.matches(':hover')) {
            toggleTooltip();
          }
        }, 100);
      }
    });

    // Toggle tooltip on click/keyboard activation
    helpButton.addEventListener("click", (e) => {
      e.preventDefault();
      toggleTooltip();
    });

    // Handle keyboard navigation
    helpButton.addEventListener("keydown", (e) => {
      if (e.key === "Enter" || e.key === " ") {
        e.preventDefault();
        toggleTooltip();
      } else if (e.key === "Escape" && isTooltipVisible) {
        toggleTooltip();
      }
    });

    // Close tooltip when clicking outside
    document.addEventListener("click", (e) => {
      if (isTooltipVisible && !helpButton.contains(e.target) && !helpTooltip.contains(e.target)) {
        toggleTooltip();
      }
    });

    // Close tooltip on Escape key
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && isTooltipVisible) {
        toggleTooltip();
      }
    });
  }

  /**
   * Initialize requirements panel toggle with accessibility support
   */
  function initializeRequirementsToggle() {
    const toggleButton = document.getElementById("toggleRequirements");
    const requirementsPanel = document.getElementById("passwordRequirements");
    const statusElement = document.getElementById("requirementsPanelStatus");

    if (!toggleButton || !requirementsPanel) {
      return;
    }

    toggleButton.addEventListener("click", () => {
      const isExpanded = toggleButton.getAttribute("aria-expanded") === "true";
      const newExpanded = !isExpanded;
      
      toggleButton.setAttribute("aria-expanded", newExpanded.toString());
      requirementsPanel.classList.toggle("password-reset-form__requirements--hidden");
      requirementsPanel.setAttribute("aria-hidden", (!newExpanded).toString());

      // Announce state change to screen readers (Issue #5)
      if (statusElement) {
        const statusText = newExpanded ? 
          translations["auth.accessibility.requirements.expanded"] : 
          translations["auth.accessibility.requirements.collapsed"];
        statusElement.textContent = statusText;
      }

      if (newExpanded) {
        updatePasswordRequirements();
      }
    });
  }

  /**
   * Update password requirements indicators and strength meter with performance optimization
   * Uses cached DOM elements and requestAnimationFrame for smooth updates
   */
  function updatePasswordRequirements() {
    // Cache DOM elements for better performance - avoid repeated getElementById calls
    const cachedElements = updatePasswordRequirements.cache || (updatePasswordRequirements.cache = {
      passwordInput: document.getElementById("password"),
      passwordConfirmInput: document.getElementById("passwordConfirm"),
      requirements: [
        "req-length", "req-uppercase", "req-lowercase", "req-number", 
        "req-special", "req-common", "req-repeats", "req-sequences", "req-match"
      ].reduce((acc, id) => {
        acc[id] = document.getElementById(id);
        return acc;
      }, {}),
      strengthBar: document.getElementById("passwordStrength"),
      strengthText: document.getElementById("strengthText"),
      strengthProgressBar: document.querySelector('.password-reset-form__strength-bar[role="progressbar"]'),
      strengthDescription: document.getElementById("passwordStrengthDescription")
    });

    const password = cachedElements.passwordInput?.value || "";
    const passwordConfirm = cachedElements.passwordConfirmInput?.value || "";

    // Use requestAnimationFrame for smooth UI updates
    requestAnimationFrame(() => {
      // Validate password once and reuse result using the standardized password validation system
      const validation = validatePassword(password);

      // Check password strength using the existing utility
      const strengthResult = calculatePasswordStrengthLocal(password);
      
      // Map validation errors to requirement state - using correct error keys
      const requirementStates = {
        "req-length": !validation.errors.includes("auth.password.min_length_error"),
        "req-uppercase": !validation.errors.includes("auth.password.uppercase_error"),
        "req-lowercase": !validation.errors.includes("auth.password.lowercase_error"),
        "req-number": !validation.errors.includes("auth.password.number_error"),
        "req-special": !validation.errors.includes("auth.password.special_char_error"),
        "req-common": !validation.errors.includes("auth.password.common_password_error"),
        "req-repeats": !validation.errors.includes("auth.password.repeats_error"),
        "req-sequences": !validation.errors.includes("auth.password.sequence_error"),
        "req-match": password && passwordConfirm && password === passwordConfirm
      };

      // Batch DOM updates for better performance
      Object.entries(requirementStates).forEach(([id, isValid]) => {
        const element = cachedElements.requirements[id];
        if (element) {
          updateRequirementIndicator(element, isValid);
        }
      });

      // Update strength meter with accessibility enhancements
      if (cachedElements.strengthBar && cachedElements.strengthText) {
        updateStrengthMeterOptimized(
          cachedElements.strengthBar, 
          cachedElements.strengthText, 
          strengthResult,
          cachedElements.strengthProgressBar,
          cachedElements.strengthDescription
        );
      }
    });
  }

  /**
   * Update individual requirement indicator with optimized class handling and enhanced accessibility
   * Now accepts cached element directly to avoid repeated DOM queries
   */
  function updateRequirementIndicator(element, isValid) {
    if (!element) {
      return;
    }

    // Use className for better performance than classList.toggle - minimized string operations
    const baseClass = "password-reset-form__requirement";
    const validityClass = isValid ? `${baseClass}--valid` : `${baseClass}--invalid`;
    element.className = `${baseClass} ${validityClass}`;

    // Cache child elements for better performance
    if (!element._cachedChildren) {
      element._cachedChildren = {
        icon: element.querySelector(".password-reset-form__requirement-icon"),
        description: element.querySelector("[id$='-desc']")
      };
    }

    const { icon, description } = element._cachedChildren;
    
    if (icon) {
      icon.textContent = isValid ? "✓" : "✗";
      // aria-hidden is already set, no need to update repeatedly
    }
    
    if (description) {
      const statusText = isValid ? 
        translations["auth.accessibility.requirement.met"] : 
        translations["auth.accessibility.requirement.unmet"];
      description.textContent = statusText;
    }
  }

  /**
   * Optimized password strength meter update with cached elements and percentage info
   * Reduces DOM queries and minimizes style recalculations
   */
  function updateStrengthMeterOptimized(strengthBar, strengthText, strengthResult, strengthProgressBar, strengthDescription) {
    if (!strengthBar || !strengthText || !strengthResult) {
      return;
    }

    // Convert PasswordStrengthLevel enum to CSS-friendly string
    const strengthLevel = strengthResult.level.toLowerCase().replace(/[_-]/g, '_');
    const strengthScore = strengthResult.score;

    // Batch style updates to minimize reflows
    const progressWidth = `${Math.min(100, Math.max(0, strengthScore))}%`;
    
    // Update progress bar width and classes
    strengthBar.style.width = progressWidth;
    strengthBar.className = `password-reset-form__strength-progress password-reset-form__strength-progress--${strengthLevel}`;
    
    // Update text styling
    strengthText.className = `password-reset-form__strength-text password-reset-form__strength-text--${strengthLevel}`;

    // Get localized strength text
    const strengthTextContent = translations[`auth.password.strength.${strengthLevel}`] || 
                               translations["auth.password.strength.weak"];
    strengthText.textContent = strengthTextContent;

    // Update ARIA attributes for accessibility with percentage
    if (strengthProgressBar) {
      strengthProgressBar.setAttribute('aria-valuenow', strengthScore.toString());
      const percentageText = `${strengthScore}% ${strengthTextContent}`;
      strengthProgressBar.setAttribute('aria-valuetext', percentageText);
    }

    // Enhanced ARIA label with complete description and percentage
    const strengthLabel = translations["auth.password.strength"] || "Password strength";
    strengthText.setAttribute("aria-label", `${strengthLabel}: ${strengthTextContent}, ${strengthScore}% complete`);

    // Update strength description for screen readers with percentage information
    if (strengthDescription) {
      const detailsText = translations["auth.password.strength.description"] || 
                         "Password strength indicator shows how secure your password is";
      strengthDescription.textContent = `${detailsText} Current strength: ${strengthTextContent} at ${strengthScore} percent`;
    }
  }

  /**
   * Toggle password visibility with improved accessibility and state announcements
   */
  function togglePasswordVisibility(input, button) {
    if (!input || !button) {
      return;
    }

    const isPassword = input.type === "password";
    input.type = isPassword ? "text" : "password";

    const showIcon = button.querySelector(".show-password");
    const hideIcon = button.querySelector(".hide-password");

    if (showIcon && hideIcon) {
      if (isPassword) {
        showIcon.classList.add("password-reset-form__toggle-hidden");
        hideIcon.classList.remove("password-reset-form__toggle-hidden");
      } else {
        showIcon.classList.remove("password-reset-form__toggle-hidden");
        hideIcon.classList.add("password-reset-form__toggle-hidden");
      }
    }

    // Update aria-pressed state
    button.setAttribute("aria-pressed", isPassword ? "true" : "false");

    // Announce state change to screen readers (Issue #2)
    const statusElement = button.getAttribute("aria-describedby");
    const statusDiv = statusElement ? document.getElementById(statusElement) : null;
    if (statusDiv) {
      const statusText = isPassword ? 
        translations["auth.accessibility.password.visible"] : 
        translations["auth.accessibility.password.hidden"];
      statusDiv.textContent = statusText;
    }

    // Maintain focus for accessibility
    input.focus();
  }

  // Optimized utility functions for better performance
  
  /**
   * Reset error displays efficiently
   */
  function resetErrorDisplays(elements) {
    elements.forEach((element) => {
      if (element) {
        element.textContent = "";
        element.classList.add(
          "password-reset-form__error--hidden",
          "password-reset-form__message--hidden"
        );
      }
    });
  }

  /**
   * Show error message with ARIA support
   */
  function showError(element, message) {
    if (element) {
      element.textContent = message;
      element.classList.remove(
        "password-reset-form__error--hidden",
        "password-reset-form__message--hidden"
      );
    }
  }

  /**
   * Show success message with ARIA support
   */
  function showSuccess(element, message) {
    if (element) {
      element.textContent = message;
      element.classList.remove("password-reset-form__message--hidden");
    }
  }

  /**
   * Set loading state with optimized DOM manipulation
   */
  function setLoadingState(textElement, spinnerElement, text, isLoading) {
    if (textElement) {
      textElement.textContent = text;
    }
    if (spinnerElement) {
      if (isLoading) {
        spinnerElement.classList.remove("password-reset-form__spinner--hidden");
      } else {
        spinnerElement.classList.add("password-reset-form__spinner--hidden");
      }
    }
  }

  /**
   * Initialize session timeout warning using the standardized utility
   * Implements WCAG 2.2 SC 2.2.6 Timeouts (AAA) compliance
   */
  function initializeSessionTimeoutWarning() {
    // Import the session timeout utility
    return import("../../utils/auth/sessionTimeout.ts").then(({ createSessionTimeoutManager }) => {
      const sessionManager = createSessionTimeoutManager({
        sessionTimeout: 20 * 60 * 1000, // 20 minutes
        warningTime: 2 * 60 * 1000, // 2 minutes warning
        redirectUrl: `/${document.documentElement.lang || "de"}/auth/login?reason=session_expired`,
        translations: {
          title: translations["auth.session.timeout.title"],
          message: translations["auth.session.timeout.message"],
          extend: translations["auth.session.timeout.extend"],
          close: translations["auth.session.timeout.close"]
        }
      });

      // Initialize the session timeout system
      sessionManager.initialize();

      // Cleanup for page navigation
      function cleanupSessionManager() {
        sessionManager.destroy();
      }

      // Add cleanup for page navigation and beforeunload
      window.addEventListener("beforeunload", cleanupSessionManager);
      
      // For Astro page navigation (if using View Transitions)
      document.addEventListener("astro:before-preparation", cleanupSessionManager);
      document.addEventListener("astro:page-load", cleanupSessionManager);

      return sessionManager;
    }).catch(error => {
      console.error("Failed to load session timeout manager:", error);
      return null;
    });
  }

  // Initialize session timeout when DOM is ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeSessionTimeoutWarning);
  } else {
    initializeSessionTimeoutWarning();
  }
</script>

<style>
  /* ======================================
   * PASSWORD RESET FORM STYLES - OPTIMIZED
   * ======================================
   * 
   * Follows MelodyMind project standards:
   * - BEM methodology for class naming
   * - CSS custom properties from global.css exclusively
   * - WCAG AAA 2.2 accessibility compliance
   * - Modern CSS features with performance optimization
   * - Responsive design with mobile-first approach
   */

  /* ======================================
   * MAIN CONTAINER
   * ====================================== */
  .password-reset-form {
    background-color: var(--bg-primary);
    border-radius: var(--radius-lg);
    padding: var(--space-xl);
    box-shadow: var(--shadow-lg);
    max-width: var(--container-sm);
    margin: 0 auto;
    border: var(--border-width-thin) solid var(--border-primary);
  }

  /* ======================================
   * FIELDSET STYLING
   * ====================================== */
  .password-reset-form__fieldset {
    border: var(--border-width-thin) solid var(--border-secondary);
    border-radius: var(--radius-md);
    padding: var(--space-lg);
    margin: var(--space-lg) 0;
    background-color: var(--bg-secondary);
  }

  .password-reset-form__fieldset-legend {
    padding: 0 var(--space-sm);
    font-weight: var(--font-semibold);
    color: var(--text-primary);
    font-size: var(--text-base);
    line-height: var(--leading-normal);
  }

  /* ======================================
   * TYPOGRAPHY
   * ====================================== */
  .password-reset-form__title {
    color: var(--text-primary);
    font-size: var(--text-2xl);
    font-weight: var(--font-bold);
    line-height: var(--leading-tight);
    margin-bottom: var(--space-xl);
    text-align: center;
  }

  .password-reset-form__description {
    color: var(--text-secondary);
    font-size: var(--text-base);
    line-height: var(--leading-relaxed);
    margin-bottom: var(--space-lg);
    text-align: center;
  }

  /* ======================================
   * FORM LAYOUT
   * ====================================== */
  .password-reset-form__form {
    display: flex;
    flex-direction: column;
    gap: var(--space-lg);
  }

  .password-reset-form__field {
    display: flex;
    flex-direction: column;
    gap: var(--space-sm);
  }

  .password-reset-form__label {
    color: var(--text-primary);
    font-size: var(--text-sm);
    font-weight: var(--font-medium);
    line-height: var(--leading-normal);
  }

  .password-reset-form__required {
    color: var(--color-red-400);
  }

  .password-reset-form__input-wrapper {
    position: relative;
  }

  /* ======================================
   * INPUT STYLING
   * ====================================== */
  .password-reset-form__input {
    background-color: var(--form-bg);
    border: var(--border-width-thin) solid var(--form-border);
    border-radius: var(--radius-md);
    padding: var(--space-md);
    font-size: var(--text-base);
    line-height: var(--leading-normal);
    color: var(--form-text);
    transition: var(--transition-normal);
    min-height: var(--min-touch-size);
  }

  .password-reset-form__input::placeholder {
    color: var(--text-tertiary);
    opacity: 1;
  }

  .password-reset-form__input:focus {
    outline: none;
    border-color: var(--form-border-focus);
    box-shadow: var(--focus-enhanced-shadow);
  }

  .password-reset-form__input:invalid {
    border-color: var(--color-red-400);
  }

  .password-reset-form__input:disabled {
    background-color: var(--bg-disabled);
    color: var(--text-disabled);
    cursor: not-allowed;
    opacity: 0.6;
  }

  .password-reset-form__input--with-toggle {
    padding-right: var(--space-2xl);
  }

  /* ======================================
   * PASSWORD TOGGLE BUTTON
   * ====================================== */
  .password-reset-form__toggle {
    position: absolute;
    right: var(--space-sm);
    top: 50%;
    transform: translateY(-50%);
    background: transparent;
    border: none;
    border-radius: var(--radius-sm);
    width: var(--space-2xl);
    height: var(--space-2xl);
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    color: var(--text-secondary);
    transition: var(--transition-normal);
    min-height: var(--min-touch-size);
    min-width: var(--min-touch-size);
  }

  .password-reset-form__toggle:hover {
    background-color: var(--bg-hover);
    color: var(--text-primary);
  }

  .password-reset-form__toggle:focus {
    outline: var(--focus-enhanced-outline-dark);
    outline-offset: var(--focus-ring-offset);
  }

  .password-reset-form__toggle:active {
    background-color: var(--bg-active);
    transform: translateY(-50%) scale(0.95);
  }

  .password-reset-form__toggle-icon {
    width: var(--space-lg);
    height: var(--space-lg);
  }

  .password-reset-form__toggle-hidden {
    display: none;
  }

  /* ======================================
   * ERROR AND SUCCESS MESSAGES
   * ====================================== */
  .password-reset-form__message,
  .password-reset-form__error {
    padding: var(--space-md);
    border-radius: var(--radius-md);
    font-size: var(--text-sm);
    line-height: var(--leading-normal);
    font-weight: var(--font-medium);
    margin-top: var(--space-sm);
    border: var(--border-width-thin) solid;
  }

  .password-reset-form__message--error,
  .password-reset-form__error {
    background-color: var(--color-red-50);
    color: var(--color-red-800);
    border-color: var(--color-red-400);
  }

  .password-reset-form__message--success {
    background-color: var(--color-green-50);
    color: var(--color-green-800);
    border-color: var(--color-green-400);
  }

  .password-reset-form__message--hidden,
  .password-reset-form__error--hidden {
    display: none;
  }

  /* ======================================
   * SUBMIT BUTTON
   * ====================================== */
  .password-reset-form__submit {
    background-color: var(--btn-primary-bg);
    color: var(--btn-primary-text);
    border: var(--border-width-thin) solid var(--btn-primary-border);
    border-radius: var(--radius-md);
    padding: var(--space-md) var(--space-lg);
    font-size: var(--text-base);
    font-weight: var(--font-medium);
    line-height: var(--leading-normal);
    cursor: pointer;
    transition: var(--transition-normal);
    min-height: var(--min-touch-size);
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-sm);
  }

  .password-reset-form__submit:hover:not(:disabled) {
    background-color: var(--btn-primary-bg-hover);
    color: var(--btn-primary-text-hover);
    transform: translateY(-1px);
  }

  .password-reset-form__submit:focus {
    outline: var(--focus-enhanced-outline-dark);
    outline-offset: var(--focus-ring-offset);
    box-shadow: var(--focus-enhanced-shadow);
  }

  .password-reset-form__submit:active:not(:disabled) {
    transform: translateY(0);
  }

  .password-reset-form__submit:disabled {
    background-color: var(--btn-disabled-bg);
    color: var(--btn-disabled-text);
    cursor: not-allowed;
    opacity: 0.6;
    transform: none;
  }

  /* ======================================
   * LOADING SPINNER
   * ====================================== */
  .password-reset-form__spinner {
    width: var(--size-icon-md);
    height: var(--size-icon-md);
    border-radius: 50%;
    animation: password-reset-form-spin 1s linear infinite;
  }

  .password-reset-form__spinner--hidden {
    display: none;
  }

  .password-reset-form__spinner-icon {
    width: var(--size-icon-md);
    height: var(--size-icon-md);
    animation: password-reset-form-spin 1s linear infinite;
  }

  .password-reset-form__spinner-circle {
    opacity: 0.25;
  }

  .password-reset-form__spinner-path {
    opacity: 0.75;
  }

  @keyframes password-reset-form-spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  /* ======================================
   * CONTEXTUAL HELP STYLES
   * ====================================== */
  .password-reset-form__help-button {
    background: transparent;
    border: var(--border-width-thin) solid var(--border-secondary);
    border-radius: var(--radius-md);
    padding: var(--space-sm);
    font-size: var(--text-sm);
    color: var(--text-secondary);
    cursor: pointer;
    transition: var(--transition-normal);
    display: inline-flex;
    align-items: center;
    gap: var(--space-xs);
    min-height: var(--min-touch-size);
    min-width: var(--min-touch-size);
    position: relative;
  }

  .password-reset-form__help-button:hover {
    background-color: var(--bg-hover);
    color: var(--text-primary);
    border-color: var(--border-primary);
  }

  .password-reset-form__help-button:focus {
    outline: var(--focus-enhanced-outline-dark);
    outline-offset: var(--focus-ring-offset);
    box-shadow: var(--focus-enhanced-shadow);
  }

  .password-reset-form__help-icon {
    width: var(--size-icon-sm);
    height: var(--size-icon-sm);
  }

  .password-reset-form__help-tooltip {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    margin-top: var(--space-sm);
    background-color: var(--bg-primary);
    border: var(--border-width-thin) solid var(--border-primary);
    border-radius: var(--radius-lg);
    padding: var(--space-lg);
    box-shadow: var(--shadow-lg);
    z-index: 1000;
    max-width: var(--container-xs);
    transition: var(--transition-normal);
  }

  .password-reset-form__help-tooltip--hidden {
    opacity: 0;
    visibility: hidden;
    transform: translateY(-0.5rem);
  }

  .password-reset-form__help-tooltip:not(.password-reset-form__help-tooltip--hidden) {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  .password-reset-form__help-content {
    color: var(--text-primary);
  }

  .password-reset-form__help-title {
    font-size: var(--text-base);
    font-weight: var(--font-semibold);
    margin-bottom: var(--space-sm);
    color: var(--text-primary);
  }

  .password-reset-form__help-text {
    font-size: var(--text-sm);
    line-height: var(--leading-relaxed);
    margin-bottom: var(--space-md);
    color: var(--text-secondary);
  }

  .password-reset-form__help-list {
    list-style: none;
    padding: 0;
    margin: 0;
    font-size: var(--text-sm);
  }

  .password-reset-form__help-list li {
    padding: var(--space-xs) 0;
    color: var(--text-secondary);
    position: relative;
    padding-left: var(--space-lg);
  }

  .password-reset-form__help-list li::before {
    content: "•";
    color: var(--interactive-primary);
    position: absolute;
    left: 0;
    font-weight: var(--font-bold);
  }

  /* ======================================
   * FORM INSTRUCTIONS STYLES
   * ====================================== */
  .password-reset-form__instructions {
    background-color: var(--bg-secondary);
    border: var(--border-width-thin) solid var(--border-secondary);
    border-radius: var(--radius-md);
    padding: var(--space-lg);
    margin-bottom: var(--space-xl);
  }

  .password-reset-form__instructions-title {
    font-size: var(--text-lg);
    font-weight: var(--font-semibold);
    color: var(--text-primary);
    margin-bottom: var(--space-md);
  }

  .password-reset-form__instructions-list {
    margin: 0;
    padding-left: var(--space-lg);
    color: var(--text-secondary);
  }

  .password-reset-form__instructions-list li {
    margin-bottom: var(--space-sm);
    line-height: var(--leading-relaxed);
    font-size: var(--text-sm);
  }

  .password-reset-form__instructions-list li:last-child {
    margin-bottom: 0;
  }

  /* ======================================
   * PASSWORD REQUIREMENTS SECTION
   * ====================================== */
  .password-reset-form__requirements-section {
    margin-top: var(--space-lg);
  }

  .password-reset-form__requirements-toggle {
    background: var(--bg-secondary);
    border: var(--border-width-thin) solid var(--border-secondary);
    border-radius: var(--radius-md);
    padding: var(--space-md);
    font-size: var(--text-sm);
    color: var(--text-secondary);
    cursor: pointer;
    transition: var(--transition-normal);
    display: flex;
    align-items: center;
    gap: var(--space-sm);
    width: 100%;
    min-height: var(--min-touch-size);
  }

  .password-reset-form__requirements-toggle:hover {
    background-color: var(--bg-hover);
    color: var(--text-primary);
  }

  .password-reset-form__requirements-toggle:focus {
    outline: 3px solid var(--focus-ring);
    outline-offset: 2px;
  }

  .password-reset-form__requirements-toggle[aria-expanded="true"] {
    background-color: var(--bg-active);
    color: var(--text-primary);
  }

  .password-reset-form__requirements-icon {
    width: var(--size-icon-sm);
    height: var(--size-icon-sm);
    flex-shrink: 0;
  }

  .password-reset-form__requirements {
    background-color: var(--bg-secondary);
    border: var(--border-width-thin) solid var(--border-secondary);
    border-radius: var(--radius-md);
    padding: var(--space-lg);
    margin-top: var(--space-sm);
    transition: var(--transition-normal);
  }

  .password-reset-form__requirements--hidden {
    display: none;
  }

  .password-reset-form__requirements-title {
    font-size: var(--text-base);
    font-weight: var(--font-medium);
    color: var(--text-primary);
    margin-bottom: var(--space-md);
  }

  .password-reset-form__requirements-list {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: var(--space-sm);
  }

  .password-reset-form__requirement {
    display: flex;
    align-items: center;
    gap: var(--space-sm);
    padding: var(--space-sm);
    border-radius: var(--radius-sm);
    transition: var(--transition-normal);
    font-size: var(--text-sm);
    line-height: var(--leading-normal);
  }

  .password-reset-form__requirement--valid {
    background-color: var(--color-green-50);
    color: var(--color-green-800);
    border: var(--border-width-thin) solid var(--color-green-200);
  }

  .password-reset-form__requirement--invalid {
    background-color: var(--color-red-50);
    color: var(--color-red-800);
    border: var(--border-width-thin) solid var(--color-red-200);
  }

  .password-reset-form__requirement-icon {
    width: var(--size-icon-sm);
    height: var(--size-icon-sm);
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    font-weight: var(--font-bold);
    font-size: var(--text-xs);
    flex-shrink: 0;
  }

  .password-reset-form__requirement-text {
    flex: 1;
  }

  /* ======================================
   * PASSWORD STRENGTH METER
   * ====================================== */
  .password-reset-form__strength {
    margin-top: var(--space-lg);
  }

  .password-reset-form__strength-label {
    font-size: var(--text-sm);
    color: var(--text-secondary);
    margin-bottom: var(--space-sm);
    font-weight: var(--font-medium);
  }

  .password-reset-form__strength-bar {
    width: 100%;
    height: var(--size-progress-bar);
    background-color: var(--bg-tertiary);
    border-radius: var(--radius-full);
    overflow: hidden;
    border: var(--border-width-thin) solid var(--border-secondary);
  }

  .password-reset-form__strength-progress {
    height: 100%;
    transition: var(--transition-normal);
    border-radius: var(--radius-full);
  }

  .password-reset-form__strength-progress--weak {
    background-color: var(--color-red-400);
  }

  .password-reset-form__strength-progress--medium {
    background-color: var(--color-yellow-400);
  }

  .password-reset-form__strength-progress--strong {
    background-color: var(--color-green-400);
  }

  .password-reset-form__strength-progress--very-strong {
    background-color: var(--color-green-500);
  }

  .password-reset-form__strength-text {
    font-size: var(--text-sm);
    margin-top: var(--space-sm);
    font-weight: var(--font-medium);
  }

  .password-reset-form__strength-text--weak {
    color: var(--color-red-600);
  }

  .password-reset-form__strength-text--medium {
    color: var(--color-yellow-600);
  }

  .password-reset-form__strength-text--strong {
    color: var(--color-green-600);
  }

  .password-reset-form__strength-text--very-strong {
    color: var(--color-green-700);
  }

  /* ======================================
   * FOOTER LINK
   * ====================================== */
  .password-reset-form__footer {
    text-align: center;
    margin-top: var(--space-xl);
  }

  .password-reset-form__link {
    color: var(--interactive-primary);
    text-decoration: underline;
    font-size: var(--text-sm);
    transition: var(--transition-normal);
    padding: var(--space-sm);
    border-radius: var(--radius-sm);
    display: inline-block;
  }

  .password-reset-form__link:hover {
    color: var(--interactive-primary-hover);
    text-decoration: none;
    background-color: var(--bg-hover);
  }

  .password-reset-form__link:focus {
    outline: var(--focus-enhanced-outline-dark);
    outline-offset: var(--focus-ring-offset);
    background-color: var(--bg-focus);
  }

  /* ======================================
   * RESPONSIVE DESIGN
   * ====================================== */
  @media (min-width: 640px) {
    .password-reset-form {
      padding: var(--space-2xl);
    }

    .password-reset-form__title {
      font-size: var(--text-3xl);
    }

    .password-reset-form__description {
      font-size: var(--text-lg);
    }

    .password-reset-form__form {
      gap: var(--space-xl);
    }
  }

  @media (min-width: 768px) {
    .password-reset-form {
      padding: var(--space-3xl);
    }

    .password-reset-form__title {
      font-size: var(--text-4xl);
    }

    .password-reset-form__description {
      font-size: var(--text-xl);
    }

    .password-reset-form__form {
      gap: var(--space-2xl);
    }

    .password-reset-form__timeout-content {
      padding: var(--space-2xl);
    }
  }

  @media (min-width: 1024px) {
    .password-reset-form {
      padding: var(--space-3xl);
      max-width: var(--container-md);
    }

    .password-reset-form__title {
      font-size: var(--text-4xl);
    }

    .password-reset-form__description {
      font-size: var(--text-xl);
    }

    .password-reset-form__form {
      gap: var(--space-2xl);
    }
  }

  /* ======================================
   * ACCESSIBILITY ENHANCEMENTS
   * ====================================== */
  @media (prefers-color-scheme: dark) {
    .password-reset-form {
      background-color: var(--bg-primary);
      border-color: var(--border-primary);
    }

    .password-reset-form__input {
      background-color: var(--form-bg);
      color: var(--form-text);
      border-color: var(--form-border);
    }

    .password-reset-form__toggle {
      background-color: var(--bg-secondary);
      color: var(--text-secondary);
    }
  }

  @media (prefers-contrast: high) {
    .password-reset-form {
      border: 2px solid var(--border-primary);
    }

    .password-reset-form__input:focus {
      outline: var(--focus-enhanced-outline-dark);
      outline-offset: var(--focus-ring-offset);
    }

    .password-reset-form__submit:focus {
      outline: var(--focus-enhanced-outline-dark);
      outline-offset: var(--focus-ring-offset);
    }

    .password-reset-form__toggle:focus {
      outline: var(--focus-enhanced-outline-dark);
      outline-offset: var(--focus-ring-offset);
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .password-reset-form__spinner {
      animation: none;
    }

    .password-reset-form__requirements {
      transition: none;
    }

    .password-reset-form__timeout-warning {
      transition: none;
    }

    * {
      transition-duration: 0.01ms !important;
      animation-duration: 0.01ms !important;
    }
  }

  /* ======================================
   * PRINT STYLES
   * ====================================== */
  @media print {
    .password-reset-form {
      background: white;
      border: 1px solid #000;
      box-shadow: none;
      max-width: none;
    }

    .password-reset-form__timeout-warning {
      display: none !important;
    }

    .password-reset-form__spinner {
      display: none !important;
    }

    .password-reset-form__toggle {
      display: none !important;
    }
  }

  /* ======================================
   * SCREEN READER ONLY CLASS
   * ====================================== */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
</style>
