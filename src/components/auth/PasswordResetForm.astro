---
/**
 * PasswordResetForm - Dual-mode password reset component
 *
 * Features:
 * - Request mode: Email-based reset link
 * - Confirm mode: Set new password with token
 * - Real-time validation with password strength meter
 * - WCAG AAA compliant with enhanced accessibility
 * - Performance optimized with CSS containment
 * - Full responsive design with container queries
 * - Comprehensive session timeout handling
 *
 * @component
 * @accessibility WCAG AAA compliant with live regions and keyboard navigation
 * @performance CSS containment, GPU acceleration, optimized debouncing
 * @responsive Mobile-first design with container queries and fluid scaling
 */
import { getLangFromUrl, useTranslations } from "../../utils/i18n";
import Headline from "../Headline.astro";
import Paragraph from "../Paragraph.astro";
import { Icon } from "astro-icon/components";

export interface Props {
  /** Reset token from URL for confirm mode */
  token?: string | null;
  /** Toggle between request and confirm modes */
  isConfirmReset?: boolean;
}

const { token = null, isConfirmReset = false } = Astro.props;

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(String(lang));
const translations = {
    "auth.form.email_required": t("auth.form.email_required"),
    "auth.form.email_invalid": t("auth.form.email_invalid"),
    "auth.form.email_invalid_format": t("auth.form.email_invalid_format"),
    "auth.form.loading_text": t("auth.form.loading_text"),
    "auth.form.send_reset_link": t("auth.form.send_reset_link"),
    "auth.form.password_required": t("auth.form.password_required"),
    "auth.form.password_requirements": t("auth.form.password_requirements"),
    "auth.form.password_confirm_required": t("auth.form.password_confirm_required"),
    "auth.form.passwords_not_match": t("auth.form.passwords_not_match"),
    "auth.password_reset.success_message": t("auth.password_reset.success_message"),
    "auth.password_reset.error_message": t("auth.password_reset.error_message"),
    "auth.password_reset.complete_success": t("auth.password_reset.complete_success"),
    "auth.password_reset.complete_error": t("auth.password_reset.complete_error"),
    
    // Enhanced error messages for better accessibility
    "auth.form.password_length_error": t("auth.form.password_length_error"),
    "auth.form.password_uppercase_error": t("auth.form.password_uppercase_error"),
    "auth.form.password_lowercase_error": t("auth.form.password_lowercase_error"),
    "auth.form.password_number_error": t("auth.form.password_number_error"),
    "auth.form.password_special_error": t("auth.form.password_special_error"),
    "auth.form.password_common_error": t("auth.form.password_common_error"),
    "auth.form.password_repeats_error": t("auth.form.password_repeats_error"),
    "auth.form.password_sequences_error": t("auth.form.password_sequences_error"),
    
    // Session timeout translations removed - no longer needed with new auth flow
    
    // Accessibility translations
    "auth.accessibility.requirement.met": t("auth.accessibility.requirement.met"),
    "auth.accessibility.requirement.unmet": t("auth.accessibility.requirement.unmet"),
    "auth.accessibility.password.visible": t("auth.accessibility.password.visible"),
    "auth.accessibility.password.hidden": t("auth.accessibility.password.hidden"),
    "auth.accessibility.requirements.expanded": t("auth.accessibility.requirements.expanded"),
    "auth.accessibility.requirements.collapsed": t("auth.accessibility.requirements.collapsed"),
    "auth.accessibility.focus_trapped": t("auth.accessibility.focus_trapped"),
    
    // Password strength translations
    "auth.password.strength.weak": t("auth.password.strength.weak"),
    "auth.password.strength.medium": t("auth.password.strength.medium"),
    "auth.password.strength.strong": t("auth.password.strength.strong"),
    "auth.password.strength.very_strong": t("auth.password.strength.very_strong"),
    
    // Form instructions and help
    "auth.form.instructions.title": t("auth.form.instructions.title"),
    "auth.form.instructions.request.step1": t("auth.form.instructions.request.step1"),
    "auth.form.instructions.request.step2": t("auth.form.instructions.request.step2"),
    "auth.form.instructions.request.step3": t("auth.form.instructions.request.step3"),
    "auth.form.instructions.confirm.step1": t("auth.form.instructions.confirm.step1"),
    "auth.form.instructions.confirm.step2": t("auth.form.instructions.confirm.step2"),
    "auth.form.instructions.confirm.step3": t("auth.form.instructions.confirm.step3"),
    "auth.form.help.password_suggestions": t("auth.form.help.password_suggestions"),
  };
---

<div class="password-reset-form">
  {
    !isConfirmReset ? (
      <>
        <!-- Form Instructions for better accessibility -->
        <div class="password-reset-form__instructions" id="formInstructions">
          <Headline level="h2" className="password-reset-form__instructions-title" title={t("auth.form.instructions.title")} />
          <ol class="password-reset-form__instructions-list">
            <li>{t("auth.form.instructions.request.step1")}</li>
            <li>{t("auth.form.instructions.request.step2")}</li>
            <li>{t("auth.form.instructions.request.step3")}</li>
          </ol>
        </div>

        <Headline level="h1" className="password-reset-form__title" title={t("auth.password_reset.title")} />

        <div
          id="formError"
          class="password-reset-form__message password-reset-form__message--error password-reset-form__message--hidden"
          role="alert"
          aria-live="assertive"
        />
        <div
          id="formSuccess"
          class="password-reset-form__message password-reset-form__message--success password-reset-form__message--hidden"
          role="alert"
          aria-live="assertive"
        />

        <form
          id="passwordResetForm"
          class="password-reset-form__form"
          novalidate
          aria-labelledby="passwordResetFormHeading"
          aria-describedby="formInstructions"
        >
          <Headline level="h2" id="passwordResetFormHeading" className="sr-only" title={t("auth.password_reset.title")} />

          <div class="password-reset-form__field">
            <label for="email" class="password-reset-form__label">
              {t("auth.password_reset.email")}
              <span class="password-reset-form__required" aria-hidden="true">
                *
              </span>
              <span class="sr-only">{t("auth.form.required")}</span>
            </label>
            <div class="password-reset-form__input-wrapper">
              <input
                type="email"
                id="email"
                name="email"
                autocomplete="email"
                required
                class="password-reset-form__input"
                placeholder={t("auth.password_reset.email.placeholder")}
                aria-required="true"
              />
              <div
                id="emailError"
                class="password-reset-form__error password-reset-form__error--hidden"
              />
            </div>
          </div>

          <div class="password-reset-form__field">
            <button type="submit" class="password-reset-form__submit">
              <span id="submitText">{t("auth.password_reset.submit")}</span>
              <span
                id="loadingSpinner"
                class="password-reset-form__spinner password-reset-form__spinner--hidden"
              >
                <Icon 
                  name="refresh" 
                  class="password-reset-form__spinner-icon" 
                  aria-hidden="true" 
                />
              </span>
            </button>
          </div>
        </form>
      </>
    ) : (
      <>
        <!-- Form Instructions for better accessibility -->
        <div class="password-reset-form__instructions" id="confirmFormInstructions">
          <Headline level="h2" className="password-reset-form__instructions-title" title={t("auth.form.instructions.title")} />
          <ol class="password-reset-form__instructions-list">
            <li>{t("auth.form.instructions.confirm.step1")}</li>
            <li>{t("auth.form.instructions.confirm.step2")}</li>
            <li>{t("auth.form.instructions.confirm.step3")}</li>
          </ol>
        </div>

        <Headline level="h1" className="password-reset-form__title" title={t("auth.password_reset_confirm.title")} />

        <div
          id="formError"
          class="password-reset-form__message password-reset-form__message--error password-reset-form__message--hidden"
          role="alert"
          aria-live="assertive"
        />
        <div
          id="formSuccess"
          class="password-reset-form__message password-reset-form__message--success password-reset-form__message--hidden"
          role="alert"
          aria-live="assertive"
        />

        <form
          id="passwordResetConfirmForm"
          class="password-reset-form__form"
          novalidate
          aria-labelledby="passwordResetConfirmFormHeading"
          aria-describedby="confirmFormInstructions"
        >
          <Headline level="h2" id="passwordResetConfirmFormHeading" className="sr-only" title={t("auth.password_reset_confirm.title")} />

          <input type="hidden" id="token" name="token" value={token} />

          <!-- Fieldset for password fields grouping (Issue #1) -->
          <fieldset class="password-reset-form__fieldset">
            <legend class="password-reset-form__fieldset-legend">
              {t("auth.password_reset_confirm.password_section")}
            </legend>
            
            <div class="password-reset-form__field">
              <label for="password" class="password-reset-form__label">
                {t("auth.password_reset_confirm.password")}
                <span class="password-reset-form__required" aria-hidden="true">
                  *
                </span>
                <span class="sr-only">{t("auth.form.required")}</span>
              </label>
              <div class="password-reset-form__input-wrapper">
                <input
                  type="password"
                  id="password"
                  name="password"
                  autocomplete="new-password"
                  required
                  class="password-reset-form__input password-reset-form__input--with-toggle"
                  placeholder={t("auth.password_reset_confirm.password.placeholder")}
                  aria-required="true"
                  aria-describedby="passwordRequirements passwordError passwordStrengthDescription"
                />
                <button
                  type="button"
                  id="togglePassword"
                  class="password-reset-form__toggle"
                  aria-label={t("auth.accessibility.password_toggle")}
                  aria-pressed="false"
                  aria-describedby="passwordVisibilityStatus"
                >
                  <span class="show-password">
                    <Icon 
                      name="eye" 
                      class="password-reset-form__toggle-icon" 
                      aria-hidden="true" 
                    />
                  </span>
                  <span class="hide-password password-reset-form__toggle-hidden">
                    <Icon 
                      name="eye-off" 
                      class="password-reset-form__toggle-icon" 
                      aria-hidden="true" 
                    />
                  </span>
                </button>
                <!-- Hidden status announcements for screen readers -->
                <div id="passwordVisibilityStatus" class="sr-only" aria-live="polite" aria-atomic="true"></div>
                <div
                  id="passwordError"
                  class="password-reset-form__error password-reset-form__error--hidden"
                />
              </div>
            </div>

            <div class="password-reset-form__field">
              <label for="passwordConfirm" class="password-reset-form__label">
                {t("auth.password_reset_confirm.password_confirm")}
                <span class="password-reset-form__required" aria-hidden="true">
                  *
                </span>
                <span class="sr-only">{t("auth.form.required")}</span>
              </label>
              <div class="password-reset-form__input-wrapper">
                <input
                  type="password"
                  id="passwordConfirm"
                  name="passwordConfirm"
                  autocomplete="new-password"
                  required
                  class="password-reset-form__input password-reset-form__input--with-toggle"
                  placeholder={t("auth.password_reset_confirm.password_confirm.placeholder")}
                  aria-required="true"
                  aria-describedby="passwordConfirmError"
                />
                <button
                  type="button"
                  id="togglePasswordConfirm"
                  class="password-reset-form__toggle"
                  aria-label={t("auth.accessibility.password_toggle")}
                  aria-pressed="false"
                  aria-describedby="passwordConfirmVisibilityStatus"
                >
                  <span class="show-password">
                    <Icon 
                      name="eye" 
                      class="password-reset-form__toggle-icon" 
                      aria-hidden="true" 
                    />
                  </span>
                  <span class="hide-password password-reset-form__toggle-hidden">
                    <Icon 
                      name="eye-off" 
                      class="password-reset-form__toggle-icon" 
                      aria-hidden="true" 
                    />
                  </span>
                </button>
                <!-- Hidden status announcements for screen readers -->
                <div id="passwordConfirmVisibilityStatus" class="sr-only" aria-live="polite" aria-atomic="true"></div>
                <div
                  id="passwordConfirmError"
                  class="password-reset-form__error password-reset-form__error--hidden"
                />
              </div>
            </div>
          </fieldset>

          <div class="password-reset-form__requirements-section">
            <button
              type="button"
              id="toggleRequirements"
              class="password-reset-form__requirements-toggle"
              aria-expanded="false"
              aria-controls="passwordRequirements"
              aria-label={t("auth.accessibility.password_requirements")}
            >
              <Icon 
                name="information-circle" 
                class="password-reset-form__requirements-icon" 
                aria-hidden="true" 
              />
              {t("auth.password.requirements")}
              <!-- Screen reader status announcement for panel state -->
              <span id="requirementsPanelStatus" class="sr-only" aria-live="polite"></span>
            </button>

            <!-- Contextual Help Button -->
            <button 
              type="button" 
              id="passwordHelpButton"
              class="password-reset-form__help-button"
              aria-describedby="passwordHelpTooltip"
              aria-expanded="false"
              aria-label={t("auth.form.help.password_button")}
            >
              <Icon 
                name="question-mark-circle" 
                class="password-reset-form__help-icon" 
                aria-hidden="true" 
              />
              <span class="sr-only">Help</span>
            </button>

            <!-- Help Tooltip -->
            <div 
              id="passwordHelpTooltip" 
              role="tooltip" 
              class="password-reset-form__help-tooltip password-reset-form__help-tooltip--hidden"
              aria-hidden="true"
            >
              <div class="password-reset-form__help-content">
                <Headline level="h4" className="password-reset-form__help-title" title={t("auth.form.help.password_title")} />
                <Paragraph className="password-reset-form__help-text">{t("auth.form.help.password_suggestions")}</Paragraph>
                <ul class="password-reset-form__help-list">
                  <li>{t("auth.form.help.tip1")}</li>
                  <li>{t("auth.form.help.tip2")}</li>
                  <li>{t("auth.form.help.tip3")}</li>
                  <li>{t("auth.form.help.tip4")}</li>
                </ul>
              </div>
            </div>

            <div
              id="passwordRequirements"
              class="password-reset-form__requirements password-reset-form__requirements--hidden"
              aria-hidden="true"
              role="region"
              aria-labelledby="passwordRequirementsTitle"
            >
              <Headline level="h3" id="passwordRequirementsTitle" className="password-reset-form__requirements-title" title={t("auth.password.requirements")} />
              
              <!-- Password strength description for screen readers -->
              <div id="passwordStrengthDescription" class="sr-only" aria-live="polite" aria-atomic="true">
                {t("auth.password.strength_description")}
              </div>
              
              <ul class="password-reset-form__requirements-list">
                <li
                  id="req-length"
                  class="password-reset-form__requirement password-reset-form__requirement--invalid"
                  aria-describedby="req-length-desc"
                >
                  <span class="password-reset-form__requirement-icon" aria-hidden="true">✗</span>
                  <span class="password-reset-form__requirement-text">{t("auth.password.min_length")}</span>
                  <span id="req-length-desc" class="sr-only">Requirement not met</span>
                </li>
                <li
                  id="req-uppercase"
                  class="password-reset-form__requirement password-reset-form__requirement--invalid"
                  aria-describedby="req-uppercase-desc"
                >
                  <span class="password-reset-form__requirement-icon" aria-hidden="true">✗</span>
                  <span class="password-reset-form__requirement-text">{t("auth.password.uppercase")}</span>
                  <span id="req-uppercase-desc" class="sr-only">Requirement not met</span>
                </li>
                <li
                  id="req-lowercase"
                  class="password-reset-form__requirement password-reset-form__requirement--invalid"
                  aria-describedby="req-lowercase-desc"
                >
                  <span class="password-reset-form__requirement-icon" aria-hidden="true">✗</span>
                  <span class="password-reset-form__requirement-text">{t("auth.password.lowercase")}</span>
                  <span id="req-lowercase-desc" class="sr-only">Requirement not met</span>
                </li>
                <li
                  id="req-number"
                  class="password-reset-form__requirement password-reset-form__requirement--invalid"
                  aria-describedby="req-number-desc"
                >
                  <span class="password-reset-form__requirement-icon" aria-hidden="true">✗</span>
                  <span class="password-reset-form__requirement-text">{t("auth.password.number")}</span>
                  <span id="req-number-desc" class="sr-only">Requirement not met</span>
                </li>
                <li
                  id="req-special"
                  class="password-reset-form__requirement password-reset-form__requirement--invalid"
                  aria-describedby="req-special-desc"
                >
                  <span class="password-reset-form__requirement-icon" aria-hidden="true">✗</span>
                  <span class="password-reset-form__requirement-text">{t("auth.password.special")}</span>
                  <span id="req-special-desc" class="sr-only">Requirement not met</span>
                </li>
                <li
                  id="req-common"
                  class="password-reset-form__requirement password-reset-form__requirement--invalid"
                  aria-describedby="req-common-desc"
                >
                  <span class="password-reset-form__requirement-icon" aria-hidden="true">✗</span>
                  <span class="password-reset-form__requirement-text">{t("auth.password.no_common")}</span>
                  <span id="req-common-desc" class="sr-only">Requirement not met</span>
                </li>
                <li
                  id="req-repeats"
                  class="password-reset-form__requirement password-reset-form__requirement--invalid"
                  aria-describedby="req-repeats-desc"
                >
                  <span class="password-reset-form__requirement-icon" aria-hidden="true">✗</span>
                  <span class="password-reset-form__requirement-text">{t("auth.password.no_repeats")}</span>
                  <span id="req-repeats-desc" class="sr-only">Requirement not met</span>
                </li>
                <li
                  id="req-sequences"
                  class="password-reset-form__requirement password-reset-form__requirement--invalid"
                  aria-describedby="req-sequences-desc"
                >
                  <span class="password-reset-form__requirement-icon" aria-hidden="true">✗</span>
                  <span class="password-reset-form__requirement-text">{t("auth.password.no_sequences")}</span>
                  <span id="req-sequences-desc" class="sr-only">Requirement not met</span>
                </li>
                <li
                  id="req-match"
                  class="password-reset-form__requirement password-reset-form__requirement--invalid"
                  aria-describedby="req-match-desc"
                >
                  <span class="password-reset-form__requirement-icon" aria-hidden="true">✗</span>
                  <span class="password-reset-form__requirement-text">{t("auth.password.match")}</span>
                  <span id="req-match-desc" class="sr-only">Requirement not met</span>
                </li>
              </ul>

              <div class="password-reset-form__strength" role="group" aria-labelledby="strengthLabel">
                <Paragraph id="strengthLabel" className="password-reset-form__strength-label">{t("auth.password.strength")}</Paragraph>
                <div class="password-reset-form__strength-bar" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0">
                  <div
                    id="passwordStrength"
                    class="password-reset-form__strength-progress password-reset-form__strength-progress--weak"
                    style="width: 0%"
                  />
                </div>
                <p
                  id="strengthText"
                  class="password-reset-form__strength-text password-reset-form__strength-text--weak"
                  aria-live="polite"
                  aria-atomic="true"
                >
                  {t("auth.password.strength.weak")}
                </p>
              </div>
            </div>
          </div>

          <div class="password-reset-form__field">
            <button type="submit" class="password-reset-form__submit">
              <span id="submitText">{t("auth.password_reset_confirm.submit")}</span>
              <span
                id="loadingSpinner"
                class="password-reset-form__spinner password-reset-form__spinner--hidden"
              >
                <Icon 
                  name="refresh" 
                  class="password-reset-form__spinner-icon" 
                  aria-hidden="true" 
                />
              </span>
            </button>
          </div>
        </form>
      </>
    )
  }

  <div class="password-reset-form__footer">
    <a href={`/${String(lang)}/auth/login`} class="password-reset-form__link">
      {t("auth.password_reset.login")}
    </a>
  </div>
</div>

<script type="module" is:inline define:vars={{ translations }}>
  /* eslint-disable @typescript-eslint/explicit-function-return-type */
  /**
   * Password Reset Form Client-Side Logic
   * Handles form validation, password strength, accessibility
   */

  // Email validation function
  const validateEmail = (email) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  // Password validation function
  const validatePassword = (password) => {
    const errors = [];
    
    if (password.length < 8) {
      errors.push("auth.password.min_length_error");
    }
    
    if (!/[A-Z]/.test(password)) {
      errors.push("auth.password.uppercase_error");
    }
    
    if (!/[a-z]/.test(password)) {
      errors.push("auth.password.lowercase_error");
    }
    
    if (!/[0-9]/.test(password)) {
      errors.push("auth.password.number_error");
    }
    
    if (!/[!@#$%^&*(),.?":{}|<>]/.test(password)) {
      errors.push("auth.password.special_char_error");
    }
    
    const commonPasswords = ["password", "123456", "password123", "admin", "qwerty"];
    if (commonPasswords.some(common => password.toLowerCase().includes(common))) {
      errors.push("auth.password.common_password_error");
    }
    
    if (/(.)\1{2,}/.test(password)) {
      errors.push("auth.password.repeats_error");
    }
    
    if (/123|abc|qwe|asd|zxc/i.test(password)) {
      errors.push("auth.password.sequence_error");
    }
    
    return {
      valid: errors.length === 0,
      errors
    };
  };

  // Password strength calculation with modern ES6+ features
  const calculatePasswordStrength = (password = '') => {
    if (!password) {return { score: 0, level: "very_weak" };}
    
    const commonPasswords = ["password", "123456", "password123", "admin", "qwerty"];
    const hasCommonPassword = commonPasswords.some(common => 
      password.toLowerCase().includes(common)
    );
    
    const patterns = {
      lowercase: /[a-z]/,
      uppercase: /[A-Z]/,
      numbers: /[0-9]/,
      special: /[!@#$%^&*(),.?":{}|<>]/,
      repeats: /(.)\1{2,}/,
      sequences: /123|abc|qwe|asd|zxc/i
    };
    
    let score = Math.min(40, password.length * 2);
    
    // Add points for complexity
    Object.values(patterns).slice(0, 4).forEach(pattern => {
      if (pattern.test(password)) {score += 10;}
    });
    
    if (password.length > 12) {score += 10;}
    
    // Penalties
    if (hasCommonPassword) {score -= 30;}
    if (patterns.repeats.test(password)) {score -= 10;}
    if (patterns.sequences.test(password)) {score -= 10;}
    
    score = Math.max(0, Math.min(100, score));
    
    const levels = [
      { min: 80, level: "very_strong" },
      { min: 60, level: "strong" },
      { min: 40, level: "medium" },
      { min: 20, level: "weak" }
    ];
    
    const { level } = levels.find(({ min }) => score >= min) ?? { level: "very_weak" };
    
    return { score, level };
  };

  // Enhanced suggestion system with modern syntax
  const provideSuggestion = (errorType, inputValue = '') => {
    if (!inputValue) {return '';}
    
    const commonDomains = ['gmail.com', 'yahoo.com', 'outlook.com', 'hotmail.com', 'icloud.com', 'web.de', 'gmx.de'];
    
    if (errorType === 'email') {
      const atIndex = inputValue.lastIndexOf('@');
      
      if (atIndex > 0 && atIndex < inputValue.length - 1) {
        const domain = inputValue.substring(atIndex + 1).toLowerCase();
        
        if (commonDomains.includes(domain)) {return '';}
        
        const suggestion = findClosestDomain(domain, commonDomains);
        return suggestion && domain !== suggestion 
          ? `Did you mean: ${inputValue.substring(0, atIndex + 1)}${suggestion}?`
          : '';
      }
      
      if (atIndex === -1) {return 'Email addresses require an @ symbol. Try: yourname@example.com';}
      if (atIndex === inputValue.length - 1) {return 'Please add a domain after @. Try: yourname@gmail.com';}
    }
    
    if (errorType === 'password') {
      const suggestions = [];
      const checks = [
        { test: (pwd) => pwd.length < 8, msg: 'Make it at least 8 characters long' },
        { test: (pwd) => !/[A-Z]/.test(pwd), msg: 'Add an uppercase letter (A-Z)' },
        { test: (pwd) => !/[a-z]/.test(pwd), msg: 'Add a lowercase letter (a-z)' },
        { test: (pwd) => !/[0-9]/.test(pwd), msg: 'Add a number (0-9)' },
        { test: (pwd) => !/[!@#$%^&*(),.?":{}|<>]/.test(pwd), msg: 'Add a special character (!@#$%^&*)' }
      ];
      
      checks.forEach(({ test, msg }) => {
        if (test(inputValue)) {suggestions.push(msg);}
      });
      
      return suggestions.length > 0 ? `To improve your password: ${suggestions.join(', ')}` : '';
    }
    
    return '';
  };

  // Optimized domain matching with modern array methods
  const findClosestDomain = (input, domains) => {
    const distances = domains.map(domain => ({
      domain,
      distance: levenshteinDistance(input, domain)
    }));
    
    const closest = distances
      .filter(({ distance }) => distance <= 2)
      .sort((a, b) => a.distance - b.distance)[0];
    
    return closest?.domain ?? null;
  };

  // Efficient Levenshtein distance calculation
  const levenshteinDistance = (a, b) => {
    const matrix = Array(b.length + 1).fill().map(() => Array(a.length + 1).fill(0));
    
    for (let i = 0; i <= b.length; i++) {matrix[i][0] = i;}
    for (let j = 0; j <= a.length; j++) {matrix[0][j] = j;}
    
    for (let i = 1; i <= b.length; i++) {
      for (let j = 1; j <= a.length; j++) {
        const cost = b[i - 1] === a[j - 1] ? 0 : 1;
        matrix[i][j] = Math.min(
          matrix[i - 1][j] + 1,     // deletion
          matrix[i][j - 1] + 1,     // insertion
          matrix[i - 1][j - 1] + cost // substitution
        );
      }
    }
    
    return matrix[b.length][a.length];
  };

  // Form initialization with modern syntax
  const isConfirmReset = !!document.getElementById("token");

  // Initialize appropriate form based on mode
  if (!isConfirmReset) {
    initializeRequestForm();
  } else {
    initializeConfirmationForm();
  }

  // Session timeout removed - no longer needed with new auth flow

  /**
   * Initialize password reset request form with modern ES6+ syntax
   */
  const initializeRequestForm = () => {
    const form = document.getElementById("passwordResetForm");
    if (!form) {return;}

    const elements = {
      email: document.getElementById("email"),
      emailError: document.getElementById("emailError"),
      formError: document.getElementById("formError"),
      formSuccess: document.getElementById("formSuccess"),
      submitText: document.getElementById("submitText"),
      loadingSpinner: document.getElementById("loadingSpinner")
    };

    const validateEmailField = () => {
      const { email, emailError } = elements;
      
      if (!email?.value) {
        showError(emailError, translations["auth.form.email_required"]);
        return false;
      }
      
      if (!validateEmail(email.value)) {
        const suggestion = provideSuggestion('email', email.value);
        const errorMessage = suggestion 
          ? `${translations["auth.form.email_invalid_format"]} ${suggestion}` 
          : translations["auth.form.email_invalid_format"];
        showError(emailError, errorMessage);
        return false;
      }
      
      return true;
    };

    const submitForm = async (e) => {
      e.preventDefault();
      
      resetErrorDisplays([elements.emailError, elements.formError, elements.formSuccess]);
      
      if (!validateEmailField()) {return;}

      setLoadingState(elements.submitText, elements.loadingSpinner, translations["auth.form.loading_text"], true);

      try {
        const currentLang = document.documentElement.lang ?? "de";
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 10000);
        
        await fetch(`/${currentLang}/api/auth/reset-password`, {
          method: "POST",
          headers: { 
            "Content-Type": "application/json",
            "Accept": "application/json"
          },
          body: JSON.stringify({ email: elements.email.value }),
          signal: controller.signal,
          priority: "high"
        });

        clearTimeout(timeoutId);
        
        showSuccess(elements.formSuccess, translations["auth.password_reset.success_message"]);
        form.reset();
      } catch (error) {
        const errorMessage = error.name === 'AbortError'
          ? translations["auth.password_reset.timeout_error"] ?? translations["auth.password_reset.error_message"]
          : translations["auth.password_reset.error_message"];
        showError(elements.formError, errorMessage);
      } finally {
        setLoadingState(
          elements.submitText,
          elements.loadingSpinner,
          translations["auth.form.send_reset_link"],
          false
        );
      }
    };

    form.addEventListener("submit", submitForm);
  };

  /**
   * Initialize password reset confirmation form with modern ES6+ syntax
   */
  const initializeConfirmationForm = () => {
    const form = document.getElementById("passwordResetConfirmForm");
    if (!form) {return;}

    const elements = getConfirmationFormElements();
    initializeConfirmationFormUI();
    setupRealTimeValidation(elements);
    setupFormSubmission(form, elements);
  };

  /**
   * Get form elements for confirmation form
   */
  const getConfirmationFormElements = () => ({
    password: document.getElementById("password"),
    passwordConfirm: document.getElementById("passwordConfirm"),
    token: document.getElementById("token"),
    passwordError: document.getElementById("passwordError"),
    passwordConfirmError: document.getElementById("passwordConfirmError"),
    formError: document.getElementById("formError"),
    formSuccess: document.getElementById("formSuccess"),
    submitText: document.getElementById("submitText"),
    loadingSpinner: document.getElementById("loadingSpinner")
  });

  /**
   * Initialize UI components for confirmation form
   */
  const initializeConfirmationFormUI = () => {
    initializePasswordToggles();
    initializeRequirementsToggle();
    initializeContextualHelp();
  };

  /**
   * Setup real-time validation with debouncing
   */
  const setupRealTimeValidation = (elements) => {
    let validationTimeout;
    let inputCount = 0;
    
    const debouncedValidation = () => {
      clearTimeout(validationTimeout);
      inputCount++;
      
      const delay = inputCount < 3 ? 100 : 200;
      
      validationTimeout = setTimeout(() => {
        updatePasswordRequirements();
        inputCount = 0;
      }, delay);
    };

    const eventOptions = { passive: true };
    elements.password?.addEventListener("input", debouncedValidation, eventOptions);
    elements.passwordConfirm?.addEventListener("input", debouncedValidation, eventOptions);
  };

  /**
   * Setup form submission handler
   */
  const setupFormSubmission = (form, elements) => {
    const handleSubmit = async (e) => {
      e.preventDefault();
      
      if (!validateConfirmationForm(elements)) {return;}

      await submitConfirmationForm(elements);
    };

    form.addEventListener("submit", handleSubmit);
  };

  /**
   * Validate confirmation form fields
   */
  const validateConfirmationForm = (elements) => {
    const { password, passwordConfirm, passwordError, passwordConfirmError } = elements;
    
    resetErrorDisplays([
      passwordError, 
      passwordConfirmError, 
      elements.formError, 
      elements.formSuccess
    ]);

    // Password validation
    if (!password?.value) {
      showError(passwordError, translations["auth.form.password_required"]);
      return false;
    }
    
    const validation = validatePassword(password.value);
    if (!validation.valid) {
      showError(passwordError, translations["auth.form.password_requirements"]);
      return false;
    }

    // Password confirmation validation
    if (!passwordConfirm?.value) {
      showError(passwordConfirmError, translations["auth.form.password_confirm_required"]);
      return false;
    }
    
    if (password.value !== passwordConfirm.value) {
      showError(passwordConfirmError, translations["auth.form.passwords_not_match"]);
      return false;
    }

    return true;
  };

  /**
   * Submit confirmation form
   */
  const submitConfirmationForm = async (elements) => {
    setLoadingState(elements.submitText, elements.loadingSpinner, translations["auth.form.loading_text"], true);

    try {
      const currentLang = document.documentElement.lang ?? "de";
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 15000);
      
      const response = await fetch(`/${currentLang}/api/auth/reset-password`, {
        method: "PUT",
        headers: { 
          "Content-Type": "application/json",
          "Accept": "application/json"
        },
        body: JSON.stringify({
          token: elements.token?.value,
          newPassword: elements.password.value,
        }),
        signal: controller.signal,
        priority: "high"
      });

      clearTimeout(timeoutId);
      
      const data = await response.json();

      if (response.ok) {
        handleSuccessfulSubmission(elements);
      } else {
        showError(elements.formError, data.error ?? translations["auth.password_reset.complete_error"]);
      }
    } catch (error) {
      handleSubmissionError(elements, error);
    } finally {
      setLoadingState(
        elements.submitText,
        elements.loadingSpinner,
        translations["auth.password_reset_confirm.submit"],
        false
      );
    }
  };

  /**
   * Handle successful form submission
   */
  const handleSuccessfulSubmission = (elements) => {
    showSuccess(
      elements.formSuccess,
      translations["auth.password_reset.complete_success"]
    );
    
    const form = document.getElementById("passwordResetConfirmForm");
    form?.reset();
    updatePasswordRequirements();

    setTimeout(() => {
      const currentLang = document.documentElement.lang ?? "de";
      window.location.href = `/${currentLang}/auth/login`;
    }, 3000);
  };

  /**
   * Handle form submission error
   */
  const handleSubmissionError = (elements, error) => {
    const errorMessage = error.name === 'AbortError'
      ? translations["auth.password_reset.timeout_error"] ?? translations["auth.password_reset.error_message"]
      : translations["auth.password_reset.error_message"];
    showError(elements.formError, errorMessage);
  };

  /**
   * Initialize password visibility toggles with modern ES6+ syntax
   */
  const initializePasswordToggles = () => {
    const elements = {
      togglePassword: document.getElementById("togglePassword"),
      togglePasswordConfirm: document.getElementById("togglePasswordConfirm"),
      passwordInput: document.getElementById("password"),
      passwordConfirmInput: document.getElementById("passwordConfirm")
    };

    const handleToggle = (input, button) => () => togglePasswordVisibility(input, button);

    elements.togglePassword?.addEventListener("click", handleToggle(elements.passwordInput, elements.togglePassword));
    elements.togglePasswordConfirm?.addEventListener("click", handleToggle(elements.passwordConfirmInput, elements.togglePasswordConfirm));
  };

  /**
   * Initialize contextual help functionality with modern syntax
   */
  const initializeContextualHelp = () => {
    const helpButton = document.getElementById("passwordHelpButton");
    const helpTooltip = document.getElementById("passwordHelpTooltip");

    if (!helpButton || !helpTooltip) {return;}

    let isTooltipVisible = false;

    const toggleTooltip = () => {
      isTooltipVisible = !isTooltipVisible;
      
      helpButton.setAttribute("aria-expanded", isTooltipVisible.toString());
      helpTooltip.setAttribute("aria-hidden", (!isTooltipVisible).toString());
      
      if (isTooltipVisible) {
        helpTooltip.classList.remove("password-reset-form__help-tooltip--hidden");
        helpTooltip.focus();
      } else {
        helpTooltip.classList.add("password-reset-form__help-tooltip--hidden");
        helpButton.focus();
      }
    };

    const handleMouseLeave = () => {
      if (isTooltipVisible) {
        setTimeout(() => {
          if (!helpTooltip.matches(':hover') && !helpButton.matches(':hover')) {
            toggleTooltip();
          }
        }, 100);
      }
    };

    const handleKeydown = (e) => {
      if (e.key === "Enter" || e.key === " ") {
        e.preventDefault();
        toggleTooltip();
      } else if (e.key === "Escape" && isTooltipVisible) {
        toggleTooltip();
      }
    };

    const handleClickOutside = (e) => {
      if (isTooltipVisible && !helpButton.contains(e.target) && !helpTooltip.contains(e.target)) {
        toggleTooltip();
      }
    };

    // Event listeners
    helpButton.addEventListener("mouseenter", () => !isTooltipVisible && toggleTooltip());
    helpButton.addEventListener("mouseleave", handleMouseLeave);
    helpButton.addEventListener("click", (e) => { e.preventDefault(); toggleTooltip(); });
    helpButton.addEventListener("keydown", handleKeydown);
    document.addEventListener("click", handleClickOutside);
    document.addEventListener("keydown", (e) => e.key === "Escape" && isTooltipVisible && toggleTooltip());
  };

  /**
   * Initialize requirements panel toggle with modern syntax
   */
  const initializeRequirementsToggle = () => {
    const toggleButton = document.getElementById("toggleRequirements");
    const requirementsPanel = document.getElementById("passwordRequirements");
    const statusElement = document.getElementById("requirementsPanelStatus");

    if (!toggleButton || !requirementsPanel) {return;}

    const handleToggle = () => {
      const isExpanded = toggleButton.getAttribute("aria-expanded") === "true";
      const newExpanded = !isExpanded;
      
      toggleButton.setAttribute("aria-expanded", newExpanded.toString());
      requirementsPanel.classList.toggle("password-reset-form__requirements--hidden");
      requirementsPanel.setAttribute("aria-hidden", (!newExpanded).toString());

      if (statusElement) {
        const statusText = newExpanded 
          ? translations["auth.accessibility.requirements.expanded"] 
          : translations["auth.accessibility.requirements.collapsed"];
        statusElement.textContent = statusText;
      }

      if (newExpanded) {
        updatePasswordRequirements();
      }
    };

    toggleButton.addEventListener("click", handleToggle);
  };

  /**
   * Update password requirements indicators and strength meter with modern ES6+ syntax
   */
  const updatePasswordRequirements = () => {
    const cachedElements = updatePasswordRequirements.cache ?? (updatePasswordRequirements.cache = {
      passwordInput: document.getElementById("password"),
      passwordConfirmInput: document.getElementById("passwordConfirm"),
      requirements: [
        "req-length", "req-uppercase", "req-lowercase", "req-number", 
        "req-special", "req-common", "req-repeats", "req-sequences", "req-match"
      ].reduce((acc, id) => ({ ...acc, [id]: document.getElementById(id) }), {}),
      strengthBar: document.getElementById("passwordStrength"),
      strengthText: document.getElementById("strengthText"),
      strengthProgressBar: document.querySelector('.password-reset-form__strength-bar[role="progressbar"]'),
      strengthDescription: document.getElementById("passwordStrengthDescription")
    });

    const password = cachedElements.passwordInput?.value ?? "";
    const passwordConfirm = cachedElements.passwordConfirmInput?.value ?? "";

    requestAnimationFrame(() => {
      const validation = validatePassword(password);
      const strengthResult = calculatePasswordStrength(password);
      
      const requirementStates = {
        "req-length": !validation.errors.includes("auth.password.min_length_error"),
        "req-uppercase": !validation.errors.includes("auth.password.uppercase_error"),
        "req-lowercase": !validation.errors.includes("auth.password.lowercase_error"),
        "req-number": !validation.errors.includes("auth.password.number_error"),
        "req-special": !validation.errors.includes("auth.password.special_char_error"),
        "req-common": !validation.errors.includes("auth.password.common_password_error"),
        "req-repeats": !validation.errors.includes("auth.password.repeats_error"),
        "req-sequences": !validation.errors.includes("auth.password.sequence_error"),
        "req-match": password && passwordConfirm && password === passwordConfirm
      };

      Object.entries(requirementStates).forEach(([id, isValid]) => {
        const element = cachedElements.requirements[id];
        if (element) {
          updateRequirementIndicator(element, isValid);
        }
      });

      if (cachedElements.strengthBar && cachedElements.strengthText) {
        updateStrengthMeterOptimized(
          cachedElements.strengthBar, 
          cachedElements.strengthText, 
          strengthResult,
          cachedElements.strengthProgressBar,
          cachedElements.strengthDescription
        );
      }
    });
  };

  /**
   * Update individual requirement indicator with modern syntax
   */
  const updateRequirementIndicator = (element, isValid) => {
    if (!element) {return;}

    const baseClass = "password-reset-form__requirement";
    const validityClass = isValid ? `${baseClass}--valid` : `${baseClass}--invalid`;
    element.className = `${baseClass} ${validityClass}`;

    if (!element._cachedChildren) {
      element._cachedChildren = {
        icon: element.querySelector(".password-reset-form__requirement-icon"),
        description: element.querySelector("[id$='-desc']")
      };
    }

    const { icon, description } = element._cachedChildren;
    
    if (icon) {
      icon.textContent = isValid ? "✓" : "✗";
    }
    
    if (description) {
      const statusText = isValid 
        ? translations["auth.accessibility.requirement.met"] 
        : translations["auth.accessibility.requirement.unmet"];
      description.textContent = statusText;
    }
  };

  /**
   * Optimized password strength meter update with modern syntax
   */
  const updateStrengthMeterOptimized = (strengthBar, strengthText, strengthResult, strengthProgressBar, strengthDescription) => {
    if (!strengthBar || !strengthText || !strengthResult) {return;}

    const strengthLevel = strengthResult.level.toLowerCase().replace(/[_-]/g, '_');
    const strengthScore = strengthResult.score;
    const progressWidth = `${Math.min(100, Math.max(0, strengthScore))}%`;
    
    strengthBar.style.width = progressWidth;
    strengthBar.className = `password-reset-form__strength-progress password-reset-form__strength-progress--${strengthLevel}`;
    strengthText.className = `password-reset-form__strength-text password-reset-form__strength-text--${strengthLevel}`;

    const strengthTextContent = translations[`auth.password.strength.${strengthLevel}`] ?? 
                               translations["auth.password.strength.weak"];
    strengthText.textContent = strengthTextContent;

    if (strengthProgressBar) {
      strengthProgressBar.setAttribute('aria-valuenow', strengthScore.toString());
      const percentageText = `${strengthScore}% ${strengthTextContent}`;
      strengthProgressBar.setAttribute('aria-valuetext', percentageText);
    }

    const strengthLabel = translations["auth.password.strength"];
    strengthText.setAttribute("aria-label", `${strengthLabel}: ${strengthTextContent}, ${strengthScore}% complete`);

    if (strengthDescription) {
      const detailsText = translations["auth.password.strength.description"] ?? 
                         "Password strength indicator shows how secure your password is";
      strengthDescription.textContent = `${detailsText} Current strength: ${strengthTextContent} at ${strengthScore} percent`;
    }
  };

  /**
   * Toggle password visibility with modern ES6+ syntax
   */
  const togglePasswordVisibility = (input, button) => {
    if (!input || !button) {return;}

    const isPassword = input.type === "password";
    input.type = isPassword ? "text" : "password";

    const showIcon = button.querySelector(".show-password");
    const hideIcon = button.querySelector(".hide-password");

    if (showIcon && hideIcon) {
      const hiddenClass = "password-reset-form__toggle-hidden";
      if (isPassword) {
        showIcon.classList.add(hiddenClass);
        hideIcon.classList.remove(hiddenClass);
      } else {
        showIcon.classList.remove(hiddenClass);
        hideIcon.classList.add(hiddenClass);
      }
    }

    button.setAttribute("aria-pressed", isPassword ? "true" : "false");

    const statusElement = button.getAttribute("aria-describedby");
    const statusDiv = statusElement ? document.getElementById(statusElement) : null;
    if (statusDiv) {
      const statusText = isPassword 
        ? translations["auth.accessibility.password.visible"] 
        : translations["auth.accessibility.password.hidden"];
      statusDiv.textContent = statusText;
    }

    input.focus();
  };

  // Optimized utility functions with modern syntax
  
  /**
   * Reset error displays efficiently
   */
  const resetErrorDisplays = (elements) => {
    elements.forEach((element) => {
      if (element) {
        element.textContent = "";
        element.classList.add(
          "password-reset-form__error--hidden",
          "password-reset-form__message--hidden"
        );
      }
    });
  };

  /**
   * Show error message with ARIA support
   */
  const showError = (element, message) => {
    if (element) {
      element.textContent = message;
      element.classList.remove(
        "password-reset-form__error--hidden",
        "password-reset-form__message--hidden"
      );
    }
  };

  /**
   * Show success message with ARIA support
   */
  const showSuccess = (element, message) => {
    if (element) {
      element.textContent = message;
      element.classList.remove("password-reset-form__message--hidden");
    }
  };

  /**
   * Set loading state with modern syntax
   */
  const setLoadingState = (textElement, spinnerElement, text, isLoading) => {
    if (textElement) {
      textElement.textContent = text;
    }
    if (spinnerElement) {
      const hiddenClass = "password-reset-form__spinner--hidden";
      if (isLoading) {
        spinnerElement.classList.remove(hiddenClass);
      } else {
        spinnerElement.classList.add(hiddenClass);
      }
    }
  };

  // Session timeout functionality removed - no longer needed with new auth flow

  // Session timeout removed - no longer needed with new auth flow
</script>

<style lang="scss">
  .password-reset-form {
    background-color: var(--bg-secondary);
    border: var(--border-width-thin) solid var(--border-primary);
    border-radius: var(--radius-lg);
    box-shadow: var(--shadow-lg);
    
    max-width: var(--container-sm);
    margin: 0 auto;
    padding: var(--space-2xl);
    
    transition: box-shadow var(--transition-normal);
    
    &:hover {
      box-shadow: var(--shadow-xl);
    }

    &__title {
      font-size: var(--text-3xl);
      font-weight: var(--font-bold);
      color: var(--text-primary);
      margin-bottom: var(--space-xl);
      text-align: center;

      @media (max-width: 47.9375em) {
        font-size: var(--text-xl);
      }

      @media (max-width: 30em) {
        font-size: var(--text-lg);
      }
    }

    &__description {
      font-size: var(--text-lg);
      line-height: var(--leading-relaxed);
      color: var(--text-secondary);
      margin-bottom: var(--space-2xl);
      text-align: center;

      @media (max-width: 47.9375em) {
        font-size: var(--text-base);
      }
    }

    &__form {
      display: flex;
      flex-direction: column;
      gap: var(--space-xl);

      @media (max-width: 47.9375em) {
        gap: var(--space-lg);
      }
    }

    &__fieldset {
      border: var(--border-width-thin) solid var(--border-secondary);
      border-radius: var(--radius-md);
      background-color: var(--bg-tertiary);
      padding: var(--space-xl);
      margin: var(--space-lg) 0;

      @media (max-width: 47.9375em) {
        padding: var(--space-lg);
        margin: var(--space-md) 0;
      }

      &-legend {
        padding: 0 var(--space-md);
        font-weight: var(--font-semibold);
        color: var(--text-primary);
        font-size: var(--text-lg);

        @media (max-width: 47.9375em) {
          font-size: var(--text-base);
          padding: 0 var(--space-sm);
        }
      }
    }

    &__field {
      display: flex;
      flex-direction: column;
      gap: var(--space-md);

      @media (max-width: 47.9375em) {
        gap: var(--space-sm);
      }
    }

    &__label {
      font-size: var(--text-base);
      font-weight: var(--font-medium);
      color: var(--text-primary);
      display: flex;
      align-items: center;
      gap: var(--space-sm);
      line-height: var(--leading-relaxed);
      letter-spacing: var(--letter-spacing-base);

      @media (max-width: 47.9375em) {
        font-size: var(--text-sm);
        gap: var(--space-xs);
      }
    }

    &__required {
      color: var(--color-error-600);
      font-weight: var(--font-bold);
      font-size: var(--text-lg);

      @media (max-width: 47.9375em) {
        font-size: var(--text-base);
      }
    }

    &__input-wrapper {
      position: relative;
    }

    &__input {
      background-color: var(--bg-tertiary);
      border: var(--border-width-thick) solid var(--border-secondary);
      border-radius: var(--radius-md);
      color: var(--text-primary);
      width: var(--width-full);
      min-height: var(--touch-target-enhanced);
      padding: var(--space-lg);
      font-size: var(--text-lg);
      line-height: var(--leading-relaxed);
      letter-spacing: var(--letter-spacing-base);
      appearance: none;
      transition: border-color var(--transition-normal), background-color var(--transition-normal), box-shadow var(--transition-normal);

      @media (max-width: 47.9375em) {
        padding: var(--space-md);
        font-size: var(--text-base);
      }

      &::placeholder {
        color: var(--text-muted);
        opacity: var(--opacity-medium);
        font-size: var(--text-lg);

        @media (max-width: 47.9375em) {
          font-size: var(--text-base);
        }
      }

      &:focus,
      &:focus-visible {
        border-color: var(--interactive-primary);
        background-color: var(--bg-secondary);
        outline: none;
        box-shadow: var(--focus-ring);
      }

      &:focus-visible {
        outline: var(--focus-outline);
        outline-offset: var(--focus-ring-offset);
        box-shadow: var(--focus-ring);
      }

      &:invalid {
        border-color: var(--color-error-500);
        background-color: var(--color-error-50);
      }

      &:disabled {
        background-color: var(--bg-disabled);
        color: var(--text-disabled);
        cursor: not-allowed;
        opacity: var(--opacity-disabled);
      }

      &--with-toggle {
        padding-right: calc(var(--touch-target-enhanced) + var(--space-sm));
      }
    }

    &__instructions {
      background-color: var(--bg-tertiary);
      border: var(--border-width-thin) solid var(--border-secondary);
      border-radius: var(--radius-md);
      padding: var(--space-xl);
      margin-bottom: var(--space-2xl);

      @media (max-width: 47.9375em) {
        padding: var(--space-lg);
        margin-bottom: var(--space-lg);
      }

      &-title {
        font-size: var(--text-xl);
        font-weight: var(--font-semibold);
        color: var(--text-primary);
        margin-bottom: var(--space-lg);

        @media (max-width: 47.9375em) {
          font-size: var(--text-base);
        }
      }

      &-list {
        margin: 0;
        padding-left: var(--space-xl);
        color: var(--text-secondary);

        @media (max-width: 47.9375em) {
          padding-left: var(--space-lg);
        }

        li {
          margin-bottom: var(--space-sm);
          line-height: var(--leading-relaxed);
          font-size: var(--text-base);

          @media (max-width: 47.9375em) {
            font-size: var(--text-sm);
            margin-bottom: var(--space-xs);
          }

          &:last-child {
            margin-bottom: 0;
          }
        }
      }
    }

    &__toggle {
      position: absolute;
      right: var(--space-md);
      top: 50%;
      transform: translateY(-50%);
      background: transparent;
      border: none;
      border-radius: var(--radius-sm);
      color: var(--text-secondary);
      cursor: pointer;
      width: var(--touch-target-enhanced);
      height: var(--touch-target-enhanced);
      min-width: var(--touch-target-enhanced);
      min-height: var(--touch-target-enhanced);
      display: flex;
      align-items: center;
      justify-content: center;
      transition: background-color var(--transition-normal), color var(--transition-normal);

      @media (max-width: 47.9375em) {
        right: var(--space-sm);
      }

      &:hover {
        background-color: var(--bg-hover);
        color: var(--text-primary);
      }

      &:focus-visible {
        outline: var(--focus-outline);
        outline-offset: var(--focus-ring-offset);
        box-shadow: var(--focus-ring);
      }

      &:active {
        background-color: var(--bg-active);
      }

      &-icon {
        width: var(--space-xl);
        height: var(--space-xl);

        @media (max-width: 47.9375em) {
          width: var(--space-lg);
          height: var(--space-lg);
        }
      }

      &-hidden {
        display: none;
      }
    }

    &__message,
    &__error {
      padding: var(--space-lg);
      border-radius: var(--radius-md);
      border: var(--border-width-thin) solid;
      font-size: var(--text-base);
      line-height: var(--leading-relaxed);
      font-weight: var(--font-medium);
      margin-top: var(--space-md);
      transition: opacity var(--transition-normal);

      @media (max-width: 47.9375em) {
        padding: var(--space-md);
        font-size: var(--text-sm);
        margin-top: var(--space-sm);
      }

      &--error {
        background-color: var(--color-error-50);
        color: var(--color-error-800);
        border-color: var(--color-error-300);
      }

      &--success {
        background-color: var(--color-success-50);
        color: var(--color-success-800);
        border-color: var(--color-success-300);
      }

      &--hidden {
        display: none;
      }
    }

    &__error {
      background-color: var(--color-error-50);
      color: var(--color-error-800);
      border-color: var(--color-error-300);

      &--hidden {
        display: none;
      }
    }

    &__submit {
      background-color: var(--interactive-primary);
      color: var(--btn-primary-text);
      border: none;
      border-radius: var(--radius-md);
      box-shadow: var(--shadow-md);
      min-height: var(--touch-target-enhanced);
      width: var(--width-full);
      padding: var(--space-lg) var(--space-xl);
      font-size: var(--text-lg);
      font-weight: var(--font-medium);
      line-height: var(--leading-normal);
      letter-spacing: var(--letter-spacing-base);
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: var(--space-md);
      transition: background-color var(--transition-normal), box-shadow var(--transition-normal);

      @media (max-width: 47.9375em) {
        padding: var(--space-md) var(--space-lg);
        font-size: var(--text-base);
        gap: var(--space-sm);
      }

      &:hover:not(:disabled) {
        background-color: var(--interactive-primary-hover);
        box-shadow: var(--shadow-lg);
      }

      &:focus-visible {
        outline: var(--focus-outline);
        outline-offset: var(--focus-ring-offset);
        box-shadow: var(--focus-ring), var(--shadow-lg);
      }

      &:active:not(:disabled) {
        background-color: var(--interactive-primary-hover);
        box-shadow: var(--shadow-md);
      }

      &:disabled {
        background-color: var(--bg-disabled);
        color: var(--text-disabled);
        cursor: not-allowed;
        opacity: var(--opacity-disabled);
        box-shadow: none;
        pointer-events: none;
      }
    }

    &__spinner {
      width: var(--space-xl);
      height: var(--space-xl);
      animation: password-reset-spinner-rotate var(--animation-duration-normal) linear infinite;

      @media (max-width: 47.9375em) {
        width: var(--space-lg);
        height: var(--space-lg);
      }

      &--hidden {
        display: none;
      }

      &-icon {
        width: var(--space-xl);
        height: var(--space-xl);
        animation: password-reset-spinner-rotate var(--animation-duration-normal) linear infinite;

        @media (max-width: 47.9375em) {
          width: var(--space-lg);
          height: var(--space-lg);
        }
      }
    }

    &__help-button {
      background: transparent;
      border: var(--border-width-thin) solid var(--border-secondary);
      border-radius: var(--radius-md);
      color: var(--text-secondary);
      cursor: pointer;
      min-height: var(--touch-target-enhanced);
      min-width: var(--touch-target-enhanced);
      padding: var(--space-md);
      font-size: var(--text-base);
      display: inline-flex;
      align-items: center;
      gap: var(--space-sm);
      position: relative;
      transition: background-color var(--transition-normal), color var(--transition-normal), border-color var(--transition-normal);

      @media (max-width: 47.9375em) {
        padding: var(--space-sm);
        font-size: var(--text-sm);
        gap: var(--space-xs);
      }

      &:hover {
        background-color: var(--bg-hover);
        color: var(--text-primary);
        border-color: var(--border-primary);
      }

      &:focus-visible {
        outline: var(--focus-outline);
        outline-offset: var(--focus-ring-offset);
        box-shadow: var(--focus-ring);
      }

      &:active {
        background-color: var(--bg-active);
      }
    }

    &__help-icon {
      width: var(--space-lg);
      height: var(--space-lg);

      @media (max-width: 47.9375em) {
        width: var(--space-md);
        height: var(--space-md);
      }
    }

    &__help-tooltip {
      position: absolute;
      top: 100%;
      left: 0;
      right: 0;
      margin-top: var(--space-md);
      background-color: var(--bg-secondary);
      border: var(--border-width-thin) solid var(--border-primary);
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-lg);
      padding: var(--space-xl);
      max-width: var(--container-xs);
      z-index: var(--z-tooltip);
      transition: opacity var(--transition-normal), visibility var(--transition-normal);

      @media (max-width: 47.9375em) {
        margin-top: var(--space-sm);
        padding: var(--space-lg);
      }

      &--hidden {
        opacity: 0;
        visibility: hidden;
      }

      &:not(&--hidden) {
        opacity: 1;
        visibility: visible;
      }
    }

    &__help-content {
      color: var(--text-primary);
    }

    &__help-title {
      font-size: var(--text-lg);
      font-weight: var(--font-semibold);
      color: var(--text-primary);
      margin-bottom: var(--space-md);

      @media (max-width: 47.9375em) {
        font-size: var(--text-base);
        margin-bottom: var(--space-sm);
      }
    }

    &__help-text {
      font-size: var(--text-base);
      line-height: var(--leading-relaxed);
      color: var(--text-secondary);
      margin-bottom: var(--space-lg);

      @media (max-width: 47.9375em) {
        font-size: var(--text-sm);
        margin-bottom: var(--space-md);
      }
    }

    &__help-list {
      list-style: none;
      padding: 0;
      margin: 0;
      font-size: var(--text-base);

      @media (max-width: 47.9375em) {
        font-size: var(--text-sm);
      }

      li {
        padding: var(--space-sm) 0;
        color: var(--text-secondary);
        position: relative;
        padding-left: var(--space-xl);
        line-height: var(--leading-relaxed);

        @media (max-width: 47.9375em) {
          padding: var(--space-xs) 0;
          padding-left: var(--space-lg);
        }

        &::before {
          content: "•";
          color: var(--interactive-primary);
          position: absolute;
          left: 0;
          font-weight: var(--font-bold);
          font-size: var(--text-lg);

          @media (max-width: 47.9375em) {
            font-size: var(--text-base);
          }
        }
      }
    }

    &__requirements-section {
      margin-top: var(--space-xl);

      @media (max-width: 47.9375em) {
        margin-top: var(--space-lg);
      }
    }

    &__requirements-toggle {
      background: var(--bg-tertiary);
      border: var(--border-width-thin) solid var(--border-secondary);
      border-radius: var(--radius-md);
      color: var(--text-secondary);
      cursor: pointer;
      width: var(--width-full);
      min-height: var(--touch-target-enhanced);
      padding: var(--space-lg);
      font-size: var(--text-base);
      display: flex;
      align-items: center;
      gap: var(--space-md);
      transition: background-color var(--transition-normal), color var(--transition-normal);

      @media (max-width: 47.9375em) {
        padding: var(--space-md);
        font-size: var(--text-sm);
        gap: var(--space-sm);
      }

      &:hover {
        background-color: var(--bg-hover);
        color: var(--text-primary);
      }

      &:focus-visible {
        outline: var(--focus-outline);
        outline-offset: var(--focus-ring-offset);
        box-shadow: var(--focus-ring);
      }

      &:active {
        background-color: var(--bg-active);
      }

      &[aria-expanded="true"] {
        background-color: var(--bg-active);
        color: var(--text-primary);
      }
    }

    &__requirements-icon {
      width: var(--space-lg);
      height: var(--space-lg);
      flex-shrink: 0;

      @media (max-width: 47.9375em) {
        width: var(--space-md);
        height: var(--space-md);
      }
    }

    &__requirements {
      background-color: var(--bg-tertiary);
      border: var(--border-width-thin) solid var(--border-secondary);
      border-radius: var(--radius-md);
      padding: var(--space-xl);
      margin-top: var(--space-md);
      transition: opacity var(--transition-normal);

      @media (max-width: 47.9375em) {
        padding: var(--space-lg);
        margin-top: var(--space-sm);
      }

      &--hidden {
        display: none;
      }

      &-title {
        font-size: var(--text-lg);
        font-weight: var(--font-medium);
        color: var(--text-primary);
        margin-bottom: var(--space-lg);

        @media (max-width: 47.9375em) {
          font-size: var(--text-base);
          margin-bottom: var(--space-md);
        }
      }

      &-list {
        list-style: none;
        padding: 0;
        margin: 0;
        display: flex;
        flex-direction: column;
        gap: var(--space-md);

        @media (max-width: 47.9375em) {
          gap: var(--space-sm);
        }
      }
    }

    &__requirement {
      display: flex;
      align-items: center;
      gap: var(--space-md);
      padding: var(--space-md);
      border-radius: var(--radius-sm);
      font-size: var(--text-base);
      line-height: var(--leading-normal);
      transition: background-color var(--transition-normal), color var(--transition-normal), border-color var(--transition-normal);

      @media (max-width: 47.9375em) {
        gap: var(--space-sm);
        padding: var(--space-sm);
        font-size: var(--text-sm);
      }

      &--valid {
        background-color: var(--color-success-50);
        color: var(--color-success-800);
        border: var(--border-width-thin) solid var(--color-success-300);
      }

      &--invalid {
        background-color: var(--color-error-50);
        color: var(--color-error-800);
        border: var(--border-width-thin) solid var(--color-error-300);
      }

      &-icon {
        width: var(--space-lg);
        height: var(--space-lg);
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: var(--radius-full);
        font-weight: var(--font-bold);
        font-size: var(--text-sm);
        flex-shrink: 0;

        @media (max-width: 47.9375em) {
          width: var(--space-md);
          height: var(--space-md);
          font-size: var(--text-xs);
        }
      }

      &-text {
        flex: 1;
      }
    }

    &__strength {
      margin-top: var(--space-xl);

      @media (max-width: 47.9375em) {
        margin-top: var(--space-lg);
      }

      &-label {
        font-size: var(--text-base);
        color: var(--text-secondary);
        font-weight: var(--font-medium);
        margin-bottom: var(--space-md);

        @media (max-width: 47.9375em) {
          font-size: var(--text-sm);
          margin-bottom: var(--space-sm);
        }
      }

      &-bar {
        width: var(--width-full);
        height: var(--space-md);
        background-color: var(--bg-primary);
        border: var(--border-width-thin) solid var(--border-secondary);
        border-radius: var(--radius-full);
        overflow: hidden;

        @media (max-width: 47.9375em) {
          height: var(--space-sm);
        }
      }

      &-progress {
        height: var(--height-full);
        border-radius: var(--radius-full);
        transition: width var(--transition-normal), background-color var(--transition-normal);

        &--weak {
          background-color: var(--color-error-500);
        }

        &--medium {
          background-color: var(--color-warning-500);
        }

        &--strong {
          background-color: var(--color-success-500);
        }

        &--very_strong {
          background-color: var(--color-success-600);
        }
      }

      &-text {
        font-size: var(--text-base);
        font-weight: var(--font-medium);
        margin-top: var(--space-md);
        transition: color var(--transition-normal);

        @media (max-width: 47.9375em) {
          font-size: var(--text-sm);
          margin-top: var(--space-sm);
        }

        &--weak {
          color: var(--color-error-700);
        }

        &--medium {
          color: var(--color-warning-700);
        }

        &--strong {
          color: var(--color-success-700);
        }

        &--very_strong {
          color: var(--color-success-800);
        }
      }
    }

    // Footer
    &__footer {
      text-align: center;
      margin-top: clamp(var(--space-xl), 5vw, var(--space-2xl));
      
      // Performance optimizations
      contain: layout style;
    }

    &__link {
      color: var(--interactive-primary);
      text-decoration: underline;
      
      font-size: clamp(var(--text-sm), 3vw, var(--text-base));
      
      padding: clamp(var(--space-sm), 2vw, var(--space-md));
      
      border-radius: var(--radius-sm);
      
      display: inline-block;
      min-height: var(--touch-target-enhanced);
      
      // Performance optimizations
      contain: layout style;
      transform: translateZ(0);
      will-change: transform, background-color, color;
      
      transition:
        color var(--transition-normal),
        background-color var(--transition-normal),
        transform var(--transition-fast);

      &:hover {
        color: var(--interactive-primary-hover);
        text-decoration: none;
        background-color: var(--bg-hover);
        transform: translateY(calc(-1 * var(--space-micro))) translateZ(0);
      }

      &:focus-visible {
        outline: var(--focus-outline);
        outline-offset: var(--focus-ring-offset);
        background-color: var(--bg-focus);
        box-shadow: var(--focus-ring);
      }

      &:active {
        transform: translateY(var(--space-none)) scale(0.98) translateZ(0);
      }
    }
  }

  @keyframes password-reset-spinner-rotate {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  @media (prefers-contrast: high) {
    .password-reset-form {
      border: var(--border-width-thick) solid var(--border-primary);

      &__input,
      &__submit,
      &__toggle {
        border-width: var(--border-width-thick);
      }

      &__input:focus,
      &__submit:focus,
      &__toggle:focus {
        outline-width: var(--border-width-thick);
      }
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .password-reset-form {
      &__spinner,
      &__requirements,
      &__help-tooltip,
      &__input,
      &__submit,
      &__toggle,
      &__link {
        animation: none;
        transition: var(--transition-instant);
      }

      &__spinner-icon {
        animation: none;
      }
    }
  }

  @media (hover: none) and (pointer: coarse) {
    .password-reset-form {
      &__input,
      &__submit,
      &__toggle {
        min-height: calc(var(--touch-target-enhanced) + var(--space-sm));
      }
    }
  }

  @media print {
    .password-reset-form {
      background: var(--color-white);
      border: var(--border-width-thin) solid var(--color-black);
      box-shadow: none;
      color: var(--color-black);
      max-width: none;

      &__spinner,
      &__toggle,
      &__help-tooltip {
        display: none;
      }

      &__submit {
        background: var(--color-white);
        color: var(--color-black);
        border: var(--border-width-thin) solid var(--color-black);
        box-shadow: none;
      }

      &__input {
        background: var(--color-white);
        color: var(--color-black);
        border: var(--border-width-thin) solid var(--color-black);
      }
    }
  }
</style>
