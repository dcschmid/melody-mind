---
/**
 * PasswordResetForm Component for MelodyMind
 *
 * This component provides a form for resetting passwords with two distinct modes:
 * 1. Request mode: Allows users to request a password reset by entering their email address
 * 2. Confirmation mode: Allows users to set a new password using a valid reset token
 *
 * Features:
 * - Client-side form validation with detailed error feedback
 * - Password strength meter with real-time validation
 * - WCAG AAA accessibility compliance
 * - Multi-language support
 * - Password visibility toggle
 * - Password requirements checklist with visual indicators
 * - Responsive design using Tailwind CSS
 *
 * Security features:
 * - Strong password enforcement
 * - Common password detection
 * - Protection against sequential character patterns
 * - Protection against repeated characters
 * - Password strength calculation
 *
 * The component automatically detects which mode to display based on the presence
 * of a token parameter in the URL.
 *
 * @component
 * @example
 * ```astro
 * <PasswordResetForm />
 * ```
 */
import { getLangFromUrl, useTranslations } from "@utils/i18n";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(String(lang));

// Check if a token is present in the URL (for password reset confirmation)
const url = new URL(Astro.request.url);
const token = url.searchParams.get("token");
const isConfirmReset = !!token;

// Übersetzungen für den JavaScript-Teil
const translations = {
  "auth.form.email_required": t("auth.form.email_required"),
  "auth.form.email_invalid": t("auth.form.email_invalid"),
  "auth.form.loading_text": t("auth.form.loading_text"),
  "auth.form.send_reset_link": t("auth.form.send_reset_link"),
  "auth.form.password_required": t("auth.form.password_required"),
  "auth.form.password_requirements": t("auth.form.password_requirements"),
  "auth.form.password_confirm_required": t(
    "auth.form.password_confirm_required",
  ),
  "auth.form.passwords_not_match": t("auth.form.passwords_not_match"),
  "auth.password_reset.success_message": t(
    "auth.password_reset.success_message",
  ),
  "auth.password_reset.error_message": t("auth.password_reset.error_message"),
  "auth.password_reset.complete_success": t(
    "auth.password_reset.complete_success",
  ),
  "auth.password_reset.complete_error": t("auth.password_reset.complete_error"),
};
---

<div class="auth-form-container">
  {
    !isConfirmReset ? (
      <>
        <h1 class="text-2xl font-bold mb-6 text-center">
          {t("auth.password_reset.title")}
        </h1>

        <div
          id="formError"
          class="hidden mb-4 p-3 bg-red-900/50 border border-red-700 text-white rounded-md"
          role="alert"
          aria-live="assertive"
        />
        <div
          id="formSuccess"
          class="hidden mb-4 p-3 bg-green-900/50 border border-green-700 text-white rounded-md"
          role="alert"
          aria-live="assertive"
        />

        <form
          id="passwordResetForm"
          class="space-y-6"
          novalidate
          aria-labelledby="passwordResetFormHeading"
        >
          <h2 id="passwordResetFormHeading" class="sr-only">
            {t("auth.password_reset.title")}
          </h2>

          <div>
            <label for="email" class="block text-sm font-medium mb-2">
              {t("auth.password_reset.email")}
              <span class="text-red-400" aria-hidden="true">
                *
              </span>
              <span class="sr-only">{t("auth.form.required")}</span>
            </label>
            <div class="relative">
              <input
                type="email"
                id="email"
                name="email"
                autocomplete="email"
                required
                class="w-full px-4 py-2 bg-zinc-800 border border-zinc-700 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-purple-400 focus:border-transparent"
                placeholder={t("auth.password_reset.email.placeholder")}
                aria-required="true"
              />
              <div id="emailError" class="text-red-400 text-sm mt-1 hidden" />
            </div>
          </div>

          <div>
            <button
              type="submit"
              class="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-purple-600 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 focus:ring-offset-zinc-900 transition-colors"
            >
              <span id="submitText">{t("auth.password_reset.submit")}</span>
              <span id="loadingSpinner" class="hidden">
                <svg
                  class="animate-spin ml-2 h-4 w-4 text-white"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                >
                  <circle
                    class="opacity-25"
                    cx="12"
                    cy="12"
                    r="10"
                    stroke="currentColor"
                    stroke-width="4"
                  />
                  <path
                    class="opacity-75"
                    fill="currentColor"
                    d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                  />
                </svg>
              </span>
            </button>
          </div>
        </form>
      </>
    ) : (
      <>
        <h1 class="text-2xl font-bold mb-6 text-center">
          {t("auth.password_reset_confirm.title")}
        </h1>

        <div
          id="formError"
          class="hidden mb-4 p-3 bg-red-900/50 border border-red-700 text-white rounded-md"
          role="alert"
          aria-live="assertive"
        />
        <div
          id="formSuccess"
          class="hidden mb-4 p-3 bg-green-900/50 border border-green-700 text-white rounded-md"
          role="alert"
          aria-live="assertive"
        />

        <form
          id="passwordResetConfirmForm"
          class="space-y-6"
          novalidate
          aria-labelledby="passwordResetConfirmFormHeading"
        >
          <h2 id="passwordResetConfirmFormHeading" class="sr-only">
            {t("auth.password_reset_confirm.title")}
          </h2>

          <input type="hidden" id="token" name="token" value={token} />

          <div>
            <label for="password" class="block text-sm font-medium mb-2">
              {t("auth.password_reset_confirm.password")}
              <span class="text-red-400" aria-hidden="true">
                *
              </span>
              <span class="sr-only">{t("auth.form.required")}</span>
            </label>
            <div class="relative">
              <input
                type="password"
                id="password"
                name="password"
                autocomplete="new-password"
                required
                class="w-full px-4 py-2 bg-zinc-800 border border-zinc-700 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-purple-400 focus:border-transparent"
                placeholder={t(
                  "auth.password_reset_confirm.password.placeholder",
                )}
                aria-required="true"
              />
              <button
                type="button"
                id="togglePassword"
                class="absolute inset-y-0 right-0 flex items-center px-3 text-gray-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-purple-400 focus:ring-offset-2 focus:ring-offset-zinc-900 rounded-md"
                aria-label={t("auth.accessibility.password_toggle")}
              >
                <span class="show-password">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke-width="1.5"
                    stroke="currentColor"
                    class="w-5 h-5"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      d="M2.036 12.322a1.012 1.012 0 010-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178z"
                    />
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                    />
                  </svg>
                </span>
                <span class="hide-password hidden">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke-width="1.5"
                    stroke="currentColor"
                    class="w-5 h-5"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      d="M3.98 8.223A10.477 10.477 0 001.934 12C3.226 16.338 7.244 19.5 12 19.5c.993 0 1.953-.138 2.863-.395M6.228 6.228A10.45 10.45 0 0112 4.5c4.756 0 8.773 3.162 10.065 7.498a10.523 10.523 0 01-4.293 5.774M6.228 6.228L3 3m3.228 3.228l3.65 3.65m7.894 7.894L21 21m-3.228-3.228l-3.65-3.65m0 0a3 3 0 10-4.243-4.243m4.242 4.242L9.88 9.88"
                    />
                  </svg>
                </span>
              </button>
              <div
                id="passwordError"
                class="text-red-400 text-sm mt-1 hidden"
              />
            </div>
          </div>

          <div>
            <label for="passwordConfirm" class="block text-sm font-medium mb-2">
              {t("auth.password_reset_confirm.password_confirm")}
              <span class="text-red-400" aria-hidden="true">
                *
              </span>
              <span class="sr-only">{t("auth.form.required")}</span>
            </label>
            <div class="relative">
              <input
                type="password"
                id="passwordConfirm"
                name="passwordConfirm"
                autocomplete="new-password"
                required
                class="w-full px-4 py-2 bg-zinc-800 border border-zinc-700 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-purple-400 focus:border-transparent"
                placeholder={t(
                  "auth.password_reset_confirm.password_confirm.placeholder",
                )}
                aria-required="true"
              />
              <button
                type="button"
                id="togglePasswordConfirm"
                class="absolute inset-y-0 right-0 flex items-center px-3 text-gray-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-purple-400 focus:ring-offset-2 focus:ring-offset-zinc-900 rounded-md"
                aria-label={t("auth.accessibility.password_toggle")}
              >
                <span class="show-password">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke-width="1.5"
                    stroke="currentColor"
                    class="w-5 h-5"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      d="M2.036 12.322a1.012 1.012 0 010-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178z"
                    />
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                    />
                  </svg>
                </span>
                <span class="hide-password hidden">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke-width="1.5"
                    stroke="currentColor"
                    class="w-5 h-5"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      d="M3.98 8.223A10.477 10.477 0 001.934 12C3.226 16.338 7.244 19.5 12 19.5c.993 0 1.953-.138 2.863-.395M6.228 6.228A10.45 10.45 0 0112 4.5c4.756 0 8.773 3.162 10.065 7.498a10.523 10.523 0 01-4.293 5.774M6.228 6.228L3 3m3.228 3.228l3.65 3.65m7.894 7.894L21 21m-3.228-3.228l-3.65-3.65m0 0a3 3 0 10-4.243-4.243m4.242 4.242L9.88 9.88"
                    />
                  </svg>
                </span>
              </button>
              <div
                id="passwordConfirmError"
                class="text-red-400 text-sm mt-1 hidden"
              />
            </div>
          </div>

          <div class="mt-4">
            <button
              type="button"
              id="toggleRequirements"
              class="text-sm text-purple-300 hover:text-purple-200 flex items-center focus:outline-none focus:ring-2 focus:ring-purple-400 focus:ring-offset-2 focus:ring-offset-zinc-900 rounded-md px-2 py-1"
              aria-expanded="false"
              aria-controls="passwordRequirements"
              aria-label={t("auth.accessibility.password_requirements")}
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                stroke-width="1.5"
                stroke="currentColor"
                class="w-4 h-4 mr-1"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  d="M11.25 11.25l.041-.02a.75.75 0 011.063.852l-.708 2.836a.75.75 0 001.063.853l.041-.021M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9-3.75h.008v.008H12V8.25z"
                />
              </svg>
              {t("auth.password.requirements")}
            </button>

            <div
              id="passwordRequirements"
              class="mt-3 p-3 bg-zinc-800 rounded-md border border-zinc-700 hidden"
              aria-hidden="true"
            >
              <h3 class="text-sm font-medium mb-2">
                {t("auth.password.requirements")}
              </h3>
              <ul class="text-sm space-y-1 ml-5 list-disc">
                <li id="req-length" class="text-red-400">
                  {t("auth.password.min_length")}
                </li>
                <li id="req-uppercase" class="text-red-400">
                  {t("auth.password.uppercase")}
                </li>
                <li id="req-lowercase" class="text-red-400">
                  {t("auth.password.lowercase")}
                </li>
                <li id="req-number" class="text-red-400">
                  {t("auth.password.number")}
                </li>
                <li id="req-special" class="text-red-400">
                  {t("auth.password.special")}
                </li>
                <li id="req-common" class="text-red-400">
                  {t("auth.password.no_common")}
                </li>
                <li id="req-repeats" class="text-red-400">
                  {t("auth.password.no_repeats")}
                </li>
                <li id="req-sequences" class="text-red-400">
                  {t("auth.password.no_sequences")}
                </li>
                <li id="req-match" class="text-red-400">
                  {t("auth.password.match")}
                </li>
              </ul>

              <div class="mt-3">
                <p class="text-sm mb-1">{t("auth.password.strength")}</p>
                <div class="w-full bg-zinc-700 rounded-full h-2.5">
                  <div
                    id="passwordStrength"
                    class="bg-red-500 h-2.5 rounded-full"
                    style="width: 0%"
                  />
                </div>
                <p id="strengthText" class="text-xs mt-1 text-red-400">
                  {t("auth.password.strength.weak")}
                </p>
              </div>
            </div>
          </div>

          <div>
            <button
              type="submit"
              class="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-purple-600 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 focus:ring-offset-zinc-900 transition-colors"
            >
              <span id="submitText">
                {t("auth.password_reset_confirm.submit")}
              </span>
              <span id="loadingSpinner" class="hidden">
                <svg
                  class="animate-spin ml-2 h-4 w-4 text-white"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                >
                  <circle
                    class="opacity-25"
                    cx="12"
                    cy="12"
                    r="10"
                    stroke="currentColor"
                    stroke-width="4"
                  />
                  <path
                    class="opacity-75"
                    fill="currentColor"
                    d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                  />
                </svg>
              </span>
            </button>
          </div>
        </form>
      </>
    )
  }

  <div class="mt-8 text-center">
    <a
      href={`/${String(lang)}/auth/login`}
      class="text-purple-300 hover:text-purple-200 focus:outline-none focus:ring-2 focus:ring-purple-400 focus:ring-offset-2 focus:ring-offset-zinc-900 rounded-md px-2 py-1"
    >
      {t("auth.password_reset.login")}
    </a>
  </div>
</div>

<script lang="ts" define:vars={{ translations }}>
  /**
   * Password Reset Form Client-side Script
   *
   * This script handles client-side validation and form submission for the password reset process.
   * It manages two different modes:
   * 1. Request mode - Validates and submits the email for password reset request
   * 2. Confirmation mode - Validates password requirements and submits the new password
   *
   * Features:
   * - Email validation with regex pattern
   * - Comprehensive password strength assessment
   * - Real-time password requirements validation
   * - Password visibility toggle
   * - Multilingual error messages
   * - Loading state management during form submission
   * - AJAX form submission with proper error handling
   */

  /**
   * List of common passwords to check against for improved security
   * This is a shortened list for demonstration purposes
   */
  const COMMON_PASSWORDS = [
    "password",
    "password123",
    "123456",
    "12345678",
    "qwerty",
    "admin",
    "welcome",
    "letmein",
    "monkey",
    "abc123",
    "football",
    "iloveyou",
    "trustno1",
    "sunshine",
    "master",
    "welcome1",
    "shadow",
    "ashley",
    "baseball",
    "access",
    "michael",
    "superman",
    "batman",
    "starwars",
  ];

  /**
   * Determine form mode based on token presence
   * If token exists in URL, we're in confirmation mode, otherwise request mode
   */
  const isConfirmReset = !!document.getElementById("token");

  if (!isConfirmReset) {
    /**
     * Password Reset Request Form Handling
     * Allows users to request a password reset by submitting their email
     */
    const form = document.getElementById(
      "passwordResetForm",
    ) as HTMLFormElement;
    const emailInput = document.getElementById("email") as HTMLInputElement;
    const emailError = document.getElementById("emailError") as HTMLDivElement;
    const formError = document.getElementById("formError") as HTMLDivElement;
    const formSuccess = document.getElementById(
      "formSuccess",
    ) as HTMLDivElement;
    const submitText = document.getElementById("submitText") as HTMLSpanElement;
    const loadingSpinner = document.getElementById(
      "loadingSpinner",
    ) as HTMLSpanElement;

    /**
     * Validates an email address using regex pattern
     * @param {string} email - The email address to validate
     * @returns {boolean} True if email is valid, false otherwise
     */
    function validateEmail(email: string): boolean {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email);
    }

    /**
     * Form submission handler for password reset request
     * Validates email input and submits form via AJAX
     * Shows appropriate feedback messages to user
     */
    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      let isValid = true;

      // Reset all error displays
      emailError.textContent = "";
      emailError.classList.add("hidden");
      formError.textContent = "";
      formError.classList.add("hidden");
      formSuccess.textContent = "";
      formSuccess.classList.add("hidden");

      // Email validation
      if (!emailInput.value) {
        emailError.textContent = translations["auth.form.email_required"];
        emailError.classList.remove("hidden");
        isValid = false;
      } else if (!validateEmail(emailInput.value)) {
        emailError.textContent = translations["auth.form.email_invalid"];
        emailError.classList.remove("hidden");
        isValid = false;
      }

      if (!isValid) {
        return;
      }

      // Show loading state
      submitText.textContent = translations["auth.form.loading_text"];
      loadingSpinner.classList.remove("hidden");

      try {
        // API call to request password reset with localized route
        const currentLang = document.documentElement.lang || "de";
        const response = await fetch(
          `/${currentLang}/api/auth/reset-password`,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              email: emailInput.value,
            }),
          },
        );

        const data = await response.json();

        // Always show success message, even if email doesn't exist
        // This prevents user enumeration attacks
        formSuccess.textContent =
          translations["auth.password_reset.success_message"];
        formSuccess.classList.remove("hidden");

        // Reset form fields
        form.reset();
      } catch (error) {
        // Network errors or other issues
        formError.textContent =
          translations["auth.password_reset.error_message"];
        formError.classList.remove("hidden");
      } finally {
        // Reset loading state
        submitText.textContent = translations["auth.form.send_reset_link"];
        loadingSpinner.classList.add("hidden");
      }
    });
  } else {
    /**
     * Password Reset Confirmation Form Handling
     * Allows users to set a new password using a valid reset token
     */
    const form = document.getElementById(
      "passwordResetConfirmForm",
    ) as HTMLFormElement;
    const tokenInput = document.getElementById("token") as HTMLInputElement;
    const passwordInput = document.getElementById(
      "password",
    ) as HTMLInputElement;
    const passwordConfirmInput = document.getElementById(
      "passwordConfirm",
    ) as HTMLInputElement;
    const passwordError = document.getElementById(
      "passwordError",
    ) as HTMLDivElement;
    const passwordConfirmError = document.getElementById(
      "passwordConfirmError",
    ) as HTMLDivElement;
    const formError = document.getElementById("formError") as HTMLDivElement;
    const formSuccess = document.getElementById(
      "formSuccess",
    ) as HTMLDivElement;
    const submitText = document.getElementById("submitText") as HTMLSpanElement;
    const loadingSpinner = document.getElementById(
      "loadingSpinner",
    ) as HTMLSpanElement;
    const togglePasswordButton = document.getElementById(
      "togglePassword",
    ) as HTMLButtonElement;
    const togglePasswordConfirmButton = document.getElementById(
      "togglePasswordConfirm",
    ) as HTMLButtonElement;
    const toggleRequirementsButton = document.getElementById(
      "toggleRequirements",
    ) as HTMLButtonElement;
    const passwordRequirements = document.getElementById(
      "passwordRequirements",
    ) as HTMLDivElement;
    const passwordStrength = document.getElementById(
      "passwordStrength",
    ) as HTMLDivElement;
    const strengthText = document.getElementById(
      "strengthText",
    ) as HTMLParagraphElement;

    // Password requirement indicators
    const reqLength = document.getElementById("req-length") as HTMLLIElement;
    const reqUppercase = document.getElementById(
      "req-uppercase",
    ) as HTMLLIElement;
    const reqLowercase = document.getElementById(
      "req-lowercase",
    ) as HTMLLIElement;
    const reqNumber = document.getElementById("req-number") as HTMLLIElement;
    const reqSpecial = document.getElementById("req-special") as HTMLLIElement;
    const reqCommon = document.getElementById("req-common") as HTMLLIElement;
    const reqRepeats = document.getElementById("req-repeats") as HTMLLIElement;
    const reqSequences = document.getElementById(
      "req-sequences",
    ) as HTMLLIElement;
    const reqMatch = document.getElementById("req-match") as HTMLLIElement;

    /**
     * Validates password against security requirements
     * @param {string} password - The password to validate
     * @returns {Object} Object containing validation status and error codes
     */
    function validatePassword(password: string): {
      valid: boolean;
      errors: string[];
    } {
      const errors: string[] = [];

      // Check minimum length (8 characters)
      if (password.length < 8) {
        errors.push("min_length");
      }

      // Check for uppercase letters
      if (!/[A-Z]/.test(password)) {
        errors.push("uppercase");
      }

      // Check for lowercase letters
      if (!/[a-z]/.test(password)) {
        errors.push("lowercase");
      }

      // Check for numbers
      if (!/[0-9]/.test(password)) {
        errors.push("number");
      }

      // Check for special characters
      if (!/[^A-Za-z0-9]/.test(password)) {
        errors.push("special");
      }

      // Check against common passwords
      if (COMMON_PASSWORDS.includes(password.toLowerCase())) {
        errors.push("common");
      }

      // Check for repeated characters (3+ in a row)
      if (/(.)\1{2,}/.test(password)) {
        errors.push("repeats");
      }

      // Check for sequential patterns
      const sequences = ["123456", "abcdef", "qwerty", "asdfgh"];
      let hasSequence = false;
      for (const seq of sequences) {
        for (let i = 0; i < seq.length - 2; i++) {
          const subSeq = seq.substring(i, i + 3);
          if (password.toLowerCase().includes(subSeq)) {
            hasSequence = true;
            break;
          }
        }
        if (hasSequence) {
          errors.push("sequences");
          break;
        }
      }

      return {
        valid: errors.length === 0,
        errors,
      };
    }

    /**
     * Calculates password strength on a scale of 0-100
     * Based on length, complexity, and absence of common patterns
     * @param {string} password - The password to evaluate
     * @returns {number} Strength score from 0-100
     */
    function calculatePasswordStrength(password: string): number {
      let strength = 0;

      // Length contribution (max 40 points)
      strength += Math.min(password.length * 4, 40);

      // Complexity bonuses (max 40 points)
      if (/[A-Z]/.test(password)) strength += 10;
      if (/[a-z]/.test(password)) strength += 10;
      if (/[0-9]/.test(password)) strength += 10;
      if (/[^A-Za-z0-9]/.test(password)) strength += 10;

      // Penalties for common passwords
      if (COMMON_PASSWORDS.includes(password.toLowerCase())) strength -= 30;

      // Penalties for repeated characters
      if (/(.)\1{2,}/.test(password)) strength -= 10;

      // Penalties for sequential patterns
      const sequences = ["123456", "abcdef", "qwerty", "asdfgh"];
      for (const seq of sequences) {
        for (let i = 0; i < seq.length - 2; i++) {
          const subSeq = seq.substring(i, i + 3);
          if (password.toLowerCase().includes(subSeq)) {
            strength -= 10;
            break;
          }
        }
      }

      // Ensure strength is within 0-100 range
      return Math.max(0, Math.min(100, strength));
    }

    /**
     * Updates the password requirements indicators and strength meter
     * Called on password input to provide real-time feedback
     */
    function updatePasswordRequirements() {
      const password = passwordInput.value;
      const passwordConfirm = passwordConfirmInput.value;

      // Validate password against requirements
      const { errors } = validatePassword(password);

      // Update requirement indicators
      reqLength.className = errors.includes("min_length")
        ? "text-red-400"
        : "text-green-400";
      reqUppercase.className = errors.includes("uppercase")
        ? "text-red-400"
        : "text-green-400";
      reqLowercase.className = errors.includes("lowercase")
        ? "text-red-400"
        : "text-green-400";
      reqNumber.className = errors.includes("number")
        ? "text-red-400"
        : "text-green-400";
      reqSpecial.className = errors.includes("special")
        ? "text-red-400"
        : "text-green-400";
      reqCommon.className = errors.includes("common")
        ? "text-red-400"
        : "text-green-400";
      reqRepeats.className = errors.includes("repeats")
        ? "text-red-400"
        : "text-green-400";
      reqSequences.className = errors.includes("sequences")
        ? "text-red-400"
        : "text-green-400";

      // Check if passwords match
      if (password && passwordConfirm) {
        reqMatch.className =
          password === passwordConfirm ? "text-green-400" : "text-red-400";
      } else {
        reqMatch.className = "text-red-400";
      }

      // Calculate password strength
      const strength = calculatePasswordStrength(password);
      passwordStrength.style.width = `${strength}%`;

      // Update strength indicator color and text based on score
      if (strength < 30) {
        passwordStrength.className = "bg-red-500 h-2.5 rounded-full";
        strengthText.className = "text-xs mt-1 text-red-400";
        strengthText.textContent =
          document.documentElement.lang === "de" ? "Schwach" : "Weak";
      } else if (strength < 60) {
        passwordStrength.className = "bg-yellow-500 h-2.5 rounded-full";
        strengthText.className = "text-xs mt-1 text-yellow-400";
        strengthText.textContent =
          document.documentElement.lang === "de" ? "Mittel" : "Medium";
      } else if (strength < 80) {
        passwordStrength.className = "bg-green-500 h-2.5 rounded-full";
        strengthText.className = "text-xs mt-1 text-green-400";
        strengthText.textContent =
          document.documentElement.lang === "de" ? "Stark" : "Strong";
      } else {
        passwordStrength.className = "bg-blue-500 h-2.5 rounded-full";
        strengthText.className = "text-xs mt-1 text-blue-400";
        strengthText.textContent =
          document.documentElement.lang === "de" ? "Sehr stark" : "Very Strong";
      }

      // Update ARIA attributes for screen readers
      const strengthLabel =
        document.documentElement.lang === "de"
          ? "Passwortstärke: "
          : "Password strength: ";
      strengthText.setAttribute(
        "aria-label",
        strengthLabel + strengthText.textContent,
      );
    }

    /**
     * Toggles password visibility between text and password types
     * Updates the associated icon and maintains focus
     */
    togglePasswordButton.addEventListener("click", () => {
      if (passwordInput.type === "password") {
        passwordInput.type = "text";
        togglePasswordButton
          .querySelector(".show-password")
          ?.classList.add("hidden");
        togglePasswordButton
          .querySelector(".hide-password")
          ?.classList.remove("hidden");
      } else {
        passwordInput.type = "password";
        togglePasswordButton
          .querySelector(".show-password")
          ?.classList.remove("hidden");
        togglePasswordButton
          .querySelector(".hide-password")
          ?.classList.add("hidden");
      }
      passwordInput.focus();
    });

    /**
     * Toggles password confirmation visibility between text and password types
     * Updates the associated icon and maintains focus
     */
    togglePasswordConfirmButton.addEventListener("click", () => {
      if (passwordConfirmInput.type === "password") {
        passwordConfirmInput.type = "text";
        togglePasswordConfirmButton
          .querySelector(".show-password")
          ?.classList.add("hidden");
        togglePasswordConfirmButton
          .querySelector(".hide-password")
          ?.classList.remove("hidden");
      } else {
        passwordConfirmInput.type = "password";
        togglePasswordConfirmButton
          .querySelector(".show-password")
          ?.classList.remove("hidden");
        togglePasswordConfirmButton
          .querySelector(".hide-password")
          ?.classList.add("hidden");
      }
      passwordConfirmInput.focus();
    });

    /**
     * Toggles visibility of password requirements section
     * Updates ARIA attributes for accessibility
     * Triggers requirements check when opened
     */
    toggleRequirementsButton.addEventListener("click", () => {
      const isExpanded =
        toggleRequirementsButton.getAttribute("aria-expanded") === "true";
      toggleRequirementsButton.setAttribute(
        "aria-expanded",
        isExpanded ? "false" : "true",
      );
      passwordRequirements.classList.toggle("hidden");
      passwordRequirements.setAttribute(
        "aria-hidden",
        isExpanded ? "true" : "false",
      );

      if (!isExpanded) {
        updatePasswordRequirements();
      }
    });

    // Update password requirements in real-time as user types
    passwordInput.addEventListener("input", updatePasswordRequirements);
    passwordConfirmInput.addEventListener("input", updatePasswordRequirements);

    /**
     * Form submission handler for password reset confirmation
     * Validates new password against security requirements
     * Submits form via AJAX and handles response appropriately
     */
    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      let isValid = true;

      // Reset all error displays
      passwordError.textContent = "";
      passwordError.classList.add("hidden");
      passwordConfirmError.textContent = "";
      passwordConfirmError.classList.add("hidden");
      formError.textContent = "";
      formError.classList.add("hidden");
      formSuccess.textContent = "";
      formSuccess.classList.add("hidden");

      // Password validation
      if (!passwordInput.value) {
        passwordError.textContent = translations["auth.form.password_required"];
        passwordError.classList.remove("hidden");
        isValid = false;
      } else {
        const { valid, errors } = validatePassword(passwordInput.value);
        if (!valid) {
          passwordError.textContent =
            translations["auth.form.password_requirements"];
          passwordError.classList.remove("hidden");
          isValid = false;
        }
      }

      // Password confirmation validation
      if (!passwordConfirmInput.value) {
        passwordConfirmError.textContent =
          translations["auth.form.password_confirm_required"];
        passwordConfirmError.classList.remove("hidden");
        isValid = false;
      } else if (passwordInput.value !== passwordConfirmInput.value) {
        passwordConfirmError.textContent =
          translations["auth.form.passwords_not_match"];
        passwordConfirmError.classList.remove("hidden");
        isValid = false;
      }

      if (!isValid) {
        return;
      }

      // Show loading state
      submitText.textContent = translations["auth.form.loading_text"];
      loadingSpinner.classList.remove("hidden");

      try {
        // API call to reset password with localized route
        const currentLang = document.documentElement.lang || "de";
        const response = await fetch(
          `/${currentLang}/api/auth/reset-password`,
          {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              token: tokenInput.value,
              newPassword: passwordInput.value,
            }),
          },
        );

        const data = await response.json();

        if (response.ok) {
          // Successful password reset
          formSuccess.textContent =
            data.message ||
            translations["auth.password_reset.complete_success"];
          formSuccess.classList.remove("hidden");

          // Reset form
          form.reset();

          // Reset password requirements
          updatePasswordRequirements();

          // Redirect to login page after 3 seconds
          setTimeout(() => {
            const currentLang = document.documentElement.lang || "de";
            window.location.href = `/${currentLang}/auth/login`;
          }, 3000);
        } else {
          // Password reset error
          formError.textContent =
            data.error || translations["auth.password_reset.complete_error"];
          formError.classList.remove("hidden");
        }
      } catch (error) {
        // Network errors or other issues
        formError.textContent =
          translations["auth.password_reset.error_message"];
        formError.classList.remove("hidden");
      } finally {
        // Reset loading state
        submitText.textContent =
          translations["auth.password_reset_confirm.submit"];
        loadingSpinner.classList.add("hidden");
      }
    });
  }
</script>

<style>
  /* Verbesserte Kontrastverhältnisse für WCAG AAA */
  .auth-form-container {
    background-color: #27272a;
    border-radius: 0.5rem;
    padding: 2rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.5);
  }

  /* Verbesserte Fokus-Stile für Tastaturnavigation */
  input:focus {
    outline: 3px solid #f0abfc;
    outline-offset: 1px;
  }

  /* Fehlerstatusstile */
  input:invalid:not(:focus) {
    border-color: #f87171;
  }

  /* Animation für Ladevorgang */
  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }
</style>
