---
/**
 * PasswordResetForm Component for MelodyMind
 *
 * This component provides a form for resetting passwords with two distinct modes:
 * 1. Request mode: Allows users to request a password reset by entering their email address
 * 2. Confirmation mode: Allows users to set a new password using a valid reset token
 *
 * Features:
 * - Client-side form validation with detailed error feedback
 * - Password strength meter with real-time validation
 * - WCAG AAA accessibility compliance
 * - Multi-language support
 * - Password visibility toggle
 * - Password requirements checklist with visual indicators
 * - Responsive design using vanilla CSS
 *
 * Security features:
 * - Strong password enforcement
 * - Common password detection
 * - Protection against sequential character patterns
 * - Protection against repeated characters
 * - Password strength calculation
 *
 * @component
 * @example
 * ```astro
 * <PasswordResetForm token="reset-token" isConfirmReset={true} />
 * ```
 */

// 1. Imports
import { getLangFromUrl, useTranslations } from "../../utils/i18n";

// 2. Props definition
interface Props {
  /** Token for password reset, if any */
  token?: string | null;
  /** Whether we're in confirm reset mode or request mode */
  isConfirmReset?: boolean;
}

// 3. Props processing
const { token = null, isConfirmReset = false } = Astro.props;

// 4. Reactive variables and helper functions
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(String(lang));

// Übersetzungen für den JavaScript-Teil
const translations = {
  "auth.form.email_required": t("auth.form.email_required"),
  "auth.form.email_invalid": t("auth.form.email_invalid"),
  "auth.form.loading_text": t("auth.form.loading_text"),
  "auth.form.send_reset_link": t("auth.form.send_reset_link"),
  "auth.form.password_required": t("auth.form.password_required"),
  "auth.form.password_requirements": t("auth.form.password_requirements"),
  "auth.form.password_confirm_required": t("auth.form.password_confirm_required"),
  "auth.form.passwords_not_match": t("auth.form.passwords_not_match"),
  "auth.password_reset.success_message": t("auth.password_reset.success_message"),
  "auth.password_reset.error_message": t("auth.password_reset.error_message"),
  "auth.password_reset.complete_success": t("auth.password_reset.complete_success"),
  "auth.password_reset.complete_error": t("auth.password_reset.complete_error"),
  
  // Session timeout translations
  "auth.session.timeout.title": t("auth.session.timeout.title"),
  "auth.session.timeout.message": t("auth.session.timeout.message"),
  "auth.session.timeout.extend": t("auth.session.timeout.extend"),
  "auth.session.timeout.close": t("auth.session.timeout.close"),
  
  // Accessibility translations
  "auth.accessibility.requirement.met": t("auth.accessibility.requirement.met"),
  "auth.accessibility.requirement.unmet": t("auth.accessibility.requirement.unmet"),
  "auth.accessibility.password.visible": t("auth.accessibility.password.visible"),
  "auth.accessibility.password.hidden": t("auth.accessibility.password.hidden"),
  "auth.accessibility.requirements.expanded": t("auth.accessibility.requirements.expanded"),
  "auth.accessibility.requirements.collapsed": t("auth.accessibility.requirements.collapsed"),
  
  // Password strength translations
  "auth.password.strength.weak": t("auth.password.strength.weak"),
  "auth.password.strength.medium": t("auth.password.strength.medium"),
  "auth.password.strength.strong": t("auth.password.strength.strong"),
  "auth.password.strength.very_strong": t("auth.password.strength.very_strong"),
};
---

<div class="password-reset-form">
  {
    !isConfirmReset ? (
      <>
        <h1 class="password-reset-form__title">{t("auth.password_reset.title")}</h1>

        <div
          id="formError"
          class="password-reset-form__message password-reset-form__message--error password-reset-form__message--hidden"
          role="alert"
          aria-live="assertive"
        />
        <div
          id="formSuccess"
          class="password-reset-form__message password-reset-form__message--success password-reset-form__message--hidden"
          role="alert"
          aria-live="assertive"
        />

        <form
          id="passwordResetForm"
          class="password-reset-form__form"
          novalidate
          aria-labelledby="passwordResetFormHeading"
        >
          <h2 id="passwordResetFormHeading" class="sr-only">
            {t("auth.password_reset.title")}
          </h2>

          <div class="password-reset-form__field">
            <label for="email" class="password-reset-form__label">
              {t("auth.password_reset.email")}
              <span class="password-reset-form__required" aria-hidden="true">
                *
              </span>
              <span class="sr-only">{t("auth.form.required")}</span>
            </label>
            <div class="password-reset-form__input-wrapper">
              <input
                type="email"
                id="email"
                name="email"
                autocomplete="email"
                required
                class="password-reset-form__input"
                placeholder={t("auth.password_reset.email.placeholder")}
                aria-required="true"
              />
              <div
                id="emailError"
                class="password-reset-form__error password-reset-form__error--hidden"
              />
            </div>
          </div>

          <div class="password-reset-form__field">
            <button type="submit" class="password-reset-form__submit">
              <span id="submitText">{t("auth.password_reset.submit")}</span>
              <span
                id="loadingSpinner"
                class="password-reset-form__spinner password-reset-form__spinner--hidden"
              >
                <svg
                  class="password-reset-form__spinner-icon"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                >
                  <circle
                    class="password-reset-form__spinner-circle"
                    cx="12"
                    cy="12"
                    r="10"
                    stroke="currentColor"
                    stroke-width="4"
                  />
                  <path
                    class="password-reset-form__spinner-path"
                    fill="currentColor"
                    d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                  />
                </svg>
              </span>
            </button>
          </div>
        </form>
      </>
    ) : (
      <>
        <h1 class="password-reset-form__title">{t("auth.password_reset_confirm.title")}</h1>

        <div
          id="formError"
          class="password-reset-form__message password-reset-form__message--error password-reset-form__message--hidden"
          role="alert"
          aria-live="assertive"
        />
        <div
          id="formSuccess"
          class="password-reset-form__message password-reset-form__message--success password-reset-form__message--hidden"
          role="alert"
          aria-live="assertive"
        />

        <form
          id="passwordResetConfirmForm"
          class="password-reset-form__form"
          novalidate
          aria-labelledby="passwordResetConfirmFormHeading"
        >
          <h2 id="passwordResetConfirmFormHeading" class="sr-only">
            {t("auth.password_reset_confirm.title")}
          </h2>

          <input type="hidden" id="token" name="token" value={token} />

          <!-- Fieldset for password fields grouping (Issue #1) -->
          <fieldset class="password-reset-form__fieldset">
            <legend class="password-reset-form__fieldset-legend">
              {t("auth.password_reset_confirm.password_section")}
            </legend>
            
            <div class="password-reset-form__field">
              <label for="password" class="password-reset-form__label">
                {t("auth.password_reset_confirm.password")}
                <span class="password-reset-form__required" aria-hidden="true">
                  *
                </span>
                <span class="sr-only">{t("auth.form.required")}</span>
              </label>
              <div class="password-reset-form__input-wrapper">
                <input
                  type="password"
                  id="password"
                  name="password"
                  autocomplete="new-password"
                  required
                  class="password-reset-form__input password-reset-form__input--with-toggle"
                  placeholder={t("auth.password_reset_confirm.password.placeholder")}
                  aria-required="true"
                  aria-describedby="passwordRequirements passwordError passwordStrengthDescription"
                />
                <button
                  type="button"
                  id="togglePassword"
                  class="password-reset-form__toggle"
                  aria-label={t("auth.accessibility.password_toggle")}
                  aria-pressed="false"
                  aria-describedby="passwordVisibilityStatus"
                >
                  <span class="show-password">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke-width="1.5"
                      stroke="currentColor"
                      class="password-reset-form__toggle-icon"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        d="M2.036 12.322a1.012 1.012 0 010-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178z"
                      />
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                      />
                    </svg>
                  </span>
                  <span class="hide-password password-reset-form__toggle-hidden">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke-width="1.5"
                      stroke="currentColor"
                      class="password-reset-form__toggle-icon"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        d="M3.98 8.223A10.477 10.477 0 001.934 12C3.226 16.338 7.244 19.5 12 19.5c.993 0 1.953-.138 2.863-.395M6.228 6.228A10.45 10.45 0 0112 4.5c4.756 0 8.773 3.162 10.065 7.498a10.523 10.523 0 01-4.293 5.774M6.228 6.228L3 3m3.228 3.228l3.65 3.65m7.894 7.894L21 21m-3.228-3.228l-3.65-3.65m0 0a3 3 0 10-4.243-4.243m4.242 4.242L9.88 9.88"
                      />
                    </svg>
                  </span>
                </button>
                <!-- Hidden status announcements for screen readers -->
                <div id="passwordVisibilityStatus" class="sr-only" aria-live="polite" aria-atomic="true"></div>
                <div
                  id="passwordError"
                  class="password-reset-form__error password-reset-form__error--hidden"
                />
              </div>
            </div>

            <div class="password-reset-form__field">
              <label for="passwordConfirm" class="password-reset-form__label">
                {t("auth.password_reset_confirm.password_confirm")}
                <span class="password-reset-form__required" aria-hidden="true">
                  *
                </span>
                <span class="sr-only">{t("auth.form.required")}</span>
              </label>
              <div class="password-reset-form__input-wrapper">
                <input
                  type="password"
                  id="passwordConfirm"
                  name="passwordConfirm"
                  autocomplete="new-password"
                  required
                  class="password-reset-form__input password-reset-form__input--with-toggle"
                  placeholder={t("auth.password_reset_confirm.password_confirm.placeholder")}
                  aria-required="true"
                  aria-describedby="passwordConfirmError"
                />
                <button
                  type="button"
                  id="togglePasswordConfirm"
                  class="password-reset-form__toggle"
                  aria-label={t("auth.accessibility.password_toggle")}
                  aria-pressed="false"
                  aria-describedby="passwordConfirmVisibilityStatus"
                >
                  <span class="show-password">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke-width="1.5"
                      stroke="currentColor"
                      class="password-reset-form__toggle-icon"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        d="M2.036 12.322a1.012 1.012 0 010-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178z"
                      />
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                      />
                    </svg>
                  </span>
                  <span class="hide-password password-reset-form__toggle-hidden">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke-width="1.5"
                      stroke="currentColor"
                      class="password-reset-form__toggle-icon"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        d="M3.98 8.223A10.477 10.477 0 001.934 12C3.226 16.338 7.244 19.5 12 19.5c.993 0 1.953-.138 2.863-.395M6.228 6.228A10.45 10.45 0 0112 4.5c4.756 0 8.773 3.162 10.065 7.498a10.523 10.523 0 01-4.293 5.774M6.228 6.228L3 3m3.228 3.228l3.65 3.65m7.894 7.894L21 21m-3.228-3.228l-3.65-3.65m0 0a3 3 0 10-4.243-4.243m4.242 4.242L9.88 9.88"
                      />
                    </svg>
                  </span>
                </button>
                <!-- Hidden status announcements for screen readers -->
                <div id="passwordConfirmVisibilityStatus" class="sr-only" aria-live="polite" aria-atomic="true"></div>
                <div
                  id="passwordConfirmError"
                  class="password-reset-form__error password-reset-form__error--hidden"
                />
              </div>
            </div>
          </fieldset>

          <div class="password-reset-form__requirements-section">
            <button
              type="button"
              id="toggleRequirements"
              class="password-reset-form__requirements-toggle"
              aria-expanded="false"
              aria-controls="passwordRequirements"
              aria-label={t("auth.accessibility.password_requirements")}
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                stroke-width="1.5"
                stroke="currentColor"
                class="password-reset-form__requirements-icon"
                aria-hidden="true"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  d="M11.25 11.25l.041-.02a.75.75 0 011.063.852l-.708 2.836a.75.75 0 001.063.853l.041-.021M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9-3.75h.008v.008H12V8.25z"
                />
              </svg>
              {t("auth.password.requirements")}
              <!-- Screen reader status announcement for panel state -->
              <span id="requirementsPanelStatus" class="sr-only" aria-live="polite"></span>
            </button>

            <div
              id="passwordRequirements"
              class="password-reset-form__requirements password-reset-form__requirements--hidden"
              aria-hidden="true"
              role="region"
              aria-labelledby="passwordRequirementsTitle"
            >
              <h3 id="passwordRequirementsTitle" class="password-reset-form__requirements-title">
                {t("auth.password.requirements")}
              </h3>
              
              <!-- Password strength description for screen readers -->
              <div id="passwordStrengthDescription" class="sr-only" aria-live="polite" aria-atomic="true">
                {t("auth.password.strength_description")}
              </div>
              
              <ul class="password-reset-form__requirements-list">
                <li
                  id="req-length"
                  class="password-reset-form__requirement password-reset-form__requirement--invalid"
                  aria-describedby="req-length-desc"
                >
                  <span class="password-reset-form__requirement-icon" aria-hidden="true">✗</span>
                  <span class="password-reset-form__requirement-text">{t("auth.password.min_length")}</span>
                  <span id="req-length-desc" class="sr-only">Requirement not met</span>
                </li>
                <li
                  id="req-uppercase"
                  class="password-reset-form__requirement password-reset-form__requirement--invalid"
                  aria-describedby="req-uppercase-desc"
                >
                  <span class="password-reset-form__requirement-icon" aria-hidden="true">✗</span>
                  <span class="password-reset-form__requirement-text">{t("auth.password.uppercase")}</span>
                  <span id="req-uppercase-desc" class="sr-only">Requirement not met</span>
                </li>
                <li
                  id="req-lowercase"
                  class="password-reset-form__requirement password-reset-form__requirement--invalid"
                  aria-describedby="req-lowercase-desc"
                >
                  <span class="password-reset-form__requirement-icon" aria-hidden="true">✗</span>
                  <span class="password-reset-form__requirement-text">{t("auth.password.lowercase")}</span>
                  <span id="req-lowercase-desc" class="sr-only">Requirement not met</span>
                </li>
                <li
                  id="req-number"
                  class="password-reset-form__requirement password-reset-form__requirement--invalid"
                  aria-describedby="req-number-desc"
                >
                  <span class="password-reset-form__requirement-icon" aria-hidden="true">✗</span>
                  <span class="password-reset-form__requirement-text">{t("auth.password.number")}</span>
                  <span id="req-number-desc" class="sr-only">Requirement not met</span>
                </li>
                <li
                  id="req-special"
                  class="password-reset-form__requirement password-reset-form__requirement--invalid"
                  aria-describedby="req-special-desc"
                >
                  <span class="password-reset-form__requirement-icon" aria-hidden="true">✗</span>
                  <span class="password-reset-form__requirement-text">{t("auth.password.special")}</span>
                  <span id="req-special-desc" class="sr-only">Requirement not met</span>
                </li>
                <li
                  id="req-common"
                  class="password-reset-form__requirement password-reset-form__requirement--invalid"
                  aria-describedby="req-common-desc"
                >
                  <span class="password-reset-form__requirement-icon" aria-hidden="true">✗</span>
                  <span class="password-reset-form__requirement-text">{t("auth.password.no_common")}</span>
                  <span id="req-common-desc" class="sr-only">Requirement not met</span>
                </li>
                <li
                  id="req-repeats"
                  class="password-reset-form__requirement password-reset-form__requirement--invalid"
                  aria-describedby="req-repeats-desc"
                >
                  <span class="password-reset-form__requirement-icon" aria-hidden="true">✗</span>
                  <span class="password-reset-form__requirement-text">{t("auth.password.no_repeats")}</span>
                  <span id="req-repeats-desc" class="sr-only">Requirement not met</span>
                </li>
                <li
                  id="req-sequences"
                  class="password-reset-form__requirement password-reset-form__requirement--invalid"
                  aria-describedby="req-sequences-desc"
                >
                  <span class="password-reset-form__requirement-icon" aria-hidden="true">✗</span>
                  <span class="password-reset-form__requirement-text">{t("auth.password.no_sequences")}</span>
                  <span id="req-sequences-desc" class="sr-only">Requirement not met</span>
                </li>
                <li
                  id="req-match"
                  class="password-reset-form__requirement password-reset-form__requirement--invalid"
                  aria-describedby="req-match-desc"
                >
                  <span class="password-reset-form__requirement-icon" aria-hidden="true">✗</span>
                  <span class="password-reset-form__requirement-text">{t("auth.password.match")}</span>
                  <span id="req-match-desc" class="sr-only">Requirement not met</span>
                </li>
              </ul>

              <div class="password-reset-form__strength" role="group" aria-labelledby="strengthLabel">
                <p id="strengthLabel" class="password-reset-form__strength-label">{t("auth.password.strength")}</p>
                <div class="password-reset-form__strength-bar" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0">
                  <div
                    id="passwordStrength"
                    class="password-reset-form__strength-progress password-reset-form__strength-progress--weak"
                    style="width: 0%"
                  />
                </div>
                <p
                  id="strengthText"
                  class="password-reset-form__strength-text password-reset-form__strength-text--weak"
                  aria-live="polite"
                  aria-atomic="true"
                >
                  {t("auth.password.strength.weak")}
                </p>
              </div>
            </div>
          </div>

          <div class="password-reset-form__field">
            <button type="submit" class="password-reset-form__submit">
              <span id="submitText">{t("auth.password_reset_confirm.submit")}</span>
              <span
                id="loadingSpinner"
                class="password-reset-form__spinner password-reset-form__spinner--hidden"
              >
                <svg
                  class="password-reset-form__spinner-icon"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                >
                  <circle
                    class="password-reset-form__spinner-circle"
                    cx="12"
                    cy="12"
                    r="10"
                    stroke="currentColor"
                    stroke-width="4"
                  />
                  <path
                    class="password-reset-form__spinner-path"
                    fill="currentColor"
                    d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                  />
                </svg>
              </span>
            </button>
          </div>
        </form>
      </>
    )
  }

  <div class="password-reset-form__footer">
    <a href={`/${String(lang)}/auth/login`} class="password-reset-form__link">
      {t("auth.password_reset.login")}
    </a>
  </div>
</div>

<script is:inline define:vars={{ translations }}>
  /* eslint-disable @typescript-eslint/explicit-function-return-type */
  /**
   * Password Reset Form Client-Side Logic
   * 
   * Optimized inline script following MelodyMind project standards:
   * - TypeScript-style code with type annotations in comments
   * - Inline solution preferred over external files
   * - Performance-optimized validation functions
   * - WCAG AAA accessibility compliance
   * 
   * @fileoverview Handles password reset form interactions and validation
   */

  // Type annotations as comments for inline script compatibility
  /** @typedef {Object} ValidationResult
   * @property {boolean} valid - Whether validation passed
   * @property {string[]} errors - Array of validation errors
   */

  /** @typedef {Object} StrengthInfo
   * @property {number} score - Strength score 0-100
   * @property {string} level - Strength level (weak|medium|strong|very-strong)
   */

  // Cached translations for performance (inline access)
  
  // Optimized validation constants
  // Optimized validation constants
  const COMMON_PASSWORDS = [
    "password", "password123", "123456", "12345678",
    "qwerty", "admin", "welcome", "letmein", "monkey", "abc123"
  ];

  const SEQUENCES = ["123456", "abcdef", "qwerty", "asdfgh"];

  // Core validation functions with optimized performance
  
  /**
   * Validates email format using RFC-compliant regex
   * @param {string} email - Email to validate
   * @returns {boolean} - Whether email is valid
   */
  function validateEmail(email) {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  }

  /**
   * Validates password against security requirements
   * @param {string} password - Password to validate
   * @returns {ValidationResult} - Validation result with errors
   */
  function validatePassword(password) {
    const errors = [];
    
    // Length check
    if (password.length < 8) {
      errors.push("min_length");
    }
    
    // Character type checks (optimized with single regex)
    if (!/[A-Z]/.test(password)) {
      errors.push("uppercase");
    }
    if (!/[a-z]/.test(password)) {
      errors.push("lowercase");
    }
    if (!/[0-9]/.test(password)) {
      errors.push("number");
    }
    if (!/[^A-Za-z0-9]/.test(password)) {
      errors.push("special");
    }
    
    // Security checks
    if (COMMON_PASSWORDS.includes(password.toLowerCase())) {
      errors.push("common");
    }
    if (/(.)\1{2,}/.test(password)) {
      errors.push("repeats");
    }
    
    // Optimized sequence check
    if (SEQUENCES.some(seq => {
      const lower = password.toLowerCase();
      for (let i = 0; i <= seq.length - 3; i++) {
        if (lower.includes(seq.substring(i, i + 3))) {
          return true;
        }
      }
      return false;
    })) {
      errors.push("sequences");
    }

    return { valid: errors.length === 0, errors };
  }

  /**
   * Calculates password strength score
   * @param {string} password - Password to analyze
   * @returns {number} - Strength score 0-100
   */
  function calculatePasswordStrength(password) {
    let strength = Math.min(password.length * 4, 40);
    
    // Character type bonuses
    if (/[A-Z]/.test(password)) {
      strength += 10;
    }
    if (/[a-z]/.test(password)) {
      strength += 10;
    }
    if (/[0-9]/.test(password)) {
      strength += 10;
    }
    if (/[^A-Za-z0-9]/.test(password)) {
      strength += 10;
    }
    
    // Length bonus
    if (password.length > 12) {
      strength += Math.min((password.length - 12) * 2, 20);
    }
    
    // Penalties
    if (COMMON_PASSWORDS.includes(password.toLowerCase())) {
      strength -= 30;
    }
    if (/(.)\1{2,}/.test(password)) {
      strength -= 10;
    }
    
    return Math.max(0, Math.min(100, strength));
  }

  /**
   * Get strength level from numeric score
   * @param {number} strength - Strength score 0-100
   * @returns {string} - Strength level
   */
  function getStrengthLevel(strength) {
    if (strength < 30) {
      return "weak";
    }
    if (strength < 60) {
      return "medium";
    }
    if (strength < 80) {
      return "strong";
    }
    return "very-strong";
  }

  // Form initialization - optimized for inline usage
  const isConfirmReset = !!document.getElementById("token");

  // Initialize appropriate form based on mode
  if (!isConfirmReset) {
    initializeRequestForm();
  } else {
    initializeConfirmationForm();
  }

  // Initialize session timeout warning (Issue #1)
  initializeSessionTimeoutWarning();

  /**
   * Initialize password reset request form with optimized event handling
   */
  function initializeRequestForm() {
    const form = document.getElementById("passwordResetForm");
    if (!form) {return;}

    const elements = {
      email: document.getElementById("email"),
      emailError: document.getElementById("emailError"),
      formError: document.getElementById("formError"),
      formSuccess: document.getElementById("formSuccess"),
      submitText: document.getElementById("submitText"),
      loadingSpinner: document.getElementById("loadingSpinner")
    };

    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      let isValid = true;

      // Reset error displays
      resetErrorDisplays([elements.emailError, elements.formError, elements.formSuccess]);

      // Email validation
      if (!elements.email?.value) {
        showError(elements.emailError, translations["auth.form.email_required"]);
        isValid = false;
      } else if (!validateEmail(elements.email.value)) {
        showError(elements.emailError, translations["auth.form.email_invalid"]);
        isValid = false;
      }

      if (!isValid) {
        return;
      }

      // Show loading state
      setLoadingState(elements.submitText, elements.loadingSpinner, translations["auth.form.loading_text"], true);

      try {
        const currentLang = document.documentElement.lang || "de";
        await fetch(`/${currentLang}/api/auth/reset-password`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ email: elements.email.value }),
        });

        // Always show success for security
        showSuccess(elements.formSuccess, translations["auth.password_reset.success_message"]);
        form.reset();
      } catch {
        showError(elements.formError, translations["auth.password_reset.error_message"]);
      } finally {
        setLoadingState(
          elements.submitText,
          elements.loadingSpinner,
          translations["auth.form.send_reset_link"],
          false
        );
      }
    });
  }

  /**
   * Initialize password reset confirmation form with optimized validation
   */
  function initializeConfirmationForm() {
    const form = document.getElementById("passwordResetConfirmForm");
    if (!form) {
      return;
    }

    const elements = {
      password: document.getElementById("password"),
      passwordConfirm: document.getElementById("passwordConfirm"),
      token: document.getElementById("token"),
      passwordError: document.getElementById("passwordError"),
      passwordConfirmError: document.getElementById("passwordConfirmError"),
      formError: document.getElementById("formError"),
      formSuccess: document.getElementById("formSuccess"),
      submitText: document.getElementById("submitText"),
      loadingSpinner: document.getElementById("loadingSpinner")
    };

    // Initialize UI components
    initializePasswordToggles();
    initializeRequirementsToggle();

    // Real-time validation with performance optimization
    let validationTimeout;
    const debouncedValidation = () => {
      clearTimeout(validationTimeout);
      validationTimeout = setTimeout(updatePasswordRequirements, 150);
    };

    elements.password?.addEventListener("input", debouncedValidation);
    elements.passwordConfirm?.addEventListener("input", debouncedValidation);

    // Form submission with comprehensive validation
    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      let isValid = true;

      // Reset error displays
      resetErrorDisplays([
        elements.passwordError, 
        elements.passwordConfirmError, 
        elements.formError, 
        elements.formSuccess
      ]);

      // Password validation
      if (!elements.password?.value) {
        showError(elements.passwordError, translations["auth.form.password_required"]);
        isValid = false;
      } else {
        const validation = validatePassword(elements.password.value);
        if (!validation.valid) {
          showError(elements.passwordError, translations["auth.form.password_requirements"]);
          isValid = false;
        }
      }

      // Password confirmation validation
      if (!elements.passwordConfirm?.value) {
        showError(elements.passwordConfirmError, translations["auth.form.password_confirm_required"]);
        isValid = false;
      } else if (elements.password?.value !== elements.passwordConfirm.value) {
        showError(elements.passwordConfirmError, translations["auth.form.passwords_not_match"]);
        isValid = false;
      }

      if (!isValid) {
        return;
      }

      // Show loading state
      setLoadingState(elements.submitText, elements.loadingSpinner, translations["auth.form.loading_text"], true);

      try {
        const currentLang = document.documentElement.lang || "de";
        const response = await fetch(`/${currentLang}/api/auth/reset-password`, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            token: elements.token?.value,
            newPassword: elements.password.value,
          }),
        });

        const data = await response.json();

        if (response.ok) {
          showSuccess(
            elements.formSuccess,
            data.message || translations["auth.password_reset.complete_success"]
          );
          form.reset();
          updatePasswordRequirements();

          // Redirect after success
          setTimeout(() => {
            const currentLang = document.documentElement.lang || "de";
            window.location.href = `/${currentLang}/auth/login`;
          }, 3000);
        } else {
          showError(elements.formError, data.error || translations["auth.password_reset.complete_error"]);
        }
      } catch {
        showError(elements.formError, translations["auth.password_reset.error_message"]);
      } finally {
        setLoadingState(
          elements.submitText,
          elements.loadingSpinner,
          translations["auth.password_reset_confirm.submit"],
          false
        );
      }
    });
  }

  /**
   * Initialize password visibility toggles with optimized event handling
   */
  function initializePasswordToggles() {
    const elements = {
      togglePassword: document.getElementById("togglePassword"),
      togglePasswordConfirm: document.getElementById("togglePasswordConfirm"),
      passwordInput: document.getElementById("password"),
      passwordConfirmInput: document.getElementById("passwordConfirm")
    };

    elements.togglePassword?.addEventListener("click", () => {
      togglePasswordVisibility(elements.passwordInput, elements.togglePassword);
    });

    elements.togglePasswordConfirm?.addEventListener("click", () => {
      togglePasswordVisibility(elements.passwordConfirmInput, elements.togglePasswordConfirm);
    });
  }

  /**
   * Initialize requirements panel toggle with accessibility support
   */
  function initializeRequirementsToggle() {
    const toggleButton = document.getElementById("toggleRequirements");
    const requirementsPanel = document.getElementById("passwordRequirements");
    const statusElement = document.getElementById("requirementsPanelStatus");

    if (!toggleButton || !requirementsPanel) {
      return;
    }

    toggleButton.addEventListener("click", () => {
      const isExpanded = toggleButton.getAttribute("aria-expanded") === "true";
      const newExpanded = !isExpanded;
      
      toggleButton.setAttribute("aria-expanded", newExpanded.toString());
      requirementsPanel.classList.toggle("password-reset-form__requirements--hidden");
      requirementsPanel.setAttribute("aria-hidden", (!newExpanded).toString());

      // Announce state change to screen readers (Issue #5)
      if (statusElement) {
        const statusText = newExpanded ? 
          translations["auth.accessibility.requirements.expanded"] : 
          translations["auth.accessibility.requirements.collapsed"];
        statusElement.textContent = statusText;
      }

      if (newExpanded) {
        updatePasswordRequirements();
      }
    });
  }

  /**
   * Update password requirements indicators and strength meter with performance optimization
   */
  function updatePasswordRequirements() {
    const elements = {
      passwordInput: document.getElementById("password"),
      passwordConfirmInput: document.getElementById("passwordConfirm")
    };

    const password = elements.passwordInput?.value || "";
    const passwordConfirm = elements.passwordConfirmInput?.value || "";

    // Validate password
    const validation = validatePassword(password);

    // Update requirement indicators efficiently
    const requirements = [
      { id: "req-length", valid: !validation.errors.includes("min_length") },
      { id: "req-uppercase", valid: !validation.errors.includes("uppercase") },
      { id: "req-lowercase", valid: !validation.errors.includes("lowercase") },
      { id: "req-number", valid: !validation.errors.includes("number") },
      { id: "req-special", valid: !validation.errors.includes("special") },
      { id: "req-common", valid: !validation.errors.includes("common") },
      { id: "req-repeats", valid: !validation.errors.includes("repeats") },
      { id: "req-sequences", valid: !validation.errors.includes("sequences") },
      { id: "req-match", valid: password && passwordConfirm && password === passwordConfirm }
    ];

    requirements.forEach(req => updateRequirementIndicator(req.id, req.valid));

    // Update strength meter
    if (password) {
      const strength = calculatePasswordStrength(password);
      const strengthLevel = getStrengthLevel(strength);
      updateStrengthMeter(strength, strengthLevel);
    }
  }

  /**
   * Update individual requirement indicator with optimized class handling and enhanced accessibility
   */
  function updateRequirementIndicator(elementId, isValid) {
    const element = document.getElementById(elementId);
    if (!element) {
      return;
    }

    // Use className for better performance than classList.toggle
    element.className = isValid
      ? "password-reset-form__requirement password-reset-form__requirement--valid"
      : "password-reset-form__requirement password-reset-form__requirement--invalid";

    // Update the visual icon and screen reader description (Issue #10)
    const icon = element.querySelector(".password-reset-form__requirement-icon");
    const description = element.querySelector("[id$='-desc']");
    
    if (icon) {
      icon.textContent = isValid ? "✓" : "✗";
      icon.setAttribute("aria-hidden", "true");
    }
    
    if (description) {
      const statusText = isValid ? 
        translations["auth.accessibility.requirement.met"] : 
        translations["auth.accessibility.requirement.unmet"];
      description.textContent = statusText;
    }
  }

  /**
   * Update password strength meter with optimized localization
   */
  function updateStrengthMeter(strength, strengthLevel) {
    const strengthBar = document.getElementById("passwordStrength");
    const strengthText = document.getElementById("strengthText");

    if (!strengthBar || !strengthText) {
      return;
    }

    // Update visual elements
    strengthBar.style.width = `${strength}%`;
    strengthBar.className = `password-reset-form__strength-progress password-reset-form__strength-progress--${strengthLevel}`;
    strengthText.className = `password-reset-form__strength-text password-reset-form__strength-text--${strengthLevel}`;

    // Optimized localized strength text
    const strengthKey = strengthLevel === "very-strong" ? "very_strong" : strengthLevel;
    const strengthTextContent = translations[`auth.password.strength.${strengthKey}`];
    strengthText.textContent = strengthTextContent;

    const strengthLabel = translations["auth.password.strength"];
    strengthText.setAttribute("aria-label", `${strengthLabel}: ${strengthTextContent}`);
  }

  /**
   * Toggle password visibility with improved accessibility and state announcements
   */
  function togglePasswordVisibility(input, button) {
    if (!input || !button) {
      return;
    }

    const isPassword = input.type === "password";
    input.type = isPassword ? "text" : "password";

    const showIcon = button.querySelector(".show-password");
    const hideIcon = button.querySelector(".hide-password");

    if (showIcon && hideIcon) {
      if (isPassword) {
        showIcon.classList.add("password-reset-form__toggle-hidden");
        hideIcon.classList.remove("password-reset-form__toggle-hidden");
      } else {
        showIcon.classList.remove("password-reset-form__toggle-hidden");
        hideIcon.classList.add("password-reset-form__toggle-hidden");
      }
    }

    // Update aria-pressed state
    button.setAttribute("aria-pressed", isPassword ? "true" : "false");

    // Announce state change to screen readers (Issue #2)
    const statusElement = button.getAttribute("aria-describedby");
    const statusDiv = statusElement ? document.getElementById(statusElement) : null;
    if (statusDiv) {
      const statusText = isPassword ? 
        translations["auth.accessibility.password.visible"] : 
        translations["auth.accessibility.password.hidden"];
      statusDiv.textContent = statusText;
    }

    // Maintain focus for accessibility
    input.focus();
  }

  // Optimized utility functions for better performance
  
  /**
   * Reset error displays efficiently
   */
  function resetErrorDisplays(elements) {
    elements.forEach((element) => {
      if (element) {
        element.textContent = "";
        element.classList.add(
          "password-reset-form__error--hidden",
          "password-reset-form__message--hidden"
        );
      }
    });
  }

  /**
   * Show error message with ARIA support
   */
  function showError(element, message) {
    if (element) {
      element.textContent = message;
      element.classList.remove(
        "password-reset-form__error--hidden",
        "password-reset-form__message--hidden"
      );
    }
  }

  /**
   * Show success message with ARIA support
   */
  function showSuccess(element, message) {
    if (element) {
      element.textContent = message;
      element.classList.remove("password-reset-form__message--hidden");
    }
  }

  /**
   * Set loading state with optimized DOM manipulation
   */
  function setLoadingState(textElement, spinnerElement, text, isLoading) {
    if (textElement) {
      textElement.textContent = text;
    }
    if (spinnerElement) {
      if (isLoading) {
        spinnerElement.classList.remove("password-reset-form__spinner--hidden");
      } else {
        spinnerElement.classList.add("password-reset-form__spinner--hidden");
      }
    }
  }

  /**
   * Initialize session timeout warning (Issue #1)
   * Implements WCAG 2.2 SC 2.2.6 Timeouts (AAA)
   */
  function initializeSessionTimeoutWarning() {
    const SESSION_TIMEOUT = 20 * 60 * 1000; // 20 minutes in milliseconds
    const WARNING_TIME = 2 * 60 * 1000; // Show warning 2 minutes before timeout
    
    let timeoutWarningTimer;
    let sessionTimeoutTimer;
    let warningElement;

    // Create timeout warning element
    function createTimeoutWarning() {
      if (warningElement) {
        return warningElement;
      }

      warningElement = document.createElement('div');
      warningElement.id = 'sessionTimeoutWarning';
      warningElement.className = 'password-reset-form__timeout-warning';
      warningElement.setAttribute('role', 'alert');
      warningElement.setAttribute('aria-live', 'assertive');
      warningElement.setAttribute('aria-atomic', 'true');
      
      const timeoutTexts = {
        title: translations["auth.session.timeout.title"],
        message: translations["auth.session.timeout.message"],
        extend: translations["auth.session.timeout.extend"],
        close: translations["auth.session.timeout.close"]
      };
      
      const texts = timeoutTexts;
      
      warningElement.innerHTML = `
        <div class="password-reset-form__timeout-content">
          <h3 class="password-reset-form__timeout-title">${texts.title}</h3>
          <p class="password-reset-form__timeout-message">${texts.message}</p>
          <div class="password-reset-form__timeout-actions">
            <button type="button" id="extendSessionBtn" class="password-reset-form__timeout-btn password-reset-form__timeout-btn--primary">
              ${texts.extend}
            </button>
            <button type="button" id="closeWarningBtn" class="password-reset-form__timeout-btn password-reset-form__timeout-btn--secondary">
              ${texts.close}
            </button>
          </div>
        </div>
      `;
      
      document.body.appendChild(warningElement);
      
      // Add event listeners
      document.getElementById('extendSessionBtn')?.addEventListener('click', extendSession);
      document.getElementById('closeWarningBtn')?.addEventListener('click', hideTimeoutWarning);
      
      return warningElement;
    }

    // Show timeout warning
    function showTimeoutWarning() {
      const warning = createTimeoutWarning();
      warning.classList.add('password-reset-form__timeout-warning--visible');
      
      // Focus the extend button for keyboard accessibility
      setTimeout(() => {
        document.getElementById('extendSessionBtn')?.focus();
      }, 100);
    }

    // Hide timeout warning
    function hideTimeoutWarning() {
      if (warningElement) {
        warningElement.classList.remove('password-reset-form__timeout-warning--visible');
      }
    }

    // Extend session
    function extendSession() {
      hideTimeoutWarning();
      resetSessionTimers();
    }

    // Reset session timers
    function resetSessionTimers() {
      clearTimeout(timeoutWarningTimer);
      clearTimeout(sessionTimeoutTimer);
      
      // Set new timers
      timeoutWarningTimer = setTimeout(showTimeoutWarning, SESSION_TIMEOUT - WARNING_TIME);
      sessionTimeoutTimer = setTimeout(() => {
        // Redirect to login or show session expired message
        const lang = document.documentElement.lang || "de";
        window.location.href = `/${lang}/auth/login?reason=session_expired`;
      }, SESSION_TIMEOUT);
    }

    // Activity detection to reset timers
    const activityEvents = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'];
    let lastActivity = Date.now();
    
    function onActivity() {
      const now = Date.now();
      if (now - lastActivity > 60000) { // Only reset if more than 1 minute since last activity
        lastActivity = now;
        resetSessionTimers();
      }
    }

    // Add activity listeners
    activityEvents.forEach(event => {
      document.addEventListener(event, onActivity, { passive: true });
    });

    // Initialize timers
    resetSessionTimers();
  }
</script>

<style>
  /* ======================================
   * PASSWORD RESET FORM STYLES - OPTIMIZED
   * ======================================
   * 
   * Follows MelodyMind project standards:
   * - BEM methodology for class naming
   * - CSS custom properties from global.css
   * - WCAG AAA accessibility compliance
   * - Modern CSS features with performance optimization
   * - Responsive design with mobile-first approach
   */

  /* ======================================
   * MAIN CONTAINER
   * ====================================== */
  .password-reset-form {
    background-color: var(--password-reset-form-bg);
    border-radius: var(--password-reset-form-border-radius);
    padding: var(--password-reset-form-padding);
    box-shadow: var(--password-reset-form-shadow);
    max-width: var(--password-reset-form-max-width);
    margin: 0 auto;
    border: var(--password-reset-form-border);
  }

  /* ======================================
   * FIELDSET STYLING
   * ====================================== */
  .password-reset-form__fieldset {
    border: var(--password-reset-form-fieldset-border);
    border-radius: var(--password-reset-form-fieldset-border-radius);
    padding: var(--password-reset-form-fieldset-padding);
    margin: var(--space-lg) 0;
    background-color: var(--password-reset-form-fieldset-bg);
  }

  .password-reset-form__fieldset-legend {
    padding: 0 var(--space-sm);
    font-weight: var(--password-reset-form-title-weight);
    color: var(--password-reset-form-label-color);
    font-size: var(--password-reset-form-label-size);
    line-height: var(--password-reset-form-label-line-height);
  }

  /* ======================================
   * SESSION TIMEOUT WARNING
   * ====================================== */
  .password-reset-form__timeout-warning {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: var(--password-reset-form-timeout-overlay-bg);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 9999;
    opacity: 0;
    visibility: hidden;
    transition: var(--password-reset-form-transition);
  }

  .password-reset-form__timeout-warning--visible {
    opacity: 1;
    visibility: visible;
  }

  .password-reset-form__timeout-content {
    background-color: var(--password-reset-form-timeout-content-bg);
    border-radius: var(--password-reset-form-border-radius);
    padding: var(--password-reset-form-padding);
    max-width: var(--password-reset-form-max-width);
    margin: var(--space-lg);
    border: var(--password-reset-form-timeout-border);
    box-shadow: var(--password-reset-form-timeout-shadow);
  }

  .password-reset-form__timeout-title {
    margin-bottom: var(--space-lg);
    font-size: var(--text-xl);
    font-weight: var(--password-reset-form-title-weight);
    color: var(--color-pink-400);
    text-align: center;
  }

  .password-reset-form__timeout-message {
    margin-bottom: var(--space-xl);
    font-size: var(--password-reset-form-input-size);
    color: var(--password-reset-form-title-color);
    text-align: center;
    line-height: var(--leading-relaxed);
  }

  .password-reset-form__timeout-actions {
    display: flex;
    gap: var(--space-lg);
    justify-content: center;
  }

  .password-reset-form__timeout-btn {
    padding: var(--space-md) var(--space-xl);
    border-radius: var(--radius-md);
    border: var(--border-width-medium) solid transparent;
    font-size: var(--password-reset-form-label-size);
    font-weight: var(--password-reset-form-submit-font-weight);
    cursor: pointer;
    transition: var(--password-reset-form-transition);
    min-height: var(--password-reset-form-submit-min-height);
    min-width: var(--password-reset-form-submit-min-height);
  }

  .password-reset-form__timeout-btn--primary {
    background-color: var(--color-pink-400);
    color: var(--color-white);
    border-color: var(--color-pink-400);
  }

  .password-reset-form__timeout-btn--primary:hover {
    background-color: var(--color-pink-500);
    border-color: var(--color-pink-500);
  }

  .password-reset-form__timeout-btn--primary:focus {
    outline: var(--password-reset-form-submit-focus-outline);
    outline-offset: var(--password-reset-form-submit-focus-outline-offset);
  }

  .password-reset-form__timeout-btn--secondary {
    background-color: transparent;
    color: var(--password-reset-form-label-color);
    border-color: var(--color-gray-600);
  }

  .password-reset-form__timeout-btn--secondary:hover {
    background-color: rgba(255, 255, 255, 0.1);
    color: var(--password-reset-form-title-color);
  }

  .password-reset-form__timeout-btn--secondary:focus {
    outline: 3px solid var(--color-pink-400);
    outline-offset: var(--password-reset-form-submit-focus-outline-offset);
  }

  /* ======================================
   * TYPOGRAPHY
   * ====================================== */
  .password-reset-form__title {
    color: var(--password-reset-form-title-color);
    font-size: var(--password-reset-form-title-size);
    font-weight: var(--password-reset-form-title-weight);
    line-height: var(--password-reset-form-title-line-height);
    margin-bottom: var(--password-reset-form-title-margin-bottom);
    text-align: center;
  }

  .password-reset-form__description {
    color: var(--password-reset-form-description-color);
    font-size: var(--password-reset-form-description-size);
    line-height: var(--password-reset-form-description-line-height);
    margin-bottom: var(--password-reset-form-description-margin-bottom);
    text-align: center;
  }

  /* ======================================
   * FORM LAYOUT
   * ====================================== */
  .password-reset-form__form {
    display: flex;
    flex-direction: column;
    gap: var(--password-reset-form-form-gap);
  }

  .password-reset-form__field {
    display: flex;
    flex-direction: column;
    gap: var(--password-reset-form-field-gap);
  }

  .password-reset-form__label {
    color: var(--password-reset-form-label-color);
    font-size: var(--password-reset-form-label-size);
    font-weight: var(--password-reset-form-label-weight);
    line-height: var(--password-reset-form-label-line-height);
  }

  /* ======================================
   * INPUT STYLING
   * ====================================== */
  .password-reset-form__input {
    background-color: var(--password-reset-form-input-bg);
    border: var(--password-reset-form-input-border);
    border-radius: var(--password-reset-form-input-border-radius);
    padding: var(--password-reset-form-input-padding);
    font-size: var(--password-reset-form-input-font-size);
    line-height: var(--password-reset-form-input-line-height);
    color: var(--password-reset-form-input-color);
    transition: var(--password-reset-form-input-transition);
    min-height: var(--password-reset-form-input-min-height);
  }

  .password-reset-form__input::placeholder {
    color: var(--password-reset-form-input-placeholder-color);
    opacity: var(--password-reset-form-input-placeholder-opacity);
  }

  .password-reset-form__input:focus {
    outline: var(--password-reset-form-input-focus-outline);
    border-color: var(--password-reset-form-input-focus-border-color);
    box-shadow: var(--password-reset-form-input-focus-shadow);
  }

  .password-reset-form__input:invalid {
    border-color: var(--password-reset-form-input-invalid-border-color);
  }

  .password-reset-form__input:disabled {
    background-color: var(--password-reset-form-input-disabled-bg);
    color: var(--password-reset-form-input-disabled-color);
    cursor: not-allowed;
    opacity: var(--password-reset-form-input-disabled-opacity);
  }

  /* ======================================
   * PASSWORD FIELD WITH TOGGLE
   * ====================================== */
  .password-reset-form__password-field {
    position: relative;
    display: flex;
    align-items: center;
  }

  .password-reset-form__password-input {
    padding-right: var(--password-reset-form-toggle-button-width);
  }

  .password-reset-form__toggle-button {
    position: absolute;
    right: var(--password-reset-form-toggle-button-right);
    top: 50%;
    transform: translateY(-50%);
    background: var(--password-reset-form-toggle-button-bg);
    border: var(--password-reset-form-toggle-button-border);
    border-radius: var(--password-reset-form-toggle-button-border-radius);
    width: var(--password-reset-form-toggle-button-size);
    height: var(--password-reset-form-toggle-button-size);
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    color: var(--password-reset-form-toggle-button-color);
    transition: var(--password-reset-form-toggle-button-transition);
    min-height: var(--password-reset-form-toggle-button-min-height);
    min-width: var(--password-reset-form-toggle-button-min-width);
  }

  .password-reset-form__toggle-button:hover {
    background-color: var(--password-reset-form-toggle-button-hover-bg);
    color: var(--password-reset-form-toggle-button-hover-color);
  }

  .password-reset-form__toggle-button:focus {
    outline: var(--password-reset-form-toggle-button-focus-outline);
    box-shadow: var(--password-reset-form-toggle-button-focus-shadow);
  }

  .password-reset-form__toggle-button:active {
    background-color: var(--password-reset-form-toggle-button-active-bg);
    transform: translateY(-50%) scale(var(--password-reset-form-toggle-button-active-scale));
  }

  /* ======================================
   * ERROR AND SUCCESS MESSAGES
   * ====================================== */
  .password-reset-form__error,
  .password-reset-form__success {
    padding: var(--password-reset-form-message-padding);
    border-radius: var(--password-reset-form-message-border-radius);
    font-size: var(--password-reset-form-message-font-size);
    line-height: var(--password-reset-form-message-line-height);
    font-weight: var(--password-reset-form-message-weight);
    margin-top: var(--password-reset-form-message-margin-top);
    border: var(--password-reset-form-message-border-width) solid;
  }

  .password-reset-form__error {
    background-color: var(--password-reset-form-error-bg);
    color: var(--password-reset-form-error-color);
    border-color: var(--password-reset-form-error-border-color);
  }

  .password-reset-form__success {
    background-color: var(--password-reset-form-success-bg);
    color: var(--password-reset-form-success-color);
    border-color: var(--password-reset-form-success-border-color);
  }

  /* ======================================
   * SUBMIT BUTTON
   * ====================================== */
  .password-reset-form__submit {
    background-color: var(--password-reset-form-submit-bg);
    color: var(--password-reset-form-submit-color);
    border: var(--password-reset-form-submit-border);
    border-radius: var(--password-reset-form-submit-border-radius);
    padding: var(--password-reset-form-submit-padding);
    font-size: var(--password-reset-form-submit-font-size);
    font-weight: var(--password-reset-form-submit-weight);
    line-height: var(--password-reset-form-submit-line-height);
    cursor: pointer;
    transition: var(--password-reset-form-submit-transition);
    min-height: var(--password-reset-form-submit-min-height);
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--password-reset-form-submit-gap);
  }

  .password-reset-form__submit:hover:not(:disabled) {
    background-color: var(--password-reset-form-submit-hover-bg);
    color: var(--password-reset-form-submit-hover-color);
    transform: var(--password-reset-form-submit-hover-transform);
  }

  .password-reset-form__submit:focus {
    outline: var(--password-reset-form-submit-focus-outline);
    box-shadow: var(--password-reset-form-submit-focus-shadow);
  }

  .password-reset-form__submit:active:not(:disabled) {
    transform: var(--password-reset-form-submit-active-transform);
  }

  .password-reset-form__submit:disabled {
    background-color: var(--password-reset-form-submit-disabled-bg);
    color: var(--password-reset-form-submit-disabled-color);
    cursor: not-allowed;
    opacity: var(--password-reset-form-submit-disabled-opacity);
    transform: none;
  }

  /* ======================================
   * LOADING SPINNER
   * ====================================== */
  .password-reset-form__spinner {
    width: var(--password-reset-form-spinner-size);
    height: var(--password-reset-form-spinner-size);
    border: var(--password-reset-form-spinner-border-width) solid var(--password-reset-form-spinner-border-color);
    border-top: var(--password-reset-form-spinner-border-width) solid var(--password-reset-form-spinner-top-color);
    border-radius: 50%;
    animation: password-reset-form-spin var(--password-reset-form-spinner-duration) linear infinite;
  }

  @keyframes password-reset-form-spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  /* ======================================
   * PASSWORD REQUIREMENTS SECTION
   * ====================================== */
  .password-reset-form__requirements-toggle {
    background: var(--password-reset-form-requirements-toggle-bg);
    border: var(--password-reset-form-requirements-toggle-border);
    border-radius: var(--password-reset-form-requirements-toggle-border-radius);
    padding: var(--password-reset-form-requirements-toggle-padding);
    font-size: var(--password-reset-form-requirements-toggle-font-size);
    color: var(--password-reset-form-requirements-toggle-color);
    cursor: pointer;
    transition: var(--password-reset-form-requirements-toggle-transition);
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    margin-top: var(--password-reset-form-requirements-toggle-margin-top);
    min-height: var(--password-reset-form-requirements-toggle-min-height);
  }

  .password-reset-form__requirements-toggle:hover {
    background-color: var(--password-reset-form-requirements-toggle-hover-bg);
    color: var(--password-reset-form-requirements-toggle-hover-color);
  }

  .password-reset-form__requirements-toggle:focus {
    outline: var(--password-reset-form-requirements-toggle-focus-outline);
    box-shadow: var(--password-reset-form-requirements-toggle-focus-shadow);
  }

  .password-reset-form__requirements-toggle[aria-expanded="true"] {
    background-color: var(--password-reset-form-requirements-toggle-expanded-bg);
    color: var(--password-reset-form-requirements-toggle-expanded-color);
  }

  .password-reset-form__requirements-panel {
    background-color: var(--password-reset-form-requirements-panel-bg);
    border: var(--password-reset-form-requirements-panel-border);
    border-radius: var(--password-reset-form-requirements-panel-border-radius);
    padding: var(--password-reset-form-requirements-panel-padding);
    margin-top: var(--password-reset-form-requirements-panel-margin-top);
    display: none;
    animation: password-reset-form-fade-in var(--password-reset-form-requirements-panel-animation-duration) ease-in-out;
  }

  .password-reset-form__requirements-panel--visible {
    display: block;
  }

  @keyframes password-reset-form-fade-in {
    from { opacity: 0; transform: translateY(-10px); }
    to { opacity: 1; transform: translateY(0); }
  }

  .password-reset-form__requirements-status {
    font-size: var(--password-reset-form-requirements-status-font-size);
    color: var(--password-reset-form-requirements-status-color);
    margin-bottom: var(--password-reset-form-requirements-status-margin-bottom);
    font-weight: var(--password-reset-form-requirements-status-weight);
  }

  .password-reset-form__requirements-help {
    font-size: var(--password-reset-form-requirements-help-font-size);
    color: var(--password-reset-form-requirements-help-color);
    margin-bottom: var(--password-reset-form-requirements-help-margin-bottom);
    line-height: var(--password-reset-form-requirements-help-line-height);
  }

  .password-reset-form__requirements-list {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: var(--password-reset-form-requirements-item-gap);
  }

  .password-reset-form__requirements-item {
    display: flex;
    align-items: center;
    gap: var(--password-reset-form-requirements-item-icon-gap);
    padding: var(--password-reset-form-requirements-item-padding);
    border-radius: var(--password-reset-form-requirements-item-border-radius);
    transition: var(--password-reset-form-requirements-item-transition);
    font-size: var(--password-reset-form-requirements-item-font-size);
    line-height: var(--password-reset-form-requirements-item-line-height);
  }

  .password-reset-form__requirements-item--met {
    background-color: var(--password-reset-form-requirements-item-met-bg);
    color: var(--password-reset-form-requirements-item-met-color);
    border: var(--password-reset-form-requirements-item-met-border);
  }

  .password-reset-form__requirements-item--not-met {
    background-color: var(--password-reset-form-requirements-item-not-met-bg);
    color: var(--password-reset-form-requirements-item-not-met-color);
    border: var(--password-reset-form-requirements-item-not-met-border);
  }

  .password-reset-form__requirements-icon {
    width: var(--password-reset-form-requirements-icon-size);
    height: var(--password-reset-form-requirements-icon-size);
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    font-weight: bold;
    font-size: var(--password-reset-form-requirements-icon-font-size);
    flex-shrink: 0;
  }

  /* ======================================
   * PASSWORD STRENGTH METER
   * ====================================== */
  .password-reset-form__strength-meter {
    margin-top: var(--password-reset-form-strength-meter-margin-top);
  }

  .password-reset-form__strength-label {
    font-size: var(--password-reset-form-strength-label-font-size);
    color: var(--password-reset-form-strength-label-color);
    margin-bottom: var(--password-reset-form-strength-label-margin-bottom);
    font-weight: var(--password-reset-form-strength-label-weight);
  }

  .password-reset-form__strength-bar {
    width: 100%;
    height: var(--password-reset-form-strength-bar-height);
    background-color: var(--password-reset-form-strength-bar-bg);
    border-radius: var(--password-reset-form-strength-bar-border-radius);
    overflow: hidden;
    border: var(--password-reset-form-strength-bar-border);
  }

  .password-reset-form__strength-progress {
    height: 100%;
    transition: var(--password-reset-form-strength-progress-transition);
    border-radius: var(--password-reset-form-strength-progress-border-radius);
  }

  .password-reset-form__strength-progress--weak {
    background-color: var(--password-reset-form-strength-weak-color);
  }

  .password-reset-form__strength-progress--medium {
    background-color: var(--password-reset-form-strength-medium-color);
  }

  .password-reset-form__strength-progress--strong {
    background-color: var(--password-reset-form-strength-strong-color);
  }

  .password-reset-form__strength-progress--very-strong {
    background-color: var(--password-reset-form-strength-very-strong-color);
  }

  .password-reset-form__strength-text {
    font-size: var(--password-reset-form-strength-text-font-size);
    margin-top: var(--password-reset-form-strength-text-margin-top);
    font-weight: var(--password-reset-form-strength-text-weight);
  }

  /* ======================================
   * FOOTER LINK
   * ====================================== */
  .password-reset-form__footer {
    text-align: center;
    margin-top: var(--password-reset-form-footer-margin-top);
  }

  .password-reset-form__footer-link {
    color: var(--password-reset-form-footer-link-color);
    text-decoration: var(--password-reset-form-footer-link-decoration);
    font-size: var(--password-reset-form-footer-link-font-size);
    transition: var(--password-reset-form-footer-link-transition);
    padding: var(--password-reset-form-footer-link-padding);
    border-radius: var(--password-reset-form-footer-link-border-radius);
    display: inline-block;
  }

  .password-reset-form__footer-link:hover {
    color: var(--password-reset-form-footer-link-hover-color);
    text-decoration: var(--password-reset-form-footer-link-hover-decoration);
    background-color: var(--password-reset-form-footer-link-hover-bg);
  }

  .password-reset-form__footer-link:focus {
    outline: var(--password-reset-form-footer-link-focus-outline);
    box-shadow: var(--password-reset-form-footer-link-focus-shadow);
    background-color: var(--password-reset-form-footer-link-focus-bg);
  }

  /* ======================================
   * RESPONSIVE DESIGN
   * ====================================== */
  @media (min-width: 640px) {
    .password-reset-form {
      padding: var(--password-reset-form-padding-sm);
    }

    .password-reset-form__title {
      font-size: var(--password-reset-form-title-size-sm);
    }

    .password-reset-form__description {
      font-size: var(--password-reset-form-description-size-sm);
    }

    .password-reset-form__form {
      gap: var(--password-reset-form-form-gap-sm);
    }
  }

  @media (min-width: 768px) {
    .password-reset-form {
      padding: var(--password-reset-form-padding-md);
    }

    .password-reset-form__title {
      font-size: var(--password-reset-form-title-size-md);
    }

    .password-reset-form__description {
      font-size: var(--password-reset-form-description-size-md);
    }

    .password-reset-form__form {
      gap: var(--password-reset-form-form-gap-md);
    }

    .password-reset-form__timeout-content {
      padding: var(--password-reset-form-timeout-content-padding-md);
    }
  }

  @media (min-width: 1024px) {
    .password-reset-form {
      padding: var(--password-reset-form-padding-lg);
    }

    .password-reset-form__title {
      font-size: var(--password-reset-form-title-size-lg);
    }

    .password-reset-form__description {
      font-size: var(--password-reset-form-description-size-lg);
    }

    .password-reset-form__form {
      gap: var(--password-reset-form-form-gap-lg);
    }
  }

  /* ======================================
   * ACCESSIBILITY ENHANCEMENTS
   * ====================================== */
  @media (prefers-color-scheme: dark) {
    .password-reset-form {
      background-color: var(--password-reset-form-bg-dark);
      border-color: var(--password-reset-form-border-color-dark);
    }

    .password-reset-form__input {
      background-color: var(--password-reset-form-input-bg-dark);
      color: var(--password-reset-form-input-color-dark);
      border-color: var(--password-reset-form-input-border-color-dark);
    }

    .password-reset-form__toggle-button {
      background-color: var(--password-reset-form-toggle-button-bg-dark);
      color: var(--password-reset-form-toggle-button-color-dark);
    }
  }

  @media (prefers-contrast: high) {
    .password-reset-form {
      border: var(--password-reset-form-high-contrast-border);
    }

    .password-reset-form__input:focus {
      outline: var(--password-reset-form-input-high-contrast-focus-outline);
    }

    .password-reset-form__submit:focus {
      outline: var(--password-reset-form-submit-high-contrast-focus-outline);
    }

    .password-reset-form__toggle-button:focus {
      outline: var(--password-reset-form-toggle-button-high-contrast-focus-outline);
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .password-reset-form__spinner {
      animation: none;
    }

    .password-reset-form__requirements-panel {
      animation: none;
    }

    .password-reset-form__timeout-warning {
      transition: none;
    }

    * {
      transition-duration: var(--password-reset-form-reduced-motion-duration) !important;
      animation-duration: var(--password-reset-form-reduced-motion-duration) !important;
    }
  }

  /* ======================================
   * PRINT STYLES
   * ====================================== */
  @media print {
    .password-reset-form {
      background: var(--password-reset-form-print-bg);
      border: var(--password-reset-form-print-border);
      box-shadow: none;
      max-width: none;
    }

    .password-reset-form__timeout-warning {
      display: none !important;
    }

    .password-reset-form__spinner {
      display: none !important;
    }

    .password-reset-form__toggle-button {
      display: none !important;
    }
  }

  /* ======================================
   * SCREEN READER ONLY CLASS
   * ====================================== */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
</style>
