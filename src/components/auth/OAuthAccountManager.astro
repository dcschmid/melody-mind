---
/**
 * OAuth Account Manager Component
 *
 * Manages OAuth provider accounts - linking, unlinking, and displaying linked accounts
 */

import { Icon } from "astro-icon/components";
import { useTranslations } from "../../utils/i18n";
import Headline from "../Headline.astro";
import Paragraph from "../Paragraph.astro";

interface Props {
  lang: string;
  linkedProviders?: string[];
  className?: string;
}

const { lang, linkedProviders = [], className = "" } = Astro.props;
const t = useTranslations(lang);

const availableProviders = [
  {
    name: "spotify",
    displayName: "Spotify",
    icon: "music",
    color: "#1DB954",
    description: t("auth.oauth.spotify.description"),
  },
  {
    name: "google",
    displayName: "Google",
    icon: "search",
    color: "#4285F4",
    description: t("auth.oauth.google.description"),
  },
  {
    name: "apple",
    displayName: "Apple",
    icon: "apple",
    color: "#000000",
    description: t("auth.oauth.apple.description"),
  },
  {
    name: "discord",
    displayName: "Discord",
    icon: "gamepad",
    color: "#5865F2",
    description: t("auth.oauth.discord.description"),
  },
  {
    name: "yahoo",
    displayName: "Yahoo",
    icon: "mail",
    color: "#6001D2",
    description: t("auth.oauth.yahoo.description"),
  },
];
---

<div class={`oauth-account-manager ${className}`}>
  <div class="oauth-account-manager__header">
    <Headline level="h3" size="lg" className="oauth-account-manager__title">
      <Icon name="link" class="oauth-account-manager__title-icon" aria-hidden="true" />
      {t("auth.oauth.linked_accounts")}
    </Headline>
    <Paragraph className="oauth-account-manager__description">
      {t("auth.oauth.linked_accounts_description")}
    </Paragraph>
  </div>

  <div class="oauth-account-manager__messages" aria-live="polite">
    <div class="oauth-account-manager__success" role="alert" style="display: none;">
      <Icon name="check-circle" class="oauth-account-manager__message-icon" aria-hidden="true" />
      <span class="oauth-account-manager__message-text"></span>
    </div>
    <div class="oauth-account-manager__error" role="alert" style="display: none;">
      <Icon name="x-circle" class="oauth-account-manager__message-icon" aria-hidden="true" />
      <span class="oauth-account-manager__message-text"></span>
    </div>
  </div>

  <div class="oauth-account-manager__providers">
    {
      availableProviders.map((provider) => {
        const isLinked = linkedProviders.includes(provider.name);
        return (
          <div
            class={`oauth-provider ${isLinked ? "oauth-provider--linked" : ""}`}
            data-provider={provider.name}
            style={`--provider-color: ${provider.color}`}
          >
            <div class="oauth-provider__info">
              <div class="oauth-provider__icon">
                <Icon name={provider.icon} aria-hidden="true" />
              </div>
              <div class="oauth-provider__details">
                <div class="oauth-provider__name">{provider.displayName}</div>
                <div class="oauth-provider__description">{provider.description}</div>
              </div>
            </div>

            <div class="oauth-provider__status">
              {isLinked ? (
                <div class="oauth-provider__linked">
                  <Icon
                    name="check-circle"
                    class="oauth-provider__status-icon"
                    aria-hidden="true"
                  />
                  <span class="oauth-provider__status-text">{t("auth.oauth.linked")}</span>
                </div>
              ) : (
                <div class="oauth-provider__not-linked">
                  <Icon name="x-circle" class="oauth-provider__status-icon" aria-hidden="true" />
                  <span class="oauth-provider__status-text">{t("auth.oauth.not_linked")}</span>
                </div>
              )}
            </div>

            <div class="oauth-provider__actions">
              {isLinked ? (
                <button
                  type="button"
                  class="oauth-provider__button oauth-provider__button--unlink"
                  data-action="unlink"
                  data-provider={provider.name}
                  aria-label={t("auth.oauth.unlink_provider", { provider: provider.displayName })}
                >
                  <Icon name="unlink" class="oauth-provider__button-icon" aria-hidden="true" />
                  <span class="oauth-provider__button-text">{t("auth.oauth.unlink")}</span>
                </button>
              ) : (
                <button
                  type="button"
                  class="oauth-provider__button oauth-provider__button--link"
                  data-action="link"
                  data-provider={provider.name}
                  aria-label={t("auth.oauth.link_provider", { provider: provider.displayName })}
                >
                  <Icon name="link" class="oauth-provider__button-icon" aria-hidden="true" />
                  <span class="oauth-provider__button-text">{t("auth.oauth.link")}</span>
                </button>
              )}
            </div>
          </div>
        );
      })
    }
  </div>
</div>

<style lang="scss">
  .oauth-account-manager {
    width: 100%;

    &__header {
      margin-bottom: var(--space-xl);
      text-align: center;

      @media (min-width: 48em) {
        text-align: left;
      }
    }

    &__title {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: var(--space-sm);
      font-size: var(--text-2xl);
      font-weight: var(--font-bold);
      color: var(--text-primary);
      margin-bottom: var(--space-md);

      @media (min-width: 48em) {
        justify-content: flex-start;
      }
    }

    &__title-icon {
      width: var(--icon-size-lg);
      height: var(--icon-size-lg);
      color: var(--interactive-primary);
    }

    &__description {
      font-size: var(--text-base);
      color: var(--text-secondary);
      line-height: var(--leading-relaxed);
      max-width: 60ch;
      margin: 0 auto;

      @media (min-width: 48em) {
        margin: 0;
      }
    }

    &__messages {
      margin-bottom: var(--space-lg);
    }

    &__success,
    &__error {
      display: flex;
      align-items: center;
      gap: var(--space-sm);
      padding: var(--space-md) var(--space-lg);
      border-radius: var(--radius-md);
      margin-bottom: var(--space-md);

      &:last-child {
        margin-bottom: 0;
      }
    }

    &__success {
      background-color: var(--bg-success-aaa);
      color: var(--text-success-aaa);
      border: var(--border-width-thin) solid var(--border-success);
    }

    &__error {
      background-color: var(--bg-error-aaa);
      color: var(--text-error-aaa);
      border: var(--border-width-thin) solid var(--border-error);
    }

    &__message-icon {
      width: var(--icon-size-md);
      height: var(--icon-size-md);
      flex-shrink: 0;
    }

    &__message-text {
      font-size: var(--text-base);
      font-weight: var(--font-medium);
    }

    &__providers {
      display: flex;
      flex-direction: column;
      gap: var(--space-lg);
    }
  }

  .oauth-provider {
    display: flex;
    align-items: center;
    gap: var(--space-lg);
    padding: var(--space-lg);
    background: var(--bg-secondary);
    border: var(--border-width-thin) solid var(--border-secondary);
    border-radius: var(--radius-lg);
    transition:
      border-color var(--transition-normal),
      box-shadow var(--transition-normal);

    &:hover {
      border-color: var(--provider-color);
      box-shadow: var(--shadow-lg);
    }

    &--linked {
      border-color: var(--border-success);
      background: var(--bg-success-subtle);
    }

    &__info {
      display: flex;
      align-items: center;
      gap: var(--space-md);
      flex: 1;
    }

    &__icon {
      width: var(--icon-size-xl);
      height: var(--icon-size-xl);
      display: flex;
      align-items: center;
      justify-content: center;
      background: var(--provider-color);
      color: white;
      border-radius: var(--radius-md);
      flex-shrink: 0;
    }

    &__details {
      flex: 1;
      min-width: 0;
    }

    &__name {
      font-size: var(--text-lg);
      font-weight: var(--font-semibold);
      color: var(--text-primary);
      margin-bottom: var(--space-xs);
    }

    &__description {
      font-size: var(--text-sm);
      color: var(--text-secondary);
      line-height: var(--leading-relaxed);
    }

    &__status {
      display: flex;
      align-items: center;
      gap: var(--space-sm);
      margin-right: var(--space-md);
    }

    &__linked {
      display: flex;
      align-items: center;
      gap: var(--space-xs);
      color: var(--text-success);
      font-size: var(--text-sm);
      font-weight: var(--font-medium);
    }

    &__not-linked {
      display: flex;
      align-items: center;
      gap: var(--space-xs);
      color: var(--text-secondary);
      font-size: var(--text-sm);
      font-weight: var(--font-medium);
    }

    &__status-icon {
      width: var(--icon-size-sm);
      height: var(--icon-size-sm);
    }

    &__actions {
      flex-shrink: 0;
    }

    &__button {
      display: flex;
      align-items: center;
      gap: var(--space-sm);
      padding: var(--space-sm) var(--space-md);
      border-radius: var(--radius-md);
      border: var(--border-width-thin) solid;
      background: transparent;
      cursor: pointer;
      transition:
        background-color var(--transition-normal),
        color var(--transition-normal);
      font-size: var(--text-sm);
      font-weight: var(--font-medium);
      min-height: var(--touch-target-md);

      &:focus-visible {
        outline: var(--focus-outline);
        outline-offset: var(--focus-ring-offset);
      }

      &--link {
        color: var(--provider-color);
        border-color: var(--provider-color);

        &:hover {
          background: var(--provider-color);
          color: white;
        }

        &:disabled {
          opacity: 0.5;
          cursor: not-allowed;
        }
      }

      &--unlink {
        color: var(--color-error-600);
        border-color: var(--color-error-600);

        &:hover {
          background: var(--color-error-600);
          color: white;
        }

        &:disabled {
          opacity: 0.5;
          cursor: not-allowed;
        }
      }
    }

    &__button-icon {
      width: var(--icon-size-sm);
      height: var(--icon-size-sm);
    }

    &__button-text {
      @media (max-width: 47.9375em) {
        display: none;
      }
    }
  }

  @media (max-width: 47.9375em) {
    .oauth-provider {
      flex-direction: column;
      align-items: stretch;
      gap: var(--space-md);

      &__info {
        justify-content: center;
      }

      &__status {
        justify-content: center;
        margin-right: 0;
      }

      &__actions {
        align-self: center;
      }
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .oauth-provider {
      transition: none;

      &:hover {
        transform: none;
      }
    }
  }
</style>

<script>
  import { useTranslations } from "../../utils/i18n";

  const initOAuthManager = () => {
    const containers = document.querySelectorAll(".oauth-account-manager");

    containers.forEach((container) => {
      const successMessage = container.querySelector(
        ".oauth-account-manager__success"
      ) as HTMLElement;
      const errorMessage = container.querySelector(".oauth-account-manager__error") as HTMLElement;
      const lang = document.documentElement.lang || "en";
      const t = useTranslations(lang);

      const showSuccess = (message: string) => {
        hideMessages();
        const messageText = successMessage.querySelector(".oauth-account-manager__message-text");
        if (messageText) {
          messageText.textContent = message;
        }
        successMessage.style.display = "flex";
        setTimeout(() => {
          successMessage.style.display = "none";
        }, 5000);
      };

      const showError = (message: string) => {
        hideMessages();
        const messageText = errorMessage.querySelector(".oauth-account-manager__message-text");
        if (messageText) {
          messageText.textContent = message;
        }
        errorMessage.style.display = "flex";
        setTimeout(() => {
          errorMessage.style.display = "none";
        }, 10000);
      };

      const hideMessages = () => {
        successMessage.style.display = "none";
        errorMessage.style.display = "none";
      };

      const setButtonLoading = (button: HTMLButtonElement, loading: boolean) => {
        button.disabled = loading;
        if (loading) {
          button.classList.add("oauth-provider__button--loading");
        } else {
          button.classList.remove("oauth-provider__button--loading");
        }
      };

      const updateProviderStatus = (provider: string, isLinked: boolean) => {
        const providerElement = container.querySelector(
          `[data-provider="${provider}"]`
        ) as HTMLElement;
        if (!providerElement) {
          return;
        }

        const statusElement = providerElement.querySelector(
          ".oauth-provider__status"
        ) as HTMLElement;
        const actionsElement = providerElement.querySelector(
          ".oauth-provider__actions"
        ) as HTMLElement;

        if (isLinked) {
          providerElement.classList.add("oauth-provider--linked");
          statusElement.innerHTML = `
            <div class="oauth-provider__linked">
              <svg class="oauth-provider__status-icon" aria-hidden="true"><use href="#icon-check-circle"></use></svg>
              <span class="oauth-provider__status-text">${t("auth.oauth.linked")}</span>
            </div>
          `;
          actionsElement.innerHTML = `
            <button type="button" class="oauth-provider__button oauth-provider__button--unlink" data-action="unlink" data-provider="${provider}">
              <svg class="oauth-provider__button-icon" aria-hidden="true"><use href="#icon-unlink"></use></svg>
              <span class="oauth-provider__button-text">${t("auth.oauth.unlink")}</span>
            </button>
          `;
        } else {
          providerElement.classList.remove("oauth-provider--linked");
          statusElement.innerHTML = `
            <div class="oauth-provider__not-linked">
              <svg class="oauth-provider__status-icon" aria-hidden="true"><use href="#icon-x-circle"></use></svg>
              <span class="oauth-provider__status-text">${t("auth.oauth.not_linked")}</span>
            </div>
          `;
          actionsElement.innerHTML = `
            <button type="button" class="oauth-provider__button oauth-provider__button--link" data-action="link" data-provider="${provider}">
              <svg class="oauth-provider__button-icon" aria-hidden="true"><use href="#icon-link"></use></svg>
              <span class="oauth-provider__button-text">${t("auth.oauth.link")}</span>
            </button>
          `;
        }
      };

      const handleButtonClick = async (event: Event) => {
        const button = (event.target as HTMLElement).closest("[data-action]") as HTMLButtonElement;
        if (!button) {
          return;
        }

        const action = button.dataset.action;
        const provider = button.dataset.provider;

        if (!action || !provider) {
          return;
        }

        setButtonLoading(button, true);
        hideMessages();

        try {
          if (action === "link") {
            const currentUrl = window.location.href;
            const authUrl = `/api/auth/oauth/authorize/${provider}?lang=${lang}&redirect=${encodeURIComponent(currentUrl)}&link=true`;
            window.location.href = authUrl;
          } else if (action === "unlink") {
            const confirmed = confirm(
              t("auth.oauth.unlink_confirm_message", {
                provider: provider.charAt(0).toUpperCase() + provider.slice(1),
              })
            );

            if (!confirmed) {
              setButtonLoading(button, false);
              return;
            }

            const response = await fetch(`/api/auth/oauth/unlink/${provider}`, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              credentials: "include",
            });

            const data = await response.json();

            if (data.success) {
              showSuccess(data.message || t("auth.oauth.unlink_success", { provider: provider }));
              updateProviderStatus(provider, false);
            } else {
              showError(data.error || t("auth.oauth.unlink_failed"));
            }
          }
        } catch (error) {
          console.error("OAuth action failed:", error);
          showError((error as Error).message || t("auth.oauth.action_failed"));
        } finally {
          setButtonLoading(button, false);
        }
      };

      container.addEventListener("click", handleButtonClick);
    });
  };

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initOAuthManager);
  } else {
    initOAuthManager();
  }
</script>
