---
/**
 * PasswordRequirementsPanel Component for MelodyMind Auth Forms
 *
 * A comprehensive password requirements checker with strength meter and visual indicators.
 * This component eliminates duplication and provides consistent password validation UI.
 *
 * Features:
 * - Interactive password requirements checklist
 * - Real-time password strength meter
 * - WCAG AAA compliant accessibility
 * - Collapsible panel with toggle button
 * - Multi-language support
 * - Screen reader friendly announcements
 *
 * @component
 * @example
 * ```astro
 * <PasswordRequirementsPanel
 *   passwordFieldId="registerPassword"
 *   confirmFieldId="registerPasswordConfirm"
 *   toggleButtonText={t("auth.password.requirements")}
 * />
 * ```
 */
import { Icon } from "astro-icon/components";

export interface Props {
  /** ID of the password input field to monitor */
  passwordFieldId: string;
  /** ID of the password confirmation field (optional) */
  confirmFieldId?: string;
  /** Text for the toggle button */
  toggleButtonText?: string;
  /** Whether the panel should be initially expanded */
  initiallyExpanded?: boolean;
  /** Additional CSS classes */
  class?: string;
}

const {
  passwordFieldId,
  confirmFieldId,
  toggleButtonText = "Password Requirements",
  initiallyExpanded = false,
  class: className = "",
} = Astro.props;

const panelId = `passwordRequirements_${passwordFieldId}`;
const toggleId = `toggleRequirements_${passwordFieldId}`;
const strengthId = `passwordStrength_${passwordFieldId}`;
const strengthTextId = `strengthText_${passwordFieldId}`;
---

<div class={`auth-form__field ${className}`}>
  <button
    type="button"
    id={toggleId}
    class="auth-form__requirements-toggle"
    aria-expanded={initiallyExpanded ? "true" : "false"}
    aria-controls={panelId}
    aria-label="Show password requirements"
  >
    <Icon name="information-circle" class="auth-form__requirements-icon" aria-hidden="true" />
    {toggleButtonText}
  </button>

  <div
    id={panelId}
    class="auth-form__requirements-panel"
    aria-hidden={initiallyExpanded ? "false" : "true"}
    style={initiallyExpanded ? "display: block;" : "display: none;"}
  >
    <h3 class="auth-form__requirements-heading">Password Requirements</h3>

    <!-- Password requirement checklist -->
    <ul class="auth-form__requirements-list" role="list">
      <li
        id={`req-length_${passwordFieldId}`}
        class="auth-form__requirement auth-form__requirement--invalid"
      >
        <span aria-hidden="true">✗</span> At least 8 characters long
      </li>
      <li
        id={`req-uppercase_${passwordFieldId}`}
        class="auth-form__requirement auth-form__requirement--invalid"
      >
        <span aria-hidden="true">✗</span> Contains uppercase letter (A-Z)
      </li>
      <li
        id={`req-lowercase_${passwordFieldId}`}
        class="auth-form__requirement auth-form__requirement--invalid"
      >
        <span aria-hidden="true">✗</span> Contains lowercase letter (a-z)
      </li>
      <li
        id={`req-number_${passwordFieldId}`}
        class="auth-form__requirement auth-form__requirement--invalid"
      >
        <span aria-hidden="true">✗</span> Contains number (0-9)
      </li>
      <li
        id={`req-special_${passwordFieldId}`}
        class="auth-form__requirement auth-form__requirement--invalid"
      >
        <span aria-hidden="true">✗</span> Contains special character (!@#$%^&*)
      </li>
      <li
        id={`req-common_${passwordFieldId}`}
        class="auth-form__requirement auth-form__requirement--invalid"
      >
        <span aria-hidden="true">✗</span> Not a common password
      </li>
      <li
        id={`req-repeats_${passwordFieldId}`}
        class="auth-form__requirement auth-form__requirement--invalid"
      >
        <span aria-hidden="true">✗</span> No repeated characters (aaa, 111)
      </li>
      <li
        id={`req-sequences_${passwordFieldId}`}
        class="auth-form__requirement auth-form__requirement--invalid"
      >
        <span aria-hidden="true">✗</span> No sequential characters (abc, 123)
      </li>
      {
        confirmFieldId && (
          <li
            id={`req-match_${passwordFieldId}`}
            class="auth-form__requirement auth-form__requirement--invalid"
          >
            <span aria-hidden="true">✗</span> Passwords match
          </li>
        )
      }
    </ul>

    <!-- Password strength meter -->
    <div class="auth-form__strength-container">
      <p class="auth-form__strength-label">Password Strength</p>
      <div
        class="auth-form__strength-meter"
        role="progressbar"
        aria-valuemin="0"
        aria-valuemax="100"
        aria-valuenow="0"
      >
        <div
          id={strengthId}
          class="auth-form__strength-progress auth-form__strength-progress--weak"
          style="width: 0%"
        >
        </div>
      </div>
      <p id={strengthTextId} class="auth-form__strength-text auth-form__strength-text--weak">
        Weak
      </p>
    </div>
  </div>
</div>

<script
  define:vars={{ passwordFieldId, confirmFieldId, panelId, toggleId, strengthId, strengthTextId }}
>
  /**
   * Password Requirements Panel Functionality
   *
   * Handles password validation, strength calculation, and UI updates.
   * Provides real-time feedback as users type their passwords.
   */

  /**
   * List of common passwords to check against
   */
  const COMMON_PASSWORDS = [
    "password",
    "password123",
    "123456",
    "12345678",
    "qwerty",
    "admin",
    "welcome",
    "letmein",
    "monkey",
    "abc123",
    "football",
    "iloveyou",
    "trustno1",
    "sunshine",
    "master",
    "welcome1",
    "shadow",
    "ashley",
    "princess",
    "dragon",
    "passw0rd",
    "password1",
    "123123",
    "654321",
  ];

  /**
   * Validates a password against security requirements
   * @param password - The password to validate
   * @returns Object with validation results
   */
  function validatePassword(password) {
    const errors = [];

    if (password.length < 8) {
      errors.push("min_length");
    }
    if (!/[A-Z]/.test(password)) {
      errors.push("uppercase");
    }
    if (!/[a-z]/.test(password)) {
      errors.push("lowercase");
    }
    if (!/[0-9]/.test(password)) {
      errors.push("number");
    }
    if (!/[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password)) {
      errors.push("special");
    }

    // Check for common passwords
    if (COMMON_PASSWORDS.includes(password.toLowerCase())) {
      errors.push("common");
    }

    // Check for repeated characters
    if (/(.)\1{2,}/.test(password)) {
      errors.push("repeats");
    }

    // Check for sequences
    const sequences = ["123456", "abcdef", "qwerty", "asdfgh"];
    for (const seq of sequences) {
      for (let i = 0; i < seq.length - 2; i++) {
        const subSeq = seq.substring(i, i + 3);
        if (password.toLowerCase().includes(subSeq)) {
          errors.push("sequences");
          break;
        }
      }
      if (errors.includes("sequences")) {
        break;
      }
    }

    return {
      valid: errors.length === 0,
      errors: errors,
    };
  }

  /**
   * Calculates password strength as a percentage
   * @param password - The password to analyze
   * @returns Strength percentage (0-100)
   */
  function calculatePasswordStrength(password) {
    let strength = 0;

    // Length bonus
    if (password.length >= 8) {
      strength += 25;
    }
    if (password.length >= 12) {
      strength += 10;
    }
    if (password.length >= 16) {
      strength += 10;
    }

    // Character variety bonus
    if (/[a-z]/.test(password)) {
      strength += 10;
    }
    if (/[A-Z]/.test(password)) {
      strength += 10;
    }
    if (/[0-9]/.test(password)) {
      strength += 10;
    }
    if (/[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password)) {
      strength += 15;
    }

    // Complexity bonus
    const charSets = [/[a-z]/, /[A-Z]/, /[0-9]/, /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/];
    const usedSets = charSets.filter((set) => set.test(password)).length;
    if (usedSets >= 3) {
      strength += 10;
    }
    if (usedSets === 4) {
      strength += 10;
    }

    // Penalties
    if (COMMON_PASSWORDS.includes(password.toLowerCase())) {
      strength -= 20;
    }
    if (/(.)\1{2,}/.test(password)) {
      strength -= 10;
    }

    // Sequence penalties
    const sequences = ["123456", "abcdef", "qwerty", "asdfgh"];
    for (const seq of sequences) {
      for (let i = 0; i < seq.length - 2; i++) {
        const subSeq = seq.substring(i, i + 3);
        if (password.toLowerCase().includes(subSeq)) {
          strength -= 10;
          break;
        }
      }
    }

    return Math.max(0, Math.min(100, strength));
  }

  /**
   * Updates the requirements UI based on current password
   */
  function updatePasswordRequirements() {
    const passwordInput = document.getElementById(passwordFieldId);
    const confirmInput = confirmFieldId ? document.getElementById(confirmFieldId) : null;

    if (!passwordInput) {
      return;
    }

    const password = passwordInput.value;
    const passwordConfirm = confirmInput ? confirmInput.value : "";

    const { errors } = validatePassword(password);

    // Update requirement indicators
    const requirements = [
      "length",
      "uppercase",
      "lowercase",
      "number",
      "special",
      "common",
      "repeats",
      "sequences",
    ];

    requirements.forEach((req) => {
      const element = document.getElementById(`req-${req}_${passwordFieldId}`);
      if (element) {
        const isValid = !errors.includes(req === "length" ? "min_length" : req);
        element.className = `auth-form__requirement ${isValid ? "auth-form__requirement--valid" : "auth-form__requirement--invalid"}`;

        const icon = element.querySelector('span[aria-hidden="true"]');
        if (icon) {
          icon.textContent = isValid ? "✓" : "✗";
        }
      }
    });

    // Update match requirement if confirm field exists
    if (confirmInput) {
      const matchElement = document.getElementById(`req-match_${passwordFieldId}`);
      if (matchElement) {
        const isMatch = password && passwordConfirm && password === passwordConfirm;
        matchElement.className = `auth-form__requirement ${isMatch ? "auth-form__requirement--valid" : "auth-form__requirement--invalid"}`;

        const icon = matchElement.querySelector('span[aria-hidden="true"]');
        if (icon) {
          icon.textContent = isMatch ? "✓" : "✗";
        }
      }
    }

    // Update strength meter
    const strength = calculatePasswordStrength(password);
    const strengthProgress = document.getElementById(strengthId);
    const strengthText = document.getElementById(strengthTextId);
    const strengthMeter = document.querySelector(`#${panelId} .auth-form__strength-meter`);

    if (strengthProgress) {
      strengthProgress.style.width = `${strength}%`;

      // Update strength classes and text
      let strengthClass, strengthTextContent;
      if (strength < 30) {
        strengthClass = "weak";
        strengthTextContent = "Weak";
      } else if (strength < 60) {
        strengthClass = "medium";
        strengthTextContent = "Medium";
      } else if (strength < 80) {
        strengthClass = "strong";
        strengthTextContent = "Strong";
      } else {
        strengthClass = "very-strong";
        strengthTextContent = "Very Strong";
      }

      strengthProgress.className = `auth-form__strength-progress auth-form__strength-progress--${strengthClass}`;

      if (strengthText) {
        strengthText.className = `auth-form__strength-text auth-form__strength-text--${strengthClass}`;
        strengthText.textContent = strengthTextContent;
      }

      if (strengthMeter) {
        strengthMeter.setAttribute("aria-valuenow", strength.toString());
        strengthMeter.setAttribute("aria-valuetext", `${strengthTextContent} (${strength}%)`);
      }
    }
  }

  /**
   * Initialize the password requirements panel
   */
  function initializePasswordRequirements() {
    const toggleButton = document.getElementById(toggleId);
    const panel = document.getElementById(panelId);
    const passwordInput = document.getElementById(passwordFieldId);
    const confirmInput = confirmFieldId ? document.getElementById(confirmFieldId) : null;

    if (!toggleButton || !panel || !passwordInput) {
      return;
    }

    // Toggle panel visibility
    toggleButton.addEventListener("click", () => {
      const isExpanded = toggleButton.getAttribute("aria-expanded") === "true";
      const newState = !isExpanded;

      toggleButton.setAttribute("aria-expanded", newState.toString());
      panel.style.display = newState ? "block" : "none";
      panel.setAttribute("aria-hidden", newState ? "false" : "true");

      if (newState) {
        updatePasswordRequirements();
      }
    });

    // Update requirements on input
    passwordInput.addEventListener("input", updatePasswordRequirements);
    if (confirmInput) {
      confirmInput.addEventListener("input", updatePasswordRequirements);
    }

    // Initial update if panel is visible
    if (panel.style.display !== "none") {
      updatePasswordRequirements();
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializePasswordRequirements);
  } else {
    initializePasswordRequirements();
  }
</script>

<style>
  /* Password Requirements Toggle Button */
  .auth-form__requirements-toggle {
    display: flex;
    align-items: center;
    padding: var(--spacing-xs) var(--spacing-sm);
    background: transparent;
    border: none;
    border-radius: var(--border-radius-md);
    color: var(--color-purple-300);
    font-size: var(--font-size-sm);
    cursor: pointer;
    transition: color 0.3s ease;
    margin-bottom: var(--spacing-sm);
  }

  .auth-form__requirements-toggle:hover {
    color: var(--color-purple-200);
  }

  .auth-form__requirements-toggle:focus-visible {
    outline: 3px solid var(--color-focus-outline);
    outline-offset: 2px;
  }

  .auth-form__requirements-icon {
    width: 1rem;
    height: 1rem;
    margin-right: var(--spacing-xs);
    flex-shrink: 0;
  }

  /* Password Requirements Panel */
  .auth-form__requirements-panel {
    margin-top: var(--spacing-md);
    padding: var(--spacing-md);
    background: var(--color-gray-800);
    border: 1px solid var(--color-gray-600);
    border-radius: var(--border-radius-md);
  }

  .auth-form__requirements-heading {
    margin: 0 0 var(--spacing-md) 0;
    font-size: var(--font-size-md);
    font-weight: 600;
    color: var(--color-gray-200);
  }

  /* Requirements List */
  .auth-form__requirements-list {
    list-style: none;
    padding: 0;
    margin: 0 0 var(--spacing-lg) 0;
  }

  .auth-form__requirement {
    display: flex;
    align-items: center;
    padding: var(--spacing-xs) 0;
    font-size: var(--font-size-sm);
    line-height: 1.4;
    transition: color 0.3s ease;
  }

  .auth-form__requirement span[aria-hidden="true"] {
    margin-right: var(--spacing-sm);
    font-weight: bold;
    width: 1rem;
    flex-shrink: 0;
  }

  .auth-form__requirement--invalid {
    color: var(--color-red-400);
  }

  .auth-form__requirement--valid {
    color: var(--color-green-400);
  }

  /* Password Strength Meter */
  .auth-form__strength-container {
    margin-top: var(--spacing-md);
  }

  .auth-form__strength-label {
    margin: 0 0 var(--spacing-xs) 0;
    font-size: var(--font-size-sm);
    font-weight: 500;
    color: var(--color-gray-300);
  }

  .auth-form__strength-meter {
    width: 100%;
    height: 8px;
    background: var(--color-gray-600);
    border-radius: var(--border-radius-sm);
    overflow: hidden;
    margin-bottom: var(--spacing-xs);
  }

  .auth-form__strength-progress {
    height: 100%;
    transition:
      width 0.3s ease,
      background-color 0.3s ease;
    border-radius: var(--border-radius-sm);
  }

  .auth-form__strength-progress--weak {
    background: var(--color-red-500);
  }

  .auth-form__strength-progress--medium {
    background: var(--color-yellow-500);
  }

  .auth-form__strength-progress--strong {
    background: var(--color-green-500);
  }

  .auth-form__strength-progress--very-strong {
    background: var(--color-blue-500);
  }

  .auth-form__strength-text {
    font-size: var(--font-size-xs);
    font-weight: 500;
    margin: 0;
    transition: color 0.3s ease;
  }

  .auth-form__strength-text--weak {
    color: var(--color-red-400);
  }

  .auth-form__strength-text--medium {
    color: var(--color-yellow-400);
  }

  .auth-form__strength-text--strong {
    color: var(--color-green-400);
  }

  .auth-form__strength-text--very-strong {
    color: var(--color-blue-400);
  }

  /* Responsive Design */
  @media (min-width: 768px) {
    .auth-form__requirements-panel {
      padding: var(--spacing-lg);
    }

    .auth-form__requirements-heading {
      font-size: var(--font-size-lg);
    }

    .auth-form__requirement {
      font-size: var(--font-size-md);
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .auth-form__requirements-panel {
      border-width: 2px;
    }

    .auth-form__strength-meter {
      border: 1px solid var(--color-gray-400);
    }
  }

  /* Reduced Motion Support */
  @media (prefers-reduced-motion: reduce) {
    .auth-form__requirement,
    .auth-form__strength-progress,
    .auth-form__strength-text {
      transition: none;
    }
  }
</style>
