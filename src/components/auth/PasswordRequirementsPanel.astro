---
/**
 * PasswordRequirementsPanel - Interactive password requirements checker
 *
 * Features:
 * - Live validation with visual feedback
 * - WCAG AAA compliant with enhanced accessibility
 * - Full responsive design
 * - Keyboard navigation and screen reader support
 * - Multi-modal indicators (color, icons, symbols)
 */
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import { validatePassword, type PasswordErrorKey } from "@lib/auth/password-validation";
import Paragraph from "@components/Paragraph.astro";

export interface Props {
  password?: string;
  isVisible?: boolean;
}

const { password = "", isVisible = false }: Props = Astro.props;

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const validationResult = validatePassword(password);

const requirements = [
  {
    id: "length",
    errorKey: "auth.password.min_length_error" as PasswordErrorKey,
    textKey: "auth.password.min_length",
  },
  {
    id: "uppercase",
    errorKey: "auth.password.uppercase_error" as PasswordErrorKey,
    textKey: "auth.password.uppercase",
  },
  {
    id: "lowercase",
    errorKey: "auth.password.lowercase_error" as PasswordErrorKey,
    textKey: "auth.password.lowercase",
  },
  {
    id: "number",
    errorKey: "auth.password.number_error" as PasswordErrorKey,
    textKey: "auth.password.number",
  },
  {
    id: "special",
    errorKey: "auth.password.special_char_error" as PasswordErrorKey,
    textKey: "auth.password.special",
  },
] as const;

const validatedRequirements = requirements.map((req) => ({
  ...req,
  isMet: !validationResult.errors.includes(req.errorKey),
  text: t(req.textKey),
}));

const metCount = validatedRequirements.filter((req) => req.isMet).length;

import { calculatePasswordStrength } from "@lib/auth/password-validation";

const strengthResult = calculatePasswordStrength(password);
const passwordStrength = strengthResult.level.toLowerCase().replace("-", "_");
const strengthPercentage = strengthResult.score;
---

<div
  id="password-requirements-status"
  class="sr-only"
  aria-live="polite"
  aria-atomic="true"
  role="status"
>
  {t("auth.password.requirements.status", { met: metCount, total: requirements.length })}
</div>

<div
  class={`password-requirements ${isVisible ? "password-requirements--visible" : "password-requirements--hidden"}`}
  aria-hidden={!isVisible}
  role="region"
  aria-labelledby="requirements-heading"
>
  <fieldset class="password-requirements__fieldset">
    <legend id="requirements-heading" class="password-requirements__heading">
      {t("auth.password.requirements")}
      <span class="sr-only">
        {t("auth.password.requirements.help")}
      </span>
    </legend>

    <ul
      class="password-requirements__list"
      aria-label={t("auth.password.requirements.checklist")}
      data-keyboard-nav="true"
    >
      {
        validatedRequirements.map((req, index) => (
          <li
            id={`requirement-${req.id}`}
            class={`password-requirements__item ${req.isMet ? "password-requirements__item--valid" : "password-requirements__item--invalid"}`}
            aria-describedby={`desc-${req.id}`}
            tabindex="-1"
            data-index={index}
          >
            <span class="password-requirements__icon" aria-hidden="true">
              {req.isMet ? "✓" : "✗"}
            </span>
            <span class="password-requirements__symbol" aria-hidden="true">
              {req.isMet ? "●" : "○"}
            </span>
            <span class="password-requirements__text">{req.text}</span>
            <span class="password-requirements__status sr-only">
              {req.isMet
                ? t("auth.password.requirements.met")
                : t("auth.password.requirements.not_met")}
            </span>

            <span id={`desc-${req.id}`} class="sr-only">
              {t(`auth.password.requirements.${req.id}.description`)}
            </span>
          </li>
        ))
      }
    </ul>

    <div class="password-requirements__progress">
      <Paragraph
        description={t("auth.password.strength")}
        textSize="base"
        className="password-requirements__progress-label"
        id="progress-label"
      />
      <div
        class="password-requirements__progress-meter"
        role="progressbar"
        aria-valuemin="0"
        aria-valuemax={requirements.length}
        aria-valuenow={metCount}
        aria-labelledby="progress-label"
        aria-describedby="progress-description"
      >
        <div
          class={`password-requirements__progress-bar password-requirements__progress-bar--${passwordStrength}`}
          style={`--progress-width: ${strengthPercentage}%`}
        >
        </div>
      </div>
      <Paragraph
        description={t(`auth.password.strength.${passwordStrength}`)}
        textSize="base"
        className={`password-requirements__progress-text password-requirements__progress-text--${passwordStrength}`}
      />
      <Paragraph
        description={t("auth.password.strength.description")}
        textSize="base"
        className="sr-only"
        id="progress-description"
      />
    </div>

    <div class="sr-only" id="keyboard-instructions">
      <Paragraph
        description={t("auth.password.requirements.keyboard_navigation")}
        textSize="base"
        className="sr-only"
      />
      <Paragraph
        description={t("auth.password.requirements.keyboard_spacebar")}
        textSize="base"
        className="sr-only"
      />
      <Paragraph
        description={t("auth.password.requirements.keyboard_progress")}
        textSize="base"
        className="sr-only"
      />
    </div>
  </fieldset>
</div>

<script
  define:vars={{
    positionText: t("auth.password.requirements.position"),
    progressText: t("auth.password.requirements.progress"),
  }}
  is:inline
>
  import { initPasswordRequirementsPanel } from "@utils/password-requirements-panel";

  const initializeComponent = () => {
    initPasswordRequirementsPanel(positionText, progressText);
  };

  document.addEventListener("DOMContentLoaded", initializeComponent);
</script>

<style lang="scss">
  .password-requirements {
    background: var(--bg-secondary);
    border: var(--border-width-thick) solid var(--border-primary);
    border-radius: var(--radius-lg);
    box-shadow: var(--shadow-md);
    padding: var(--space-xl);
    margin-top: var(--space-md);
    opacity: 0;
    max-height: 0;
    overflow: hidden;
    max-width: var(--width-full);
    transition:
      opacity var(--transition-normal),
      max-height var(--transition-normal),
      box-shadow var(--transition-normal);

    &--visible {
      opacity: 1;
      max-height: 500px;
      box-shadow: var(--shadow-lg);
    }

    &--hidden {
      opacity: 0;
      max-height: 0;
    }

    &__fieldset {
      border: none;
      padding: 0;
      margin: 0;
      min-width: 0;
    }

    &__heading {
      font-size: var(--text-xl);
      font-weight: var(--font-semibold);
      color: var(--text-primary);
      margin: 0 0 var(--space-lg) 0;
      line-height: var(--leading-relaxed);
      letter-spacing: var(--letter-spacing-base);

      @media (max-width: 47.9375em) {
        font-size: var(--text-lg);
      }

      @media (max-width: 30em) {
        font-size: var(--text-base);
      }
    }

    &__list {
      list-style: none;
      padding: 0;
      margin: 0 0 var(--space-xl) 0;
      outline: none;

      &:focus-visible {
        outline: var(--focus-outline);
        outline-offset: var(--focus-ring-offset);
        box-shadow: var(--focus-ring);
      }
    }

    &__item {
      display: flex;
      align-items: center;
      gap: var(--space-sm);
      padding: var(--space-md) var(--space-lg);
      border: var(--border-width-thick) transparent solid;
      border-radius: var(--radius-md);
      margin-bottom: var(--space-sm);
      min-height: var(--touch-target-enhanced);
      font-size: var(--text-base);
      line-height: var(--leading-relaxed);
      letter-spacing: var(--letter-spacing-base);
      transition:
        background-color var(--transition-normal),
        border-color var(--transition-normal);

      @media (max-width: 47.9375em) {
        padding: var(--space-sm) var(--space-md);
        font-size: var(--text-sm);
        gap: var(--space-xs);
      }

      @media (max-width: 30em) {
        padding: var(--space-xs) var(--space-sm);
        font-size: var(--text-sm);
      }

      &:focus-visible {
        outline: var(--focus-outline);
        outline-offset: var(--focus-ring-offset);
        background: var(--focus-bg-overlay);
        box-shadow: var(--focus-ring);
      }

      &--valid {
        background: var(--color-success-50);
        border-color: var(--color-success-300);
        color: var(--color-success-800);

        .password-requirements__icon {
          color: var(--btn-success-text);
          background-color: var(--color-success-600);
          border: var(--border-width-thin) solid var(--color-success-700);
        }

        .password-requirements__symbol {
          color: var(--color-success-600);
        }
      }

      &--invalid {
        background: var(--bg-tertiary);
        border-color: var(--border-primary);
        color: var(--text-secondary);

        .password-requirements__icon {
          color: var(--btn-error-text);
          background-color: var(--color-error-600);
          border: var(--border-width-thin) solid var(--color-error-700);
        }

        .password-requirements__symbol {
          color: var(--color-neutral-500);
        }
      }

      &[tabindex="-1"]:focus {
        outline: var(--focus-outline);
        background: var(--focus-bg-overlay);
        box-shadow: var(--focus-ring);
      }
    }

    &__icon {
      font-size: var(--text-base);
      font-weight: var(--font-bold);
      min-width: var(--space-xl);
      width: var(--space-xl);
      height: var(--space-xl);
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: var(--radius-full);
      text-align: center;
      flex-shrink: 0;
      transition:
        background-color var(--transition-normal),
        border-color var(--transition-normal),
        color var(--transition-normal);

      @media (max-width: 47.9375em) {
        min-width: var(--space-lg);
        width: var(--space-lg);
        height: var(--space-lg);
        font-size: var(--text-sm);
      }

      @media (max-width: 30em) {
        min-width: var(--space-lg);
        width: var(--space-lg);
        height: var(--space-lg);
        font-size: var(--text-sm);
      }
    }

    &__symbol {
      font-size: var(--text-base);
      min-width: var(--space-md);
      text-align: center;
      flex-shrink: 0;
      transition: color var(--transition-normal);

      @media (max-width: 47.9375em) {
        font-size: var(--text-sm);
        min-width: var(--space-sm);
      }
    }

    &__text {
      flex: 1;
      font-size: var(--text-base);
      line-height: var(--leading-relaxed);
      letter-spacing: var(--letter-spacing-base);

      @media (max-width: 47.9375em) {
        font-size: var(--text-sm);
      }
    }

    &__progress {
      border-top: var(--border-width-thin) solid var(--border-primary);
      padding-top: var(--space-md);
      margin-top: var(--space-lg);
    }

    &__progress-label {
      font-size: var(--text-base);
      font-weight: var(--font-medium);
      color: var(--text-secondary);
      margin: 0 0 var(--space-sm) 0;
      line-height: var(--leading-relaxed);
      letter-spacing: var(--letter-spacing-base);

      @media (max-width: 47.9375em) {
        font-size: var(--text-sm);
      }
    }

    &__progress-meter {
      background: var(--bg-tertiary);
      border: var(--border-width-thin) solid var(--border-primary);
      border-radius: var(--radius-full);
      height: var(--space-md);
      width: var(--width-full);
      margin-bottom: var(--space-sm);
      overflow: hidden;
      position: relative;

      &:focus-visible {
        outline: var(--focus-outline);
        outline-offset: var(--focus-ring-offset);
        box-shadow: var(--focus-ring);
      }
    }

    &__progress-bar {
      height: var(--height-full);
      border-radius: var(--radius-full);
      background: var(--color-error-500);
      width: var(--progress-width, 0%);
      transition: width var(--transition-normal);

      &--weak {
        background: var(--color-error-500);
      }

      &--medium {
        background: var(--color-warning-500);
      }

      &--good {
        background: var(--color-info-500);
      }

      &--strong {
        background: var(--color-success-500);
      }

      &--very_strong {
        background: var(--color-success-600);
      }
    }

    &__progress-text {
      font-size: var(--text-base);
      font-weight: var(--font-medium);
      margin: 0;
      line-height: var(--leading-relaxed);
      letter-spacing: var(--letter-spacing-base);
      transition: color var(--transition-normal);

      @media (max-width: 47.9375em) {
        font-size: var(--text-sm);
      }

      &--weak {
        color: var(--color-error-700);
      }

      &--medium {
        color: var(--color-warning-700);
      }

      &--good {
        color: var(--color-info-700);
      }

      &--strong {
        color: var(--color-success-700);
      }

      &--very_strong {
        color: var(--color-success-800);
      }
    }
  }

  .password-requirements__list[data-keyboard-nav="true"] {
    .password-requirements__item {
      cursor: pointer;

      &:hover:not(:focus-visible) {
        background: var(--bg-hover);
        box-shadow: var(--shadow-sm);
      }

      &[tabindex="0"] {
        background: var(--focus-bg-overlay);
        border-color: var(--interactive-primary);
        box-shadow: var(--focus-ring);
      }
    }
  }

  @media (prefers-contrast: high) {
    .password-requirements {
      border-width: var(--border-width-thick);
      background: var(--bg-primary);
      color: var(--text-primary);

      &__item {
        border-width: var(--border-width-thick);

        &--valid {
          background: var(--color-success-50);
          border-color: var(--color-success-700);
          color: var(--color-success-900);
        }

        &--invalid {
          background: var(--bg-secondary);
          border-color: var(--border-primary);
          color: var(--text-primary);
        }
      }

      &__progress-meter {
        border-width: var(--border-width-thick);
        background: var(--bg-primary);
      }
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .password-requirements,
    .password-requirements__item,
    .password-requirements__progress-bar,
    .password-requirements__icon,
    .password-requirements__symbol {
      transition: var(--transition-instant);
      animation: none;
    }
  }

  @media (hover: none) and (pointer: coarse) {
    .password-requirements {
      &__item {
        min-height: calc(var(--touch-target-enhanced) + var(--space-sm));
        padding: var(--space-lg);
        font-size: var(--text-lg);
      }
    }
  }

  @media print {
    .password-requirements {
      background: var(--color-white);
      border: var(--border-width-thin) solid var(--color-black);
      box-shadow: none;
      color: var(--color-black);

      &__item {
        &--valid {
          background: var(--color-white);
          border: var(--border-width-thin) solid var(--color-black);
          color: var(--color-black);

          .password-requirements__icon::after {
            content: " ✓";
          }
        }

        &--invalid {
          background: var(--color-white);
          border: var(--border-width-thin) solid var(--color-black);
          color: var(--color-black);

          .password-requirements__icon::after {
            content: " ✗";
          }
        }
      }

      &__progress-bar {
        background: var(--color-black);
      }
    }
  }

  @media (forced-colors: active) {
    .password-requirements {
      &__item:focus-visible {
        outline: var(--border-width-thick) solid ButtonText;
        background-color: Highlight;
        color: HighlightText;
        forced-color-adjust: none;
      }

      &__list:focus-visible {
        outline: var(--border-width-thick) solid ButtonText;
      }

      &__progress-meter:focus-visible {
        outline: var(--border-width-thick) solid ButtonText;
      }
    }
  }
</style>
