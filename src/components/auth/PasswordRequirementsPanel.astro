---
/**
 * PasswordRequirementsPanel Component for MelodyMind Auth Forms
 * WCAG 2.2 AAA COMPLIANT VERSION
 *
 * A fully accessible password requirements checker with comprehensive compliance features.
 * This component provides complete accessibility support for all users including screen readers.
 *
 * Accessibility Features:
 * - WCAG 2.2 AAA compliance
 * - Live region announcements for screen readers
 * - Enhanced keyboard navigation (arrow keys, Home/End, Escape)
 * - Fieldset grouping for better screen reader navigation
 * - Multiple visual indicators beyond color-only communication
 * - AAA color contrast ratios (7:1)
 * - Support for increased text spacing and 400% zoom
 * - Minimum 18pt font sizes throughout
 * - Comprehensive ARIA descriptions and states
 *
 * @component
 * @example
 * ```astro
 * <PasswordRequirementsPanel
 *   password="currentPassword"
 *   isVisible={true}
 * />
 * ```
 */

import { getLangFromUrl, useTranslations } from "@utils/i18n";
import { validatePassword, type PasswordErrorKey } from "@lib/auth/password-validation";

// Component props interface for better type safety
interface Props {
  /** The password to validate */
  password?: string;
  /** Whether the panel is visible */
  isVisible?: boolean;
}

const { password = '', isVisible = false }: Props = Astro.props;

// Get current language and translations
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Use the standardized password validation system
const validationResult = validatePassword(password);

// Password requirements mapping using standardized error keys
const requirements = [
  {
    id: 'length',
    errorKey: 'auth.password.min_length_error' as PasswordErrorKey,
    textKey: 'auth.password.min_length'
  },
  {
    id: 'uppercase',
    errorKey: 'auth.password.uppercase_error' as PasswordErrorKey,
    textKey: 'auth.password.uppercase'
  },
  {
    id: 'lowercase',
    errorKey: 'auth.password.lowercase_error' as PasswordErrorKey,
    textKey: 'auth.password.lowercase'
  },
  {
    id: 'number',
    errorKey: 'auth.password.number_error' as PasswordErrorKey,
    textKey: 'auth.password.number'
  },
  {
    id: 'special',
    errorKey: 'auth.password.special_char_error' as PasswordErrorKey,
    textKey: 'auth.password.special'
  }
] as const;

// Check which requirements are met using the validation result
const validatedRequirements = requirements.map(req => ({
  ...req,
  isMet: !validationResult.errors.includes(req.errorKey),
  text: t(req.textKey)
}));

const metCount = validatedRequirements.filter(req => req.isMet).length;

// Use existing password strength calculation utility (DRY principle)
import { calculatePasswordStrength } from "@lib/auth/password-validation";

const strengthResult = calculatePasswordStrength(password);
const passwordStrength = strengthResult.level.toLowerCase().replace('-', '_'); // Convert "very-strong" to "very_strong"
const strengthPercentage = strengthResult.score;
---

<!-- Live region for accessibility announcements -->
<div 
  id="password-requirements-status"
  class="sr-only" 
  aria-live="polite" 
  aria-atomic="true"
  role="status"
>
  {t("auth.password.requirements.status", { met: metCount, total: requirements.length })}
</div>

<div 
  class={`password-requirements ${isVisible ? 'password-requirements--visible' : 'password-requirements--hidden'}`}
  aria-hidden={!isVisible}
  role="region"
  aria-labelledby="requirements-heading"
>
  <!-- Use fieldset for better screen reader grouping -->
  <fieldset class="password-requirements__fieldset">
    <legend id="requirements-heading" class="password-requirements__heading">
      {t("auth.password.requirements")}
      <span class="sr-only">
        {t("auth.password.requirements.help")}
      </span>
    </legend>

    <!-- Password requirement checklist with enhanced accessibility -->
    <ul 
      class="password-requirements__list" 
      aria-label={t("auth.password.requirements.checklist")}
      data-keyboard-nav="true"
    >
      {validatedRequirements.map((req, index) => (
        <li
          id={`requirement-${req.id}`}
          class={`password-requirements__item ${req.isMet ? 'password-requirements__item--valid' : 'password-requirements__item--invalid'}`}
          aria-describedby={`desc-${req.id}`}
          tabindex="-1"
          data-index={index}
        >
          <!-- Multiple visual indicators beyond color -->
          <span class="password-requirements__icon" aria-hidden="true">
            {req.isMet ? '✓' : '✗'}
          </span>
          <span class="password-requirements__symbol" aria-hidden="true">
            {req.isMet ? '●' : '○'}
          </span>
          <span class="password-requirements__text">
            {req.text}
          </span>
          <span class="password-requirements__status sr-only">
            {req.isMet ? t("auth.password.requirements.met") : t("auth.password.requirements.not_met")}
          </span>
          
          <!-- Enhanced ARIA descriptions -->
          <span id={`desc-${req.id}`} class="sr-only">
            {t(`auth.password.requirements.${req.id}.description`)}
          </span>
        </li>
      ))}
    </ul>

    <!-- Enhanced progress indicator with accessibility -->
    <div class="password-requirements__progress">
      <p class="password-requirements__progress-label" id="progress-label">
        {t("auth.password.strength")}
      </p>
      <div
        class="password-requirements__progress-meter"
        role="progressbar"
        aria-valuemin="0"
        aria-valuemax={requirements.length}
        aria-valuenow={metCount}
        aria-labelledby="progress-label"
        aria-describedby="progress-description"
      >
        <div
          class={`password-requirements__progress-bar password-requirements__progress-bar--${passwordStrength}`}
          style={`--progress-width: ${strengthPercentage}%`}
        >
        </div>
      </div>
      <p class={`password-requirements__progress-text password-requirements__progress-text--${passwordStrength}`}>
        {t(`auth.password.strength.${passwordStrength}`)}
      </p>
      <p id="progress-description" class="sr-only">
        {t("auth.password.strength.description")}
      </p>
    </div>

    <!-- Keyboard navigation instructions -->
    <div class="sr-only" id="keyboard-instructions">
      {t("auth.password.requirements.keyboard_navigation")}
      {t("auth.password.requirements.keyboard_spacebar")}
      {t("auth.password.requirements.keyboard_progress")}
    </div>
  </fieldset>
</div>

<script define:vars={{ 
  positionText: t("auth.password.requirements.position"),
  progressText: t("auth.password.requirements.progress")
}}>
  import { initPasswordRequirementsPanel } from '@utils/password-requirements-panel';
  
  document.addEventListener('DOMContentLoaded', function() {
    initPasswordRequirementsPanel(positionText, progressText);
  });
</script>

<style lang="scss">
  /* ======================================
   * PASSWORD REQUIREMENTS PANEL STYLES
   * WCAG 2.2 AAA COMPLIANT
   * Using only CSS Variables from global.css
   * ====================================== */

  .password-requirements {
    background: var(--card-bg);
    border: var(--border-width-thick) solid var(--border-primary);
    border-radius: var(--radius-lg);
    padding: var(--space-lg);
    margin-top: var(--space-md);
    box-shadow: var(--shadow-md);
    transition: all var(--transition-normal);
    opacity: 0;
    max-height: 0;
    overflow: hidden;
    max-width: 100%; // Support for 400% zoom
    overflow-wrap: break-word;

    // State modifiers
    &--visible {
      opacity: 1;
      max-height: var(--form-container-max-height, 500px);
    }

    &--hidden {
      opacity: 0;
      max-height: 0;
    }

    // Fieldset and Legend
    &__fieldset {
      border: none;
      padding: 0;
      margin: 0;
      min-width: 0; // Prevents fieldset width issues
    }

    &__heading {
      font-size: var(--text-lg);
      font-weight: var(--font-semibold);
      color: var(--text-primary);
      margin: 0 0 var(--space-lg) 0;
      line-height: var(--leading-relaxed);
      letter-spacing: var(--letter-spacing-enhanced);
      word-spacing: var(--word-spacing-enhanced);
    }

    // Requirements List
    &__list {
      list-style: none;
      padding: 0;
      margin: 0 0 var(--space-xl) 0;
      outline: none;

      &:focus-visible {
        outline: var(--focus-outline);
        outline-offset: var(--focus-ring-offset);
      }
    }

    &__item {
      display: flex;
      align-items: center;
      gap: var(--space-sm);
      padding: var(--space-sm) var(--space-md);
      border-radius: var(--radius-md);
      margin-bottom: var(--space-xs);
      min-height: var(--min-touch-size);
      transition: all var(--transition-normal);
      border: var(--border-width-thick) transparent solid;
      font-size: var(--text-lg); // WCAG AAA minimum 18px
      line-height: var(--leading-relaxed);
      letter-spacing: var(--letter-spacing-enhanced);
      word-spacing: var(--word-spacing-enhanced);

      &:focus-visible {
        outline: var(--focus-outline);
        outline-offset: var(--focus-ring-offset);
        background: var(--focus-bg-overlay);
      }

      // Valid requirement styling - WCAG AAA compliant
      &--valid {
        background: var(--bg-success-subtle);
        border-color: var(--border-success);
        color: var(--text-success-aaa);

        .password-requirements__icon {
          color: var(--text-success-aaa);
          background-color: var(--bg-success-aaa);
          border: var(--border-width-thin) solid var(--border-success);
        }

        .password-requirements__symbol {
          color: var(--color-success-400);
        }
      }

      // Invalid requirement styling - WCAG AAA compliant
      &--invalid {
        background: var(--bg-tertiary);
        border-color: var(--border-primary);
        color: var(--text-secondary);

        .password-requirements__icon {
          color: var(--text-error-aaa);
          background-color: var(--bg-error-aaa);
          border: var(--border-width-thin) solid var(--border-error);
        }

        .password-requirements__symbol {
          color: var(--color-neutral-400);
        }
      }

      // Enhanced keyboard navigation focus
      &[tabindex="-1"]:focus {
        outline: var(--focus-enhanced-outline-dark);
        background: var(--focus-bg-overlay);
      }
    }

    // Icon and Symbol styling
    &__icon {
      font-size: var(--text-lg);
      font-weight: var(--font-bold);
      min-width: var(--space-lg);
      text-align: center;
      width: var(--space-xl);
      height: var(--space-xl);
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: var(--radius-full);
      flex-shrink: 0;
    }

    &__symbol {
      font-size: var(--text-base);
      min-width: var(--space-md);
      text-align: center;
      flex-shrink: 0;
    }

    // Text content
    &__text {
      flex: 1;
      font-size: var(--text-lg); // WCAG AAA minimum 18px
      line-height: var(--leading-relaxed);
      letter-spacing: var(--letter-spacing-enhanced);
      word-spacing: var(--word-spacing-enhanced);
    }

    // Progress section
    &__progress {
      border-top: var(--border-width-thin) solid var(--border-primary);
      padding-top: var(--space-md);
      margin-top: var(--space-lg);
    }

    &__progress-label {
      font-size: var(--text-lg); // WCAG AAA minimum 18px
      font-weight: var(--font-medium);
      color: var(--text-secondary);
      margin: 0 0 var(--space-sm) 0;
      line-height: var(--leading-relaxed);
      letter-spacing: var(--letter-spacing-enhanced);
    }

    &__progress-meter {
      background: var(--bg-tertiary);
      border-radius: var(--radius-full);
      height: var(--space-md);
      overflow: hidden;
      border: var(--border-width-thin) solid var(--border-primary);
      margin-bottom: var(--space-sm);
      width: 100%;
      position: relative;

      &:focus-visible {
        outline: var(--focus-outline);
        outline-offset: var(--focus-ring-offset);
      }
    }

    &__progress-bar {
      height: 100%;
      background: linear-gradient(
        90deg,
        var(--color-error-500) 0%,
        var(--color-warning-500) 50%,
        var(--color-success-500) 100%
      );
      transition: width var(--transition-normal);
      border-radius: var(--radius-full);
      width: var(--progress-width, 0%);

      // Progress strength states using existing strength variables
      &--weak {
        background: var(--strength-weak);
      }

      &--medium {
        background: var(--strength-medium);
      }

      &--good {
        background: var(--strength-strong);
      }

      &--strong {
        background: var(--strength-very-strong);
      }

      &--very_strong {
        background: var(--strength-very-strong);
      }
    }

    &__progress-text {
      font-size: var(--text-base);
      font-weight: var(--font-medium);
      margin: 0;
      line-height: var(--leading-relaxed);
      letter-spacing: var(--letter-spacing-enhanced);

      &--weak {
        color: var(--text-error-aaa);
      }

      &--medium {
        color: var(--text-warning-aaa);
      }

      &--good {
        color: var(--color-info-400);
      }

      &--strong {
        color: var(--text-success-aaa);
      }

      &--very_strong {
        color: var(--text-success-aaa);
      }
    }
  }

  // Enhanced keyboard navigation styles
  .password-requirements__list[data-keyboard-nav="true"] {
    .password-requirements__item {
      cursor: pointer;

      &:hover {
        background: var(--bg-hover-subtle);
        transform: translateY(-1px);
        box-shadow: var(--shadow-sm);
      }

      &[tabindex="0"] {
        background: var(--focus-bg-overlay);
        border-color: var(--border-focus);
      }
    }
  }

  // Shared transition patterns
  .password-requirements,
  .password-requirements__item,
  .password-requirements__progress-bar {
    transition: var(--transition-normal);
  }

  // Responsive design
  @media (max-width: var(--breakpoint-xs)) {
    .password-requirements {
      padding: var(--space-md);
      margin-top: var(--space-sm);

      &__heading {
        font-size: var(--text-xl);
        margin-bottom: var(--space-md);
      }

      &__item {
        padding: var(--space-sm) 0;
        font-size: var(--text-base);
      }
    }
  }

  @media (max-width: var(--breakpoint-md)) {
    .password-requirements__item {
      min-height: var(--touch-target-enhanced); // 48px for mobile
      padding: var(--space-md);
    }
  }

  // High contrast mode support
  @media (prefers-contrast: high) {
    .password-requirements {
      border-width: var(--border-width-enhanced);
      background: var(--color-black);
      color: var(--color-white);

      &__item {
        border-width: var(--border-width-thick);

        &--valid {
          background: var(--bg-success-aaa);
          color: var(--color-white);
        }

        &--invalid {
          background: var(--bg-secondary);
          color: var(--color-white);
        }
      }

      &__progress-meter {
        border-width: var(--border-width-enhanced);
        background: var(--color-black);
      }
    }
  }

  // Reduced motion support
  @media (prefers-reduced-motion: reduce) {
    .password-requirements,
    .password-requirements__item,
    .password-requirements__progress-bar {
      transition: none;
    }
  }

  // Enhanced text spacing support (WCAG 2.2)
  @supports (letter-spacing: 0.12em) {
    .password-requirements__heading,
    .password-requirements__text,
    .password-requirements__progress-label {
      letter-spacing: var(--text-spacing-letter-2x);
    }
  }

  @supports (word-spacing: 0.16em) {
    .password-requirements__text,
    .password-requirements__heading {
      word-spacing: var(--text-spacing-word-enhanced);
    }
  }

  @supports (line-height: 1.5) {
    .password-requirements__text,
    .password-requirements__heading,
    .password-requirements__progress-label {
      line-height: var(--text-spacing-line-1-5x);
    }
  }

  // Container queries for responsive design
  @container (max-width: var(--container-query-lg)) {
    .password-requirements {
      padding: var(--space-md);

      &__item {
        padding: var(--space-xs) var(--space-sm);
        gap: var(--space-xs);
      }

      &__text {
        font-size: var(--text-base);
      }
    }
  }

  // Print styles
  @media print {
    .password-requirements {
      background: var(--print-bg);
      border: var(--print-border);
      box-shadow: none;

      &__item {
        &--valid {
          background: var(--print-bg);
          border: var(--print-border);

          .password-requirements__icon::after {
            content: " ✓";
          }
        }

        &--invalid .password-requirements__icon::after {
          content: " ✗";
        }
      }
    }
  }

  // Focus management improvements for forced colors mode
  @media (forced-colors: active) {
    .password-requirements {
      &__item:focus-visible {
        outline: var(--border-width-enhanced) solid ButtonText;
        background-color: Highlight;
        color: HighlightText;
      }

      &__list:focus-visible {
        outline: var(--border-width-enhanced) solid ButtonText;
      }

      &__progress-meter:focus-visible {
        outline: var(--border-width-enhanced) solid ButtonText;
      }
    }
  }
</style>
