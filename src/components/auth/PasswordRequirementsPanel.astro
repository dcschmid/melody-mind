---
/**
 * PasswordRequirementsPanel Component for MelodyMind Auth Forms
 * WCAG 2.2 AAA COMPLIANT VERSION
 *
 * A fully accessible password requirements checker with comprehensive compliance features.
 * This component provides complete accessibility support for all users including screen readers.
 *
 * Accessibility Features:
 * - WCAG 2.2 AAA compliance
 * - Live region announcements for screen readers
 * - Enhanced keyboard navigation (arrow keys, Home/End, Escape)
 * - Fieldset grouping for better screen reader navigation
 * - Multiple visual indicators beyond color-only communication
 * - AAA color contrast ratios (7:1)
 * - Support for increased text spacing and 400% zoom
 * - Minimum 18pt font sizes throughout
 * - Comprehensive ARIA descriptions and states
 *
 * @component
 * @example
 * ```astro
 * <PasswordRequirementsPanel
 *   password="currentPassword"
 *   isVisible={true}
 * />
 * ```
 */

import { getLangFromUrl, useTranslations } from "@utils/i18n";

const { password = '', isVisible = false } = Astro.props;

// Get current language and translations
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Password requirements validation logic
const requirements = [
  {
    id: 'length',
    test: (pwd: string) => pwd.length >= 8,
    textKey: 'auth.password.min_length'
  },
  {
    id: 'uppercase',
    test: (pwd: string) => /[A-Z]/.test(pwd),
    textKey: 'auth.password.uppercase'
  },
  {
    id: 'lowercase',
    test: (pwd: string) => /[a-z]/.test(pwd),
    textKey: 'auth.password.lowercase'
  },
  {
    id: 'number',
    test: (pwd: string) => /\d/.test(pwd),
    textKey: 'auth.password.number'
  },
  {
    id: 'special',
    test: (pwd: string) => /[!@#$%^&*()_+\-=[\]{};':"\\|,.<>/?]/.test(pwd),
    textKey: 'auth.password.special'
  }
];

// Check which requirements are met
const validatedRequirements = requirements.map(req => ({
  ...req,
  isMet: req.test(password),
  text: t(req.textKey)
}));

const metCount = validatedRequirements.filter(req => req.isMet).length;
---

<!-- Live region for accessibility announcements -->
<div 
  id="password-requirements-status"
  class="sr-only" 
  aria-live="polite" 
  aria-atomic="true"
  role="status"
>
  {t("auth.password.requirements.status", { met: metCount, total: requirements.length })}
</div>

<div 
  class={`password-requirements ${isVisible ? 'password-requirements--visible' : 'password-requirements--hidden'}`}
  aria-hidden={!isVisible}
  role="region"
  aria-labelledby="requirements-heading"
>
  <!-- Use fieldset for better screen reader grouping -->
  <fieldset class="password-requirements__fieldset">
    <legend id="requirements-heading" class="password-requirements__heading">
      {t("auth.password.requirements")}
      <span class="sr-only">
        {t("auth.password.requirements.help")}
      </span>
    </legend>

    <!-- Password requirement checklist with enhanced accessibility -->
    <ul 
      class="password-requirements__list" 
      aria-label={t("auth.password.requirements.checklist")}
      data-keyboard-nav="true"
    >
      {validatedRequirements.map((req, index) => (
        <li
          id={`requirement-${req.id}`}
          class={`password-requirements__item ${req.isMet ? 'password-requirements__item--valid' : 'password-requirements__item--invalid'}`}
          aria-describedby={`desc-${req.id}`}
          tabindex="-1"
          data-index={index}
        >
          <!-- Multiple visual indicators beyond color -->
          <span class="password-requirements__icon" aria-hidden="true">
            {req.isMet ? '✓' : '✗'}
          </span>
          <span class="password-requirements__symbol" aria-hidden="true">
            {req.isMet ? '●' : '○'}
          </span>
          <span class="password-requirements__text">
            {req.text}
          </span>
          <span class="password-requirements__status sr-only">
            {req.isMet ? t("auth.password.requirements.met") : t("auth.password.requirements.not_met")}
          </span>
          
          <!-- Enhanced ARIA descriptions -->
          <span id={`desc-${req.id}`} class="sr-only">
            {t(`auth.password.requirements.${req.id}.description`)}
          </span>
        </li>
      ))}
    </ul>

    <!-- Enhanced progress indicator with accessibility -->
    <div class="password-requirements__progress">
      <p class="password-requirements__progress-label" id="progress-label">
        {t("auth.password.strength")}
      </p>
      <div
        class="password-requirements__progress-meter"
        role="progressbar"
        aria-valuemin="0"
        aria-valuemax={requirements.length}
        aria-valuenow={metCount}
        aria-labelledby="progress-label"
        aria-describedby="progress-description"
      >
        <div
          class={`password-requirements__progress-bar password-requirements__progress-bar--${metCount < 2 ? 'weak' : metCount < 4 ? 'medium' : metCount === requirements.length ? 'strong' : 'good'}`}
          style={`width: ${(metCount / requirements.length) * 100}%`}
        >
        </div>
      </div>
      <p class={`password-requirements__progress-text password-requirements__progress-text--${metCount < 2 ? 'weak' : metCount < 4 ? 'medium' : metCount === requirements.length ? 'strong' : 'good'}`}>
        {metCount < 2 ? t("auth.password.strength.weak") : metCount < 4 ? t("auth.password.strength.medium") : metCount === requirements.length ? t("auth.password.strength.strong") : t("auth.password.strength.good")}
      </p>
      <p id="progress-description" class="sr-only">
        {t("auth.password.strength.description")}
      </p>
    </div>

    <!-- Keyboard navigation instructions -->
    <div class="sr-only" id="keyboard-instructions">
      {t("auth.password.requirements.keyboard_navigation")}
    </div>
  </fieldset>
</div>

<script>
  /**
   * WCAG 2.2 AAA Compliant Password Requirements Panel
   * Enhanced keyboard navigation and accessibility features
   */
  
  document.addEventListener('DOMContentLoaded', function() {
    const requirementsList = document.querySelector('[data-keyboard-nav="true"]');
    const statusElement = document.getElementById('password-requirements-status');
    
    if (!requirementsList) {return;}

    let currentIndex = 0;
    const requirements = Array.from(requirementsList.querySelectorAll('.password-requirements__item'));
    let isActive = false;

    function handleKeyDown(event: KeyboardEvent) {
      if (!isActive) {return;}

      switch (event.key) {
        case 'ArrowDown':
          event.preventDefault();
          currentIndex = (currentIndex + 1) % requirements.length;
          focusCurrentRequirement();
          announceNavigation();
          break;
          
        case 'ArrowUp':
          event.preventDefault();
          currentIndex = (currentIndex - 1 + requirements.length) % requirements.length;
          focusCurrentRequirement();
          announceNavigation();
          break;
          
        case 'Home':
          event.preventDefault();
          currentIndex = 0;
          focusCurrentRequirement();
          announceNavigation();
          break;
          
        case 'End':
          event.preventDefault();
          currentIndex = requirements.length - 1;
          focusCurrentRequirement();
          announceNavigation();
          break;
          
        case 'Escape':
          event.preventDefault();
          exitKeyboardNavigation();
          break;
      }
    }

    function focusCurrentRequirement() {
      requirements.forEach(function(req, index) {
        req.setAttribute('tabindex', index === currentIndex ? '0' : '-1');
      });
      if (requirements[currentIndex] && requirements[currentIndex] instanceof HTMLElement) {
        (requirements[currentIndex] as HTMLElement).focus();
      }
    }

    function announceNavigation() {
      const current = requirements[currentIndex];
      if (current && statusElement) {
        const reqTextElement = current.querySelector('.password-requirements__text');
        const reqText = reqTextElement ? reqTextElement.textContent || '' : '';
        const statusText = current.querySelector('.password-requirements__status');
        const status = statusText ? statusText.textContent || '' : '';
        const positionText = `${currentIndex + 1  } of ${  requirements.length}`;
        statusElement.textContent = `${reqText  }, ${  status  }. ${  positionText}`;
      }
    }

    function enterKeyboardNavigation() {
      isActive = true;
      currentIndex = 0;
      focusCurrentRequirement();
    }

    function exitKeyboardNavigation() {
      isActive = false;
      requirements.forEach(function(req) {
        req.setAttribute('tabindex', '-1');
      });
      if (requirementsList instanceof HTMLElement) {
        requirementsList.setAttribute('tabindex', '0');
      }
      if (requirementsList instanceof HTMLElement) {
        requirementsList.focus();
      }
    }

    // Event listeners
    requirementsList.addEventListener('focus', function() {
      if (!isActive) {
        enterKeyboardNavigation();
      }
    });

    requirementsList.addEventListener('blur', function(event) {
      if (!requirementsList.contains((event as FocusEvent).relatedTarget as Node)) {
        exitKeyboardNavigation();
      }
    });

    document.addEventListener('keydown', handleKeyDown);

    // Initialize
    if (requirementsList) {
      requirementsList.setAttribute('tabindex', '0');
      requirements.forEach(function(req) {
        req.setAttribute('tabindex', '-1');
      });
    }
  });
</script>

<style>
  /* WCAG 2.2 AAA Compliant Password Requirements Panel */
  /* Using BEM methodology and global CSS variables */

  /* Main container */
  .password-requirements {
    margin-top: var(--spacing-md);
    padding: var(--spacing-lg);
    background: var(--color-auth-background);
    border: 2px solid var(--color-auth-border);
    border-radius: var(--border-radius-lg);
    transition: opacity 0.3s ease;
    /* Support for 400% zoom */
    max-width: 100%;
    overflow-wrap: break-word;
  }

  .password-requirements--hidden {
    display: none;
  }

  .password-requirements--visible {
    display: block;
  }

  /* Fieldset for better screen reader grouping */
  .password-requirements__fieldset {
    border: none;
    margin: 0;
    padding: 0;
    min-width: 0; /* Prevents fieldset width issues */
  }

  .password-requirements__heading {
    margin: 0 0 var(--spacing-lg) 0;
    /* AAA compliant minimum font size */
    font-size: var(--font-size-aaa-heading);
    font-weight: 600;
    color: var(--color-auth-text);
    line-height: 1.4;
    /* Support for increased text spacing */
    letter-spacing: 0.05em;
    word-spacing: 0.1em;
  }

  /* Requirements List */
  .password-requirements__list {
    list-style: none;
    padding: 0;
    margin: 0 0 var(--spacing-xl) 0;
    /* Support for keyboard navigation */
    outline: none;
  }

  .password-requirements__list:focus-visible {
    outline: 3px solid var(--color-focus-gold);
    outline-offset: 2px;
  }

  .password-requirements__item {
    display: flex;
    align-items: center;
    padding: 0.75rem 0;
    /* AAA compliant minimum font size */
    font-size: var(--font-size-aaa-min);
    line-height: 1.5;
    border-radius: var(--border-radius-sm);
    margin-bottom: var(--spacing-sm);
    /* Support for increased text spacing */
    letter-spacing: 0.02em;
    word-spacing: 0.05em;
    transition: background-color 0.2s ease;
  }

  .password-requirements__item:focus-visible {
    outline: 3px solid var(--color-focus-gold);
    outline-offset: 2px;
    background-color: var(--color-focus-gold-bg);
  }

  /* Multiple visual indicators beyond color */
  .password-requirements__icon {
    margin-right: 0.75rem;
    font-weight: bold;
    width: 1.5rem;
    height: 1.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    flex-shrink: 0;
    /* AAA compliant minimum font size for icons */
    font-size: var(--font-size-aaa-min);
  }

  .password-requirements__symbol {
    margin-right: 0.75rem;
    font-weight: bold;
    width: 1rem;
    flex-shrink: 0;
    /* AAA compliant minimum font size for symbols */
    font-size: var(--font-size-aaa-min);
  }

  .password-requirements__text {
    flex-grow: 1;
    /* AAA compliant minimum font size */
    font-size: var(--font-size-aaa-min);
  }

  /* WCAG AAA Color Contrast (7:1 ratio) - Invalid states */
  .password-requirements__item--invalid {
    color: var(--color-strength-weak);
  }

  .password-requirements__item--invalid .password-requirements__icon {
    color: var(--color-strength-weak);
    background-color: rgba(255, 107, 107, 0.1);
    border: 1px solid var(--color-strength-weak);
  }

  .password-requirements__item--invalid .password-requirements__symbol {
    color: var(--color-strength-weak);
  }

  /* WCAG AAA Color Contrast (7:1 ratio) - Valid states */
  .password-requirements__item--valid {
    color: var(--color-strength-strong);
  }

  .password-requirements__item--valid .password-requirements__icon {
    color: var(--color-strength-strong);
    background-color: rgba(81, 207, 102, 0.1);
    border: 1px solid var(--color-strength-strong);
  }

  .password-requirements__item--valid .password-requirements__symbol {
    color: var(--color-strength-strong);
  }

  /* Password Strength Progress Indicator */
  .password-requirements__progress {
    margin-top: var(--spacing-lg);
  }

  .password-requirements__progress-label {
    margin: 0 0 0.75rem 0;
    /* AAA compliant minimum font size */
    font-size: var(--font-size-aaa-min);
    font-weight: 500;
    color: var(--color-auth-text-secondary);
    /* Support for increased text spacing */
    letter-spacing: 0.02em;
  }

  .password-requirements__progress-meter {
    width: 100%;
    height: 0.75rem;
    background: var(--color-auth-progress-bg);
    border: 2px solid var(--color-auth-border);
    border-radius: var(--border-radius-md);
    overflow: hidden;
    margin-bottom: 0.75rem;
    position: relative;
  }

  .password-requirements__progress-meter:focus-visible {
    outline: 3px solid var(--color-focus-gold);
    outline-offset: 2px;
  }

  .password-requirements__progress-bar {
    height: 100%;
    transition: width 0.3s ease, background-color 0.3s ease;
    border-radius: var(--border-radius-sm);
  }

  /* WCAG AAA Color Contrast for progress states */
  .password-requirements__progress-bar--weak {
    background: var(--color-strength-weak);
  }

  .password-requirements__progress-bar--medium {
    background: var(--color-strength-medium);
  }

  .password-requirements__progress-bar--good {
    background: var(--color-strength-good);
  }

  .password-requirements__progress-bar--strong {
    background: var(--color-strength-strong);
  }

  .password-requirements__progress-text {
    /* AAA compliant minimum font size */
    font-size: var(--font-size-aaa-min);
    font-weight: 500;
    margin: 0;
    /* Support for increased text spacing */
    letter-spacing: 0.02em;
  }

  .password-requirements__progress-text--weak {
    color: var(--color-strength-weak);
  }

  .password-requirements__progress-text--medium {
    color: var(--color-strength-medium);
  }

  .password-requirements__progress-text--good {
    color: var(--color-strength-good);
  }

  .password-requirements__progress-text--strong {
    color: var(--color-strength-strong);
  }

  /* Responsive Design for 400% zoom support */
  @media (max-width: 320px) {
    .password-requirements {
      padding: var(--spacing-md);
      margin-top: 0.75rem;
    }

    .password-requirements__heading {
      font-size: var(--font-size-xl);
      margin-bottom: var(--spacing-md);
    }

    .password-requirements__item {
      padding: var(--spacing-sm) 0;
      font-size: var(--font-size-md);
    }

    .password-requirements__icon,
    .password-requirements__symbol,
    .password-requirements__text,
    .password-requirements__progress-label,
    .password-requirements__progress-text {
      font-size: var(--font-size-md);
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .password-requirements {
      border-width: 3px;
      background: var(--color-black);
      color: var(--color-white);
    }

    .password-requirements__progress-meter {
      border-width: 3px;
      background: var(--color-black);
    }

    .password-requirements__item--invalid {
      color: #ff0000;
    }

    .password-requirements__item--valid {
      color: #00ff00;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .password-requirements__item,
    .password-requirements__progress-bar {
      transition: none;
    }

    .password-requirements {
      transition: none;
    }
  }

  /* Focus management improvements for forced colors mode */
  @media (forced-colors: active) {
    .password-requirements__item:focus-visible {
      outline: 3px solid ButtonText;
      background-color: Highlight;
      color: HighlightText;
    }

    .password-requirements__list:focus-visible {
      outline: 3px solid ButtonText;
    }

    .password-requirements__progress-meter:focus-visible {
      outline: 3px solid ButtonText;
    }
  }
</style>
