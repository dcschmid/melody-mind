---
/**
 * PasswordToggleButton Component for MelodyMind Auth Forms
 *
 * A reusable password visibility toggle button that provides accessibility features
 * and consistent styling. This component eliminates code duplication across auth forms.
 *
 * Features:
 * - Password visibility toggle with eye/eye-slash icons
 * - WCAG AAA compliant accessibility
 * - Automatic focus management
 * - Consistent styling and behavior
 * - Screen reader support
 *
 * @component
 * @example
 * ```astro
 * <PasswordToggleButton
 *   id="toggleLoginPassword"
 *   targetPasswordId="loginPassword"
 *   ariaLabel={t("auth.accessibility.password_toggle")}
 * />
 * ```
 */
import { Icon } from "astro-icon/components";

export interface Props {
  /** Unique identifier for the toggle button */
  id: string;
  /** ID of the password input this button controls */
  targetPasswordId: string;
  /** Accessible label for screen readers */
  ariaLabel: string;
  /** Additional CSS classes */
  class?: string;
}

const { id, targetPasswordId, ariaLabel, class: className = "" } = Astro.props;
---

<button
  type="button"
  {id}
  class={`auth-form-field__toggle-password ${className}`}
  aria-label={ariaLabel}
  data-target={targetPasswordId}
>
  <span class="auth-form-field__icon auth-form-field__icon--show">
    <Icon name="eye" class="auth-form-field__svg-icon" aria-hidden="true" />
  </span>
  <span class="auth-form-field__icon auth-form-field__icon--hide">
    <Icon name="eye-slash" class="auth-form-field__svg-icon" aria-hidden="true" />
  </span>
</button>

<script>
  /**
   * Password Toggle Button Functionality
   *
   * Handles password visibility toggling with proper accessibility features.
   * This script automatically initializes all password toggle buttons on the page.
   */

  /**
   * Initializes password toggle functionality for a specific button
   * @param {HTMLButtonElement} button - The toggle button element
   */
  function initializePasswordToggle(button: HTMLButtonElement): void {
    const targetId = button.dataset.target;
    if (!targetId) {
      return;
    }

    const passwordInput = document.getElementById(targetId) as HTMLInputElement;
    const showIcon = button.querySelector(".auth-form-field__icon--show") as HTMLElement;
    const hideIcon = button.querySelector(".auth-form-field__icon--hide") as HTMLElement;

    if (!passwordInput || !showIcon || !hideIcon) {
      return;
    }

    button.addEventListener("click", () => {
      // Toggle password visibility
      const isPassword = passwordInput.type === "password";
      passwordInput.type = isPassword ? "text" : "password";

      // Toggle icon visibility with proper display handling
      if (isPassword) {
        showIcon.style.display = "none";
        hideIcon.style.display = "flex";
      } else {
        showIcon.style.display = "flex";
        hideIcon.style.display = "none";
      }

      // Maintain focus on the password input
      passwordInput.focus();

      // Update ARIA label for better accessibility
      const lang = document.documentElement.lang || "en";
      const isShowing = passwordInput.type === "text";

      if (isShowing) {
        button.setAttribute("aria-label", lang === "de" ? "Passwort verbergen" : "Hide password");
      } else {
        button.setAttribute("aria-label", lang === "de" ? "Passwort anzeigen" : "Show password");
      }
    });
  }

  /**
   * Initialize all password toggle buttons when DOM is ready
   */
  function initializeAllPasswordToggles(): void {
    const toggleButtons = document.querySelectorAll(
      ".auth-form-field__toggle-password"
    ) as NodeListOf<HTMLButtonElement>;
    toggleButtons.forEach((button) => {
      initializePasswordToggle(button);
    });
  }

  // Initialize on DOM content loaded
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeAllPasswordToggles);
  } else {
    initializeAllPasswordToggles();
  }

  // Also expose for manual initialization with proper typing
  declare global {
    interface Window {
      initializePasswordToggle: typeof initializePasswordToggle;
    }
  }
  window.initializePasswordToggle = initializePasswordToggle;
</script>

<style>
  /**
   * Password Toggle Button Component Styles
   * Uses BEM methodology and CSS variables from global.css
   * WCAG AAA compliant with enhanced accessibility features
   */

  /* Block element within auth-form-field */
  .auth-form-field__toggle-password {
    position: absolute;
    right: var(--spacing-sm);
    top: 50%;
    transform: translateY(-50%);
    background-color: transparent;
    border: none;
    padding: var(--spacing-xs);
    cursor: pointer;
    color: var(--color-text-secondary);
    border-radius: var(--border-radius-sm);
    transition: color var(--transition-duration-300) var(--transition-timing-in-out);
    z-index: var(--z-index-dropdown);
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .auth-form-field__toggle-password:hover {
    color: var(--color-purple-300);
  }

  .auth-form-field__toggle-password:focus-visible {
    outline: 3px solid var(--color-yellow-400);
    outline-offset: 2px;
    color: var(--color-purple-200);
  }

  /* Icon container element */
  .auth-form-field__icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 1.25rem;
    height: 1.25rem;
  }

  /* Modifier: hidden state for hide icon */
  .auth-form-field__icon--hide {
    display: none;
  }

  /* SVG icon element */
  .auth-form-field__svg-icon {
    width: 100%;
    height: 100%;
    flex-shrink: 0;
  }

  /* Responsive adjustments */
  @media (min-width: 768px) {
    .auth-form-field__toggle-password {
      right: var(--spacing-md);
      padding: var(--spacing-sm);
    }

    .auth-form-field__icon {
      width: 1.5rem;
      height: 1.5rem;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .auth-form-field__toggle-password {
      border: 1px solid currentColor;
      background-color: var(--color-background);
    }

    .auth-form-field__toggle-password:focus-visible {
      outline-width: 4px;
    }
  }

  /* Ultra-high contrast mode */
  @media (prefers-contrast: more) {
    .auth-form-field__toggle-password {
      border: 2px solid currentColor;
      background-color: var(--color-background);
    }

    .auth-form-field__toggle-password:focus-visible {
      outline-width: 5px;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .auth-form-field__toggle-password {
      transition: none;
    }
  }

  /* Touch devices optimization */
  @media (hover: none) and (pointer: coarse) {
    .auth-form-field__toggle-password {
      padding: var(--spacing-sm);
      right: var(--spacing-sm);
      min-width: 44px; /* Minimum touch target size */
      min-height: 44px;
    }

    .auth-form-field__icon {
      width: 1.5rem;
      height: 1.5rem;
    }
  }

  /* Light mode overrides */
  @media (prefers-color-scheme: light) {
    .auth-form-field__toggle-password {
      color: var(--color-gray-600);
    }

    .auth-form-field__toggle-password:hover {
      color: var(--color-purple-600);
    }

    .auth-form-field__toggle-password:focus-visible {
      color: var(--color-purple-700);
    }
  }
</style>
