---
/**
 * PasswordToggleButton Component for MelodyMind Auth Forms
 *
 * A reusable password visibility toggle button that provides accessibility features
 * and consistent styling. This component eliminates code duplication across auth forms.
 *
 * Features:
 * - Password visibility toggle with eye/eye-slash icons
 * - WCAG AAA compliant accessibility
 * - Automatic focus management
 * - Consistent styling and behavior
 * - Screen reader support
 *
 * @component
 * @example
 * ```astro
 * <PasswordToggleButton
 *   id="toggleLoginPassword"
 *   targetPasswordId="loginPassword"
 *   ariaLabel={t("auth.accessibility.password_toggle")}
 * />
 * ```
 */
import { Icon } from "astro-icon/components";
import { getLangFromUrl, useTranslations } from "@utils/i18n";

// Get current language and translations
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Prepare translations for client-side scripts
const clientTranslations = {
  "auth.accessibility.password_toggle_empty": t("auth.accessibility.password_toggle_empty"),
  "auth.accessibility.password.visible": t("auth.accessibility.password.visible"),
  "auth.accessibility.password.hidden": t("auth.accessibility.password.hidden"),
  "auth.accessibility.password.visible_status": t("auth.accessibility.password.visible_status"),
  "auth.accessibility.password.hidden_status": t("auth.accessibility.password.hidden_status"),
};

export interface Props {
  /** Unique identifier for the toggle button */
  id: string;
  /** ID of the password input this button controls */
  targetPasswordId: string;
  /** Accessible label for screen readers */
  ariaLabel: string;
  /** Additional CSS classes */
  class?: string;
}

const { id, targetPasswordId, ariaLabel, class: className = "" } = Astro.props;
---

<button
  type="button"
  {id}
  class={`auth-form-field__toggle-password ${className}`}
  aria-label={ariaLabel}
  aria-pressed="false"
  aria-describedby={`${id}Status ${id}Help`}
  data-target={targetPasswordId}
>
  <span class="auth-form-field__icon auth-form-field__icon--show">
    <Icon name="eye" class="auth-form-field__svg-icon" aria-hidden="true" />
  </span>
  <span class="auth-form-field__icon auth-form-field__icon--hide">
    <Icon name="eye-slash" class="auth-form-field__svg-icon" aria-hidden="true" />
  </span>
</button>

<!-- Hidden status announcement for screen readers -->
<div id={`${id}Status`} class="sr-only" aria-live="polite" aria-atomic="true"></div>

<!-- Contextual help for accessibility -->
<div id={`${id}Help`} class="sr-only">
  {
    t("auth.accessibility.password_toggle_help") ||
      "Toggle to show or hide password characters. Use carefully in public spaces for security."
  }
</div>

<script define:vars={{ clientTranslations }}>
  /**
   * Password Toggle Button Functionality
   *
   * Handles password visibility toggling with proper accessibility features.
   * This script automatically initializes all password toggle buttons on the page.
   */

  // Make translations available globally for password toggle functionality
  if (!window.authTranslations) {
    window.authTranslations = {};
  }
  Object.assign(window.authTranslations, clientTranslations);

  /**
   * Helper: Get required DOM elements for password toggle
   * @param {HTMLButtonElement} button - The toggle button element
   * @returns {Object|null} DOM elements or null if validation fails
   */
  function getToggleElements(button) {
    const targetId = button.dataset.target;
    if (!targetId) {
      return null;
    }

    const passwordInput = document.getElementById(targetId);
    const showIcon = button.querySelector(".auth-form-field__icon--show");
    const hideIcon = button.querySelector(".auth-form-field__icon--hide");
    const statusElement = document.getElementById(`${button.id}Status`);

    if (!passwordInput || !showIcon || !hideIcon) {
      return null;
    }

    return { passwordInput, showIcon, hideIcon, statusElement };
  }

  /**
   * Helper: Toggle icon visibility with CSS classes
   * @param {HTMLElement} showIcon - Show password icon
   * @param {HTMLElement} hideIcon - Hide password icon
   * @param {boolean} isPassword - Current password state
   */
  function toggleIconVisibility(showIcon, hideIcon, isPassword) {
    const hiddenClass = "auth-form-field__icon--hidden";

    if (isPassword) {
      showIcon.classList.add(hiddenClass);
      hideIcon.classList.remove(hiddenClass);
    } else {
      showIcon.classList.remove(hiddenClass);
      hideIcon.classList.add(hiddenClass);
    }
  }

  /**
   * Helper: Update accessibility attributes and announcements
   * @param {HTMLButtonElement} button - Toggle button
   * @param {HTMLElement} statusElement - Status announcement element
   * @param {boolean} isShowing - Whether password is currently visible
   */
  function updateAccessibilityState(button, statusElement, isShowing) {
    // Update ARIA pressed state
    button.setAttribute("aria-pressed", isShowing ? "true" : "false");

    // Update translations if available
    if (window.authTranslations) {
      const labelKey = isShowing
        ? "auth.accessibility.password.visible"
        : "auth.accessibility.password.hidden";
      const statusKey = isShowing
        ? "auth.accessibility.password.visible_status"
        : "auth.accessibility.password.hidden_status";

      const label = window.authTranslations[labelKey];
      if (label) {
        button.setAttribute("aria-label", label);
      }

      if (statusElement) {
        const statusText = window.authTranslations[statusKey];
        if (statusText) {
          statusElement.textContent = statusText;
        }
      }
    }
  }

  /**
   * Helper: Show error message and focus input
   * @param {HTMLInputElement} passwordInput - Password input element
   * @param {HTMLElement} statusElement - Status announcement element
   */
  function showEmptyPasswordError(passwordInput, statusElement) {
    if (statusElement) {
      const errorMessage =
        window.authTranslations?.["auth.accessibility.password_toggle_empty"] ||
        "Enter a password first before toggling visibility.";
      statusElement.textContent = errorMessage;
    }
    passwordInput.focus();
  }

  /**
   * Initializes password toggle functionality for a specific button
   * Enhanced with better accessibility and performance optimizations
   * @param {HTMLButtonElement} button - The toggle button element
   */
  function initializePasswordToggle(button) {
    const elements = getToggleElements(button);
    if (!elements) {
      return;
    }

    const { passwordInput, showIcon, hideIcon, statusElement } = elements;

    button.addEventListener("click", () => {
      // Validate password input exists before toggle (Error Prevention - WCAG 2.2)
      if (!passwordInput.value.trim()) {
        showEmptyPasswordError(passwordInput, statusElement);
        return;
      }

      // Toggle password visibility
      const isPassword = passwordInput.type === "password";
      passwordInput.type = isPassword ? "text" : "password";

      // Update UI and accessibility
      toggleIconVisibility(showIcon, hideIcon, isPassword);
      updateAccessibilityState(button, statusElement, passwordInput.type === "text");

      // Maintain focus on the password input
      passwordInput.focus();
    });
  }

  /**
   * Initialize all password toggle buttons when DOM is ready
   */
  function initializeAllPasswordToggles() {
    const toggleButtons = document.querySelectorAll(".auth-form-field__toggle-password");
    toggleButtons.forEach((button) => {
      initializePasswordToggle(button);
    });
  }

  /**
   * Helper: Find the appropriate toggle button for keyboard shortcuts
   * @param {HTMLElement} activeElement - Currently focused element
   * @returns {HTMLButtonElement|null} Target button or null
   */
  function findTargetToggleButton(activeElement) {
    let targetButton = null;

    // Check if focused element is a password input
    if (activeElement && activeElement.type === "password") {
      const inputId = activeElement.id;
      targetButton = document.querySelector(`[data-target="${inputId}"]`);
    } else {
      // Fallback to first password toggle button
      targetButton = document.querySelector(".auth-form-field__toggle-password");
    }

    return targetButton;
  }

  /**
   * Helper: Announce keyboard shortcut usage to screen readers
   * @param {HTMLButtonElement} targetButton - The toggle button that was activated
   */
  function announceKeyboardShortcut(targetButton) {
    const statusElement = document.getElementById(`${targetButton.id}Status`);
    if (statusElement) {
      const lang = document.documentElement.lang || "en";
      const shortcutMessage =
        lang === "de"
          ? "Tastenkombination Strg+Umschalt+H verwendet"
          : "Keyboard shortcut Ctrl+Shift+H used";

      setTimeout(() => {
        statusElement.textContent = shortcutMessage;
      }, 500);
    }
  }

  /**
   * Initialize keyboard shortcuts for password toggle
   * WCAG 2.2: Enhanced keyboard navigation support
   */
  function initializeKeyboardShortcuts() {
    document.addEventListener("keydown", (event) => {
      // Ctrl+Shift+H to toggle password visibility
      if (event.ctrlKey && event.shiftKey && event.key === "H") {
        event.preventDefault();

        const activeElement = document.activeElement;
        const targetButton = findTargetToggleButton(activeElement);

        if (targetButton) {
          targetButton.click();
          announceKeyboardShortcut(targetButton);
        }
      }
    });
  }

  // ...existing code...

  /**
   * Initialize on DOM content loaded
   */
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => {
      initializeAllPasswordToggles();
      initializeKeyboardShortcuts();
    });
  } else {
    initializeAllPasswordToggles();
    initializeKeyboardShortcuts();
  }

  // Also expose for manual initialization
  window.initializePasswordToggle = initializePasswordToggle;
</script>

<style>
  /**
   * Password Toggle Button Component Styles
   * Uses BEM methodology and CSS variables from global.css
   * WCAG AAA compliant with enhanced accessibility features
   */

  /* Base button styles - shared properties */
  .auth-form-field__toggle-password {
    position: absolute;
    right: var(--space-sm);
    top: 50%;
    transform: translateY(-50%);
    background-color: transparent;
    border: 1px solid transparent;
    padding: var(--space-sm);
    cursor: pointer;
    color: var(--text-secondary);
    border-radius: var(--radius-md);
    transition: all var(--transition-normal);
    z-index: var(--z-dropdown);
    display: flex;
    align-items: center;
    justify-content: center;
    /* Enhanced touch target size using CSS variables */
    min-width: var(--touch-target-enhanced);
    min-height: var(--touch-target-enhanced);
    /* Improved touch area with visual feedback */
    touch-action: manipulation;
  }

  /* Interactive states - grouped for maintainability */
  .auth-form-field__toggle-password:hover {
    color: var(--interactive-primary-hover);
    background-color: var(--bg-secondary);
  }

  .auth-form-field__toggle-password:focus-visible {
    outline: var(--focus-outline);
    outline-offset: var(--space-xs);
    color: var(--interactive-primary);
    background-color: var(--bg-secondary);
    /* WCAG 2.2: Enhanced focus appearance using CSS variables */
    box-shadow: var(--focus-enhanced-shadow);
  }

  .auth-form-field__toggle-password:active {
    transform: translateY(-50%) scale(var(--scale-hover));
    background-color: var(--bg-tertiary);
  }

  .auth-form-field__toggle-password:focus {
    outline: none; /* Custom focus handling via focus-visible */
  }

  /* Icon container styles */
  .auth-form-field__icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: var(--text-lg);
    height: var(--text-lg);
  }

  /* Icon visibility modifiers */
  .auth-form-field__icon--hide {
    display: none;
  }

  .auth-form-field__icon--hidden {
    display: none !important;
  }

  /* SVG icon element */
  .auth-form-field__svg-icon {
    width: 100%;
    height: 100%;
    flex-shrink: 0;
  }

  /* ============================================================================
   * RESPONSIVE DESIGN - Consolidated Media Queries
   * ============================================================================ */

  /* Medium screens and up */
  @media (min-width: var(--breakpoint-md)) {
    .auth-form-field__toggle-password {
      right: var(--space-md);
      padding: var(--space-sm);
      min-width: calc(var(--touch-target-enhanced) + var(--space-xs));
      min-height: calc(var(--touch-target-enhanced) + var(--space-xs));
    }

    .auth-form-field__icon {
      width: var(--text-xl);
      height: var(--text-xl);
    }
  }

  /* Large screens and up */
  @media (min-width: var(--breakpoint-lg)) {
    .auth-form-field__toggle-password {
      min-width: calc(var(--touch-target-enhanced) + var(--space-sm));
      min-height: calc(var(--touch-target-enhanced) + var(--space-sm));
    }

    .auth-form-field__icon {
      width: var(--text-2xl);
      height: var(--text-2xl);
    }
  }

  /* ============================================================================
   * ACCESSIBILITY - Consolidated Preference Queries
   * ============================================================================ */

  /* High contrast modes - consolidated */
  @media (prefers-contrast: high) {
    .auth-form-field__toggle-password {
      border: 1px solid currentColor;
      background-color: var(--bg-primary);
    }

    .auth-form-field__toggle-password:focus-visible {
      outline-width: var(--space-xs);
    }
  }

  @media (prefers-contrast: more) {
    .auth-form-field__toggle-password {
      border: 2px solid currentColor;
      background-color: var(--bg-primary);
    }

    .auth-form-field__toggle-password:focus-visible {
      outline-width: calc(var(--space-xs) + 1px);
    }
  }

  /* Touch devices - enhanced targets and feedback */
  @media (hover: none) and (pointer: coarse) {
    .auth-form-field__toggle-password {
      padding: var(--space-md);
      right: var(--space-sm);
      min-width: calc(var(--touch-target-enhanced) + var(--space-sm));
      min-height: calc(var(--touch-target-enhanced) + var(--space-sm));
      border: 1px solid transparent;
    }

    .auth-form-field__toggle-password:active {
      background-color: var(--bg-secondary);
      border-color: var(--border-secondary);
      transform: translateY(-50%) scale(var(--scale-hover));
    }

    .auth-form-field__icon {
      width: var(--text-2xl);
      height: var(--text-2xl);
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .auth-form-field__toggle-password {
      transition: none;
    }
  }

  /* ============================================================================
   * Enhanced Text Spacing Support (WCAG 2.2 AAA) - PasswordToggleButton
   * Supports up to 2x letter spacing and 1.5x line height customization
   * ============================================================================ */
  .enhanced-text-spacing .auth-form-field__toggle-password {
    letter-spacing: var(--letter-spacing-enhanced);
    word-spacing: var(--word-spacing-enhanced);
    line-height: var(--line-height-enhanced);
    /* Adjust padding to accommodate enhanced text spacing */
    padding: calc(var(--space-sm) * 1.2);
    /* Support for text resizing up to 400% (WCAG 2.2) */
    max-width: 100%;
    overflow: visible;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
</style>
