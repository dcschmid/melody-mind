---
/**
 * PasswordToggleButton - Password visibility toggle with accessibility
 *
 * Features:
 * - Eye/eye-slash icon toggle for password visibility
 * - WCAG AAA compliant with enhanced accessibility
 * - Mobile-first responsive design
 * - Keyboard shortcut support (Ctrl+Shift+H)
 * - Internationalization support with live announcements
 */
import { Icon } from "astro-icon/components";
import { getLangFromUrl, useTranslations } from "@utils/i18n";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const clientTranslations = {
  "auth.accessibility.password_toggle_empty": t("auth.accessibility.password_toggle_empty"),
  "auth.accessibility.password.visible": t("auth.accessibility.password.visible"),
  "auth.accessibility.password.hidden": t("auth.accessibility.password.hidden"),
  "auth.accessibility.password.visible_status": t("auth.accessibility.password.visible_status"),
  "auth.accessibility.password.hidden_status": t("auth.accessibility.password.hidden_status"),
};

export interface Props {
  id: string;
  targetPasswordId: string;
  ariaLabel: string;
  class?: string;
}

const { id, targetPasswordId, ariaLabel, class: className = "" } = Astro.props;
---

<button
  type="button"
  {id}
  class={`auth-form-field__toggle-password ${className}`}
  aria-label={ariaLabel}
  aria-pressed="false"
  aria-describedby={`${id}Status ${id}Help`}
  data-target={targetPasswordId}
>
  <span class="auth-form-field__icon auth-form-field__icon--show">
    <Icon name="eye" class="auth-form-field__svg-icon" aria-hidden="true" />
  </span>
  <span class="auth-form-field__icon auth-form-field__icon--hide">
    <Icon name="eye-slash" class="auth-form-field__svg-icon" aria-hidden="true" />
  </span>
</button>

<div id={`${id}Status`} class="sr-only" aria-live="polite" aria-atomic="true"></div>
<div id={`${id}Help`} class="sr-only">
  {t("auth.accessibility.password_toggle_help")}
</div>

<script define:vars={{ clientTranslations }} is:inline>
  /**
   * Password Toggle Button - Modern ES6+ implementation
   * Enhanced accessibility with live announcements and keyboard shortcuts.
   * Performance optimized with efficient DOM handling.
   */

  // Make translations available globally
  if (!window.authTranslations) {
    window.authTranslations = {};
  }
  Object.assign(window.authTranslations, clientTranslations);

  /**
   * Get required DOM elements for password toggle
   */
  const getToggleElements = (button) => {
    const targetId = button.dataset.target;
    if (!targetId) {
      return null;
    }

    const passwordInput = document.getElementById(targetId);
    const showIcon = button.querySelector(".auth-form-field__icon--show");
    const hideIcon = button.querySelector(".auth-form-field__icon--hide");
    const statusElement = document.getElementById(`${button.id}Status`);

    if (!passwordInput || !showIcon || !hideIcon) {
      return null;
    }

    return { passwordInput, showIcon, hideIcon, statusElement };
  };

  /**
   * Toggle icon visibility with CSS classes
   */
  const toggleIconVisibility = (showIcon, hideIcon, isPassword) => {
    const hiddenClass = "auth-form-field__icon--hidden";

    if (isPassword) {
      showIcon.classList.add(hiddenClass);
      hideIcon.classList.remove(hiddenClass);
    } else {
      showIcon.classList.remove(hiddenClass);
      hideIcon.classList.add(hiddenClass);
    }
  };

  /**
   * Update accessibility attributes and announcements
   */
  const updateAccessibilityState = (button, statusElement, isShowing) => {
    button.setAttribute("aria-pressed", isShowing ? "true" : "false");

    if (window.authTranslations) {
      const labelKey = isShowing
        ? "auth.accessibility.password.visible"
        : "auth.accessibility.password.hidden";
      const statusKey = isShowing
        ? "auth.accessibility.password.visible_status"
        : "auth.accessibility.password.hidden_status";

      const label = window.authTranslations[labelKey];
      if (label) {
        button.setAttribute("aria-label", label);
      }

      if (statusElement) {
        const statusText = window.authTranslations[statusKey];
        if (statusText) {
          statusElement.textContent = statusText;
        }
      }
    }
  };

  /**
   * Show error message and focus input
   */
  const showEmptyPasswordError = (passwordInput, statusElement) => {
    if (statusElement) {
      const errorMessage =
        window.authTranslations?.["auth.accessibility.password_toggle_empty"] ||
        "Enter a password first before toggling visibility.";
      statusElement.textContent = errorMessage;
    }
    passwordInput.focus();
  };

  /**
   * Initialize password toggle functionality
   */
  const initializePasswordToggle = (button) => {
    const elements = getToggleElements(button);
    if (!elements) {
      return;
    }

    const { passwordInput, showIcon, hideIcon, statusElement } = elements;

    button.addEventListener("click", () => {
      if (!passwordInput.value.trim()) {
        showEmptyPasswordError(passwordInput, statusElement);
        return;
      }

      const isPassword = passwordInput.type === "password";
      passwordInput.type = isPassword ? "text" : "password";

      toggleIconVisibility(showIcon, hideIcon, isPassword);
      updateAccessibilityState(button, statusElement, passwordInput.type === "text");

      passwordInput.focus();
    });
  };

  /**
   * Initialize all password toggle buttons
   */
  const initializeAllPasswordToggles = () => {
    const toggleButtons = document.querySelectorAll(".auth-form-field__toggle-password");
    toggleButtons.forEach(initializePasswordToggle);
  };

  /**
   * Find target toggle button for keyboard shortcuts
   */
  const findTargetToggleButton = (activeElement) => {
    if (activeElement?.type === "password") {
      const inputId = activeElement.id;
      return document.querySelector(`[data-target="${inputId}"]`);
    }
    return document.querySelector(".auth-form-field__toggle-password");
  };

  /**
   * Announce keyboard shortcut usage
   */
  const announceKeyboardShortcut = (targetButton) => {
    const statusElement = document.getElementById(`${targetButton.id}Status`);
    if (statusElement) {
      const lang = document.documentElement.lang || "en";
      const shortcutMessage =
        lang === "de"
          ? "Tastenkombination Strg+Umschalt+H verwendet"
          : "Keyboard shortcut Ctrl+Shift+H used";

      setTimeout(() => {
        statusElement.textContent = shortcutMessage;
      }, 500);
    }
  };

  /**
   * Initialize keyboard shortcuts
   */
  const initializeKeyboardShortcuts = () => {
    document.addEventListener("keydown", (event) => {
      if (event.ctrlKey && event.shiftKey && event.key === "H") {
        event.preventDefault();

        const activeElement = document.activeElement;
        const targetButton = findTargetToggleButton(activeElement);

        if (targetButton) {
          targetButton.click();
          announceKeyboardShortcut(targetButton);
        }
      }
    });
  };

  // Initialize on DOM content loaded
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => {
      initializeAllPasswordToggles();
      initializeKeyboardShortcuts();
    });
  } else {
    initializeAllPasswordToggles();
    initializeKeyboardShortcuts();
  }

  // Expose for manual initialization
  window.initializePasswordToggle = initializePasswordToggle;
</script>

<style lang="scss">
  .auth-form-field__toggle-password {
    position: absolute;
    right: var(--space-md);
    top: 50%;
    transform: translateY(-50%);
    z-index: var(--z-dropdown);
    background-color: transparent;
    border: var(--border-width-thin) solid transparent;
    border-radius: var(--radius-md);
    color: var(--text-secondary);
    padding: var(--space-sm);
    min-width: var(--touch-target-enhanced);
    min-height: var(--touch-target-enhanced);
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    touch-action: manipulation;
    transition:
      background-color var(--transition-normal),
      color var(--transition-normal),
      border-color var(--transition-normal);

    &:hover {
      color: var(--interactive-primary-hover);
      background-color: var(--bg-hover);
    }

    &:focus-visible {
      outline: var(--focus-outline);
      outline-offset: var(--focus-ring-offset);
      color: var(--interactive-primary);
      background-color: var(--bg-focus);
      box-shadow: var(--focus-ring);
    }

    &:active {
      background-color: var(--bg-active);
      border-color: var(--border-primary);
    }

    &:focus {
      outline: none;
    }

    @media (max-width: 39.9375em) {
      min-width: var(--touch-target-enhanced);
      min-height: var(--touch-target-enhanced);
      right: var(--space-sm);
      padding: var(--space-xs);
    }

    @media (max-width: 23.4375em) {
      right: var(--space-xs);
      padding: var(--space-xs);
    }
  }

  .auth-form-field__icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: var(--text-xl);
    height: var(--text-xl);

    &--hide {
      display: none;
    }

    &--hidden {
      display: none !important;
    }

    @media (max-width: 39.9375em) {
      width: var(--text-lg);
      height: var(--text-lg);
    }
    @media (max-width: 23.4375em) {
      width: var(--text-base);
      height: var(--text-base);
    }
  }

  .auth-form-field__svg-icon {
    width: var(--width-full);
    height: var(--height-full);
    flex-shrink: 0;
  }

  @media (prefers-contrast: high) {
    .auth-form-field__toggle-password {
      border: var(--border-width-thick) solid var(--text-primary);
      background-color: var(--bg-primary);
      &:focus-visible {
        outline-width: var(--border-width-thick);
        background-color: var(--bg-secondary);
      }
    }
  }

  @media (hover: none) and (pointer: coarse) {
    .auth-form-field__toggle-password {
      padding: var(--space-md);
      min-width: calc(var(--touch-target-enhanced) + var(--space-sm));
      min-height: calc(var(--touch-target-enhanced) + var(--space-sm));
      border: var(--border-width-thin) solid var(--border-secondary);
    }
    .auth-form-field__icon {
      width: var(--text-2xl);
      height: var(--text-2xl);
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .auth-form-field__toggle-password {
      transition: var(--transition-instant);
      animation: none;
    }
  }

  .enhanced-text-spacing .auth-form-field__toggle-password {
    letter-spacing: var(--letter-spacing-enhanced);
    word-spacing: var(--word-spacing-enhanced);
    line-height: var(--leading-enhanced);
    padding: calc(var(--space-sm) * 1.2);
    max-width: var(--width-full);
    overflow: visible;
    text-overflow: clip;
    white-space: nowrap;
  }

  @media print {
    .auth-form-field__toggle-password {
      display: none !important;
    }
  }

  @media (forced-colors: active) {
    .auth-form-field__toggle-password {
      border: var(--border-width-thin) solid CanvasText;
      background-color: Canvas;
      color: CanvasText;
      forced-color-adjust: none;
      &:hover {
        background-color: Highlight;
        color: HighlightText;
      }
      &:focus-visible {
        outline: var(--border-width-thick) solid Highlight;
      }
    }
  }
</style>
