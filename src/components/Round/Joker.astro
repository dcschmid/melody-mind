---
import { Icon } from "astro-icon/components";
import { Picture } from "astro:assets";

import Button from "../Shared/Button.astro";

const { jokerCoverUrl, jokerData, jokerText } = Astro.props;
---

<div class="jokerIcons">
  <div id="joker">
    <Icon name="joker-gold" width={40} height={40} />
  </div>

  <div id="jokerSolution" class="jokerSolution">
    <div class="jokerSolutionContent">
      <div class="closeRoot">
        <Icon class="closeIcon" name="joker-gold" width={48} height={48} />
        <Button id="closeJokerButton" buttonText="close" url="#" />
      </div>
      <div class="solutionRoot">
        <div class="solutionCover">
          <Picture
            class="solutionCoverImage"
            src={jokerCoverUrl}
            width={200}
            height={200}
            formats={["avif", "webp"]}
            alt=""
          />
        </div>
        <div class="solutionData">{jokerData}</div>
        <div class="solutionText">
          {jokerText}
        </div>
      </div>
    </div>
  </div>
</div>

<style lang="scss">
  #joker {
    cursor: pointer;
    display: none;
  }

  .jokerIcons {
    display: inline-flex;
    gap: var(--spacing-s);
    align-items: flex-start;
  }

  .jokerSolution {
    position: fixed;
    z-index: 1000;
    top: 0;
    left: 0;

    overflow-y: auto;
    display: flex;
    align-items: center;
    justify-content: center;

    width: 100%;
    height: 100%;

    visibility: hidden;
    background-color: rgb(0 0 0 / 90%);
  }

  .jokerSolutionContent {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-1);
    align-items: center;

    margin: 0 var(--spacing-2);
  }

  .jokergroup {
    display: flex;
    gap: var(--spacing-3);
    align-items: center;
  }

  .solutionCoverImage {
    border-radius: var(--radius-rounded);
  }

  .closeRoot {
    display: flex;
    align-self: flex-end;
  }

  .closeIcon {
    margin-right: var(--spacing-xl);
  }

  .solutionRoot {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-xs);
    align-items: flex-start;

    width: 100%;
    max-width: 22.5rem;
    padding: var(--spacing-md);
  }

  .solutionCover {
    position: relative;
    margin: 0 auto;
  }

  .solutionData {
    font:
      900 1.5rem / 1.5 "Source Sans Pro",
      sans-serif;
    color: var(--primary-color);
  }

  .solutionText {
    font-size: 1.125rem;
    line-height: 1.5;
    hyphens: auto;
  }

  .shake {
    animation: shake 0.5s;
  }

  @keyframes shake {
    0% {
      transform: translateX(0);
    }

    20% {
      transform: translateX(-10px);
    }

    40% {
      transform: translateX(10px);
    }

    60% {
      transform: translateX(-10px);
    }

    80% {
      transform: translateX(10px);
    }

    100% {
      transform: translateX(0);
    }
  }
</style>

<script>
  // Get references to the necessary DOM elements
  const openJokerOverlay = document.getElementById("joker")!; // The main overlay element
  const jokersolution = document.getElementById("jokerSolution")!; // The joker solution element

  const openJokerSolution = document.getElementById("redeemjoker"); // The button that triggers the joker solution overlay
  const closeJokerButton = document.getElementById("closeJokerButton"); // The button that closes the joker solution overlay

  // Set the initial visibility of the overlay and solution to hidden
  jokersolution!.style.visibility = "hidden";

  // Add event listeners to the main overlay and the joker solution button
  // The event listeners toggle the visibility of the overlay and solution

  /**
   * Event listener for the main overlay element
   * @param {MouseEvent} _event - The mouse event that triggered the listener
   */
  openJokerOverlay.addEventListener("click", (_event: MouseEvent) => {
    jokersolution!.style.visibility = "visible";
  });

  /**
   * Event listener for the joker solution button
   * @param {MouseEvent} _event - The mouse event that triggered the listener
   */
  openJokerSolution?.addEventListener("click", (_event: MouseEvent) => {
    jokersolution!.style.visibility = "visible";
  });

  /**
   * Event listener for the close button
   * @returns {void}
   */
  closeJokerButton?.addEventListener("click", (): void => {
    jokersolution!.style.visibility = "hidden";
    openJokerOverlay!.style.display = "none";
  });
</script>
