---
import { Icon } from "astro-icon/components";
import { Picture } from "astro:assets";

import Button from "../Shared/Button.astro";

const { jokerCoverUrl, jokerData, jokerText } = Astro.props;
---

<div class="jokerIcons">
  <div id="joker">
    <Icon name="joker-gold" width={30} height={30} />
  </div>

  <div id="jokersolution" class="jokersolution">
    <div class="jokersolutioncontent">
      <div class="closeRoot">
        <Icon class="closeIcon" name="joker-gold" width={48} height={48} />
        <Button id="closeJokerButton" buttonText="close" url="#" />
      </div>
      <div class="solutionRoot">
        <div class="solutionCover">
          <Picture class="solutionCoverImage" src={jokerCoverUrl} width={240} height={240} formats={["avif", "webp"]} alt="" />
        </div>
        <div class="solutionData">{jokerData}</div>
        <div class="solutionText">
          {jokerText}
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  #joker {
    display: none;
    cursor: pointer;
  }

  .jokerIcons {
    display: inline-flex;
    align-items: top;
    gap: var(--spacing-s);
  }

 .jokersolution {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.9);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000; /* ensures overlay is on top */
    visibility: hidden;
    overflow-y: auto;
  }

  .jokersolutioncontent {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--spacing-3);
    margin: 0 1rem;
  }

  .jokergroup {
    display: flex;
    align-items: center;
    gap: var(--spacing-3);
  }

  .solutionCoverImage {
      border-radius: var(--radius-rounded);
  }

  .closeRoot {
    display: flex;
    align-self: end;
  }

  .closeIcon {
    margin-right: var(--spacing-xl);
  }

  .solutionRoot {
    display: flex;
    padding: var(--spacing-s) var(--spacing-s) var(--spacing-md) var(--spacing-s);
    flex-direction: column;
    align-items: start;
    gap: var(--spacing-md);
    max-width: 360px;
  }

  .solutionCover {
    margin: 0 auto;
    position: relative;
  }

  .solutionData {
    color: var(--primary-color);
    font-size: 1.5rem;
    font-style: normal;
    font-weight: 900;
    line-height: 120%;
    letter-spacing: 0.36px;
  }

  .solutionText {
    font-size: 1.125rem;
    font-style: normal;
    font-weight: 400;
    line-height: 1.5;
    hyphens: auto;
  }

  /* Define the shake animation */
  .shake {
    animation: shake 0.5s;
  }

  @keyframes shake {
    0% {
      transform: translateX(0);
    }
    20% {
      transform: translateX(-10px);
    }
    40% {
      transform: translateX(10px);
    }
    60% {
      transform: translateX(-10px);
    }
    80% {
      transform: translateX(10px);
    }
    100% {
      transform: translateX(0);
    }
  }
</style>

<script>
  // Get references to the necessary DOM elements
  const openJokerOverlay = document.getElementById("joker")!; // The main overlay element
  const jokersolution = document.getElementById("jokersolution")!; // The joker solution element

  const openJokerSolution = document.getElementById("redeemjoker"); // The button that triggers the joker solution overlay
  const closeJokerButton = document.getElementById("closeJokerButton"); // The button that closes the joker solution overlay

  // Set the initial visibility of the overlay and solution to hidden
  jokersolution!.style.visibility = "hidden";

  // Add event listeners to the main overlay and the joker solution button
  // The event listeners toggle the visibility of the overlay and solution

  /**
   * Event listener for the main overlay element
   * @param {MouseEvent} _event - The mouse event that triggered the listener
   */
  openJokerOverlay.addEventListener("click", (_event: MouseEvent) => {
    jokersolution!.style.visibility = "visible";
  });

  /**
   * Event listener for the joker solution button
   * @param {MouseEvent} _event - The mouse event that triggered the listener
   */
  openJokerSolution?.addEventListener("click", (_event: MouseEvent) => {
    jokersolution!.style.visibility = "visible";
  });

  /**
   * Event listener for the close button
   * @returns {void}
   */
  closeJokerButton?.addEventListener("click", (): void => {
    jokersolution!.style.visibility = "hidden";
    openJokerOverlay!.style.display = "none";
  });
</script>
