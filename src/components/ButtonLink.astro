---
/**
 * ButtonLink Component - Responsive & Accessible
 *
 * A versatile component that renders either a button or link with consistent styling.
 * Fully responsive with WCAG AAA compliance and optimized for all screen sizes.
 *
 * @component
 * @example
 * ```astro
 * <!-- As a link -->
 * <ButtonLink href="/game" variant="primary" size="md">
 *   Start Game
 * </ButtonLink>
 *
 * <!-- As a button with icon -->
 * <ButtonLink type="button" variant="secondary" icon="mdi:close" ariaLabel="Close modal">
 *   Close
 * </ButtonLink>
 *
 * <!-- With icon only -->
 * <ButtonLink href="/settings" icon="mdi:settings" ariaLabel="Open settings" />
 * ```
 */
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import { Icon } from "astro-icon/components";

// Get current language and translations
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(String(lang));

interface Props {
  /** URL for the link. If omitted, a button element is rendered instead */
  href?: string;
  /** Button type attribute, only used when rendering as a button */
  type?: "button" | "submit" | "reset";
  /** Whether the button/link is disabled */
  disabled?: boolean;
  /** Accessible label for the button/link (important for screen readers) */
  ariaLabel?: string;
  /** Additional CSS classes to apply */
  className?: string;
  /** Target attribute for links */
  target?: "_blank" | "_self" | "_parent" | "_top";
  /** Relationship attribute for links */
  rel?: string;
  /** Visual variant style - all WCAG AAA compliant */
  variant?: "primary" | "secondary" | "outline" | "text";
  /** Size with minimum touch targets for accessibility */
  size?: "sm" | "md" | "lg";
  /** Inline style attribute for dynamic styling with CSS variables */
  style?: string;
  /** Optional icon name for astro-icon (e.g., "mdi:home", "heroicons:star") */
  icon?: string;
}

const {
  href,
  type = "button",
  disabled = false,
  ariaLabel,
  className: extraClasses = "",
  target = "_self",
  rel,
  variant = "primary",
  size = "md",
  style,
  icon,
} = Astro.props;

// Ensure proper rel attribute for external links
const isExternal = target === "_blank";
const finalRel = isExternal ? `noopener noreferrer ${rel || ""}`.trim() : rel;

// Get translated text for external link indicator
const externalLinkText = t("nav.openNewWindow");

// Build CSS classes with BEM methodology using modern array methods
const baseClass = "button-link";
const variantClass = `${baseClass}--${variant}`;
const sizeClass = `${baseClass}--${size}`;
const disabledClass = disabled ? `${baseClass}--disabled` : "";
const finalClasses = [baseClass, variantClass, sizeClass, disabledClass, extraClasses]
  .filter(Boolean)
  .join(" ");
---

{
  href ? (
    <a
      href={href}
      class={finalClasses}
      aria-label={
        ariaLabel ? `${ariaLabel}${isExternal ? ` (${externalLinkText})` : ""}` : undefined
      }
      target={target}
      rel={finalRel}
      style={style}
      {...(disabled ? { "aria-disabled": "true", tabindex: "-1" } : {})}
    >
      {icon && <Icon name={icon} class="button-link__icon" />}
      <slot />
      {isExternal && <span class="sr-only"> ({externalLinkText})</span>}
    </a>
  ) : (
    <button
      type={type}
      disabled={disabled}
      class={finalClasses}
      aria-label={ariaLabel}
      style={style}
    >
      {icon && <Icon name={icon} class="button-link__icon" />}
      <slot />
    </button>
  )
}

<style lang="scss">
  /* ======================================
   * BUTTON LINK COMPONENT STYLES
   * Responsive design with global.css variables
   * WCAG AAA compliant - Zero hardcoded values
   * ====================================== */

  // SCSS Variables for better maintainability
  $button-transition-duration: var(--animation-duration-normal);
  $button-transform-duration: var(--animation-duration-fast);
  $button-bg-duration: var(--animation-duration-fast);
  $button-hover-transform: translateY(var(--animation-y-offset-small));
  $button-active-transform: scale(var(--animation-scale-hover));
  $button-focus-ring: var(--focus-ring);
  $button-focus-outline: var(--focus-outline);
  $button-focus-offset: var(--focus-ring-offset);

  // Breakpoint mixins for responsive design
  @mixin mobile-up {
    @media (min-width: 48em) {
      @content;
    }
  }

  @mixin mobile-only {
    @media (max-width: 47.9375em) {
      @content;
    }
  }

  @mixin touch-device {
    @media (hover: none) and (pointer: coarse) {
      @content;
    }
  }

  @mixin high-contrast {
    @media (prefers-contrast: high) {
      @content;
    }
  }

  @mixin reduced-motion {
    @media (prefers-reduced-motion: reduce) {
      @content;
    }
  }

  @mixin container-query {
    @container (min-width: 20rem) {
      @content;
    }
  }

  .button-link {
    // Base button styling using global CSS variables
    display: inline-flex;
    align-items: center;
    justify-content: center;
    border: none;
    border-radius: var(--radius-lg);
    font-weight: var(--font-bold);
    text-decoration: none;
    cursor: pointer;
    position: relative;
    min-width: var(--min-touch-size);
    min-height: var(--min-touch-size);
    line-height: var(--leading-normal);
    letter-spacing: var(--letter-spacing-base);
    font-family: var(--font-family-primary);

    // Performance optimizations
    contain: layout style;
    will-change: transform, background-color;
    transform: translateZ(0);

    // Smooth transitions
    transition: {
      all: $button-transition-duration;
      transform: $button-transform-duration;
      background-color: $button-bg-duration;
    }

    // Size variants with responsive adjustments
    &--sm {
      padding: var(--space-sm) var(--space-md);
      font-size: var(--text-sm);

      @include mobile-up {
        padding: var(--space-md) var(--space-lg);
        font-size: var(--text-base);
      }
    }

    &--md {
      padding: var(--space-md) var(--space-lg);
      font-size: var(--text-base);

      @include mobile-up {
        padding: var(--space-lg) var(--space-xl);
        font-size: var(--text-lg);
      }
    }

    &--lg {
      padding: var(--space-lg) var(--space-xl);
      font-size: var(--text-lg);

      @include mobile-up {
        padding: var(--space-xl) var(--space-2xl);
        font-size: var(--text-xl);
      }
    }

    // Primary variant
    &--primary {
      background: var(--btn-primary-bg);
      color: var(--btn-primary-text);
      border: var(--border-width-thin) solid transparent;
      box-shadow: var(--card-shadow);

      &:hover:not([aria-disabled="true"]) {
        background: var(--btn-primary-hover);
        box-shadow: var(--card-shadow-hover);
        transform: $button-hover-transform;
      }

      &:active:not([aria-disabled="true"]) {
        transform: $button-active-transform;
        transition: all $button-transform-duration;
      }
    }

    // Secondary variant
    &--secondary {
      background: var(--btn-secondary-bg);
      color: var(--btn-secondary-text);
      border: var(--border-width-thin) solid var(--btn-secondary-border);

      &:hover:not([aria-disabled="true"]) {
        background: var(--btn-secondary-hover);
        border-color: var(--border-focus);
        transform: $button-hover-transform;
      }

      &:active:not([aria-disabled="true"]) {
        transform: $button-active-transform;
        transition: all $button-transform-duration;
      }
    }

    // Outline variant
    &--outline {
      background: transparent;
      color: var(--text-primary);
      border: var(--border-width-thick) solid var(--border-primary);

      &:hover:not([aria-disabled="true"]) {
        background: var(--bg-tertiary);
        border-color: var(--border-focus);
        color: var(--interactive-primary);
        transform: $button-hover-transform;
      }

      &:active:not([aria-disabled="true"]) {
        transform: $button-active-transform;
        transition: all $button-transform-duration;
      }
    }

    // Text variant
    &--text {
      background: transparent;
      color: var(--interactive-primary);
      border: none;
      text-decoration: underline;
      text-decoration-thickness: var(--text-decoration-thickness);
      text-underline-offset: var(--text-underline-offset);

      &:hover:not([aria-disabled="true"]) {
        color: var(--interactive-primary-hover);
        text-decoration-color: var(--interactive-primary-hover);
        transform: $button-hover-transform;
      }

      &:active:not([aria-disabled="true"]) {
        color: var(--interactive-primary-active);
        transform: $button-active-transform;
        transition: all $button-transform-duration;
      }
    }

    // Disabled state
    &--disabled,
    &[aria-disabled="true"] {
      opacity: var(--opacity-disabled);
      cursor: not-allowed;
      pointer-events: none;
      filter: grayscale(var(--filter-grayscale-half));
    }

    // Icon styling with responsive sizing
    &__icon {
      width: var(--icon-size-sm);
      height: var(--icon-size-sm);
      flex-shrink: 0;
      margin-right: var(--space-md);

      @include mobile-up {
        width: var(--icon-size-md);
        height: var(--icon-size-md);
      }
    }

    // Enhanced focus state for WCAG AAA
    &:focus-visible {
      outline: $button-focus-outline;
      outline-offset: $button-focus-offset;
      box-shadow: $button-focus-ring;
    }

    // High contrast mode support
    @include high-contrast {
      border-width: var(--border-width-enhanced);

      &:focus-visible {
        outline-width: var(--border-width-enhanced);
      }
    }

    // Reduced motion support
    @include reduced-motion {
      transition: none;

      &:hover,
      &:active {
        transform: none;
      }
    }

    // Touch device optimization
    @include touch-device {
      &:hover {
        transform: none;
      }
    }

    // Mobile responsive width adjustments
    @include mobile-only {
      width: 100%;
      max-width: 100%;

      // Allow smaller buttons on very small screens
      &--sm {
        min-width: auto;
        padding: var(--space-xs) var(--space-sm);
      }
    }

    // Container query support for better responsive behavior
    @include container-query {
      width: auto;
      max-width: none;
    }
  }

  // Screen reader only content
  .sr-only {
    position: absolute;
    width: var(--sr-only-width);
    height: var(--sr-only-height);
    padding: 0;
    margin: var(--sr-only-margin);
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
</style>
