---
/**
 * ButtonLink Component - Simple & Clean
 *
 * A versatile component that renders either a button or link with consistent styling.
 * Using Tailwind CSS 4 with tailwind-variants for maintainability.
 *
 * @component
 * @example
 * ```astro
 * <!-- As a link -->
 * <ButtonLink href="/game" variant="primary" size="md">
 *   Start Game
 * </ButtonLink>
 *
 * <!-- As a button with icon -->
 * <ButtonLink type="button" variant="secondary" icon="mdi:close" ariaLabel="Close modal">
 *   Close
 * </ButtonLink>
 *
 * <!-- With icon only -->
 * <ButtonLink href="/settings" icon="mdi:settings" ariaLabel="Open settings" />
 * ```
 */
import { tv } from "tailwind-variants";
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import { Icon } from "astro-icon/components";

// Get current language and translations
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(String(lang));

interface Props {
  /** URL for the link. If omitted, a button element is rendered instead */
  href?: string;
  /** Button type attribute, only used when rendering as a button */
  type?: "button" | "submit" | "reset";
  /** Whether the button/link is disabled */
  disabled?: boolean;
  /** Accessible label for the button/link (important for screen readers) */
  ariaLabel?: string;
  /** Additional CSS classes to apply */
  className?: string;
  /** Target attribute for links */
  target?: "_blank" | "_self" | "_parent" | "_top";
  /** Relationship attribute for links */
  rel?: string;
  /** Visual variant style */
  variant?: "primary" | "secondary" | "outline" | "text";
  /** Size with minimum touch targets for accessibility */
  size?: "sm" | "md" | "lg";
  /** Inline style attribute for dynamic styling */
  style?: string;
  /** Optional icon name for astro-icon (e.g., "mdi:home", "heroicons:star") */
  icon?: string;
}

const {
  href,
  type = "button",
  disabled = false,
  ariaLabel,
  className = "",
  target = "_self",
  rel,
  variant = "primary",
  size = "md",
  style,
  icon,
} = Astro.props;

// Ensure proper rel attribute for external links
const isExternal = target === "_blank";
const finalRel = isExternal ? `noopener noreferrer ${rel || ""}`.trim() : rel;

// Get translated text for external link indicator
const externalLinkText = t("nav.openNewWindow");

// Tailwind Variants configuration for the button component
const buttonVariants = tv({
  base: [
    // Base button styling
    "inline-flex items-center justify-center border-none rounded-lg font-bold",
    "text-decoration-none cursor-pointer relative min-w-[44px] min-h-[44px]",
    "leading-normal tracking-base font-primary transition-all duration-300",
    // Focus states
    "focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-500",
    // Disabled state
    "disabled:opacity-50 disabled:cursor-not-allowed disabled:pointer-events-none",
    // Mobile responsive
    "w-full max-w-full sm:w-auto sm:max-w-none",
  ].join(" "),

  variants: {
    size: {
      sm: ["px-3 py-2 text-sm sm:px-4 sm:py-3 sm:text-base", "min-w-[44px] min-h-[44px]"].join(" "),
      md: ["px-4 py-3 text-base sm:px-6 sm:py-4 sm:text-lg", "min-w-[48px] min-h-[48px]"].join(" "),
      lg: ["px-6 py-4 text-lg sm:px-8 sm:py-6 sm:text-xl", "min-w-[52px] min-h-[52px]"].join(" "),
    },

    variant: {
      primary: [
        "bg-blue-600 text-white shadow-lg border border-transparent",
        "hover:bg-blue-700 hover:shadow-xl hover:-translate-y-0.5",
        "active:scale-95 active:transition-transform active:duration-100",
        "disabled:hover:bg-blue-600 disabled:hover:shadow-lg disabled:hover:translate-y-0",
      ].join(" "),
      secondary: [
        "bg-gray-200 text-gray-800 border border-gray-300",
        "hover:bg-gray-300 hover:border-blue-500 hover:-translate-y-0.5",
        "active:scale-95 active:transition-transform active:duration-100",
        "disabled:hover:bg-gray-200 disabled:hover:border-gray-300 disabled:hover:translate-y-0",
      ].join(" "),
      outline: [
        "bg-transparent text-gray-900 border-2 border-gray-600",
        "hover:bg-gray-100 hover:border-blue-500 hover:text-blue-600 hover:-translate-y-0.5",
        "active:scale-95 active:transition-transform active:duration-100",
        "disabled:hover:bg-transparent disabled:hover:border-gray-600 disabled:hover:text-gray-900 disabled:hover:translate-y-0",
      ].join(" "),
      text: [
        "bg-transparent text-blue-600 border-none underline underline-offset-2",
        "hover:text-blue-700 hover:underline-offset-4 hover:-translate-y-0.5",
        "active:scale-95 active:transition-transform active:duration-100",
        "disabled:hover:text-blue-600 disabled:hover:underline-offset-2 disabled:hover:translate-y-0",
      ].join(" "),
    },
  },

  defaultVariants: {
    size: "md",
    variant: "primary",
  },
});

// Generate classes using tailwind-variants
const classes = buttonVariants({
  size,
  variant,
  className,
});

// Icon classes
const iconClasses = ["size-5 sm:size-6 flex-shrink-0 mr-3", "text-current"].join(" ");

// Screen reader only classes
const srOnlyClasses = [
  "absolute w-px h-px p-0 -m-px overflow-hidden",
  "whitespace-nowrap border-0",
].join(" ");
---

{
  href ? (
    <a
      href={href}
      class={classes}
      aria-label={
        ariaLabel ? `${ariaLabel}${isExternal ? ` (${externalLinkText})` : ""}` : undefined
      }
      target={target}
      rel={finalRel}
      style={style}
      {...(disabled ? { "aria-disabled": "true", tabindex: "-1" } : {})}
    >
      {icon && <Icon name={icon} class={iconClasses} />}
      <slot />
      {isExternal && <span class={srOnlyClasses}> ({externalLinkText})</span>}
    </a>
  ) : (
    <button type={type} disabled={disabled} class={classes} aria-label={ariaLabel} style={style}>
      {icon && <Icon name={icon} class={iconClasses} />}
      <slot />
    </button>
  )
}
