---
/**
 * ButtonLink Component - WCAG AAA Compliant Interactive Element
 *
 * A versatile and accessible component that renders either a button or a link (anchor)
 * with consistent styling. Complies with WCAG AAA standards and follows
 * performance best practices.
 *
 * Features:
 * - WCAG AAA 2.2 compliance with 7:1 contrast ratios
 * - Performance optimized with GPU acceleration
 * - Full keyboard navigation support
 * - Screen reader friendly with proper ARIA attributes
 * - High contrast and forced colors mode support
 * - Reduced motion preferences respected
 * - CSS variables only - zero hardcoded values
 * - Touch-optimized with minimum 44px targets
 * - Full internationalization support
 * - Optional icon support with astro-icon
 *
 * @component
 * @example
 * ```astro
 * <!-- As a link -->
 * <ButtonLink href="/game" variant="primary" size="md">
 *   Start Game
 * </ButtonLink>
 *
 * <!-- As a button with icon -->
 * <ButtonLink type="button" variant="secondary" icon="mdi:close" ariaLabel="Close modal">
 *   Close
 * </ButtonLink>
 *
 * <!-- With icon only -->
 * <ButtonLink href="/settings" icon="mdi:settings" ariaLabel="Open settings" />
 * ```
 */
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import { Icon } from "astro-icon/components";

// Get current language and translations
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(String(lang));

interface Props {
  /** URL for the link. If omitted, a button element is rendered instead */
  href?: string;
  /** Button type attribute, only used when rendering as a button */
  type?: "button" | "submit" | "reset";
  /** Whether the button/link is disabled */
  disabled?: boolean;
  /** Accessible label for the button/link (important for screen readers) */
  ariaLabel?: string;
  /** Additional CSS classes to apply */
  className?: string;
  /** Target attribute for links */
  target?: "_blank" | "_self" | "_parent" | "_top";
  /** Relationship attribute for links */
  rel?: string;
  /** Visual variant style - all WCAG AAA compliant */
  variant?: "primary" | "secondary" | "outline" | "text";
  /** Size with minimum touch targets for accessibility */
  size?: "sm" | "md" | "lg";
  /** Inline style attribute for dynamic styling with CSS variables */
  style?: string;
  /** Optional icon name for astro-icon (e.g., "mdi:home", "heroicons:star") */
  icon?: string;
}

const {
  href,
  type = "button",
  disabled = false,
  ariaLabel,
  className: extraClasses = "",
  target = "_self",
  rel,
  variant = "primary",
  size = "md",
  style,
  icon,
} = Astro.props;

// Ensure proper rel attribute for external links
const isExternal = target === "_blank";
const finalRel = isExternal ? `noopener noreferrer ${rel || ""}`.trim() : rel;

// Get translated text for external link indicator
const externalLinkText = t("nav.openNewWindow");

// Build CSS classes with BEM methodology
const baseClass = "button-link";
const variantClass = `${baseClass}--${variant}`;
const sizeClass = `${baseClass}--${size}`;
const disabledClass = disabled ? `${baseClass}--disabled` : "";
const finalClasses = [baseClass, variantClass, sizeClass, disabledClass, extraClasses]
  .filter(Boolean)
  .join(" ");
---

{
  href ? (
    <a
      href={href}
      class={finalClasses}
      aria-label={
        ariaLabel ? `${ariaLabel}${isExternal ? ` (${externalLinkText})` : ""}` : undefined
      }
      target={target}
      rel={finalRel}
      style={style}
      {...(disabled ? { "aria-disabled": "true", tabindex: "-1" } : {})}
    >
      {icon && <Icon name={icon} class="button-link__icon" />}
      <slot />
      {isExternal && <span class="sr-only"> ({externalLinkText})</span>}
    </a>
  ) : (
    <button
      type={type}
      disabled={disabled}
      class={finalClasses}
      aria-label={ariaLabel}
      style={style}
    >
      {icon && <Icon name={icon} class="button-link__icon" />}
      <slot />
    </button>
  )
}

<style>
  /* ======================================
   * BUTTON LINK COMPONENT STYLES
   * Maximum CSS variables usage from global.css - Complete DRY optimization
   * WCAG AAA 2.2 compliant - Zero hardcoded values
   * ====================================== */

  .button-link {
    /* Base button styling using only CSS variables */
    display: inline-flex;
    align-items: center;
    justify-content: center;
    border: none;
    border-radius: var(--radius-lg);
    font-weight: var(--font-bold);
    text-decoration: none;
    cursor: pointer;
    transition:
      all var(--animation-duration-normal),
      transform var(--animation-duration-fast),
      background-color var(--animation-duration-fast);
    position: relative;
    min-width: var(--min-touch-size);
    min-height: var(--min-touch-size);
    line-height: var(--leading-normal);
    letter-spacing: var(--letter-spacing-base);

    /* Performance optimizations using CSS variables */
    contain: layout style;
    will-change: transform, background-color;
    transform: translateZ(0); /* GPU acceleration */
  }

  /* Sizes - Using semantic spacing variables */
  .button-link--sm {
    padding: var(--space-sm) var(--space-md);
    font-size: var(--text-sm);
  }

  .button-link--md {
    padding: var(--space-md) var(--space-lg);
    font-size: var(--text-base);
  }

  .button-link--lg {
    padding: var(--space-lg) var(--space-xl);
    font-size: var(--text-lg);
  }

  /* Primary variant - Using button system variables */
  .button-link--primary {
    background: var(--btn-primary-bg);
    color: var(--btn-primary-text);
    border: var(--border-width-thin) solid transparent;
    box-shadow: var(--card-shadow);
  }

  .button-link--primary:hover:not([aria-disabled="true"]) {
    background: var(--btn-primary-hover);
    box-shadow: var(--card-shadow-hover);
    transform: translateY(var(--animation-y-offset-small));
  }

  .button-link--primary:active:not([aria-disabled="true"]) {
    transform: scale(var(--animation-scale-hover));
    transition: all var(--animation-duration-fast);
  }

  /* Secondary variant - Using button system variables */
  .button-link--secondary {
    background: var(--btn-secondary-bg);
    color: var(--btn-secondary-text);
    border: var(--border-width-thin) solid var(--btn-secondary-border);
  }

  .button-link--secondary:hover:not([aria-disabled="true"]) {
    background: var(--btn-secondary-hover);
    border-color: var(--border-focus);
    transform: translateY(var(--animation-y-offset-small));
  }

  .button-link--secondary:active:not([aria-disabled="true"]) {
    transform: scale(var(--animation-scale-hover));
    transition: all var(--animation-duration-fast);
  }

  /* Outline variant - Using semantic color system */
  .button-link--outline {
    background: transparent;
    color: var(--text-primary);
    border: var(--border-width-thick) solid var(--border-primary);
  }

  .button-link--outline:hover:not([aria-disabled="true"]) {
    background: var(--bg-tertiary);
    border-color: var(--border-focus);
    color: var(--interactive-primary);
    transform: translateY(var(--animation-y-offset-small));
  }

  .button-link--outline:active:not([aria-disabled="true"]) {
    transform: scale(var(--animation-scale-hover));
    transition: all var(--animation-duration-fast);
  }

  /* Text variant - Using text decoration system */
  .button-link--text {
    background: transparent;
    color: var(--interactive-primary);
    border: none;
    text-decoration: underline;
    text-decoration-thickness: var(--text-decoration-thickness);
    text-underline-offset: var(--text-underline-offset);
  }

  .button-link--text:hover:not([aria-disabled="true"]) {
    color: var(--interactive-primary-hover);
    text-decoration-color: var(--interactive-primary-hover);
    transform: translateY(var(--animation-y-offset-small));
  }

  .button-link--text:active:not([aria-disabled="true"]) {
    color: var(--interactive-primary-active);
    transform: scale(var(--animation-scale-hover));
    transition: all var(--animation-duration-fast);
  }

  /* Disabled state - using semantic variables */
  .button-link--disabled,
  .button-link[aria-disabled="true"] {
    opacity: var(--opacity-disabled);
    cursor: not-allowed;
    pointer-events: none;
    filter: grayscale(var(--filter-grayscale-half));
  }

  /* Icon styling using icon system variables */
  .button-link__icon {
    width: var(--icon-size-sm);
    height: var(--icon-size-sm);
    flex-shrink: 0;
  }

  /* Icon spacing when used with text */
  .button-link__icon + * {
    margin-left: var(--space-sm);
  }

  /* Enhanced focus state for WCAG AAA */
  .button-link:focus-visible {
    outline: var(--focus-outline);
    outline-offset: var(--focus-ring-offset);
    box-shadow: var(--focus-ring);
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .button-link {
      border-width: var(--border-width-enhanced);
    }

    .button-link:focus-visible {
      outline-width: var(--border-width-enhanced);
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .button-link {
      transition: none;
    }

    .button-link:hover,
    .button-link:active {
      transform: none;
    }
  }

  /* Touch device optimization */
  @media (hover: none) and (pointer: coarse) {
    .button-link:hover {
      transform: none;
    }
  }

  /* Screen reader only content using accessibility variables */
  .sr-only {
    position: absolute;
    width: var(--sr-only-width);
    height: var(--sr-only-height);
    padding: 0;
    margin: var(--sr-only-margin);
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
</style>
