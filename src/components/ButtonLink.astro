---
interface Props {
  href?: string;
  type?: "button" | "submit" | "reset";
  disabled?: boolean;
  ariaLabel?: string;
  className?: string;
  target?: "_blank" | "_self" | "_parent" | "_top";
  rel?: string;
}

const {
  href,
  type = "button",
  disabled = false,
  ariaLabel,
  className: extraClasses = "",
  target = "_self",
  rel,
} = Astro.props;

// Ensure proper rel attribute for external links
const isExternal = target === "_blank";
const finalRel = isExternal ? `noopener noreferrer ${rel || ""}`.trim() : rel;

const baseClasses =
  "inline-flex min-h-[48px] min-w-[48px] items-center justify-center rounded-lg px-6 py-3 font-bold text-white bg-sky-700 transition-all duration-300 hover:bg-sky-600 hover:shadow-lg hover:shadow-sky-500/20 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-sky-300 focus-visible:ring-offset-2 focus-visible:ring-offset-zinc-900 active:scale-95 disabled:pointer-events-none disabled:opacity-50";

const finalClasses = `${baseClasses} ${extraClasses}`.trim();
---

{
  href ? (
    <a
      href={href}
      class={finalClasses}
      aria-label={`${ariaLabel}${isExternal ? " (opens in new tab)" : ""}`}
      target={target}
      rel={finalRel}
    >
      <slot />
      {isExternal && <span class="sr-only"> (opens in new tab)</span>}
    </a>
  ) : (
    <button
      type={type}
      disabled={disabled}
      class={finalClasses}
      aria-label={ariaLabel}
    >
      <slot />
    </button>
  )
}
