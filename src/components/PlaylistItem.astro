---
/**
 * PlaylistItem Component
 *
 * A responsive, accessible card component for music playlists and categories.
 * Supports interactive and disabled states with visual indicators.
 *
 */
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import { Picture } from "astro:assets";
import Headline from "@components/Headline.astro";
import Paragraph from "@components/Paragraph.astro";

/**
 * Props for the PlaylistItem component
 * @interface Props
 */
interface Props {
  /** Title text displayed as the main heading */
  headline: string;
  /** Optional secondary text displayed below the headline */
  subheadline?: string;
  /** Path to the image representing this playlist/category */
  image: string;
  /** Whether this item is disabled/unavailable (shows "coming soon" overlay) */
  isDisabled?: boolean;
  /** Alternative text description for the image (for accessibility) */
  imageAlt: string;
  /** URL for navigation when the item is clicked (required for semantic navigation) */
  href?: string;
  /** Optional ID for ARIA references */
  id?: string;
}

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const {
  headline = "",
  subheadline = "",
  image,
  isDisabled = false,
  imageAlt = "",
  href = "#", // Default value for WCAG compliance
  id = crypto.randomUUID(), // Generate unique ID for ARIA references
} = Astro.props;

// Enhanced, more specific IDs for ARIA references
const headlineId = `playlist-title-${id}`;
const descriptionId = `playlist-desc-${id}`;

// Semantically correct element for PlaylistItem based on disabled status
const Element = isDisabled ? "article" : "a";

// Enhanced status announcement for screen readers
const statusAnnouncementText = isDisabled
  ? t("playlist.item.status.changed.disabled")
  : t("playlist.item.status.changed.available");
---

<!-- Enhanced Screen Reader Announcements (Priority 2) -->
<div aria-live="polite" aria-atomic="true" class="sr-only" data-status-announcement>
  {statusAnnouncementText}
</div>

<Element
  class={`relative flex flex-col h-full min-h-[200px] w-full overflow-hidden rounded-lg border-2 border-purple-700 bg-gradient-to-b from-gray-800 to-gray-900 shadow-lg transition-all duration-300 text-decoration-none text-inherit sm:min-h-[250px] sm:rounded-xl lg:min-h-[280px] ${
    isDisabled
      ? "cursor-default border-gray-700 opacity-60 grayscale"
      : "cursor-pointer hover:border-purple-500 hover:shadow-2xl hover:-translate-y-1 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 active:scale-98"
  }`}
  role={isDisabled ? "listitem" : "link"}
  aria-labelledby={headlineId}
  aria-describedby={descriptionId}
  aria-disabled={isDisabled || undefined}
  href={isDisabled ? undefined : href}
  tabindex={isDisabled ? "-1" : "0"}
>
  {
    isDisabled && (
      <div
        class="absolute inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm p-4 text-center"
        aria-label={t("playlist.item.unavailable")}
        role="status"
      >
        <span class="sr-only">{t("playlist.item.status")}:</span>
        <span class="rounded-full border border-gray-300 bg-gray-700 px-3 py-2 text-white font-medium text-sm transition-all duration-200">
          {t("playlist.item.coming.soon")}
        </span>
      </div>
    )
  }

  <div
    class="absolute top-0 left-0 right-0 h-1 bg-gradient-to-r from-purple-700 via-purple-500 to-purple-700"
    aria-hidden="true"
  >
  </div>

  <div class="relative aspect-video w-full overflow-hidden">
    <span
      class="absolute top-3 right-3 z-10 rounded-full bg-purple-700 px-2 py-1 text-white text-xs font-medium transition-all duration-200 sm:text-sm sm:px-3 sm:py-2"
    >
      {isDisabled ? t("playlist.item.coming.soon") : t("category.play")}
    </span>

    <Picture
      class={`absolute top-0 left-0 w-full h-full object-cover ${isDisabled ? "opacity-60 grayscale" : ""}`}
      src={image}
      width={320}
      height={180}
      widths={[400, 600, 800, 1200]}
      sizes="(max-width: 640px) 400px, (max-width: 1024px) 600px, (max-width: 1280px) 800px, 1200px"
      formats={["avif", "webp", "jpg"]}
      alt={imageAlt}
      loading="lazy"
      decoding="async"
      fetchpriority={isDisabled ? "low" : "auto"}
      quality={85}
    />
  </div>

  <div class="flex flex-col flex-grow p-4">
    <Headline level="h3" textAlign="center">
      {headline}
    </Headline>

    {
      subheadline && (
        <div id={descriptionId} class="relative">
          <div class="mx-auto mb-3 w-1/4 h-0.5 bg-purple-500 transition-all duration-300 sm:mb-4" />
          <Paragraph textAlign="center">{subheadline}</Paragraph>
        </div>
      )
    }
  </div>

  <div
    class="absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r from-purple-600 via-blue-600 to-purple-600 transform scale-x-0 origin-left transition-transform duration-300 group-hover:scale-x-100"
    aria-hidden="true"
  >
  </div>
</Element>
