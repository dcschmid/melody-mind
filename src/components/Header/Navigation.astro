---
/**
 * @file Navigation.astro
 * @description Main navigation component for the MelodyMind application
 * This component handles the responsive navigation menu, language picker,
 * and authentication-aware navigation links with full accessibility support.
 */
import { Icon } from "astro-icon/components";
import { When } from "@astropub/flow";
import { getRelativeLocaleUrl } from "astro:i18n";
import LanguagePicker from "@components/LanguagePicker.astro";
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import AchievementBadge from "../Achievements/AchievementBadge.astro";

/**
 * Props interface for the Navigation component
 * @interface Props
 * @property {boolean} [showHeaderIcons=true] - Whether to display the header icons in the navigation menu
 */
interface Props {
  showHeaderIcons?: boolean;
}

const { showHeaderIcons = true } = Astro.props;
const lang = getLangFromUrl(Astro.url) as string;
const t = useTranslations(lang);

// We can no longer check the authentication status server-side,
// as we now use localStorage. Instead, we initially set it to false
// and update the status client-side.
const isAuthenticated = false; // Will be overwritten client-side
---

<!-- Main header with navigation and language picker -->
<header role="banner" class="flex flex-row justify-between md-6 rounded-lg">
  <LanguagePicker />
  <nav
    aria-label={t("nav.ariaLabel") || "Main navigation"}
    class="flex flex-wrap gap-3 items-center justify-between"
  >
    <div class="slot left flex gap-3 items-center flex-1 justify-center">
      <button
        class="hamburger relative flex items-center justify-center gap-2 min-h-12 min-w-12
               py-2 px-4 rounded-lg bg-sky-500 text-zinc-900 font-medium
               shadow-md transition-all duration-300
               border-2 border-sky-400
               hover:bg-sky-400 hover:shadow-lg
               focus-visible:outline focus-visible:outline-sky-300 focus-visible:outline-offset-2"
        aria-label={t("nav.menu.open")}
        aria-expanded="false"
        aria-controls="main-menu"
        id="menu-toggle"
      >
        <Icon
          name="menu"
          width={28}
          height={28}
          aria-hidden="true"
          class="w-7 h-7"
        />

        <span class="font-medium sr-only sm:not-sr-only"
          >{t("nav.menu.text")}</span
        >
      </button>

      <div
        id="menu-backdrop"
        class="fixed inset-0 z-30 bg-black/70 backdrop-blur-sm invisible opacity-0 transition-opacity duration-300
               data-[state=open]:visible data-[state=open]:opacity-100"
        aria-hidden="true"
      >
      </div>

      <div
        id="main-menu"
        class="fixed inset-y-0 left-1/2 -translate-x-1/2 z-40 w-[90%] max-w-md bg-zinc-800 rounded-xl
               shadow-2xl -translate-y-[100%] my-4 transition-transform duration-300 ease-out pt-16 pb-8
               overflow-y-auto invisible opacity-0 data-[state=open]:translate-y-0
               data-[state=open]:visible data-[state=open]:opacity-100"
        role="dialog"
        aria-modal="true"
        aria-labelledby="menu-title"
      >
        <button
          class="close-menu absolute top-4 right-4 flex items-center justify-center w-12 h-12
                 rounded-full bg-zinc-700 text-zinc-100 hover:bg-zinc-600
                 transition-colors duration-200 focus-visible:outline focus-visible:outline-sky-300 focus-visible:outline-offset-2"
          aria-label={t("nav.menu.close")}
        >
          <Icon
            name="close"
            width={28}
            height={28}
            aria-hidden="true"
            class="w-7 h-7 text-zinc-50 fill-inherit stroke-zinc-100"
          />
        </button>

        <!-- Menu title -->
        <div class="text-center mb-6">
          <h2
            id="menu-title"
            class="text-xl font-bold text-balance text-zinc-50"
          >
            {t("nav.title")}
          </h2>
        </div>

        <!-- Status announcer for screen readers - updates when menu opens/closes -->
        <div
          aria-live="polite"
          aria-atomic="true"
          class="sr-only"
          id="menu-status-announcer"
        >
        </div>

        <!-- Navigation menu items -->
        <ul class="flex flex-col space-y-4 px-4" role="menu">
          <!-- Home link -->
          <li role="none">
            <a
              href={getRelativeLocaleUrl(lang, "gamehome")}
              class="flex items-center gap-4 w-full py-4 px-5 rounded-lg
                    font-medium no-underline transition-all
                    duration-200 hover:bg-zinc-700 hover:translate-x-1
                    focus-visible:bg-zinc-700 focus-visible:outline
                    focus-visible:outline-sky-300 focus-visible:outline-offset-2
                    text-zinc-100"
              role="menuitem"
            >
              <Icon
                name="home"
                width={28}
                height={28}
                aria-hidden="true"
                class="w-7 h-7"
              />
              <span>{t("nav.menu.home")}</span>
            </a>
          </li>

          <!-- Conditional menu items based on showHeaderIcons prop -->
          <When test={showHeaderIcons}>
            <!-- Knowledge link -->
            <li role="none">
              <a
                href={getRelativeLocaleUrl(lang, "knowledge")}
                class="flex items-center gap-4 w-full py-4 px-5 rounded-lg
                      font-medium no-underline transition-all
                      duration-200 hover:bg-zinc-700 hover:translate-x-1
                      focus-visible:bg-zinc-700 focus-visible:outline
                      focus-visible:outline-sky-300 focus-visible:outline-offset-2
                      text-zinc-100"
                role="menuitem"
              >
                <Icon
                  name="book"
                  width={28}
                  height={28}
                  aria-hidden="true"
                  class="w-7 h-7"
                />
                <span>{t("knowledge.title")}</span>
              </a>
            </li>

            <!-- Playlists link -->
            <li role="none">
              <a
                href={getRelativeLocaleUrl(lang, "playlists")}
                class="flex items-center gap-4 w-full py-4 px-5 rounded-lg
                      font-medium no-underline transition-all
                      duration-200 hover:bg-zinc-700 hover:translate-x-1
                      focus-visible:bg-zinc-700 focus-visible:outline
                      focus-visible:outline-sky-300 focus-visible:outline-offset-2
                      text-zinc-100"
                role="menuitem"
              >
                <Icon
                  name="music-note"
                  width={28}
                  height={28}
                  aria-hidden="true"
                  class="w-7 h-7"
                />
                <span>{t("playlist.page.heading")}</span>
              </a>
            </li>

            <!-- Rules link -->
            <li role="none">
              <a
                href={getRelativeLocaleUrl(lang, "rules")}
                class="flex items-center gap-4 w-full py-4 px-5 rounded-lg
                      font-medium no-underline transition-all
                      duration-200 hover:bg-zinc-700 hover:translate-x-1
                      focus-visible:bg-zinc-700 focus-visible:outline
                      focus-visible:outline-sky-300 focus-visible:outline-offset-2
                      text-zinc-100"
                role="menuitem"
              >
                <Icon
                  name="question"
                  width={28}
                  height={28}
                  aria-hidden="true"
                  class="w-7 h-7"
                />
                <span>{t("nav.menu.rules")}</span>
              </a>
            </li>

            <!-- Highscores link -->
            <li role="none">
              <a
                href={getRelativeLocaleUrl(lang, "highscores")}
                class="flex items-center gap-4 w-full py-4 px-5 rounded-lg
                      font-medium no-underline transition-all
                      duration-200 hover:bg-zinc-700 hover:translate-x-1
                      focus-visible:bg-zinc-700 focus-visible:outline
                      focus-visible:outline-sky-300 focus-visible:outline-offset-2
                      text-zinc-100"
                role="menuitem"
              >
                <Icon
                  name="trophy"
                  width={28}
                  height={28}
                  aria-hidden="true"
                  class="w-7 h-7"
                />
                <span>{t("nav.menu.highscores")}</span>
              </a>
            </li>

            <!-- Achievements link -->
            <li role="none">
              <a
                href={getRelativeLocaleUrl(lang, "achievements")}
                class="flex items-center gap-4 w-full py-4 px-5 rounded-lg
                      font-medium no-underline transition-all
                      duration-200 hover:bg-zinc-700 hover:translate-x-1
                      focus-visible:bg-zinc-700 focus-visible:outline
                      focus-visible:outline-sky-300 focus-visible:outline-offset-2
                      text-zinc-100"
                role="menuitem"
                aria-label={t("achievements.nav.aria")}
              >
                <div class="relative">
                  <Icon
                    name="award"
                    width={28}
                    height={28}
                    aria-hidden="true"
                    class="w-7 h-7"
                  />
                  <AchievementBadge lang={lang} />
                </div>
                <span>{t("achievements.nav.link")}</span>
              </a>
            </li>
          </When>

          <!-- Divider -->
          <div class="w-full h-px bg-zinc-700 my-4"></div>

          <!-- Profile link - only shown when authenticated -->
          <li role="none" id="profile-container" class="hidden">
            <a
              href={getRelativeLocaleUrl(lang, "profile")}
              class="flex items-center gap-4 w-full py-4 px-5 rounded-lg
                    font-medium no-underline transition-all
                    duration-200 hover:bg-zinc-700 hover:translate-x-1
                    focus-visible:bg-zinc-700 focus-visible:outline
                    focus-visible:outline-sky-300 focus-visible:outline-offset-2
                    text-zinc-100"
              role="menuitem"
              aria-label={t("profile.nav.aria")}
            >
              <Icon
                name="user"
                width={28}
                height={28}
                aria-hidden="true"
                class="w-7 h-7"
              />
              <span>{t("profile.nav.link")}</span>
            </a>
          </li>

          <!-- Logout button - initially hidden, shown dynamically when authenticated -->
          <li role="none" id="logout-container" class="hidden">
            <button
              id="logout-button"
              class="flex items-center gap-4 w-full py-4 px-5 rounded-lg
                    font-medium no-underline transition-all
                    duration-200 hover:bg-zinc-700 hover:translate-x-1
                    focus-visible:bg-zinc-700 focus-visible:outline
                    focus-visible:outline-sky-300 focus-visible:outline-offset-2
                    text-zinc-100"
              role="menuitem"
              aria-label={t("nav.logout.label")}
            >
              <Icon
                name="logout"
                width={28}
                height={28}
                aria-hidden="true"
                class="w-7 h-7"
              />
              <span>{t("nav.menu.logout")}</span>
            </button>
          </li>

          <!-- Donation section -->
          <div class="px-5">
            <h3 class="text-lg font-bold mb-4 text-zinc-50">
              {t("nav.donate.heading")}
            </h3>
            <div class="flex flex-col gap-3">
              <!-- PayPal donation link -->
              <a
                href="https://www.paypal.me/dcschmid"
                target="_blank"
                rel="noopener noreferrer"
                class="flex items-center justify-center gap-2 py-3 px-4 bg-blue-600 hover:bg-blue-700
                       text-white rounded-lg transition-colors duration-200 font-medium
                       focus-visible:outline focus-visible:outline-sky-300 focus-visible:outline-offset-2"
                aria-label={`${t("nav.donate.paypal")} (${t("nav.openNewWindow")})`}
              >
                <Icon
                  name="paypal"
                  width={24}
                  height={24}
                  aria-hidden="true"
                  class="w-6 h-6"
                />
                <span>{t("nav.donate.paypal")}</span>
              </a>
              <!-- Buy Me a Coffee donation link -->
              <a
                href="https://www.buymeacoffee.com/dcschmid"
                target="_blank"
                rel="noopener noreferrer"
                class="flex items-center justify-center gap-2 py-3 px-4 bg-amber-400 hover:bg-amber-500
                       text-zinc-900 rounded-lg transition-colors duration-200 font-medium
                       focus-visible:outline focus-visible:outline-sky-300 focus-visible:outline-offset-2"
                aria-label={`${t("nav.donate.coffee")} (${t("nav.openNewWindow")})`}
              >
                <Icon
                  name="coffee-cup"
                  width={24}
                  height={24}
                  aria-hidden="true"
                  class="w-6 h-6"
                />
                <span>{t("nav.donate.coffee")}</span>
              </a>
            </div>
          </div>
        </ul>
      </div>
    </div>
  </nav>
</header>

<script>
  /**
   * Navigation Menu Controller
   *
   * Manages the opening, closing and accessibility of the main navigation menu.
   * Implements WCAG AAA compliant focus management and keyboard interactions.
   * Features include:
   * - Focus trapping within the menu for keyboard users
   * - Screen reader announcements via aria-live regions
   * - Proper ARIA attribute management
   * - Support for Escape key to close the menu
   * - Touch interface support via the backdrop
   * - Proper focus restoration after menu closes
   */
  document.addEventListener("DOMContentLoaded", initNavigationMenu);

  /**
   * Initializes the navigation menu and sets up all necessary event listeners
   * This is the main entry point for the navigation functionality
   */
  function initNavigationMenu(): void {
    // Get all required DOM elements
    const menuToggle = document.getElementById(
      "menu-toggle",
    ) as HTMLButtonElement | null;
    const mainMenu = document.getElementById(
      "main-menu",
    ) as HTMLDivElement | null;
    const menuBackdrop = document.getElementById(
      "menu-backdrop",
    ) as HTMLDivElement | null;
    const closeButton = mainMenu?.querySelector(
      ".close-menu",
    ) as HTMLButtonElement | null;
    const statusAnnouncer = document.getElementById(
      "menu-status-announcer",
    ) as HTMLDivElement | null;

    // Ensure all required elements exist before proceeding
    if (!menuToggle || !mainMenu || !menuBackdrop || !closeButton) {
      console.warn(
        "Navigation menu elements not found, menu functionality disabled",
      );
      return;
    }

    // Initialize logout button functionality
    initLogoutButton();

    // Set up event listeners
    menuToggle.addEventListener("click", () =>
      toggleMenu(menuToggle, mainMenu, menuBackdrop, statusAnnouncer),
    );
    closeButton.addEventListener("click", () =>
      toggleMenu(menuToggle, mainMenu, menuBackdrop, statusAnnouncer),
    );
    menuBackdrop.addEventListener("click", () =>
      toggleMenu(menuToggle, mainMenu, menuBackdrop, statusAnnouncer),
    );

    // Close menu with Escape key
    document.addEventListener("keydown", (e) => {
      if (
        e.key === "Escape" &&
        mainMenu.getAttribute("data-state") === "open"
      ) {
        toggleMenu(menuToggle, mainMenu, menuBackdrop, statusAnnouncer);
      }
    });

    // Set up focus trap in the menu
    setupFocusTrap(mainMenu);
  }

  /**
   * Toggles the menu state between open and closed
   * Updates ARIA attributes, visual state, and manages focus
   *
   * @param {HTMLButtonElement} menuToggle - The button that controls the menu
   * @param {HTMLElement} mainMenu - The main menu container
   * @param {HTMLElement} menuBackdrop - The backdrop overlay element
   * @param {HTMLElement} statusAnnouncer - Element for screen reader announcements
   */
  function toggleMenu(
    menuToggle: HTMLButtonElement,
    mainMenu: HTMLElement,
    menuBackdrop: HTMLElement,
    statusAnnouncer?: HTMLElement | null,
  ): void {
    // Get current state and determine new state
    const isExpanded = menuToggle.getAttribute("aria-expanded") === "true";
    const newState = !isExpanded;

    // Update ARIA attributes for accessibility
    menuToggle.setAttribute("aria-expanded", String(newState));

    // Update visual state using data attributes
    mainMenu.setAttribute("data-state", newState ? "open" : "closed");
    menuBackdrop.setAttribute("data-state", newState ? "open" : "closed");

    // Prevent scrolling when menu is open
    document.body.setAttribute("data-menu-open", String(newState));

    // Announce state change to screen readers
    if (statusAnnouncer) {
      const menuTitle =
        document.getElementById("menu-title")?.textContent || "Menu";
      statusAnnouncer.textContent = newState
        ? `${menuTitle} opened`
        : `${menuTitle} closed`;
    }

    // Implement proper focus management
    if (newState) {
      // When opening: move focus to first interactive element after animation
      setTimeout(() => {
        const firstFocusableElement = getFirstFocusableElement(mainMenu);
        if (firstFocusableElement) {
          firstFocusableElement.focus();
        }
      }, 100); // Short delay to allow animation to start
    } else {
      // When closing: return focus to the toggle button
      menuToggle.focus();
    }
  }

  /**
   * Sets up a focus trap within the menu element
   * Ensures keyboard users can't accidentally navigate outside the menu
   *
   * @param {HTMLElement} menuElement - The menu element to trap focus within
   */
  function setupFocusTrap(menuElement: HTMLElement): void {
    menuElement.addEventListener("keydown", (e: KeyboardEvent) => {
      if (
        e.key !== "Tab" ||
        menuElement.getAttribute("data-state") !== "open"
      ) {
        return;
      }

      const focusableElements = getFocusableElements(menuElement);
      if (focusableElements.length === 0) return;

      const firstElement = focusableElements[0];
      const lastElement = focusableElements[focusableElements.length - 1];

      // If shifting tab and on the first element, go to the last element
      if (e.shiftKey && document.activeElement === firstElement) {
        e.preventDefault();
        lastElement.focus();
      }
      // If tab and on the last element, circle back to first element
      else if (!e.shiftKey && document.activeElement === lastElement) {
        e.preventDefault();
        firstElement.focus();
      }
    });
  }

  /**
   * Gets all focusable elements within a container
   * Identifies elements that can receive keyboard focus
   *
   * @param {HTMLElement} container - The container to search within
   * @returns {Array<HTMLElement>} Array of focusable elements
   */
  function getFocusableElements(container: HTMLElement): Array<HTMLElement> {
    const selector =
      'a[href], button:not([disabled]), input:not([disabled]), select:not([disabled]), textarea:not([disabled]), [tabindex]:not([tabindex="-1"])';
    const elements = Array.from(
      container.querySelectorAll<HTMLElement>(selector),
    );
    return elements.filter((el) => el.offsetParent !== null); // Filter out hidden elements
  }

  /**
   * Gets the first focusable element within a container
   *
   * @param {HTMLElement} container - The container to search within
   * @returns {HTMLElement | null} The first focusable element or null if none found
   */
  function getFirstFocusableElement(
    container: HTMLElement,
  ): HTMLElement | null {
    const focusableElements = getFocusableElements(container);
    return focusableElements.length > 0 ? focusableElements[0] : null;
  }

  /**
   * Checks if a specific key exists in localStorage
   * @param {string} key - The key to check
   * @returns {boolean} - true if the key exists and has a value, false otherwise
   */
  function checkLocalStorage(key: string): boolean {
    try {
      const value = localStorage.getItem(key);
      return value !== null;
    } catch (error) {
      console.error("Error accessing localStorage:", error);
      return false;
    }
  }

  /**
   * Safely removes a key from localStorage with error handling
   * @param {string} key - The key to remove
   * @returns {boolean} - true if successful, false if failed
   */
  function removeLocalStorage(key: string): boolean {
    try {
      localStorage.removeItem(key);
      return true;
    } catch (error) {
      console.error("Error removing from localStorage:", error);
      return false;
    }
  }

  /**
   * Checks if the user is authenticated
   * @returns {boolean} - true if the user is authenticated, false otherwise
   */
  function isUserAuthenticated(): boolean {
    return (
      checkLocalStorage("auth_status") &&
      localStorage.getItem("auth_status") === "authenticated"
    );
  }

  /**
   * Updates the visibility of authentication-dependent elements
   * based on the authentication status
   */
  function updateLogoutButtonVisibility(): void {
    const logoutContainer = document.getElementById("logout-container");
    const profileContainer = document.getElementById("profile-container");
    if (!logoutContainer || !profileContainer) return;

    const isAuthenticated = isUserAuthenticated();
    console.log("Auth Status in Navigation:", isAuthenticated);

    if (isAuthenticated) {
      logoutContainer.classList.remove("hidden");
      profileContainer.classList.remove("hidden");
    } else {
      logoutContainer.classList.add("hidden");
      profileContainer.classList.add("hidden");
    }
  }

  /**
   * Handles the logout process when the logout button is clicked
   * Sends a POST request to the logout API, clears localStorage auth status,
   * dispatches logout event, and redirects to the login page on success
   */
  function initLogoutButton(): void {
    const logoutButton = document.getElementById("logout-button");
    const logoutContainer = document.getElementById("logout-container");
    if (!logoutButton || !logoutContainer) return;

    // Check authentication status and update visibility
    updateLogoutButtonVisibility();

    logoutButton.addEventListener("click", async () => {
      try {
        // Get the current language from the URL
        const currentPath = window.location.pathname;
        const langMatch = currentPath.match(/^\/([a-z]{2})\//);
        const lang = langMatch ? langMatch[1] : "de"; // Default to 'de' if no language found

        // 1. Remove authentication status from localStorage
        removeLocalStorage("auth_status");

        // 2. Trigger auth:logout event so other components can react
        const logoutEvent = new CustomEvent("auth:logout", {
          bubbles: true,
        });
        document.dispatchEvent(logoutEvent);

        // 3. Send POST request to the logout API
        const response = await fetch(`/${lang}/api/auth/logout`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          credentials: "same-origin", // Include cookies in the request
        });

        const data = await response.json();

        if (data.success) {
          // 4. Redirect to the gamehome page
          window.location.href = `/${lang}/gamehome`;
        } else {
          console.error("Logout failed:", data.error);
          // Also redirect to gamehome page on error, as client state has already been reset
          window.location.href = `/${lang}/gamehome`;
        }
      } catch (error) {
        console.error("Error during logout:", error);
        // Even on errors, redirect to the gamehome page
        const langMatch = window.location.pathname.match(/^\/([a-z]{2})\//);
        const lang = langMatch ? langMatch[1] : "de";
        window.location.href = `/${lang}/gamehome`;
      }
    });
  }

  // Check authentication status when the page loads
  document.addEventListener("DOMContentLoaded", () => {
    console.log("Navigation: DOMContentLoaded - Checking auth status");
    updateLogoutButtonVisibility();
  });

  // React to authentication changes
  window.addEventListener("auth:login", () => {
    console.log("Navigation: auth:login event received");
    updateLogoutButtonVisibility();
  });

  window.addEventListener("auth:logout", () => {
    console.log("Navigation: auth:logout event received");
    updateLogoutButtonVisibility();
  });

  // Regularly check authentication status
  setInterval(() => {
    updateLogoutButtonVisibility();
  }, 2000);
</script>
