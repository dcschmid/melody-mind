---
import { Icon } from "astro-icon/components";
import { When } from "@astropub/flow";
import { getRelativeLocaleUrl } from "astro:i18n";
import LanguagePicker from "@components/LanguagePicker.astro";
import { getLangFromUrl, useTranslations } from "@utils/i18n";

interface Props {
  showHeaderIcons?: boolean;
}

const { showHeaderIcons = true } = Astro.props;
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<header role="banner" class="flex flex-row justify-between md-6 rounded-lg">
  <LanguagePicker />
  <nav
    aria-label="Hauptnavigation"
    class="flex flex-wrap gap-3 items-center justify-between"
  >
    <div class="slot left flex gap-3 items-center flex-1 justify-center">
      <button
        class="hamburger relative flex items-center justify-center gap-2 min-h-12 min-w-12
               py-2 px-4 rounded-lg bg-sky-500 text-zinc-900 font-medium
               shadow-md transition-all duration-300
               border-2 border-sky-400
               hover:bg-sky-400 hover:shadow-lg
               focus-visible:outline focus-visible:outline-sky-300 focus-visible:outline-offset-2"
        aria-label={t("nav.menu.open")}
        aria-expanded="false"
        aria-controls="main-menu"
        id="menu-toggle"
      >
        <Icon
          name="menu"
          width={28}
          height={28}
          aria-hidden="true"
          class="w-7 h-7"
        />

        <span class="font-medium">{t("nav.menu.text")}</span>
      </button>

      <div
        id="menu-backdrop"
        class="fixed inset-0 z-30 bg-black/70 backdrop-blur-sm invisible opacity-0 transition-opacity duration-300
               data-[state=open]:visible data-[state=open]:opacity-100"
        aria-hidden="true"
      >
      </div>

      <div
        id="main-menu"
        class="fixed inset-y-0 left-1/2 -translate-x-1/2 z-40 w-[90%] max-w-md bg-zinc-800 rounded-xl
               shadow-2xl -translate-y-[100%] my-4 transition-transform duration-300 ease-out pt-16 pb-8
               overflow-y-auto invisible opacity-0 data-[state=open]:translate-y-0
               data-[state=open]:visible data-[state=open]:opacity-100"
        role="dialog"
        aria-modal="true"
        aria-labelledby="menu-toggle"
      >
        <button
          class="close-menu absolute top-4 right-4 flex items-center justify-center w-12 h-12
                 rounded-full bg-zinc-700 text-zinc-100 hover:bg-zinc-600
                 transition-colors duration-200 focus-visible:outline focus-visible:outline-sky-300 focus-visible:outline-offset-2"
          aria-label={t("nav.menu.close")}
        >
          <Icon
            name="close"
            width={28}
            height={28}
            aria-hidden="true"
            class="w-7 h-7 text-zinc-50 fill-inherit stroke-zinc-100"
          />
        </button>

        <div class="text-center mb-6">
          <h2 class="text-xl font-bold text-balance text-zinc-50">
            {t("nav.title")}
          </h2>
        </div>

        <ul class="flex flex-col space-y-4 px-4" role="menu">
          <li role="none">
            <a
              href={getRelativeLocaleUrl(lang, "gamehome")}
              class="flex items-center gap-4 w-full py-4 px-5 rounded-lg
                    font-medium no-underline transition-all
                    duration-200 hover:bg-zinc-700 hover:translate-x-1
                    focus-visible:bg-zinc-700 focus-visible:outline
                    focus-visible:outline-sky-300 focus-visible:outline-offset-2
                    text-zinc-100"
              role="menuitem"
            >
              <Icon
                name="home"
                width={28}
                height={28}
                aria-hidden="true"
                class="w-7 h-7"
              />
              <span>{t("nav.menu.home")}</span>
            </a>
          </li>

          <When test={showHeaderIcons}>
            <li role="none">
              <a
                href={getRelativeLocaleUrl(lang, "knowledge")}
                class="flex items-center gap-4 w-full py-4 px-5 rounded-lg
                      font-medium no-underline transition-all
                      duration-200 hover:bg-zinc-700 hover:translate-x-1
                      focus-visible:bg-zinc-700 focus-visible:outline
                      focus-visible:outline-sky-300 focus-visible:outline-offset-2
                      text-zinc-100"
                role="menuitem"
              >
                <Icon
                  name="book"
                  width={28}
                  height={28}
                  aria-hidden="true"
                  class="w-7 h-7"
                />
                <span>{t("knowledge.title")}</span>
              </a>
            </li>

            <li role="none">
              <a
                href={getRelativeLocaleUrl(lang, "podcasts")}
                class="flex items-center gap-4 w-full py-4 px-5 rounded-lg
                      font-medium no-underline transition-all
                      duration-200 hover:bg-zinc-700 hover:translate-x-1
                      focus-visible:bg-zinc-700 focus-visible:outline
                      focus-visible:outline-sky-300 focus-visible:outline-offset-2
                      text-zinc-100"
                role="menuitem"
              >
                <Icon
                  name="microphone"
                  width={28}
                  height={28}
                  aria-hidden="true"
                  class="w-7 h-7"
                />
                <span>{t("podcast.page.heading")}</span>
              </a>
            </li>

            <li role="none">
              <a
                href={getRelativeLocaleUrl(lang, "rules")}
                class="flex items-center gap-4 w-full py-4 px-5 rounded-lg
                      font-medium no-underline transition-all
                      duration-200 hover:bg-zinc-700 hover:translate-x-1
                      focus-visible:bg-zinc-700 focus-visible:outline
                      focus-visible:outline-sky-300 focus-visible:outline-offset-2
                      text-zinc-100"
                role="menuitem"
              >
                <Icon
                  name="question"
                  width={28}
                  height={28}
                  aria-hidden="true"
                  class="w-7 h-7"
                />
                <span>{t("nav.menu.rules")}</span>
              </a>
            </li>
          </When>

          <div class="w-full h-px bg-zinc-700 my-4"></div>

          <div class="px-5">
            <h3 class="text-lg font-bold mb-4 text-zinc-50">
              {t("nav.donate.heading")}
            </h3>
            <div class="flex flex-col gap-3">
              <a
                href="https://www.paypal.me/dcschmid"
                target="_blank"
                rel="noopener noreferrer"
                class="flex items-center justify-center gap-2 py-3 px-4 bg-blue-600 hover:bg-blue-700
                       text-white rounded-lg transition-colors duration-200 font-medium
                       focus-visible:outline focus-visible:outline-sky-300 focus-visible:outline-offset-2"
              >
                <Icon
                  name="paypal"
                  width={24}
                  height={24}
                  aria-hidden="true"
                  class="w-6 h-6"
                />
                <span>{t("nav.donate.paypal")}</span>
              </a>
              <a
                href="https://www.buymeacoffee.com/dcschmid"
                target="_blank"
                rel="noopener noreferrer"
                class="flex items-center justify-center gap-2 py-3 px-4 bg-amber-400 hover:bg-amber-500
                       text-zinc-900 rounded-lg transition-colors duration-200 font-medium
                       focus-visible:outline focus-visible:outline-sky-300 focus-visible:outline-offset-2"
              >
                <Icon
                  name="coffee-cup"
                  width={24}
                  height={24}
                  aria-hidden="true"
                  class="w-6 h-6"
                />
                <span>{t("nav.donate.coffee")}</span>
              </a>
            </div>
          </div>
        </ul>
      </div>
    </div>
  </nav>
</header>

<script>
  /**
   * Navigation Menu Controller
   * Manages the opening, closing and accessibility of the main navigation menu.
   * Implements WCAG AAA compliant focus management and keyboard interactions.
   */
  document.addEventListener("DOMContentLoaded", initNavigationMenu);

  /**
   * Initializes the navigation menu and sets up all necessary event listeners
   */
  function initNavigationMenu(): void {
    // Get all required DOM elements
    const menuToggle = document.getElementById(
      "menu-toggle",
    ) as HTMLButtonElement | null;
    const mainMenu = document.getElementById(
      "main-menu",
    ) as HTMLDivElement | null;
    const menuBackdrop = document.getElementById(
      "menu-backdrop",
    ) as HTMLDivElement | null;
    const closeButton = mainMenu?.querySelector(
      ".close-menu",
    ) as HTMLButtonElement | null;

    // Ensure all required elements exist before proceeding
    if (!menuToggle || !mainMenu || !menuBackdrop || !closeButton) {
      console.warn(
        "Navigation menu elements not found, menu functionality disabled",
      );
      return;
    }

    // Set up event listeners
    menuToggle.addEventListener("click", () =>
      toggleMenu(menuToggle, mainMenu, menuBackdrop),
    );
    closeButton.addEventListener("click", () =>
      toggleMenu(menuToggle, mainMenu, menuBackdrop),
    );
    menuBackdrop.addEventListener("click", () =>
      toggleMenu(menuToggle, mainMenu, menuBackdrop),
    );

    // Close menu with Escape key
    document.addEventListener("keydown", (e) => {
      if (
        e.key === "Escape" &&
        mainMenu.getAttribute("data-state") === "open"
      ) {
        toggleMenu(menuToggle, mainMenu, menuBackdrop);
      }
    });
  }

  /**
   * Toggles the menu state between open and closed
   * @param {HTMLButtonElement} menuToggle - The button that controls the menu
   * @param {HTMLElement} mainMenu - The main menu container
   * @param {HTMLElement} menuBackdrop - The backdrop overlay element
   */
  function toggleMenu(
    menuToggle: HTMLButtonElement,
    mainMenu: HTMLElement,
    menuBackdrop: HTMLElement,
  ): void {
    // Get current state and determine new state
    const isExpanded = menuToggle.getAttribute("aria-expanded") === "true";
    const newState = !isExpanded;

    // Update ARIA attributes for accessibility
    menuToggle.setAttribute("aria-expanded", String(newState));

    // Update visual state using data attributes
    mainMenu.setAttribute("data-state", newState ? "open" : "closed");
    menuBackdrop.setAttribute("data-state", newState ? "open" : "closed");

    // Prevent scrolling when menu is open
    document.body.setAttribute("data-menu-open", String(newState));

    // Implement proper focus management
    if (newState) {
      // When opening: move focus to first interactive element after animation
      setTimeout(() => {
        const firstFocusableElement = mainMenu.querySelector(
          "a[href], button:not(.close-menu), input, select, textarea, [tabindex]:not([tabindex='-1'])",
        ) as HTMLElement;

        if (firstFocusableElement) {
          firstFocusableElement.focus();
        }
      }, 100); // Short delay to allow animation to start
    } else {
      // When closing: return focus to the toggle button
      menuToggle.focus();
    }
  }
</script>
