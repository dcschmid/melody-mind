---
/**
 * LanguagePicker Component - Simple & Clean
 *
 * A clean language selection component that allows users to switch
 * between multiple languages. Using Tailwind CSS 4 for maintainability.
 *
 * @component
 * @example
 * ```astro
 * <LanguagePicker />
 * ```
 */
import { getRelativeLocaleUrl } from "astro:i18n";
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import { Icon } from "astro-icon/components";

// Get current language and translations
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(String(lang));

/**
 * Clean the current path by removing language prefixes
 */
const currentPath = Astro.url.pathname;
const cleanPath = currentPath
  .split("/")
  .filter(
    (segment) =>
      ![
        "de",
        "en",
        "es",
        "fr",
        "it",
        "pt",
        "da",
        "nl",
        "sv",
        "fi",
        "cn",
        "ru",
        "jp",
        "uk",
      ].includes(segment)
  )
  .join("/");

/**
 * Available languages configuration with localized names and accessibility labels
 */
const languages = {
  cn: { name: t("language.cn"), flag: "ğŸ‡¨ğŸ‡³" },
  da: { name: t("language.da"), flag: "ğŸ‡©ğŸ‡°" },
  de: { name: t("language.de"), flag: "ğŸ‡©ğŸ‡ª" },
  en: { name: t("language.en"), flag: "ğŸ‡¬ğŸ‡§" },
  es: { name: t("language.es"), flag: "ğŸ‡ªğŸ‡¸" },
  fi: { name: t("language.fi"), flag: "ğŸ‡«ğŸ‡®" },
  fr: { name: t("language.fr"), flag: "ğŸ‡«ğŸ‡·" },
  it: { name: t("language.it"), flag: "ğŸ‡®ğŸ‡¹" },
  jp: { name: t("language.jp"), flag: "ğŸ‡¯ğŸ‡µ" },
  nl: { name: t("language.nl"), flag: "ğŸ‡³ğŸ‡±" },
  pt: { name: t("language.pt"), flag: "ğŸ‡µğŸ‡¹" },
  ru: { name: t("language.ru"), flag: "ğŸ‡·ğŸ‡º" },
  sv: { name: t("language.sv"), flag: "ğŸ‡¸ğŸ‡ª" },
  uk: { name: t("language.uk"), flag: "ğŸ‡ºğŸ‡¦" },
};
---

<div
  class="font-primary flex items-center gap-2 rounded-lg"
  role="navigation"
  aria-label={t("language.picker.label")}
>
  <div class="relative flex items-center">
    <select
      id="language-select"
      class="min-h-[44px] w-full min-w-[44px] cursor-pointer appearance-none rounded-xl border-2 border-purple-500 bg-gradient-to-r from-purple-600 to-purple-700 px-4 py-2 pr-10 text-base font-semibold text-white shadow-lg transition-all duration-300 ease-out hover:-translate-y-1 hover:from-purple-700 hover:to-purple-800 hover:shadow-xl focus:from-purple-700 focus:to-purple-800 focus:ring-4 focus:ring-purple-300 focus:ring-offset-2 focus:outline-none active:scale-95 sm:px-3 sm:py-2 sm:pr-8 sm:text-sm md:min-w-[72px] md:px-5 md:py-3"
      value={getRelativeLocaleUrl(String(lang), cleanPath)}
      aria-label={t("language.select.label")}
      onchange="
        const newLang = this.value.split('/')[1];
        localStorage.setItem('preferred-language', newLang);
        window.location.href = this.value;
      "
    >
      {
        Object.entries(languages).map(([code, { name, flag }]) => {
          const url = getRelativeLocaleUrl(code, cleanPath);
          return (
            <option value={url} selected={code === lang}>
              {flag} {name}
            </option>
          );
        })
      }
    </select>

    <div
      class="pointer-events-none absolute top-0 right-0 bottom-0 flex items-center justify-center px-3 text-white/90 transition-all duration-300 sm:px-2"
    >
      <Icon
        name="chevron-down"
        class="h-5 w-5 fill-current transition-all duration-300 ease-out sm:h-4 sm:w-4"
        aria-hidden="true"
      />
    </div>
  </div>

  <div
    class="absolute -m-px h-px w-px overflow-hidden border-0 p-0 whitespace-nowrap"
    aria-live="polite"
  >
    {t("language.selected", { language: languages[lang as keyof typeof languages]?.name || lang })}
  </div>
</div>

<script>
  import { initDefaultLanguagePicker } from "../../utils/components/languagePickerUtils";

  // Initialize language picker functionality
  document.addEventListener("DOMContentLoaded", () => {
    initDefaultLanguagePicker();
  });
</script>
