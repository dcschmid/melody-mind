---
import { getRelativeLocaleUrl } from "astro:i18n";
import { getLangFromUrl, useTranslations } from "@utils/i18n";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const currentPath = Astro.url.pathname;
const cleanPath = currentPath
  .split("/")
  .filter((segment) => !["de", "en", "es", "fr", "it"].includes(segment))
  .join("/");

const languages = {
  de: {
    name: t("language.de"),
    label: t("language.de.label"),
    flag: "🇩🇪",
  },
  en: {
    name: t("language.en"),
    label: t("language.en.label"),
    flag: "🇬🇧",
  },
  es: {
    name: t("language.es"),
    label: t("language.es.label"),
    flag: "🇪🇸",
  },
  fr: {
    name: t("language.fr"),
    label: t("language.fr.label"),
    flag: "🇫🇷",
  },
  it: {
    name: t("language.it"),
    label: t("language.it.label"),
    flag: "🇮🇹",
  },
};
---

<div
  class="languagePicker"
  role="navigation"
  aria-label={t("language.picker.label")}
>
  <label for="language-select">
    <span class="sr-only">{t("language.change")}</span>
    <span class="globe-icon" aria-hidden="true">🌐</span>
  </label>
  <select
    id="language-select"
    class="selectLanguage"
    value={getRelativeLocaleUrl(lang, cleanPath)}
    onchange="
      const newLang = this.value.split('/')[1];
      window.localStorage.setItem('preferred-language', newLang);
      window.location.href=this.value;
    "
    aria-label={t("language.select.label")}
  >
    {
      Object.entries(languages).map(([code, { name, label, flag }]) => {
        const url = getRelativeLocaleUrl(code, cleanPath);
        return (
          <option value={url} selected={code === lang} aria-label={label}>
            {flag} {name}
          </option>
        );
      })
    }
  </select>
</div>

<style lang="scss">
  .languagePicker {
    display: flex;
    gap: 0.5em;
    align-items: center;
  }

  .globe-icon {
    font-size: 1.2em;
  }

  .selectLanguage {
    cursor: pointer;

    padding: 0.5em 2.5em 0.5em 0.5em;

    font-family: var(--font-family);
    font-size: 1em;
    line-height: 1.5;

    appearance: none;
    background-color: var(--secondary-color);
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' fill='currentColor' viewBox='0 0 16 16'%3E%3Cpath d='M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z'/%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right 1em center;
    border: 2px solid var(--highlight-color);
    border-radius: var(--border-radius);

    transition: all 0.2s ease;

    &:hover,
    &:focus {
      color: var(--background-color);
      background-color: var(--highlight-color);
      outline: none;
      box-shadow:
        0 0 0 2px var(--highlight-color),
        0 0 0 4px rgba(var(--highlight-color-rgb), 0.3);
    }

    option {
      display: flex;
      gap: 0.5em;
      align-items: center;
    }
  }

  .sr-only {
    position: absolute;

    overflow: hidden;

    width: 1px;
    height: 1px;
    margin: -1px;
    padding: 0;

    white-space: nowrap;

    clip: rect(0, 0, 0, 0);
    border: 0;
  }
</style>
