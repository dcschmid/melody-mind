---
/**
 * LanguagePicker Component - Simple & Clean
 *
 * A clean language selection component that allows users to switch
 * between multiple languages. Using Tailwind CSS 4 for maintainability.
 *
 * @component
 * @example
 * ```astro
 * <LanguagePicker />
 * ```
 */
import { getRelativeLocaleUrl } from "astro:i18n";
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import { Icon } from "astro-icon/components";
import { SUPPORTED_LANGUAGES, type SupportedLanguage } from "@constants/languages";

// Get current language and translations
const lang = getLangFromUrl(Astro.url);
const currentLang = String(lang);
const t = useTranslations(currentLang);

/**
 * Clean the current path by removing language prefixes
 */
const currentPath = Astro.url.pathname;
const supportedLanguageSegments = new Set<string>(SUPPORTED_LANGUAGES);
const cleanPath = currentPath
  .split("/")
  .filter((segment) => segment && !supportedLanguageSegments.has(segment))
  .join("/");

/**
 * Available languages configuration with localized names and accessibility labels
 */
const LANGUAGE_FLAGS: Record<SupportedLanguage, string> = {
  en: "ðŸ‡¬ðŸ‡§",
  de: "ðŸ‡©ðŸ‡ª",
  es: "ðŸ‡ªðŸ‡¸",
  it: "ðŸ‡®ðŸ‡¹",
  fr: "ï¿½ï¿½",
  pt: "ðŸ‡µðŸ‡¹",
};

const languageOptions = SUPPORTED_LANGUAGES.map((code) => ({
  code,
  name: t(`language.${code}`),
  flag: LANGUAGE_FLAGS[code] ?? "",
}));
---

<div
  class="font-primary flex items-center gap-2 rounded-lg"
  role="navigation"
  aria-label={t("language.picker.label")}
>
  <div class="relative flex items-center">
    <select
      id="language-select"
      class="min-h-[44px] w-full min-w-[44px] cursor-pointer appearance-none rounded-xl border-2 border-purple-500 bg-gradient-to-r from-purple-600 to-purple-700 px-4 py-2 pr-10 text-base font-semibold text-white shadow-lg transition-all duration-300 ease-out hover:-translate-y-1 hover:from-purple-700 hover:to-purple-800 hover:shadow-xl focus:from-purple-700 focus:to-purple-800 focus:ring-4 focus:ring-purple-300 focus:ring-offset-2 focus:outline-none active:scale-95 sm:px-3 sm:py-2 sm:pr-8 sm:text-sm md:min-w-[72px] md:px-5 md:py-3"
      value={getRelativeLocaleUrl(currentLang, cleanPath)}
      aria-label={t("language.select.label")}
    >
      {
        languageOptions.map(({ code, name, flag }) => {
          const url = getRelativeLocaleUrl(code, cleanPath);
          return (
            <option value={url} selected={code === currentLang}>
              {flag} {name}
            </option>
          );
        })
      }
    </select>

    <div
      class="pointer-events-none absolute top-0 right-0 bottom-0 flex items-center justify-center px-3 text-white/90 transition-all duration-300 sm:px-2"
    >
      <Icon
        name="chevron-down"
        class="h-5 w-5 fill-current transition-all duration-300 ease-out sm:h-4 sm:w-4"
        aria-hidden="true"
      />
    </div>
  </div>

  <div
    class="absolute -m-px h-px w-px overflow-hidden border-0 p-0 whitespace-nowrap"
    aria-live="polite"
  >
    {
      t("language.selected", {
        language:
          languageOptions.find((option) => option.code === currentLang)?.name ||
          currentLang ||
          languageOptions[0]?.name,
      })
    }
  </div>
</div>
