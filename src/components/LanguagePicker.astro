---
import { getRelativeLocaleUrl } from "astro:i18n";
import { getLangFromUrl, useTranslations } from "@utils/i18n";

// Get current language and translations
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Clean the current path by removing language prefixes
const currentPath = Astro.url.pathname;
const cleanPath = currentPath
  .split("/")
  .filter(
    (segment) =>
      !["de", "en", "es", "fr", "it", "pt", "da", "nl", "sv", "fi"].includes(
        segment,
      ),
  )
  .join("/");

// Available languages configuration with localized names and accessibility labels
const unsortedLanguages = {
  da: {
    name: t("language.da"),
    label: t("language.da.label"),
    flag: "üá©üá∞",
  },
  de: {
    name: t("language.de"),
    label: t("language.de.label"),
    flag: "üá©üá™",
  },
  en: {
    name: t("language.en"),
    label: t("language.en.label"),
    flag: "üá¨üáß",
  },
  es: {
    name: t("language.es"),
    label: t("language.es.label"),
    flag: "üá™üá∏",
  },
  fi: {
    name: t("language.fi"),
    label: t("language.fi.label"),
    flag: "üá´üáÆ",
  },
  fr: {
    name: t("language.fr"),
    label: t("language.fr.label"),
    flag: "üá´üá∑",
  },
  it: {
    name: t("language.it"),
    label: t("language.it.label"),
    flag: "üáÆüáπ",
  },
  nl: {
    name: t("language.nl"),
    label: t("language.nl.label"),
    flag: "üá≥üá±",
  },
  pt: {
    name: t("language.pt"),
    label: t("language.pt.label"),
    flag: "üáµüáπ",
  },
  sv: {
    name: t("language.sv"),
    label: t("language.sv.label"),
    flag: "üá∏üá™",
  },
};

const languages = Object.fromEntries(
  Object.entries(unsortedLanguages)
    .sort(([, a], [, b]) => a.name.localeCompare(b.name))
);
---

<!-- 
  Language picker component with accessibility features:
  - Proper ARIA attributes for screen readers
  - Focus indicators that meet WCAG AAA requirements
  - Keyboard navigation support
-->
<div
  class="flex items-center gap-2 rounded-lg focus-within:ring focus-within:ring-[--focus-outline-color] focus-within:ring-opacity-50"
  role="navigation"
  aria-label={t("language.picker.label")}
>
  <!-- Globe icon label for the select input -->
  <label for="language-select" class="flex items-center">
    <span class="sr-only">{t("language.change")}</span>
    <span class="text-lg" aria-hidden="true">üåê</span>
  </label>

  <div class="relative">
    <!-- 
      Custom styled select dropdown that maintains accessibility
      while providing enhanced visual appearance
    -->
    <select
      id="language-select"
      class="appearance-none bg-[--secondary-color] border-2 border-[--highlight-color] rounded-lg
             py-2 px-3 pr-10 w-full text-base cursor-pointer
             transition duration-200
             hover:bg-[--highlight-color] hover:text-white
             focus-visible:outline focus-visible:outline-[--focus-outline-color] focus-visible:outline-offset-2
             focus-visible:bg-[--highlight-color] focus-visible:text-white"
      value={getRelativeLocaleUrl(lang, cleanPath)}
      onchange="
        const newLang = this.value.split('/')[1];
        window.localStorage.setItem('preferred-language', newLang);
        window.location.href = this.value;
      "
      aria-label={t("language.select.label")}
    >
      {
        Object.entries(languages).map(([code, { name, label, flag }]) => {
          const url = getRelativeLocaleUrl(code, cleanPath);
          return (
            <option
              value={url}
              selected={code === lang}
              aria-label={label}
              class="flex items-center gap-2 py-1"
            >
              {flag} {name}
            </option>
          );
        })
      }
    </select>

    <!-- 
      Custom dropdown arrow with animation
      Positioned absolutely to appear within the select element
      while remaining purely decorative (aria-hidden)
    -->
    <div
      class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-[--text-color] transition-colors duration-200"
      id="arrow-container"
    >
      <svg
        id="language-arrow"
        class="h-4 w-4 fill-current transition-transform duration-300"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 20 20"
        aria-hidden="true"
      >
        <path
          d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
        ></path>
      </svg>
    </div>
  </div>
</div>

<script>
  /**
   * Initialize the language picker with enhanced interactivity
   */
  document.addEventListener("DOMContentLoaded", () => {
    initLanguagePicker();
  });

  /**
   * Set up the rotating arrow effect for the language picker
   */
  function initLanguagePicker() {
    // Get required DOM elements
    const selectElement = document.getElementById("language-select");
    const arrowElement = document.getElementById("language-arrow");
    const arrowContainer = document.getElementById("arrow-container");

    // Ensure all required elements exist
    if (!selectElement || !arrowElement || !arrowContainer) {
      console.warn("Language picker elements not found");
      return;
    }

    /**
     * Rotates the arrow icon up when the select is focused
     */
    function handleFocus() {
      arrowElement?.classList.add("rotate-180");
      arrowContainer?.classList.add("text-white");
    }

    /**
     * Returns the arrow icon to its original position on blur
     */
    function handleBlur() {
      arrowElement?.classList.remove("rotate-180");
      arrowContainer?.classList.remove("text-white");
    }

    /**
     * Handles mouse interactions for better desktop experience
     */
    function handleMouseInteraction() {
      // For toggle behavior when clicking while already focused
      if (document.activeElement === selectElement) {
        arrowElement?.classList.toggle("rotate-180");
      }
    }

    /**
     * Handles keyboard interactions for accessibility
     * @param {KeyboardEvent} e - The keyboard event
     */
    function handleKeyboardInteraction(e: any) {
      // Toggle rotation when using Enter or Space to activate the select
      if (e.key === "Enter" || e.key === " ") {
        arrowElement?.classList.toggle("rotate-180");
      }
    }

    // Attach event listeners
    selectElement.addEventListener("focus", handleFocus);
    selectElement.addEventListener("blur", handleBlur);
    selectElement.addEventListener("mousedown", handleMouseInteraction);
    selectElement.addEventListener("keydown", handleKeyboardInteraction);
  }
</script>
