---
/**
 * LanguagePicker Component
 *
 * A fully accessible, interactive language selection component that allows users to switch
 * between multiple languages throughout the MelodyMind application. This component maintains
 * the user's language preference across sessions and provides a seamless multilingual experience.
 *
 * Features:
 * - WCAG AAA compliant with 7:1 contrast ratio
 * - Keyboard accessibility with proper focus management
 * - Screen reader announcements for language changes
 * - Native select element for maximum compatibility
 * - Visual feedback for interaction states
 * - Proper ARIA attributes for enhanced accessibility
 * - User language preference persistence via localStorage
 * - Support for reduced motion preferences
 * - High contrast mode support
 * - Minimum touch target size of 44x44px
 *
 * @component LanguagePicker
 * @example
 * ```astro
 * <LanguagePicker />
 * ```
 */
import { getRelativeLocaleUrl } from "astro:i18n";
import { getLangFromUrl, useTranslations } from "@utils/i18n";

// Get current language and translations
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(String(lang));

/**
 * Clean the current path by removing language prefixes
 * This ensures proper language switching while maintaining the current page
 */
const currentPath = Astro.url.pathname;
const cleanPath = currentPath
  .split("/")
  .filter(
    (segment) =>
      ![
        "de",
        "en",
        "es",
        "fr",
        "it",
        "pt",
        "da",
        "nl",
        "sv",
        "fi",
        "cn",
        "ru",
        "jp",
        "uk",
      ].includes(segment)
  )
  .join("/");

/**
 * Available languages configuration with localized names and accessibility labels
 * Each language includes:
 * - name: Localized language name (e.g., "English", "Deutsch")
 * - label: Extended description for accessibility (e.g., "Switch to English")
 * - flag: Unicode flag emoji for visual identification
 */
const unsortedLanguages = {
  cn: {
    name: t("language.cn"),
    label: t("language.cn.label"),
    flag: "ðŸ‡¨ðŸ‡³",
  },
  da: {
    name: t("language.da"),
    label: t("language.da.label"),
    flag: "ðŸ‡©ðŸ‡°",
  },
  de: {
    name: t("language.de"),
    label: t("language.de.label"),
    flag: "ðŸ‡©ðŸ‡ª",
  },
  en: {
    name: t("language.en"),
    label: t("language.en.label"),
    flag: "ðŸ‡¬ðŸ‡§",
  },
  es: {
    name: t("language.es"),
    label: t("language.es.label"),
    flag: "ðŸ‡ªðŸ‡¸",
  },
  fi: {
    name: t("language.fi"),
    label: t("language.fi.label"),
    flag: "ðŸ‡«ðŸ‡®",
  },
  fr: {
    name: t("language.fr"),
    label: t("language.fr.label"),
    flag: "ðŸ‡«ðŸ‡·",
  },
  it: {
    name: t("language.it"),
    label: t("language.it.label"),
    flag: "ðŸ‡®ðŸ‡¹",
  },
  jp: {
    name: t("language.jp"),
    label: t("language.jp.label"),
    flag: "ðŸ‡¯ðŸ‡µ",
  },
  nl: {
    name: t("language.nl"),
    label: t("language.nl.label"),
    flag: "ðŸ‡³ðŸ‡±",
  },
  pt: {
    name: t("language.pt"),
    label: t("language.pt.label"),
    flag: "ðŸ‡µðŸ‡¹",
  },
  ru: {
    name: t("language.ru"),
    label: t("language.ru.label"),
    flag: "ðŸ‡·ðŸ‡º",
  },
  sv: {
    name: t("language.sv"),
    label: t("language.sv.label"),
    flag: "ðŸ‡¸ðŸ‡ª",
  },
  uk: {
    name: t("language.uk"),
    label: t("language.uk.label"),
    flag: "ðŸ‡ºðŸ‡¦",
  },
};

/**
 * Sort languages alphabetically by their localized names
 * This ensures a consistent presentation order across different language interfaces
 */
const languages = Object.fromEntries(
  Object.entries(unsortedLanguages).sort(([, a], [, b]) => a.name.localeCompare(b.name))
);
---

<div class="language-picker" role="navigation" aria-label={t("language.picker.label")}>
  {/* Language selector container with proper ARIA landmarks */}
  <div class="language-picker__select-container">
    {
      /* 
      Native select element for maximum accessibility and compatibility
      - WCAG AAA compliant colors using CSS variables
      - Minimum touch target size using CSS variables
      - Proper focus indicators for keyboard navigation
      - ARIA attributes for screen reader support
    */
    }
    <select
      id="language-select"
      class="language-picker__select"
      value={getRelativeLocaleUrl(String(lang), cleanPath)}
      aria-expanded="false"
      onchange="
        const newLang = this.value.split('/')[1];
        window.localStorage.setItem('preferred-language', newLang);
        window.location.href = this.value;
      "
      aria-label={t("language.select.label")}
      data-focus-announce={t("language.focus.announce")}
      data-change-success={t("language.change.success")}
      data-change-error={t("language.change.error")}
      data-preference-restored={t("language.preference.restored")}
    >
      {/* Generate language options from the configured languages object */}
      {
        Object.entries(languages).map(([code, { name, label, flag }]) => {
          const url = getRelativeLocaleUrl(code, cleanPath);
          return (
            <option
              value={url}
              selected={code === lang}
              aria-label={label}
              class="language-picker__option"
            >
              {flag} {name}
            </option>
          );
        })
      }
    </select>

    {
      /* 
      Decorative dropdown arrow indicator
      - Animated for visual feedback using CSS variables
      - Marked as aria-hidden to avoid screen reader noise
      - Includes title for SVG accessibility 
    */
    }
    <div class="language-picker__arrow-container" id="arrow-container">
      <svg
        id="language-arrow"
        class="language-picker__arrow"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 20 20"
        aria-hidden="true"
      >
        <title>{t("language.dropdown.arrow")}</title>
        <path
          d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
        ></path>
      </svg>
    </div>
  </div>

  {
    /* 
    Live region for screen reader announcements
    - Updates when language changes for better accessibility
    - Hidden visually but available to assistive technology 
  */
  }
  <div class="language-picker__status" id="language-status" aria-live="polite">
    {t("language.selected", { language: languages[String(lang)].name })}
  </div>
</div>

<style>
  /**
   * LanguagePicker Component Styles
   * 
   * WCAG AAA 2.2 compliant language picker using only CSS custom properties
   * All styles use root variables from global.css for consistency and accessibility
   * Follows BEM methodology for maintainable CSS architecture
   */

  /* ======================================
   * CONTAINER & LAYOUT
   * ====================================== */

  .language-picker {
    /* Layout using CSS variables */
    display: flex;
    align-items: center;
    gap: var(--space-sm);
    border-radius: var(--radius-lg);

    /* Enhanced focus-within state for WCAG AAA compliance */
    transition: box-shadow var(--transition-normal);
  }

  .language-picker:focus-within {
    box-shadow: var(--focus-ring);
  }

  .language-picker__select-container {
    position: relative;
    display: flex;
    align-items: center;
  }

  /* ======================================
   * SHARED LAYOUT PATTERNS (DRY)
   * ====================================== */

  /* Common focus styles - reusable pattern */
  .language-picker__select:focus,
  .language-picker__select:focus-visible {
    background-color: var(--interactive-primary-hover);
    outline: var(--focus-enhanced-outline-dark);
    outline-offset: var(--focus-ring-offset);
    box-shadow: var(--focus-enhanced-shadow);
  }

  /* Common transition pattern for interactive elements */
  .language-picker__select,
  .language-picker__arrow {
    transition:
      background-color var(--transition-normal),
      transform var(--transition-normal),
      box-shadow var(--transition-normal),
      color var(--transition-normal);
  }

  /* ======================================
   * SELECT ELEMENT STYLING
   * ====================================== */

  .language-picker__select {
    /* Layout and sizing using CSS variables for WCAG AAA compliance */
    min-height: var(--min-touch-size); /* 44px minimum for touch targets */
    width: 100%;
    min-width: var(--min-touch-size);

    /* Appearance and positioning */
    cursor: pointer;
    appearance: none;
    border: none;
    border-radius: var(--radius-lg);

    /* Spacing using CSS variables */
    padding: var(--space-sm) var(--space-2xl) var(--space-sm) var(--space-md);

    /* Background and colors using semantic CSS variables */
    background-color: var(--interactive-primary);
    color: var(--btn-primary-text);

    /* Typography using CSS variables */
    font-size: var(--text-base);
    font-weight: var(--font-medium);

    /* Note: transition moved to shared pattern above for DRY compliance */
  }

  .language-picker__select:hover {
    background-color: var(--interactive-primary-hover);
    transform: translateY(calc(var(--space-micro) * var(--transform-factor-hover)));
  }

  /* Note: focus styles moved to shared pattern above for DRY compliance */

  .language-picker__select:disabled {
    opacity: var(--opacity-disabled);
    cursor: not-allowed;
  }

  /* ======================================
   * OPTION STYLING
   * ====================================== */

  .language-picker__option {
    display: flex;
    align-items: center;
    gap: var(--space-sm);
    background-color: var(--bg-secondary);
    color: var(--text-primary);
    padding: var(--space-xs);

    /* Enhanced option styling for better contrast */
    border-bottom: var(--border-width-thin) solid var(--border-primary);
  }

  /* Shared hover and focus patterns for options */
  .language-picker__option:hover {
    background-color: var(--bg-tertiary);
  }

  .language-picker__option:focus {
    background-color: var(--interactive-primary);
    color: var(--btn-primary-text);
  }

  /* ======================================
   * ARROW INDICATOR
   * ====================================== */

  .language-picker__arrow-container {
    /* Positioning */
    position: absolute;
    top: var(--space-none);
    bottom: var(--space-none);
    right: var(--space-none);

    /* Layout */
    display: flex;
    align-items: center;
    justify-content: center;

    /* Spacing and styling */
    padding: var(--space-none) var(--space-sm);
    pointer-events: none;

    /* Color using CSS variables */
    color: var(--btn-primary-text);

    /* Note: transition moved to shared pattern above for DRY compliance */
  }

  .language-picker__arrow {
    /* Size using CSS variables */
    height: var(--icon-size-sm);
    width: var(--icon-size-sm);

    /* Styling */
    fill: currentColor;

    /* Note: transition moved to shared pattern above for DRY compliance */
  }

  /* Arrow rotation states for enhanced UX - consolidated selectors */
  .language-picker__select:focus + .language-picker__arrow-container .language-picker__arrow,
  .language-picker__select:active + .language-picker__arrow-container .language-picker__arrow {
    transform: rotate(var(--rotation-180));
  }

  .language-picker__select:focus + .language-picker__arrow-container,
  .language-picker__select:active + .language-picker__arrow-container {
    color: var(--btn-primary-text);
  }

  /* ======================================
   * SCREEN READER STATUS
   * ====================================== */

  .language-picker__status {
    /* Screen reader only - using semantic utility class approach with CSS variables */
    position: absolute;
    width: var(--sr-only-width);
    height: var(--sr-only-height);
    padding: var(--space-none);
    margin: var(--sr-only-margin);
    overflow: hidden;
    clip: rect(var(--space-none), var(--space-none), var(--space-none), var(--space-none));
    white-space: nowrap;
    border: var(--space-none);
  }

  /* ======================================
   * RESPONSIVE DESIGN
   * ====================================== */

  @media (min-width: var(--breakpoint-sm)) {
    .language-picker__select {
      min-width: calc(
        var(--min-touch-size) * var(--scale-factor-responsive-wide)
      ); /* Wider on larger screens */
    }
  }

  /* ======================================
   * ACCESSIBILITY ENHANCEMENTS
   * ====================================== */

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .language-picker__select {
      border: var(--border-width-thick) solid var(--text-primary);
    }

    .language-picker__select:focus,
    .language-picker__select:focus-visible {
      outline: var(--border-width-enhanced) solid var(--text-primary);
      outline-offset: var(--space-xs);
    }
  }

  /* Forced colors mode support */
  @media (forced-colors: active) {
    .language-picker__select {
      background-color: ButtonFace;
      color: ButtonText;
      border: var(--border-width-thin) solid ButtonText;
      forced-color-adjust: none;
    }

    .language-picker__select:focus,
    .language-picker__select:focus-visible {
      outline: var(--border-width-thick) solid Highlight;
    }

    .language-picker__arrow {
      fill: ButtonText;
    }
  }

  /* Reduced motion support - consolidated transition override */
  @media (prefers-reduced-motion: reduce) {
    .language-picker__select,
    .language-picker__arrow {
      transition-duration: var(--transition-fast) !important;
    }

    .language-picker__select:hover {
      transform: none;
    }
  }

  /* Enhanced text spacing support (WCAG 2.2) */
  .enhanced-text-spacing .language-picker__select {
    letter-spacing: var(--letter-spacing-enhanced);
    word-spacing: var(--word-spacing-enhanced);
    line-height: var(--line-height-enhanced);
    padding-top: calc(var(--space-sm) * var(--scale-factor-enhanced));
    padding-bottom: calc(var(--space-sm) * var(--scale-factor-enhanced));
  }

  /* Enhanced text spacing support for better accessibility */
  @media (min-width: var(--breakpoint-sm)) {
    .enhanced-text-spacing .language-picker__select {
      padding-top: calc(var(--space-md) * var(--scale-factor-responsive));
      padding-bottom: calc(var(--space-md) * var(--scale-factor-responsive));
    }
  }
</style>

<script type="module">
  /**
   * LanguagePicker Component Script
   *
   * Enhanced language picker implementation using external TypeScript module for better performance.
   * This optimized approach includes:
   * - External module for code reusability and maintainability
   * - CSS variables for all hardcoded values (100% compliance)
   * - AbortController for memory-efficient cleanup
   * - Cached DOM references and CSS values
   * - Enhanced error handling and validation
   *
   * @module LanguagePickerScript
   */

  import { LanguagePicker } from "../utils/languagePicker.ts";

  // Initialize the language picker with enhanced performance and cleanup
  LanguagePicker.init();
</script>
