---
import { getRelativeLocaleUrl } from "astro:i18n";
import { getLangFromUrl, useTranslations } from "@utils/i18n";

// Get current language and translations
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Clean the current path by removing language prefixes
const currentPath = Astro.url.pathname;
const cleanPath = currentPath
  .split("/")
  .filter(
    (segment) =>
      !["de", "en", "es", "fr", "it", "pt", "da", "nl", "sv", "fi"].includes(
        segment,
      ),
  )
  .join("/");

// Available languages configuration with localized names and accessibility labels
const unsortedLanguages = {
  da: {
    name: t("language.da"),
    label: t("language.da.label"),
    flag: "ðŸ‡©ðŸ‡°",
  },
  de: {
    name: t("language.de"),
    label: t("language.de.label"),
    flag: "ðŸ‡©ðŸ‡ª",
  },
  en: {
    name: t("language.en"),
    label: t("language.en.label"),
    flag: "ðŸ‡¬ðŸ‡§",
  },
  es: {
    name: t("language.es"),
    label: t("language.es.label"),
    flag: "ðŸ‡ªðŸ‡¸",
  },
  fi: {
    name: t("language.fi"),
    label: t("language.fi.label"),
    flag: "ðŸ‡«ðŸ‡®",
  },
  fr: {
    name: t("language.fr"),
    label: t("language.fr.label"),
    flag: "ðŸ‡«ðŸ‡·",
  },
  it: {
    name: t("language.it"),
    label: t("language.it.label"),
    flag: "ðŸ‡®ðŸ‡¹",
  },
  nl: {
    name: t("language.nl"),
    label: t("language.nl.label"),
    flag: "ðŸ‡³ðŸ‡±",
  },
  pt: {
    name: t("language.pt"),
    label: t("language.pt.label"),
    flag: "ðŸ‡µðŸ‡¹",
  },
  sv: {
    name: t("language.sv"),
    label: t("language.sv.label"),
    flag: "ðŸ‡¸ðŸ‡ª",
  },
};

const languages = Object.fromEntries(
  Object.entries(unsortedLanguages).sort(([, a], [, b]) =>
    a.name.localeCompare(b.name),
  ),
);
---

<div
  class="flex items-center gap-2 rounded-lg focus-within:ring focus-within:ring-sky-300 focus-within:ring-opacity-75"
  role="navigation"
  aria-label={t("language.picker.label")}
>
  <div class="relative">
    <select
      id="language-select"
      class="appearance-none bg-sky-400 text-zinc-900 border-0 rounded-lg
             py-2 px-3 pr-10 w-full text-base font-medium cursor-pointer
             transition duration-200
             hover:bg-sky-300
             focus-visible:outline-2 focus-visible:outline-sky-200 focus-visible:outline-offset-2
             focus-visible:bg-sky-300 disabled:opacity-50"
      value={getRelativeLocaleUrl(lang, cleanPath)}
      onchange="
        const newLang = this.value.split('/')[1];
        window.localStorage.setItem('preferred-language', newLang);
        window.location.href = this.value;
      "
      aria-label={t("language.select.label")}
    >
      {
        Object.entries(languages).map(([code, { name, label, flag }]) => {
          const url = getRelativeLocaleUrl(code, cleanPath);
          return (
            <option
              value={url}
              selected={code === lang}
              aria-label={label}
              class="flex items-center gap-2 py-1 bg-zinc-100 text-zinc-900"
            >
              {flag} {name}
            </option>
          );
        })
      }
    </select>

    <div
      class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-zinc-900 transition-colors duration-200"
      id="arrow-container"
    >
      <svg
        id="language-arrow"
        class="h-4 w-4 fill-current transition-transform duration-300"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 20 20"
        aria-hidden="true"
      >
        <path
          d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
        ></path>
      </svg>
    </div>
  </div>
</div>

<script>
  /**
   * LanguagePicker Component Script
   * 
   * Enhances the language selection dropdown with interactive features:
   * - Rotates the dropdown arrow when focused/clicked
   * - Manages visual feedback during interaction
   * - Persists language selection to localStorage
   * - Provides keyboard accessibility
   */
  
  /**
   * Initialize the language picker with enhanced interactivity
   */
  class LanguagePicker {
    private selectElement: HTMLSelectElement | null;
    private arrowElement: HTMLElement | null;
    private arrowContainer: HTMLElement | null;
    private eventHandlers: Map<string, EventListenerOrEventListenerObject>;
    
    /**
     * Set up the language picker component
     */
    constructor() {
      // Get required DOM elements
      this.selectElement = document.getElementById("language-select") as HTMLSelectElement;
      this.arrowElement = document.getElementById("language-arrow");
      this.arrowContainer = document.getElementById("arrow-container");
      this.eventHandlers = new Map();
      
      if (this.isValid()) {
        this.initialize();
      } else {
        console.debug("Language picker initialization skipped - required elements not found");
      }
    }
    
    /**
     * Check if all required elements for the picker are available
     * 
     * @returns {boolean} True if all required elements exist
     */
    private isValid(): boolean {
      return !!(this.selectElement && this.arrowElement && this.arrowContainer);
    }
    
    /**
     * Set up event listeners and initialize component state
     */
    private initialize(): void {
      // Set up event handlers
      this.setupEventHandlers();
      
      // Check if we have a preferred language in localStorage
      this.applyPreferredLanguage();
    }
    
    /**
     * Attach all event handlers to the select element
     */
    private setupEventHandlers(): void {
      if (!this.selectElement) return;
      
      // Define event handlers and store them for later cleanup
      const handlers: Record<string, EventListenerOrEventListenerObject> = {
        focus: this.handleFocus.bind(this),
        blur: this.handleBlur.bind(this),
        mousedown: this.handleMouseInteraction.bind(this),
        keydown: this.handleKeyboardInteraction.bind(this),
        change: this.handleLanguageChange.bind(this)
      };
      
      // Store references for cleanup
      this.eventHandlers = new Map(Object.entries(handlers));
      
      // Attach all events
      for (const [event, handler] of this.eventHandlers) {
        this.selectElement.addEventListener(event, handler);
      }
    }
    
    /**
     * Apply any stored preferred language from localStorage
     */
    private applyPreferredLanguage(): void {
      try {
        const preferredLanguage = localStorage.getItem('preferred-language');
        if (preferredLanguage && this.selectElement) {
          // Find the option that corresponds to the preferred language
          const options = this.selectElement.options;
          for (let i = 0; i < options.length; i++) {
            const url = options[i].value;
            if (url.includes(`/${preferredLanguage}/`)) {
              this.selectElement.selectedIndex = i;
              break;
            }
          }
        }
      } catch (error) {
        // Handle potential localStorage errors (e.g., in private browsing)
        console.debug("Failed to access localStorage for language preference:", error);
      }
    }
    
    /**
     * Rotates the arrow icon up when the select is focused
     */
    private handleFocus(): void {
      this.arrowElement?.classList.add("rotate-180");
      this.arrowContainer?.classList.add("text-white");
    }
    
    /**
     * Returns the arrow icon to its original position on blur
     */
    private handleBlur(): void {
      this.arrowElement?.classList.remove("rotate-180");
      this.arrowContainer?.classList.remove("text-white");
    }
    
    /**
     * Handles mouse interactions for better desktop experience
     * 
     * @param {MouseEvent} event - The mouse event
     */
    private handleMouseInteraction(event: Event): void {
      // For toggle behavior when clicking while already focused
      if (document.activeElement === this.selectElement) {
        // Prevent default behavior for more control
        (event as MouseEvent).preventDefault();
        this.arrowElement?.classList.toggle("rotate-180");
        
        // Simulate the select opening/closing
        if (this.selectElement?.size === 1) {
          this.selectElement.size = 4; // "Open" the select
        } else {
          this.selectElement!.size = 1; // "Close" the select
          this.selectElement?.blur();
        }
      }
    }
    
    /**
     * Handles keyboard interactions for accessibility
     * 
     * @param {KeyboardEvent} event - The keyboard event
     */
    private handleKeyboardInteraction(event: Event): void {
      const keyEvent = event as KeyboardEvent;
      // Toggle rotation when using Enter or Space to activate the select
      if (keyEvent.key === "Enter" || keyEvent.key === " ") {
        this.arrowElement?.classList.toggle("rotate-180");
      }
    }
    
    /**
     * Handles language change and persists the selection
     * 
     * @param {Event} event - The change event
     */
    private handleLanguageChange(event: Event): void {
      const target = event.target as HTMLSelectElement;
      const newUrl = target.value;
      
      try {
        // Extract language code from URL
        const langMatch = newUrl.match(/\/([a-z]{2})\//);
        if (langMatch && langMatch[1]) {
          // Store the selected language
          localStorage.setItem('preferred-language', langMatch[1]);
        }
        
        // Navigate to the new URL
        window.location.href = newUrl;
      } catch (error) {
        console.error("Failed to process language change:", error);
      }
    }
    
    /**
     * Clean up all event listeners
     */
    public cleanup(): void {
      if (!this.selectElement) return;
      
      for (const [event, handler] of this.eventHandlers) {
        this.selectElement.removeEventListener(event, handler);
      }
      
      this.eventHandlers.clear();
    }
  }
  
  // Create and initialize the language picker component
  let languagePicker: LanguagePicker | null = null;
  
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => {
      languagePicker = new LanguagePicker();
    });
  } else {
    languagePicker = new LanguagePicker();
  }
  
  // Clean up when the page is navigated away from
  document.addEventListener("astro:before-swap", () => {
    languagePicker?.cleanup();
    languagePicker = null;
  });
</script>
