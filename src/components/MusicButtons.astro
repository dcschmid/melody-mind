---
/**
 * MusicButtons Component
 *
 * Displays interactive buttons for different music streaming platforms with WCAG AAA 2.2 compliant styling.
 * Uses Tailwind CSS for consistency and accessibility. Supports keyboard navigation,
 * screen readers, and multiple languages through the i18n system.
 *
 * @component MusicButtons
 * @since 3.0.0
 * @version 3.0.0
 *
 * @example Basic usage
 * ```astro
 * ---
 * import MusicButtons from "@components/MusicButtons.astro";
 *
 * const rockCategory = {
 *   spotifyPlaylist: "https://open.spotify.com/playlist/...",
 *   deezerPlaylist: "https://www.deezer.com/playlist/...",
 *   appleMusicPlaylist: "https://music.apple.com/playlist/..."
 * };
 * ---
 *
 * <MusicButtons
 *   category={rockCategory}
 *   title="Rock Music Playlist"
 * />
 * ```
 */
interface Props {
  /**
   * Category object containing optional playlist URLs for different music platforms.
   * Only platforms with valid URLs will be displayed as buttons.
   */
  category: {
    /** Spotify playlist URL - if provided, Spotify button will be displayed */
    spotifyPlaylist?: string;
    /** Deezer playlist URL - if provided, Deezer button will be displayed */
    deezerPlaylist?: string;
    /** Apple Music playlist URL - if provided, Apple Music button will be displayed */
    appleMusicPlaylist?: string;
  };

  /**
   * Title of the music collection/playlist used for accessibility labels and descriptions.
   */
  title: string;
}

const { category, title } = Astro.props;

import { Icon } from "astro-icon/components";
import ButtonLink from "./ButtonLink.astro";
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import Headline from "@components/Headline.astro";

// Get current language and translations
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(String(lang));

// Define platform buttons
const buttons = [
  {
    type: "spotify",
    url: category?.spotifyPlaylist,
    label: t("musicPlatforms.platform.spotify"),
    variant: "spotify",
  },
  {
    type: "deezer",
    url: category?.deezerPlaylist,
    label: t("musicPlatforms.platform.deezer"),
    variant: "deezer",
  },
  {
    type: "apple",
    url: category?.appleMusicPlaylist,
    label: t("musicPlatforms.platform.apple"),
    variant: "apple",
  },
] as const;

// Filter buttons to only show those with valid URLs
const validButtons = buttons.filter(({ url }) => Boolean(url));
---

<div
  class="flex flex-wrap items-center justify-start gap-3 sm:gap-4 md:gap-6"
  role="group"
  aria-labelledby="music-platforms-heading"
>
  <Headline level="h3" textSize="base" className="sr-only">
    {title} - {t("musicPlatforms.heading")}
  </Headline>
  <div class="sr-only" aria-live="polite">
    {t("musicPlatforms.keyboardInstructions")}
  </div>
  {
    validButtons.map(({ type, url, label }) => (
      <ButtonLink
        href={url!}
        target="_blank"
        rel="noopener noreferrer"
        aria-label={t("musicPlatforms.listenOn", { title, platform: label })}
        className="music-platform-link"
        aria-describedby="external-platform-notice"
        variant="primary"
        data-platform={type}
        data-playlist-title={title}
      >
        <Icon
          name={type}
          class="mr-2 h-4 w-4 flex-shrink-0 fill-current sm:mr-3 sm:h-5 sm:w-5"
          aria-hidden="true"
          title={`${label} logo`}
        />
        <span class="text-xs font-medium whitespace-nowrap sm:text-sm">{label}</span>
      </ButtonLink>
    ))
  }
  <div id="external-platform-notice" class="sr-only">
    {t("musicPlatforms.externalNotice")}
  </div>
</div>

<script is:inline>
  /* eslint-disable @typescript-eslint/explicit-function-return-type */
  (function () {
    const buttons = Array.from(document.querySelectorAll(".music-platform-link"));
    function safeTrack(name) {
      try {
        const f = window.fathom;
        if (f && typeof f.trackEvent === "function") {
          f.trackEvent(String(name));
        }
      } catch {
        /* ignore */
      }
    }
    buttons.forEach((button) => {
      button.addEventListener(
        "click",
        () => {
          if (!(button instanceof HTMLElement)) {
            return;
          }
          const platform = button.dataset.platform;
          const playlist = button.dataset.playlistTitle;
          if (!platform) {
            return;
          }
          safeTrack(`music_${platform}_click`);
          if (playlist) {
            safeTrack(`music_${platform}_${playlist}`.replace(/[^a-zA-Z0-9_]/g, "_"));
          }
        },
        { passive: true }
      );
    });
  })();
</script>
