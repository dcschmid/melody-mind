---
/**
 * TableOfContents Component
 *
 * A responsive, accessible dropdown component that creates a table of contents
 * from h2 and h3 headings. Automatically extracts and displays navigation links.
 *
 * Features:
 * - Responsive design with mobile-first breakpoints
 * - WCAG AAA compliant with proper keyboard navigation
 * - Focus management and ARIA attributes
 * - Touch-friendly with appropriate target sizes
 * - Visual feedback for hover and focus states
 * - Support for reduced motion preferences
 * - Performance optimized with smooth animations
 * - Uses Tailwind CSS 4 for consistent theming
 *
 * @component
 * @accessibility WCAG AAA compliant
 */

/**
 * Interface for heading objects extracted from content
 * @interface Heading
 */
interface Heading {
  /** The heading level (2 for h2, 3 for h3) */
  depth: number;
  /** The slug ID for the heading */
  slug: string;
  /** The heading text content */
  text: string;
}

/**
 * Props interface for the TableOfContents component
 * @interface Props
 */
interface Props {
  /** Array of heading objects extracted from content */
  headings: Heading[];
  /** Optional custom title for the table of contents */
  title?: string;
  /** Optional language code for localization */
  lang?: string;
}

import { getLangFromUrl, useTranslations } from "@utils/i18n";
import { Icon } from "astro-icon/components";

const { headings = [], title, lang } = Astro.props;

// Get language from URL if not provided
const currentLang = lang || getLangFromUrl(Astro.url);

// Get translations function
const t = useTranslations(currentLang);

// Filter to only include h2 and h3 headings
const filteredHeadings = headings.filter((heading) => heading.depth === 2 || heading.depth === 3);

// Check if there are any headings to display
const hasHeadings = filteredHeadings.length > 0;

// Use title from props or default to translated title
const tocTitle = title || t("toc.nav.label");
---

{
  hasHeadings && (
    <div class="relative">
      <div class="relative">
        <button
          id="toc-toggle"
          aria-expanded="false"
          aria-controls="toc-content"
          aria-label={t("toc.toggle.label")}
          class="flex min-h-[44px] w-full items-center justify-between rounded-lg border border-gray-600 bg-gray-800 px-4 py-3 text-left text-base font-medium text-white shadow-lg transition-all duration-300 hover:border-gray-500 hover:bg-gray-700 hover:shadow-xl focus:ring-4 focus:ring-purple-500/60 focus:ring-offset-2 focus:ring-offset-gray-900 focus:outline-none"
        >
          <span class="flex items-center gap-3">
            <Icon name="menu" class="h-5 w-5 text-purple-400" aria-hidden="true" />
            <span>{tocTitle}</span>
          </span>
          <span
            class="sr-only"
            data-expanded={t("toc.state.expanded")}
            data-collapsed={t("toc.state.collapsed")}
          >
            {t("toc.state.collapsed")}
          </span>
          <Icon
            name="chevron-down"
            id="toc-icon"
            class="h-5 w-5 text-gray-400 transition-transform duration-300"
            aria-hidden="true"
          />
        </button>

        <div
          id="toc-content"
          aria-labelledby="toc-toggle"
          class="mt-3 overflow-hidden rounded-lg border border-gray-600 bg-gray-800 shadow-lg backdrop-blur-sm transition-all duration-300"
          style="max-height: 0; opacity: 0;"
        >
          <nav aria-label={t("toc.nav.label")} class="p-4">
            <a
              href="#article-content"
              class="mb-4 block text-sm text-purple-400 no-underline transition-colors duration-200 hover:underline hover:underline-offset-2 focus:ring-2 focus:ring-purple-500/60 focus:ring-offset-2 focus:ring-offset-gray-900 focus:outline-none"
            >
              {t("toc.skip.link")}
            </a>
            <ul class="scrollbar-thin scrollbar-track-gray-700 scrollbar-thumb-gray-500 hover:scrollbar-thumb-gray-400 m-0 max-h-[50vh] list-none overflow-y-auto p-0">
              {filteredHeadings.map((heading) => (
                <li class={`mb-1 ${heading.depth === 3 ? "ml-4" : ""}`}>
                  <a
                    href={`#${heading.slug}`}
                    class={`text-decoration-none block min-h-[44px] rounded-md px-3 py-2 leading-relaxed transition-all duration-200 ${
                      heading.depth === 2
                        ? "text-sm font-medium text-gray-300 hover:bg-gray-700 hover:text-white focus:bg-gray-700 focus:text-white focus:ring-2 focus:ring-purple-500/60 focus:ring-offset-2 focus:ring-offset-gray-900 focus:outline-none"
                        : "text-xs font-normal text-gray-400 hover:bg-gray-700 hover:text-white focus:bg-gray-700 focus:text-white focus:ring-2 focus:ring-purple-500/60 focus:ring-offset-2 focus:ring-offset-gray-900 focus:outline-none"
                    }`}
                  >
                    {heading.text}
                  </a>
                </li>
              ))}
            </ul>
          </nav>
        </div>
      </div>
    </div>
  )
}

<script>
  import { initDefaultTableOfContents } from "../../utils/components/tableOfContentsUtils";

  // Initialize table of contents functionality
  document.addEventListener("DOMContentLoaded", function () {
    initDefaultTableOfContents();
  });
</script>
