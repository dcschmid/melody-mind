---
/**
 * TableOfContents.astro
 * An accessible component that creates a dropdown menu with a table of contents.
 * Automatically extracts h2 and h3 headings from the content.
 *
 * @component
 * @accessibility WCAG AAA compliant with proper keyboard navigation, focus management and ARIA attributes
 */

/**
 * Interface for heading objects extracted from content
 * @interface Heading
 */
interface Heading {
  /** The heading level (2 for h2, 3 for h3) */
  depth: number;
  /** The slug ID for the heading */
  slug: string;
  /** The heading text content */
  text: string;
}

/**
 * Props interface for the TableOfContents component
 * @interface Props
 */
interface Props {
  /** Array of heading objects extracted from content */
  headings: Heading[];
  /** Optional custom title for the table of contents */
  title?: string;
  /** Optional language code for localization */
  lang?: string;
}

import { getLangFromUrl, useTranslations } from "@utils/i18n";
import { Icon } from "astro-icon/components";

const { headings = [], title, lang } = Astro.props;

// Get language from URL if not provided
const currentLang = lang || getLangFromUrl(Astro.url);

// Get translations function
const t = useTranslations(currentLang);

// Filter to only include h2 and h3 headings
const filteredHeadings = headings.filter((heading) => heading.depth === 2 || heading.depth === 3);

// Check if there are any headings to display
const hasHeadings = filteredHeadings.length > 0;

// Use title from props or default to translated title
const tocTitle = title || t("toc.nav.label");
---

{
  hasHeadings && (
    <div class="toc">
      <div class="toc__wrapper">
        <button
          id="toc-toggle"
          aria-expanded="false"
          aria-controls="toc-content"
          aria-label={t("toc.toggle.label")}
          class="toc__toggle"
        >
          <span class="toc__title-wrapper">
            <Icon name="menu" class="toc__icon toc__icon--menu" aria-hidden="true" />
            <span>{tocTitle}</span>
          </span>
          <span
            class="toc__state"
            data-expanded={t("toc.state.expanded")}
            data-collapsed={t("toc.state.collapsed")}
          >
            {t("toc.state.collapsed")}
          </span>
          <Icon name="chevron-down" class="toc__icon toc__icon--chevron" aria-hidden="true" />
        </button>

        <div
          id="toc-content"
          aria-labelledby="toc-toggle"
          class="toc__content toc__content--hidden"
        >
          <nav aria-label={t("toc.nav.label")} class="toc__nav">
            <a href="#article-content" class="toc__skip-link">
              {t("toc.skip.link")}
            </a>
            <ul class="toc__list">
              {filteredHeadings.map((heading) => (
                <li class={`toc__item ${heading.depth === 3 ? "toc__item--nested" : ""}`}>
                  <a
                    href={`#${heading.slug}`}
                    class={`toc__link ${heading.depth === 2 ? "toc__link--primary" : "toc__link--secondary"}`}
                  >
                    {heading.text}
                  </a>
                </li>
              ))}
            </ul>
          </nav>
        </div>
      </div>
    </div>
  )
}

<script>
  /**
   * JavaScript functionality for the dropdown table of contents
   * - Handles toggle functionality
   * - Manages keyboard accessibility
   * - Sets up proper focus management
   * - Handles translations for screen readers
   */
  document.addEventListener("DOMContentLoaded", () => {
    // Cache DOM elements
    const elements = {
      tocToggle: document.getElementById("toc-toggle"),
      tocContent: document.getElementById("toc-content"),
      tocIcon: document.querySelector(".toc__icon--chevron"),
      tocState: document.querySelector(".toc__state"),
    };

    // Early return if essential elements are missing
    if (!elements.tocToggle || !elements.tocContent || !elements.tocIcon || !elements.tocState) {
      return;
    }

    const { tocToggle, tocContent, tocIcon, tocState } = elements;

    /**
     * Updates the visual state of the table of contents
     * @param {boolean} isExpanded - Whether the TOC should be expanded
     */
    function updateVisualState(isExpanded: boolean): void {
      const stateText = isExpanded
        ? tocState.getAttribute("data-expanded") || "Expanded"
        : tocState.getAttribute("data-collapsed") || "Collapsed";

      // Update visual state
      tocContent.classList.toggle("toc__content--hidden", !isExpanded);
      tocIcon.classList.toggle("toc__icon--rotated", isExpanded);
      tocState.textContent = stateText;
    }

    /**
     * Toggles the table of contents dropdown visibility
     * - Updates ARIA attributes for accessibility
     * - Updates visual state (icon rotation, text)
     * - Handles screen reader announcements
     */
    function toggleToc(): void {
      const isExpanded = tocToggle.getAttribute("aria-expanded") === "true";
      const newState = !isExpanded;

      // Update ARIA attributes
      tocToggle.setAttribute("aria-expanded", newState.toString());

      // Update visual state
      updateVisualState(newState);
    }

    /**
     * Handles keyboard navigation for toggle button
     * @param {KeyboardEvent} e - The keyboard event
     */
    function handleToggleKeydown(e: KeyboardEvent): void {
      if (e.key === " " || e.key === "Enter") {
        e.preventDefault();
        toggleToc();
      }
    }

    /**
     * Sets focus on target heading and manages tabindex
     * @param {string} targetId - The ID of the target element
     */
    function focusTargetHeading(targetId: string): void {
      if (targetId === "article-content") {
        return;
      }

      const targetElement = document.getElementById(targetId);
      if (!targetElement) {
        return;
      }

      targetElement.setAttribute("tabindex", "-1");
      targetElement.focus();

      // Remove tabindex after blur
      targetElement.addEventListener(
        "blur",
        () => {
          targetElement.removeAttribute("tabindex");
        },
        { once: true }
      );
    }

    /**
     * Handles clicks on TOC links for proper focus management
     * @param {Event} e - The click event
     */
    function handleLinkClick(e: Event): void {
      const link = e.target as HTMLAnchorElement;
      const targetId = link.getAttribute("href")?.substring(1);

      if (targetId) {
        setTimeout(() => focusTargetHeading(targetId), 100);
      }
    }

    // Initialize the component in collapsed state
    updateVisualState(false);

    // Set up event listeners
    tocToggle.addEventListener("click", toggleToc);
    tocToggle.addEventListener("keydown", handleToggleKeydown);

    // Set up event listeners for TOC links
    const tocLinks = tocContent.querySelectorAll("a");
    tocLinks.forEach((link) => {
      link.addEventListener("click", handleLinkClick);
    });

    // Initialize the state text from data attributes
    const collapsedText = tocState.getAttribute("data-collapsed") || "Collapsed";
    tocState.textContent = collapsedText;
  });
</script>

<style lang="scss">
  /* ======================================
   * TABLE OF CONTENTS COMPONENT STYLES
   * WCAG AAA 2.2 COMPLIANT (7:1 CONTRAST)
   * OPTIMIZED WITH CSS VARIABLES & DRY PRINCIPLES
   * ====================================== */

  // SCSS Mixins for reusable patterns
  @mixin base-transition {
    transition: var(--transition-normal);
  }

  @mixin enhanced-transition($properties...) {
    transition: #{$properties};
  }

  @mixin focus-styles {
    outline: var(--focus-enhanced-outline-dark);
    outline-offset: var(--focus-ring-offset);
  }

  @mixin enhanced-focus {
    @include focus-styles;
    box-shadow: var(--focus-enhanced-shadow);
  }

  @mixin icon-size($size: var(--icon-size-md)) {
    width: $size;
    height: $size;
  }

  @mixin sr-only {
    position: absolute;
    width: var(--sr-only-width);
    height: var(--sr-only-height);
    margin: var(--sr-only-margin);
    overflow: hidden;
    clip: var(--sr-only-clip-path);
    white-space: nowrap;
    border: var(--space-none);
  }

  @mixin scrollbar-webkit {
    &::-webkit-scrollbar {
      width: var(--scrollbar-thin);
    }

    &::-webkit-scrollbar-track {
      background: var(--scrollbar-track-bg);
      border-radius: var(--scrollbar-track-radius);
    }

    &::-webkit-scrollbar-thumb {
      background: var(--scrollbar-thumb-bg);
      border-radius: var(--scrollbar-thumb-radius);

      &:hover {
        background: var(--scrollbar-thumb-hover);
      }
    }
  }

  .toc {
    // Container styles
    margin: var(--space-xl) var(--space-none) var(--space-3xl) var(--space-none);

    &__wrapper {
      position: relative;
    }

    // Base transitions for all interactive elements
    &__toggle,
    &__content,
    &__icon--chevron,
    &__link {
      @include base-transition;
    }

    /* Toggle Button */
    &__toggle {
      display: flex;
      width: var(--width-full);
      align-items: center;
      justify-content: space-between;
      border-radius: var(--radius-xl);
      border: var(--border-width-thin) solid var(--border-primary);
      background: var(--card-bg);
      padding: var(--space-lg) var(--space-xl);
      text-align: left;
      font-size: var(--text-lg);
      font-weight: var(--font-medium);
      color: var(--text-primary);
      box-shadow: var(--card-shadow);
      cursor: pointer;
      min-height: var(--min-touch-size);

      // Override with specific transitions
      @include enhanced-transition(
        background-color var(--transition-normal),
        border-color var(--transition-normal),
        box-shadow var(--transition-normal)
      );

      &:hover {
        background: var(--bg-tertiary);
        border-color: var(--border-secondary);
        box-shadow: var(--card-shadow-hover);
      }

      &:focus {
        @include enhanced-focus;
      }
    }

    /* Title section with icon */
    &__title-wrapper {
      display: flex;
      align-items: center;
      gap: var(--space-md);
    }

    /* Icons */
    &__icon {
      @include icon-size;

      &--menu {
        color: var(--interactive-primary);
      }

      &--chevron {
        @include enhanced-transition(transform var(--transition-normal));
      }

      &--rotated {
        transform: rotate(180deg);
      }
    }

    /* Screen reader state text */
    &__state {
      @include sr-only;
    }

    /* Content container */
    &__content {
      margin-top: var(--space-sm);
      overflow: hidden;
      border-radius: var(--radius-xl);
      border: var(--border-width-thin) solid var(--border-primary);
      background: var(--card-bg);
      box-shadow: var(--shadow-lg);
      backdrop-filter: blur(var(--space-sm));
      max-height: var(--modal-content-max-height);
      opacity: var(--animation-opacity-full);

      @include enhanced-transition(
        max-height var(--transition-normal),
        opacity var(--transition-fast)
      );

      &--hidden {
        max-height: var(--space-none);
        opacity: var(--animation-opacity-end);
        border: none;
        box-shadow: none;
      }
    }

    /* Navigation container */
    &__nav {
      padding: var(--space-lg);
    }

    /* Skip link */
    &__skip-link {
      display: block;
      margin-bottom: var(--space-lg);
      font-size: var(--text-sm);
      color: var(--interactive-primary);
      text-decoration: none;

      &:hover {
        text-decoration: underline;
        text-decoration-thickness: var(--text-decoration-thickness);
        text-underline-offset: var(--text-underline-offset);
      }

      &:focus {
        @include focus-styles;
      }
    }

    /* List container */
    &__list {
      max-height: 60vh;
      overflow-y: auto;
      padding: var(--space-none);
      margin: var(--space-none);
      list-style: none;
      scrollbar-width: var(--scrollbar-thin);
      scrollbar-color: var(--scrollbar-thumb-bg) var(--scrollbar-track-bg);

      // Custom scrollbar for Webkit browsers
      @include scrollbar-webkit;
    }

    /* List items */
    &__item {
      margin-bottom: var(--space-sm);

      &--nested {
        margin-left: var(--space-lg);
      }
    }

    /* Links */
    &__link {
      display: block;
      border-radius: var(--radius-lg);
      padding: var(--space-md) var(--space-md);
      color: var(--text-secondary);
      text-decoration: none;
      min-height: var(--min-touch-size);
      line-height: var(--leading-enhanced);

      @include enhanced-transition(
        background-color var(--transition-normal),
        color var(--transition-normal)
      );

      &--primary {
        font-size: var(--text-base);
        font-weight: var(--font-medium);
      }

      &--secondary {
        font-size: var(--text-sm);
        font-weight: var(--font-normal);
      }

      &:hover {
        background: var(--bg-tertiary);
        color: var(--text-primary);
      }

      &:focus {
        @include focus-styles;
        background: var(--bg-tertiary);
        color: var(--text-primary);
      }
    }
  }

  /* ======================================
   * RESPONSIVE DESIGN
   * ====================================== */

  @media (max-width: var(--breakpoint-sm)) {
    .toc {
      &__list {
        max-height: 50vh;
      }

      &__toggle {
        padding: var(--space-md) var(--space-lg);
        font-size: var(--text-base);
      }

      &__nav {
        padding: var(--space-md);
      }
    }
  }

  /* ======================================
   * PRINT STYLES
   * ====================================== */

  @media print {
    .toc {
      display: none;
    }
  }

  /* ======================================
   * REDUCED MOTION SUPPORT
   * ====================================== */

  @media (prefers-reduced-motion: reduce) {
    .toc {
      &__toggle,
      &__content,
      &__icon--chevron,
      &__link {
        transition: none;
      }
    }
  }

  /* ======================================
   * HIGH CONTRAST MODE SUPPORT
   * ====================================== */

  @media (prefers-contrast: high) {
    .toc {
      &__toggle {
        border-width: var(--border-width-enhanced);
      }

      &__content {
        border-width: var(--border-width-enhanced);
      }

      &__link:focus,
      &__skip-link:focus,
      &__toggle:focus {
        outline-width: var(--border-width-enhanced);
      }
    }
  }
</style>
