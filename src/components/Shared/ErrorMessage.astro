---
interface Props {
  message?: string;
  autoHideAfter?: number;
}

const { message = "Ein Fehler ist aufgetreten", autoHideAfter = 5000 } =
  Astro.props;
---

<div
  class="errorMessage hidden"
  role="alert"
  aria-live="assertive"
  aria-atomic="true"
  data-auto-hide={autoHideAfter}
>
  <div class="errorContent">
    <span class="errorIcon" aria-hidden="true">⚠️</span>
    <p class="errorText">{message}</p>
    <button
      class="closeButton"
      aria-label="Fehlermeldung schließen"
      type="button">×</button
    >
  </div>
</div>

<style lang="scss">
  .errorMessage {
    position: fixed;
    z-index: var(--layer-above);
    top: var(--padding-medium);
    left: 50%;
    transform: translateX(-50%);

    padding: var(--padding-medium);

    color: var(--button-text-color);

    background-color: var(--error-color);
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);

    &.hidden {
      pointer-events: none;
      visibility: hidden;
      opacity: 0;
      transition:
        visibility 0s linear 0.3s,
        opacity 0.3s ease-out;
    }

    &:not(.hidden) {
      visibility: visible;
      opacity: 1;
      transition:
        visibility 0s,
        opacity 0.3s ease-out;
    }

    @media (prefers-reduced-motion: no-preference) {
      will-change: transform, opacity;
      animation: slide-in 0.3s ease-out;
    }
  }

  .errorContent {
    display: flex;
    gap: var(--padding-small);
    align-items: center;
  }

  .errorIcon {
    font-size: 1.2em;
  }

  .errorText {
    margin: 0;
    font-family: var(--font-family);
    font-size: var(--body-font-size);
  }

  .closeButton {
    cursor: pointer;

    padding: calc(var(--padding-small) / 2);

    font-size: 1.2em;
    color: inherit;

    opacity: 0.8;
    background: none;
    border: none;

    transition: opacity var(--transition-speed) ease;

    &:hover {
      opacity: 1;
    }

    &:focus-visible {
      border-radius: 2px;
      outline: 2px solid var(--button-text-color);
      outline-offset: 2px;
    }
  }

  @keyframes slide-in {
    from {
      transform: translate(-50%, -2rem);
      opacity: 0;
    }

    to {
      transform: translate(-50%, 0);
      opacity: 1;
    }
  }

  @media (forced-colors: active) {
    .errorMessage {
      border: 2px solid ButtonText;
    }
  }
</style>

<script>
  class ErrorMessage extends HTMLElement {
    private closeButton: HTMLButtonElement | null;
    private autoHideTimeout: ReturnType<typeof setTimeout> | null;

    constructor() {
      super();
      this.closeButton = this.querySelector(".closeButton");
      this.autoHideTimeout = null;
      this.init();
    }

    init() {
      this.closeButton?.addEventListener("click", () => this.hide());

      const autoHideAfter = this.dataset.autoHide
        ? parseInt(this.dataset.autoHide)
        : 0;

      if (autoHideAfter > 0) {
        this.autoHideTimeout = setTimeout(() => this.hide(), autoHideAfter);
      }

      document.addEventListener("keydown", (e) => {
        if (e.key === "Escape" && !this.classList.contains("hidden")) {
          this.hide();
        }
      });
    }

    hide() {
      this.classList.add("hidden");
      if (this.autoHideTimeout) {
        clearTimeout(this.autoHideTimeout);
      }
    }
  }

  customElements.define("error-message", ErrorMessage);
</script>
