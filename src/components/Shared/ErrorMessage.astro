---
import { getLangFromUrl, useTranslations } from "@utils/i18n";

interface Props {
  message?: string;
  autoHideAfter?: number;
}

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const { message = t("error.default"), autoHideAfter = 5000 } = Astro.props;
---

<div
  class="errorMessage fixed top-6 left-1/2 -translate-x-1/2 z-50 p-4 rounded-lg bg-red-600 text-white shadow-lg pointer-events-auto hidden"
  role="alert"
  aria-live="assertive"
  aria-atomic="true"
  data-auto-hide={autoHideAfter}
>
  <div class="errorContent flex items-center gap-2">
    <span class="errorIcon text-xl" aria-hidden="true">⚠️</span>
    <p class="errorText m-0 font-medium">{message}</p>
    <button
      class="closeButton ml-2 p-1 opacity-80 hover:opacity-100 bg-transparent border-none text-white text-xl transition-opacity focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-white/70"
      aria-label={t("error.close")}
      type="button"
    >
      ×
    </button>
  </div>
</div>

<style>
  /* Animationen und JS-Unterstützung */
  .errorMessage {
    will-change: transform, opacity;
    transition:
      visibility 0s,
      opacity 0.3s ease-out,
      transform 0.3s ease-out;
  }

  .errorMessage.hidden {
    pointer-events: none;

    transform: translate(-50%, -2rem);

    visibility: hidden;
    opacity: 0;

    transition:
      visibility 0s linear 0.3s,
      opacity 0.3s ease-out,
      transform 0.3s ease-out;
  }

  .errorMessage:not(.hidden) {
    transform: translate(-50%, 0);
    visibility: visible;
    opacity: 1;
  }

  /* Reduzierte Bewegung für Barrierefreiheit */
  @media (prefers-reduced-motion: reduce) {
    .errorMessage {
      transition:
        visibility 0s,
        opacity 0.3s ease-out;
    }

    .errorMessage.hidden,
    .errorMessage:not(.hidden) {
      transform: translate(-50%, 0);
    }
  }

  /* High Contrast Mode Support */
  @media (forced-colors: active) {
    .errorMessage {
      border: 2px solid ButtonText;
    }

    .closeButton {
      border: 1px solid ButtonText;
    }

    .closeButton:focus-visible {
      outline: 2px solid Highlight;
    }
  }
</style>

<script>
  class ErrorMessage extends HTMLElement {
    private closeButton: HTMLButtonElement | null;
    private autoHideTimeout: ReturnType<typeof setTimeout> | null;

    constructor() {
      super();
      this.closeButton = this.querySelector(".closeButton");
      this.autoHideTimeout = null;
      this.init();
    }

    init() {
      this.closeButton?.addEventListener("click", () => this.hide());

      const autoHideAfter = this.dataset.autoHide
        ? parseInt(this.dataset.autoHide)
        : 0;

      if (autoHideAfter > 0) {
        this.autoHideTimeout = setTimeout(() => this.hide(), autoHideAfter);
      }

      document.addEventListener("keydown", (e) => {
        if (e.key === "Escape" && !this.classList.contains("hidden")) {
          this.hide();
        }
      });
    }

    hide() {
      this.classList.add("hidden");
      if (this.autoHideTimeout) {
        clearTimeout(this.autoHideTimeout);
      }
    }
  }

  customElements.define("error-message", ErrorMessage);
</script>
