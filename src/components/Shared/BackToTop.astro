---
/**
 * @component BackToTop
 * @description Reusable back-to-top button component with optimized scroll behavior.
 * Provides consistent styling, accessibility, and performance across all pages.
 *
 * @example
 * ```astro
 * <BackToTop lang="en" />
 * <BackToTop lang="de" className="custom-position" />
 * ```
 */

import { Icon } from "astro-icon/components";
import { useTranslations } from "@utils/i18n";

/**
 * Props interface for the BackToTop component
 */
interface Props {
  /** Language code for internationalization */
  lang: string;
  /** Additional CSS class for custom positioning or styling */
  className?: string;
  /** Custom aria-label (overrides default translation) */
  ariaLabel?: string;
  /** Custom scroll threshold in pixels (uses CSS variable if not provided) */
  scrollThreshold?: number;
}

const { lang, className = "", ariaLabel, scrollThreshold } = Astro.props;
const t = useTranslations(lang);

// Use custom aria-label or fallback to translation
const buttonAriaLabel = ariaLabel || t("common.back.to.top");
const screenReaderText = t("common.back.to.top");
---

<button
  id="back-to-top"
  class={`fixed z-30 min-w-[44px] min-h-[44px] p-4 bg-gradient-to-r from-purple-600 to-purple-700 text-white border-none rounded-full shadow-lg transition-all duration-300 cursor-pointer outline-none right-4 bottom-4 hover:from-purple-700 hover:to-purple-800 hover:-translate-y-1 hover:shadow-xl focus:from-purple-700 focus:to-purple-800 focus:shadow-xl focus:ring-2 focus:ring-purple-300 focus:ring-offset-2 active:translate-y-0.5 ${className}`.trim()}
  aria-label={buttonAriaLabel}
  type="button"
  style="display: none;"
  data-scroll-threshold={scrollThreshold}
>
  <Icon name="arrow-up" class="h-6 w-6 text-inherit md:h-8 md:w-8" aria-hidden="true" />
  <span class="sr-only">{screenReaderText}</span>
</button>

<script>
  /**
   * BackToTop Component Script
   *
   * Modern ES6+ implementation with arrow functions, const/let,
   * template literals, and modern event handling.
   */
  document.addEventListener("DOMContentLoaded", (): void => {
    const backToTopButton = document.getElementById("back-to-top") as HTMLButtonElement;

    if (!backToTopButton) {
      return;
    }

    // Get scroll threshold from CSS variable or data attribute
    const thresholdFromData = backToTopButton.dataset.scrollThreshold;
    const scrollThreshold = thresholdFromData
      ? parseInt(thresholdFromData, 10)
      : parseInt(
          getComputedStyle(document.documentElement).getPropertyValue("--scroll-threshold")
        ) || 400;

    // Check for reduced motion preference
    const prefersReducedMotion = window.matchMedia("(prefers-reduced-motion: reduce)").matches;

    /**
     * Handles scroll visibility
     */
    const handleScroll = (): void => {
      const shouldShow = window.scrollY > scrollThreshold;

      if (shouldShow) {
        backToTopButton.style.display = "block";
        backToTopButton.setAttribute("aria-hidden", "false");
      } else {
        backToTopButton.style.display = "none";
        backToTopButton.setAttribute("aria-hidden", "true");
      }
    };

    /**
     * Handles back to top click with accessibility features
     */
    const handleBackToTop = (): void => {
      // Scroll behavior based on motion preference
      const scrollOptions: ScrollToOptions = {
        top: 0,
        behavior: prefersReducedMotion ? "auto" : "smooth",
      };

      window.scrollTo(scrollOptions);

      // Focus management for keyboard users
      setTimeout(
        () => {
          const mainHeading = document.querySelector("h1") as HTMLElement;
          if (mainHeading) {
            mainHeading.focus({ preventScroll: true });
          }
        },
        prefersReducedMotion ? 50 : 500
      );
    };

    // Event listeners with modern syntax
    window.addEventListener("scroll", handleScroll);
    backToTopButton.addEventListener("click", handleBackToTop);

    // Keyboard navigation enhancement
    backToTopButton.addEventListener("keydown", (e: KeyboardEvent) => {
      if (e.key === "Enter" || e.key === " ") {
        e.preventDefault();
        handleBackToTop();
      }
    });
  });
</script>
