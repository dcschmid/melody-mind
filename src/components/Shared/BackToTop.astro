---
/**
 * @component BackToTop
 * @description Reusable back-to-top button component with optimized scroll behavior.
 * Provides consistent styling, accessibility, and performance across all pages.
 *
 * Features:
 * - WCAG AAA compliant with enhanced focus indicators
 * - Performance optimized with CSS variables and smooth scrolling
 * - Automatic visibility based on scroll threshold
 * - Full internationalization support
 * - Reduced motion support
 * - Screen reader announcements
 * - Touch feedback for mobile devices
 * - Responsive design with mobile-first approach
 *
 * @example
 * ```astro
 * <BackToTop lang="en" />
 * <BackToTop lang="de" className="custom-position" />
 * ```
 *
 * @accessibility
 * - Minimum 44Ã—44px touch target (WCAG AAA)
 * - High contrast focus indicators
 * - Screen reader announcements for scroll actions
 * - Keyboard navigation support
 * - Respects prefers-reduced-motion preference
 */

import { Icon } from "astro-icon/components";
import { useTranslations } from "@utils/i18n";

/**
 * Props interface for the BackToTop component
 */
interface Props {
  /** Language code for internationalization */
  lang: string;
  /** Additional CSS class for custom positioning or styling */
  className?: string;
  /** Custom aria-label (overrides default translation) */
  ariaLabel?: string;
  /** Custom scroll threshold in pixels (uses CSS variable if not provided) */
  scrollThreshold?: number;
}

const { lang, className = "", ariaLabel, scrollThreshold } = Astro.props;
const t = useTranslations(lang);

// Use custom aria-label or fallback to translation
const buttonAriaLabel = ariaLabel || t("common.back.to.top");
const screenReaderText = t("common.back.to.top");
---

<button
  id="back-to-top"
  class={`back-to-top ${className}`.trim()}
  aria-label={buttonAriaLabel}
  type="button"
  style="display: none;"
  data-scroll-threshold={scrollThreshold}
>
  <Icon name="arrow-up" class="back-to-top__icon icon-xl" aria-hidden="true" />
  <span class="sr-only">{screenReaderText}</span>
</button>

<style lang="scss">
  /* ======================================
   * BACK TO TOP COMPONENT STYLES
   * Responsive design with mobile-first approach
   * Using CSS variables from global.css
   * ====================================== */

  .back-to-top {
    // Base positioning and sizing
    position: fixed;
    z-index: var(--z-fixed);
    min-width: var(--min-touch-size);
    min-height: var(--min-touch-size);
    padding: var(--space-md);
    background: var(--btn-primary-bg);
    color: var(--btn-primary-text);
    border: none;
    border-radius: var(--radius-full);
    box-shadow: var(--shadow-lg);
    transition: var(--transition-normal);
    cursor: pointer;

    // Performance optimizations
    contain: layout style;
    will-change: transform, opacity, background-color;

    // Enhanced focus styles for WCAG AAA
    outline: none;

    // Mobile-first positioning (bottom right)
    right: var(--space-md);
    bottom: var(--space-md);

    // Tablet and desktop positioning
    @media (min-width: 48em) {
      right: var(--space-xl);
      bottom: var(--space-xl);
    }

    // Large desktop positioning
    @media (min-width: 80em) {
      right: var(--space-2xl);
      bottom: var(--space-2xl);
    }

    // Hover effects
    &:hover {
      background: var(--btn-primary-hover);
      transform: translateY(calc(-1 * var(--space-xs)));
      box-shadow: var(--shadow-xl);
    }

    // Focus states
    &:focus,
    &:focus-visible {
      background: var(--btn-primary-hover);
      box-shadow: var(--focus-ring);
      outline-offset: var(--focus-ring-offset);
    }

    // Active state
    &:active {
      transform: translateY(var(--space-xs));
      transition-duration: var(--transition-instant);
    }

    // Icon styles
    &__icon {
      color: inherit;
      width: var(--icon-size-md);
      height: var(--icon-size-md);

      // Larger icon on larger screens
      @media (min-width: 48em) {
        width: var(--icon-size-lg);
        height: var(--icon-size-lg);
      }
    }

    // Responsive sizing for different screen sizes
    @media (min-width: 48em) {
      min-width: calc(var(--min-touch-size) + var(--space-sm));
      min-height: calc(var(--min-touch-size) + var(--space-sm));
      padding: var(--space-lg);
    }

    @media (min-width: 80em) {
      min-width: calc(var(--min-touch-size) + var(--space-md));
      min-height: calc(var(--min-touch-size) + var(--space-md));
      padding: var(--space-xl);
    }
  }

  /* Screen reader only content */
  .sr-only {
    position: absolute;
    width: var(--sr-only-width);
    height: var(--sr-only-height);
    padding: var(--space-none);
    margin: var(--sr-only-margin);
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: var(--space-none);
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .back-to-top {
      transition-duration: var(--transition-instant) !important;

      &:hover {
        transform: none;
      }

      &:active {
        transform: none;
      }
    }
  }

  /* High contrast mode support */
  @media (forced-colors: active) {
    .back-to-top {
      border: var(--border-width-thin) solid ButtonBorder;
      background: ButtonFace;
      color: ButtonText;

      &:hover,
      &:focus {
        border-color: Highlight;
        background: Highlight;
        color: HighlightText;
      }
    }
  }

  /* Print styles - hide back to top button */
  @media print {
    .back-to-top {
      display: none !important;
    }
  }

  /* Landscape orientation adjustments for mobile */
  @media (orientation: landscape) and (max-width: 47.9375em) {
    .back-to-top {
      right: var(--space-sm);
      bottom: var(--space-sm);
      min-width: var(--min-touch-size);
      min-height: var(--min-touch-size);
      padding: var(--space-sm);
    }
  }

  /* High DPI displays */
  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
    .back-to-top {
      // Ensure crisp rendering on high DPI displays
      image-rendering: -webkit-optimize-contrast;
      image-rendering: crisp-edges;
    }
  }
</style>

<script>
  /**
   * BackToTop Component Script
   *
   * Modern ES6+ implementation with arrow functions, const/let,
   * template literals, and modern event handling.
   */
  document.addEventListener("DOMContentLoaded", (): void => {
    const backToTopButton = document.getElementById("back-to-top") as HTMLButtonElement;

    if (!backToTopButton) {
      return;
    }

    // Get scroll threshold from CSS variable or data attribute
    const thresholdFromData = backToTopButton.dataset.scrollThreshold;
    const scrollThreshold = thresholdFromData
      ? parseInt(thresholdFromData, 10)
      : parseInt(
          getComputedStyle(document.documentElement).getPropertyValue("--scroll-threshold")
        ) || 400;

    // Check for reduced motion preference
    const prefersReducedMotion = window.matchMedia("(prefers-reduced-motion: reduce)").matches;

    // Check if device supports touch
    const isTouchDevice = "ontouchstart" in window || navigator.maxTouchPoints > 0;

    /**
     * Announces a message to screen readers
     */
    const announceToScreenReader = (message: string): void => {
      let announcer = document.getElementById("back-to-top-announcer");
      if (!announcer) {
        announcer = document.createElement("div");
        announcer.id = "back-to-top-announcer";
        announcer.className = "sr-only";
        announcer.setAttribute("aria-live", "polite");
        announcer.setAttribute("aria-atomic", "true");
        document.body.appendChild(announcer);
      }

      // Clear and set new message with timing
      announcer.textContent = "";
      setTimeout(() => {
        if (announcer) {
          announcer.textContent = message;
        }
      }, 100);
    };

    /**
     * Handles scroll visibility with performance optimization
     */
    let scrollTimeout: ReturnType<typeof setTimeout> | null = null;

    const handleScroll = (): void => {
      // Throttle scroll events for performance
      if (scrollTimeout) {
        return;
      }

      scrollTimeout = setTimeout(() => {
        const shouldShow = window.scrollY > scrollThreshold;

        if (shouldShow) {
          backToTopButton.style.display = "block";
          backToTopButton.setAttribute("aria-hidden", "false");
        } else {
          backToTopButton.style.display = "none";
          backToTopButton.setAttribute("aria-hidden", "true");
        }

        scrollTimeout = null;
      }, 16); // ~60fps throttling
    };

    /**
     * Handles back to top click with accessibility features
     */
    const handleBackToTop = (): void => {
      // Scroll behavior based on motion preference
      const scrollOptions: ScrollToOptions = {
        top: 0,
        behavior: prefersReducedMotion ? "auto" : "smooth",
      };

      window.scrollTo(scrollOptions);

      // Focus management for keyboard users
      setTimeout(
        () => {
          const mainHeading = document.querySelector("h1") as HTMLElement;
          if (mainHeading) {
            mainHeading.focus({ preventScroll: true });
          }
        },
        prefersReducedMotion ? 50 : 500
      );

      // Screen reader announcement
      const message = backToTopButton.getAttribute("aria-label") || "Scrolled to top of page";
      announceToScreenReader(message);

      // Haptic feedback for touch devices
      if (isTouchDevice && "vibrate" in navigator) {
        try {
          navigator.vibrate(15);
        } catch {
          // Ignore vibration errors
        }
      }
    };

    // Event listeners with modern syntax
    window.addEventListener("scroll", handleScroll, { passive: true });
    backToTopButton.addEventListener("click", handleBackToTop);

    // Keyboard navigation enhancement
    backToTopButton.addEventListener("keydown", (e: KeyboardEvent) => {
      if (e.key === "Enter" || e.key === " ") {
        e.preventDefault();
        handleBackToTop();
      }
    });

    // Clean up on page unload
    window.addEventListener("beforeunload", () => {
      if (scrollTimeout) {
        clearTimeout(scrollTimeout);
      }
    });
  });
</script>
