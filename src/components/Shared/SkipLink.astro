---
/**
 * @component SkipLink
 * @description Accessibility component that allows keyboard users to bypass repetitive navigation
 * and quickly access the main content. Initially hidden visually but appears when focused,
 * following WCAG AAA compliance standards.
 *
 * Features:
 * - Mobile-first responsive design
 * - WCAG AAA compliant with enhanced focus indicators
 * - Performance optimized transitions using CSS variables
 * - High contrast mode support
 * - Reduced motion support
 * - Consistent styling using global CSS variables
 * - Proper focus management
 * - Keyboard accessibility optimized
 *
 * @example
 * ```astro
 * <SkipLink targetId="quiz-content" />
 * <SkipLink targetId="main-content" />
 * ```
 *
 * @accessibility
 * - WCAG AAA compliant with enhanced focus indicators
 * - Screen reader announcements with proper ARIA attributes
 * - Keyboard navigation support
 * - High contrast mode support
 * - Reduced motion support
 * - Minimum 44Ã—44px touch target
 */

import { getLangFromUrl, useTranslations } from "@utils/i18n";

interface Props {
  /**
   * The ID of the element to target when the skip link is activated
   * @default "main-content"
   */
  targetId?: string;
}

const { targetId = "main-content" } = Astro.props;
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<a href={`#${targetId}`} class="skip-link" data-skip-link aria-label={t("nav.skip.main")}>
  <svg
    class="skip-link__icon"
    width="16"
    height="16"
    viewBox="0 0 24 24"
    fill="none"
    aria-hidden="true"
  >
    <path
      d="M7 17L17 7M17 7H8M17 7V16"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"></path>
  </svg>
  {t("nav.skip.main")}
</a>

<style lang="scss">
  /* ======================================
   * SKIPLINK COMPONENT STYLES
   * Mobile-first responsive design using global CSS variables
   * WCAG AAA compliant with enhanced accessibility features
   * ====================================== */

  .skip-link {
    // Positioning - optimize using standardized variables
    position: absolute;
    top: -9999px;
    left: -9999px;
    z-index: var(--z-modal);

    // Layout - use semantic touch target variables consistently
    min-width: var(--min-touch-size);
    min-height: var(--min-touch-size);
    transform: translate(-50%, 0);

    // Visual styling - enhanced with gradient background
    border-radius: 0 0 var(--radius-lg) var(--radius-lg);
    background: var(--interactive-primary);
    padding: var(--space-sm) var(--space-xl);
    box-shadow: var(--shadow-lg);

    // Typography - use consistent font variables
    text-align: center;
    font-size: var(--text-base);
    font-weight: var(--font-bold);
    color: var(--btn-primary-text);
    line-height: var(--leading-normal);

    // Interactive styles
    text-decoration: none;
    cursor: pointer;

    // Performance optimization
    transition:
      top var(--transition-normal),
      background-color var(--transition-fast),
      transform var(--transition-fast);

    // Layout optimization
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-xs);

    // Icon styling
    &__icon {
      flex-shrink: 0;
      filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.1));
      transition: transform var(--transition-fast);
    }

    // Mobile-first responsive design
    @media (min-width: 48em) {
      padding: var(--space-md) var(--space-2xl);
      font-size: var(--text-lg);
    }

    @media (min-width: 64em) {
      padding: var(--space-md) var(--space-3xl);
    }

    // Hover state - enhanced with gradient animation
    @media (hover: hover) {
      &:hover {
        background: var(--interactive-primary-hover);
        transform: translate(-50%, 0) scale(1.05);
        box-shadow: var(--shadow-xl);

        .skip-link__icon {
          transform: translateX(2px) translateY(-2px);
        }
      }
    }

    // Focus state - enhanced with beautiful gradient and glow
    &:focus-visible {
      top: 0;
      left: 50%;
      outline: var(--focus-enhanced-outline-dark);
      outline-offset: var(--focus-ring-offset);
      background: var(--interactive-primary-focus);
      box-shadow: var(--focus-enhanced-shadow), var(--shadow-xl);
      transform: translate(-50%, 0) scale(1.05);

      .skip-link__icon {
        transform: translateX(3px) translateY(-3px) scale(1.1);
      }
    }

    // Active state - enhanced with deeper gradient
    &:active {
      transform: translate(-50%, 0) scale(0.95);
      background: var(--interactive-primary-active);
      box-shadow: var(--shadow-md);
    }

    // Touch device optimizations
    @media (pointer: coarse) {
      min-height: var(--min-touch-size);
      min-width: var(--min-touch-size);
      padding: var(--space-md) var(--space-xl);
    }
  }

  // High Contrast Mode Support
  @media (forced-colors: active) {
    .skip-link {
      border: var(--border-width-thick) solid ButtonText;
      background-color: ButtonFace !important;
      color: ButtonText !important;
      forced-color-adjust: none;
    }

    .skip-link:focus-visible {
      outline: var(--border-width-enhanced) solid Highlight !important;
      background-color: Highlight !important;
      color: HighlightText !important;
    }
  }

  // Reduced Motion Support - use semantic animation variables
  @media (prefers-reduced-motion: reduce) {
    .skip-link {
      transition-duration: var(--transition-fast) !important;
      transform: translate(-50%, 0);
    }

    .skip-link:hover,
    .skip-link:active {
      transform: translate(-50%, 0);
    }
  }

  // Enhanced contrast for high contrast preference - using semantic variables
  @media (prefers-contrast: high) {
    .skip-link {
      background-color: var(--bg-primary);
      color: var(--text-primary);
      border: var(--border-width-thick) solid var(--text-primary);
    }

    .skip-link:focus-visible {
      background-color: var(--text-primary);
      color: var(--bg-primary);
      outline-width: var(--border-width-enhanced);
    }
  }

  // Dark mode support
  @media (prefers-color-scheme: dark) {
    .skip-link {
      background-color: var(--interactive-primary-dark);
      color: var(--btn-primary-text-dark);
    }

    .skip-link:hover,
    .skip-link:focus-visible {
      background-color: var(--interactive-primary-hover-dark);
    }

    .skip-link:active {
      background-color: var(--interactive-primary-active-dark);
    }
  }

  // Print styles
  @media print {
    .skip-link {
      display: none;
    }
  }
</style>

<script>
  /**
   * SkipLink Enhancement Script
   *
   * Improves the skip link behavior with:
   * - Focus management for the target element
   * - Proper keyboard navigation
   * - Announcements for screen readers
   */
  document.addEventListener("DOMContentLoaded", (): void => {
    const skipLink = document.querySelector("[data-skip-link]") as HTMLAnchorElement | null;

    if (!skipLink) {
      return;
    }

    // Add click handler with proper focus management
    skipLink.addEventListener("click", (e: Event): void => {
      e.preventDefault();

      const targetId = skipLink.getAttribute("href")?.substring(1);
      if (!targetId) {
        return;
      }

      const targetElement = document.getElementById(targetId);

      if (targetElement) {
        // Set tabindex to make non-interactive elements focusable
        if (!targetElement.getAttribute("tabindex")) {
          targetElement.setAttribute("tabindex", "-1");
        }

        // Focus the target and scroll into view
        targetElement.focus({ preventScroll: true });
        targetElement.scrollIntoView({
          behavior: window.matchMedia("(prefers-reduced-motion: reduce)").matches
            ? "auto"
            : "smooth",
        });

        // Announce to screen readers
        announceToScreenReader(`Skipped to ${targetId}`);
      }
    });

    // Monitor for page changes in SPA context
    document.addEventListener("astro:page-load", (): void => {
      // Re-acquire skip link reference after page changes
      const newSkipLink = document.querySelector("[data-skip-link]") as HTMLAnchorElement | null;
      if (newSkipLink) {
        newSkipLink.addEventListener("click", (e: Event): void => {
          e.preventDefault();
          const targetId = newSkipLink.getAttribute("href")?.substring(1);
          if (targetId) {
            const targetElement = document.getElementById(targetId);
            if (targetElement) {
              if (!targetElement.getAttribute("tabindex")) {
                targetElement.setAttribute("tabindex", "-1");
              }
              targetElement.focus({ preventScroll: true });
              targetElement.scrollIntoView({
                behavior: window.matchMedia("(prefers-reduced-motion: reduce)").matches
                  ? "auto"
                  : "smooth",
              });
              announceToScreenReader(`Skipped to ${targetId}`);
            }
          }
        });
      }
    });
  });

  /**
   * Announce a message to screen readers
   */
  const announceToScreenReader = (message: string): void => {
    const announcer = document.createElement("div");
    announcer.setAttribute("aria-live", "assertive");
    announcer.setAttribute("aria-atomic", "true");
    announcer.className = "sr-only";
    announcer.textContent = message;

    document.body.appendChild(announcer);

    // Remove after announcement is likely complete
    setTimeout(() => {
      if (document.body.contains(announcer)) {
        document.body.removeChild(announcer);
      }
    }, 3000);
  };
</script>
