---
/**
 * @component SkipLink
 * @description An accessibility component that allows keyboard users to bypass repetitive navigation
 * and quickly access the main content. This component is initially hidden visually but appears when
 * focused, following WCAG AAA compliance standards.
 *
 * Features:
 * - High contrast visual appearance when focused
 * - Proper focus management
 * - Keyboard accessibility optimized
 * - Performance-optimized transitions using CSS variables
 * - High contrast mode support
 * - Reduced motion support
 * - Maximized usage of semantic CSS variables from global.css
 * - DRY principles with consolidated design tokens
 *
 * @prop {string} targetId - The ID of the element to skip to (default: "main-content")
 *
 * @example
 * <SkipLink targetId="quiz-content" />
 */
import { getLangFromUrl, useTranslations } from "@utils/i18n";

interface Props {
  /**
   * The ID of the element to target when the skip link is activated
   * @default "main-content"
   */
  targetId?: string;
}

const { targetId = "main-content" } = Astro.props;
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<a href={`#${targetId}`} class="skip-link" data-skip-link aria-label={t("nav.skip.main")}>
  {t("nav.skip.main")}
</a>

<style lang="scss">
  /**
   * Skip Link Styles with enhanced accessibility and maximized CSS variable usage
   * - BEM methodology for consistent class naming
   * - WCAG AAA 2.2 compliant using semantic CSS variables from global.css
   * - GPU acceleration for performance optimization
   * - High contrast and reduced motion support
   * - DRY principles through consolidated design tokens
   * - Semantic touch targets, animations, and focus system variables
   */

  // SCSS Variables for better maintainability
  $skip-link-transform-base: translate(-50%, 0);
  $skip-link-transform-gpu: #{$skip-link-transform-base} translateZ(0);
  $skip-link-border-radius: 0 0 var(--radius-lg) var(--radius-lg);

  .skip-link {
    // Positioning - optimize using standardized variables
    position: absolute;
    top: calc(-1 * var(--space-3xl)); // -64px equivalent to -top-20
    left: 50%;
    z-index: var(--z-modal); // Use z-modal (50) instead of hardcoded z-50

    // Layout - use semantic touch target variables consistently
    min-width: var(--min-touch-size); // Use standardized touch target size
    min-height: var(--min-touch-size); // Enhanced sizing for consistency - WCAG AAA compliance
    transform: $skip-link-transform-gpu; // GPU acceleration

    // Visual styling - use semantic design tokens
    border-radius: $skip-link-border-radius; // Bottom rounded corners only
    background-color: var(--interactive-primary); // WCAG AAA compliant semantic color
    padding: var(--space-sm) var(--space-xl); // py-2 px-6 equivalent
    box-shadow: var(--shadow-md);

    // Typography - use consistent font variables
    text-align: center;
    font-size: var(--text-base);
    font-weight: var(--font-bold);
    color: var(--btn-primary-text); // Use semantic button text color
    line-height: var(--leading-normal);

    // Interactive styles
    text-decoration: none;
    cursor: pointer;

    // Performance optimization
    will-change: top, background-color, transform;
    transition:
      top var(--animation-duration-normal) cubic-bezier(0.16, 1, 0.3, 1),
      background-color var(--animation-duration-fast),
      transform var(--animation-duration-fast);

    // Layout optimization
    display: flex;
    align-items: center;
    justify-content: center;

    // Hover state - use semantic interaction variables
    &:hover {
      background-color: var(--interactive-primary-hover);
      transform: $skip-link-transform-gpu scale(var(--scale-focus));
    }

    // Focus state - use enhanced focus system variables
    &:focus-visible {
      top: 0; // Show skip link when focused
      outline: var(--focus-enhanced-outline-dark);
      outline-offset: var(--focus-ring-offset);
      box-shadow: var(--focus-enhanced-shadow), var(--shadow-lg);
      background-color: var(--interactive-primary-hover);
    }

    // Active state - use semantic scale variable
    &:active {
      transform: $skip-link-transform-gpu scale(var(--scale-active));
      background-color: var(--interactive-primary-active);
    }
  }

  // High Contrast Mode Support
  @media (forced-colors: active) {
    .skip-link {
      border: var(--border-width-thick) solid ButtonText;
      background-color: ButtonFace !important;
      color: ButtonText !important;
      forced-color-adjust: none;

      &:focus-visible {
        outline: var(--border-width-enhanced) solid Highlight !important;
        background-color: Highlight !important;
        color: HighlightText !important;
      }
    }
  }

  // Reduced Motion Support - use semantic animation variables
  @media (prefers-reduced-motion: reduce) {
    .skip-link {
      transition-duration: var(--animation-duration-fast) !important;
      transform: $skip-link-transform-base; // Remove translateZ for reduced motion

      &:hover,
      &:active {
        transform: $skip-link-transform-base; // No scale animations
      }
    }
  }

  // Enhanced contrast for high contrast preference - using semantic variables
  @media (prefers-contrast: high) {
    .skip-link {
      background-color: var(--bg-primary); // Use semantic background variable
      color: var(--text-primary); // Use semantic text variable
      border: var(--border-width-thick) solid var(--text-primary);

      &:focus-visible {
        background-color: var(--text-primary); // Inverse colors for high contrast
        color: var(--bg-primary);
        outline-width: var(--border-width-enhanced);
      }
    }
  }
</style>

<script>
  /**
   * SkipLink Enhancement Script
   *
   * Improves the skip link behavior with:
   * - Focus management for the target element
   * - Proper keyboard navigation
   * - Announcements for screen readers
   */
  class SkipLinkEnhancer {
    /** The skip link element */
    private skipLink: HTMLAnchorElement | null;

    /**
     * Initialize the enhancer
     */
    constructor() {
      this.skipLink = document.querySelector("[data-skip-link]");
      this.setupEventListeners();
    }

    /**
     * Set up event listeners for the skip link
     */
    private setupEventListeners(): void {
      if (!this.skipLink) {
        return;
      }

      // Add click handler with proper focus management
      this.skipLink.addEventListener("click", (e) => {
        e.preventDefault();

        const targetId = this.skipLink?.getAttribute("href")?.substring(1);
        if (!targetId) {
          return;
        }

        const targetElement = document.getElementById(targetId);

        if (targetElement) {
          // Set tabindex to make non-interactive elements focusable
          if (!targetElement.getAttribute("tabindex")) {
            targetElement.setAttribute("tabindex", "-1");
          }

          // Enhanced accessibility: Associate skip link with target element
          const announcementId = `skip-link-announcement-${targetId}`;
          targetElement.setAttribute("aria-describedby", announcementId);

          // Focus the target and scroll into view
          targetElement.focus({ preventScroll: true });
          targetElement.scrollIntoView({
            behavior: this.prefersReducedMotion() ? "auto" : "smooth",
          });

          // Announce to screen readers with enhanced context
          this.announceToScreenReader(`Skipped to ${targetId}`, announcementId);
        }
      });

      // Monitor for page changes in SPA context
      document.addEventListener("astro:page-load", () => {
        // Re-acquire skip link reference after page changes
        this.skipLink = document.querySelector("[data-skip-link]");
        this.setupEventListeners();
      });
    }

    /**
     * Check if user prefers reduced motion
     * @returns {boolean} True if reduced motion is preferred
     */
    private prefersReducedMotion(): boolean {
      return window.matchMedia("(prefers-reduced-motion: reduce)").matches;
    }

    /**
     * Announce a message to screen readers
     * @param {string} message - The message to announce
     * @param {string} id - Optional ID for the announcer element
     */
    private announceToScreenReader(message: string, id?: string): void {
      const announcer = document.createElement("div");
      announcer.setAttribute("aria-live", "assertive");
      announcer.setAttribute("aria-atomic", "true");
      announcer.className = "sr-only";
      announcer.textContent = message;

      // Set ID if provided for aria-describedby relationship
      if (id) {
        announcer.id = id;
      }

      document.body.appendChild(announcer);

      // Remove after announcement is likely complete - use semantic timeout from CSS variable
      const cleanupDelay =
        parseInt(
          getComputedStyle(document.documentElement)
            .getPropertyValue("--announcement-cleanup")
            .replace("ms", "")
        ) || 3000;

      setTimeout(() => {
        if (document.body.contains(announcer)) {
          document.body.removeChild(announcer);
        }
      }, cleanupDelay);
    }
  }

  // Initialize enhancer when DOM is ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => new SkipLinkEnhancer());
  } else {
    new SkipLinkEnhancer();
  }
</script>
