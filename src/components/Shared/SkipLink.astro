---
/**
 * @component SkipLink
 * @description Accessibility component that allows keyboard users to bypass repetitive navigation
 * and quickly access the main content. Initially hidden visually but appears when focused,
 * following WCAG AAA compliance standards.
 *
 * Features:
 * - Mobile-first responsive design
 * - WCAG AAA compliant with enhanced focus indicators
 * - Performance optimized transitions using CSS variables
 * - High contrast mode support
 * - Reduced motion support
 * - Consistent styling using global CSS variables
 * - Proper focus management
 * - Keyboard accessibility optimized
 *
 * @example
 * ```astro
 * <SkipLink targetId="quiz-content" />
 * <SkipLink targetId="main-content" />
 * ```
 *
 * @accessibility
 * - WCAG AAA compliant with enhanced focus indicators
 * - Screen reader announcements with proper ARIA attributes
 * - Keyboard navigation support
 * - High contrast mode support
 * - Reduced motion support
 * - Minimum 44Ã—44px touch target
 */

import { getLangFromUrl, useTranslations } from "@utils/i18n";

interface Props {
  /**
   * The ID of the element to target when the skip link is activated
   * @default "main-content"
   */
  targetId?: string;
}

const { targetId = "main-content" } = Astro.props;
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<a href={`#${targetId}`} class="skip-link" data-skip-link aria-label={t("nav.skip.main")}>
  {t("nav.skip.main")}
</a>

<style lang="scss">
  /* ======================================
   * SKIPLINK COMPONENT STYLES
   * Mobile-first responsive design using global CSS variables
   * WCAG AAA compliant with enhanced accessibility features
   * ====================================== */

  .skip-link {
    // Positioning - optimize using standardized variables
    position: absolute;
    top: calc(-1 * var(--space-3xl));
    left: 50%;
    z-index: var(--z-modal);

    // Layout - use semantic touch target variables consistently
    min-width: var(--min-touch-size);
    min-height: var(--min-touch-size);
    transform: translate(-50%, 0) translateZ(0);

    // Visual styling - use semantic design tokens
    border-radius: 0 0 var(--radius-lg) var(--radius-lg);
    background-color: var(--interactive-primary);
    padding: var(--space-sm) var(--space-xl);
    box-shadow: var(--shadow-md);

    // Typography - use consistent font variables
    text-align: center;
    font-size: var(--text-base);
    font-weight: var(--font-bold);
    color: var(--btn-primary-text);
    line-height: var(--leading-normal);

    // Interactive styles
    text-decoration: none;
    cursor: pointer;

    // Performance optimization
    will-change: top, background-color, transform;
    transition:
      top var(--animation-duration-normal) cubic-bezier(0.16, 1, 0.3, 1),
      background-color var(--animation-duration-fast),
      transform var(--animation-duration-fast);

    // Layout optimization
    display: flex;
    align-items: center;
    justify-content: center;

    // Mobile-first responsive design
    @media (min-width: var(--breakpoint-md)) {
      padding: var(--space-md) var(--space-2xl);
      font-size: var(--text-lg);
    }

    @media (min-width: var(--breakpoint-lg)) {
      padding: var(--space-md) var(--space-3xl);
    }

    // Hover state - use semantic interaction variables
    @media (hover: hover) {
      &:hover {
        background-color: var(--interactive-primary-hover);
        transform: translate(-50%, 0) translateZ(0) scale(var(--scale-focus));
      }
    }

    // Focus state - use enhanced focus system variables
    &:focus-visible {
      top: 0;
      outline: var(--focus-enhanced-outline-dark);
      outline-offset: var(--focus-ring-offset);
      box-shadow: var(--focus-enhanced-shadow), var(--shadow-lg);
      background-color: var(--interactive-primary-hover);
    }

    // Active state - use semantic scale variable
    &:active {
      transform: translate(-50%, 0) translateZ(0) scale(var(--scale-active));
      background-color: var(--interactive-primary-active);
    }

    // Touch device optimizations
    @media (pointer: coarse) {
      min-height: var(--min-touch-size);
      min-width: var(--min-touch-size);
      padding: var(--space-md) var(--space-xl);
    }
  }

  // High Contrast Mode Support
  @media (forced-colors: active) {
    .skip-link {
      border: var(--border-width-thick) solid ButtonText;
      background-color: ButtonFace !important;
      color: ButtonText !important;
      forced-color-adjust: none;
    }

    .skip-link:focus-visible {
      outline: var(--border-width-enhanced) solid Highlight !important;
      background-color: Highlight !important;
      color: HighlightText !important;
    }
  }

  // Reduced Motion Support - use semantic animation variables
  @media (prefers-reduced-motion: reduce) {
    .skip-link {
      transition-duration: var(--animation-duration-fast) !important;
      transform: translate(-50%, 0);
    }

    .skip-link:hover,
    .skip-link:active {
      transform: translate(-50%, 0);
    }
  }

  // Enhanced contrast for high contrast preference - using semantic variables
  @media (prefers-contrast: high) {
    .skip-link {
      background-color: var(--bg-primary);
      color: var(--text-primary);
      border: var(--border-width-thick) solid var(--text-primary);
    }

    .skip-link:focus-visible {
      background-color: var(--text-primary);
      color: var(--bg-primary);
      outline-width: var(--border-width-enhanced);
    }
  }

  // Dark mode support
  @media (prefers-color-scheme: dark) {
    .skip-link {
      background-color: var(--interactive-primary-dark);
      color: var(--btn-primary-text-dark);
    }

    .skip-link:hover,
    .skip-link:focus-visible {
      background-color: var(--interactive-primary-hover-dark);
    }

    .skip-link:active {
      background-color: var(--interactive-primary-active-dark);
    }
  }

  // Print styles
  @media print {
    .skip-link {
      display: none;
    }
  }
</style>

<script>
  /**
   * SkipLink Enhancement Script
   *
   * Improves the skip link behavior with:
   * - Focus management for the target element
   * - Proper keyboard navigation
   * - Announcements for screen readers
   */
  class SkipLinkEnhancer {
    /** The skip link element */
    #skipLink: HTMLAnchorElement | null = null;

    /**
     * Initialize the enhancer
     */
    constructor() {
      this.#skipLink = document.querySelector("[data-skip-link]");
      this.#setupEventListeners();
    }

    /**
     * Set up event listeners for the skip link
     */
    #setupEventListeners = (): void => {
      if (!this.#skipLink) {
        return;
      }

      // Add click handler with proper focus management
      this.#skipLink.addEventListener("click", (e) => {
        e.preventDefault();

        const targetId = this.#skipLink?.getAttribute("href")?.substring(1);
        if (!targetId) {
          return;
        }

        const targetElement = document.getElementById(targetId);

        if (targetElement) {
          // Set tabindex to make non-interactive elements focusable
          if (!targetElement.getAttribute("tabindex")) {
            targetElement.setAttribute("tabindex", "-1");
          }

          // Enhanced accessibility: Associate skip link with target element
          const announcementId = `skip-link-announcement-${targetId}`;
          targetElement.setAttribute("aria-describedby", announcementId);

          // Focus the target and scroll into view
          targetElement.focus({ preventScroll: true });
          targetElement.scrollIntoView({
            behavior: this.#prefersReducedMotion() ? "auto" : "smooth",
          });

          // Announce to screen readers with enhanced context
          this.#announceToScreenReader(`Skipped to ${targetId}`, announcementId);
        }
      });

      // Monitor for page changes in SPA context
      document.addEventListener("astro:page-load", () => {
        // Re-acquire skip link reference after page changes
        this.#skipLink = document.querySelector("[data-skip-link]");
        this.#setupEventListeners();
      });
    };

    /**
     * Check if user prefers reduced motion
     * @returns {boolean} True if reduced motion is preferred
     */
    #prefersReducedMotion = (): boolean => {
      return window.matchMedia("(prefers-reduced-motion: reduce)").matches;
    };

    /**
     * Announce a message to screen readers
     * @param {string} message - The message to announce
     * @param {string} id - Optional ID for the announcer element
     */
    #announceToScreenReader = (message: string, id?: string): void => {
      const announcer = document.createElement("div");
      announcer.setAttribute("aria-live", "assertive");
      announcer.setAttribute("aria-atomic", "true");
      announcer.className = "sr-only";
      announcer.textContent = message;

      // Set ID if provided for aria-describedby relationship
      if (id) {
        announcer.id = id;
      }

      document.body.appendChild(announcer);

      // Remove after announcement is likely complete - use semantic timeout from CSS variable
      const cleanupDelay =
        parseInt(
          getComputedStyle(document.documentElement)
            .getPropertyValue("--announcement-cleanup")
            .replace("ms", "")
        ) || 3000;

      setTimeout(() => {
        if (document.body.contains(announcer)) {
          document.body.removeChild(announcer);
        }
      }, cleanupDelay);
    };
  }

  // Initialize enhancer when DOM is ready using modern ES6 features
  const initializeSkipLink = (): void => {
    new SkipLinkEnhancer();
  };

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeSkipLink);
  } else {
    initializeSkipLink();
  }
</script>
