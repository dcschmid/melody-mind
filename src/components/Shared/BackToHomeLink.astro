---
/**
 * @component BackToHomeLink
 * @description Reusable back-to-home navigation link component with arrow icon.
 * Provides consistent styling and accessibility for navigation across authentication
 * pages and other areas that need a home link.
 *
 * Features:
 * - Mobile-first responsive design
 * - WCAG AAA compliant with enhanced focus indicators
 * - Performance optimized with CSS containment
 * - Full internationalization support
 * - Consistent styling using global CSS variables
 *
 * @example
 * ```astro
 * <BackToHomeLink lang="en" />
 * <BackToHomeLink lang="de" className="custom-back-link" />
 * ```
 *
 * @accessibility
 * - Minimum 44Ã—44px touch target
 * - High contrast focus indicators
 * - Screen reader friendly with proper aria-label
 * - Keyboard navigation support
 * - Reduced motion support
 */

import { Icon } from "astro-icon/components";
import { useTranslations } from "@utils/i18n";

/**
 * Props interface for the BackToHomeLink component
 */
interface Props {
  /** Language code for internationalization */
  lang: string;
  /** Additional CSS class for custom styling */
  className?: string;
  /** Custom aria-label (overrides default translation) */
  ariaLabel?: string;
}

const { lang, className = "", ariaLabel } = Astro.props;
const t = useTranslations(lang);

// Use custom aria-label or fallback to translation
const linkAriaLabel = ariaLabel || t("auth.login.back_to_home");
const linkText = t("auth.login.back_to_home");
---

<div class={`back-to-home ${className}`.trim()}>
  <a
    href={`/${String(lang)}/`}
    class="back-to-home__link"
    aria-label={linkAriaLabel}
    rel="prefetch"
  >
    <Icon name="arrow-left" class="back-to-home__icon" aria-hidden="true" />
    <span>{linkText}</span>
  </a>
</div>

<style lang="scss">
  /* ======================================
   * BACK TO HOME NAVIGATION - REUSABLE COMPONENT
   * Mobile-first responsive design using global CSS variables
   * ====================================== */

  .back-to-home {
    margin-bottom: var(--space-md);
    text-align: left;

    &__link {
      display: inline-flex;
      align-items: center;
      justify-content: flex-start;
      min-height: var(--min-touch-size);
      min-width: var(--min-touch-size);
      padding: var(--space-sm) var(--space-md);
      border-radius: var(--radius-md);
      font-size: var(--text-sm);
      font-weight: var(--font-weight-medium);
      color: var(--color-primary-300);
      text-decoration: none;
      transition: all var(--transition-normal);
      letter-spacing: var(--letter-spacing-base);
      background-color: transparent;
      border: none;
      cursor: pointer;

      /* Performance optimizations */
      contain: layout style;
      will-change: transform, background-color;

      /* Enhanced focus styles for WCAG AAA */
      outline: none;

      /* Mobile-first responsive design */
      @media (min-width: var(--breakpoint-md)) {
        padding: var(--space-md) var(--space-lg);
        font-size: var(--text-base);
      }

      @media (min-width: var(--breakpoint-lg)) {
        padding: var(--space-md) var(--space-xl);
      }

      /* Hover effects */
      @media (hover: hover) {
        &:hover {
          background-color: var(--bg-tertiary);
          color: var(--color-primary-200);
          transform: translateX(calc(-1 * var(--space-xs)));
        }
      }

      /* Focus styles for WCAG AAA compliance */
      &:focus-visible {
        outline: var(--focus-enhanced-outline-dark);
        outline-offset: var(--focus-ring-offset);
        box-shadow: var(--focus-enhanced-shadow);
        background-color: var(--bg-tertiary);
        color: var(--color-primary-200);
      }

      /* High contrast mode support */
      @media (prefers-contrast: high) {
        border: var(--border-width-thick) solid var(--border-primary);
      }

      /* Reduced motion support */
      @media (prefers-reduced-motion: reduce) {
        transition: none;

        &:hover {
          transform: none;
        }
      }

      /* Dark mode support */
      @media (prefers-color-scheme: dark) {
        color: var(--color-primary-200);

        &:hover,
        &:focus-visible {
          background-color: var(--bg-tertiary-dark);
          color: var(--color-primary-100);
        }
      }
    }

    &__icon {
      width: var(--icon-size-md);
      height: var(--icon-size-md);
      margin-right: var(--space-xs);
      color: currentColor;
      flex-shrink: 0;

      /* Responsive icon sizing */
      @media (min-width: var(--breakpoint-md)) {
        width: var(--icon-size-lg);
        height: var(--icon-size-lg);
        margin-right: var(--space-sm);
      }
    }
  }

  /* Touch device optimizations */
  @media (pointer: coarse) {
    .back-to-home__link {
      min-height: var(--min-touch-size);
      min-width: var(--min-touch-size);
      padding: var(--space-md) var(--space-lg);
    }
  }

  /* Print styles */
  @media print {
    .back-to-home {
      display: none;
    }
  }
</style>

<script>
  /**
   * BackToHomeLink Component Script
   * Modern ES6+ features with TypeScript support
   */

  // Enhanced component functionality with modern JavaScript
  const enhanceBackToHomeLink = (): void => {
    const backToHomeLinks = document.querySelectorAll(
      ".back-to-home__link"
    ) as NodeListOf<HTMLAnchorElement>;

    if (!backToHomeLinks.length) {
      return;
    }

    // Modern arrow function with destructuring
    const handleLinkInteraction = (event: Event): void => {
      const target = event.currentTarget as HTMLAnchorElement;

      // Add visual feedback for better UX
      target.style.transform = "scale(0.98)";

      // Reset transform after animation
      setTimeout((): void => {
        target.style.transform = "";
      }, 150);
    };

    // Enhanced accessibility with keyboard support
    const handleKeyDown = (event: KeyboardEvent): void => {
      const target = event.currentTarget as HTMLAnchorElement;

      // Support for Enter and Space keys
      if (event.key === "Enter" || event.key === " ") {
        event.preventDefault();
        target.click();
      }
    };

    // Modern forEach with arrow function
    backToHomeLinks.forEach((link: HTMLAnchorElement): void => {
      // Add click handler with modern event handling
      link.addEventListener("click", handleLinkInteraction);

      // Add keyboard support
      link.addEventListener("keydown", handleKeyDown);

      // Enhanced focus management
      link.addEventListener("focus", (): void => {
        // Ensure link is visible when focused
        link.scrollIntoView({
          behavior: "smooth",
          block: "nearest",
        });
      });
    });
  };

  // Initialize when DOM is ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", enhanceBackToHomeLink);
  } else {
    enhanceBackToHomeLink();
  }

  // Export for potential external use
  if (typeof window !== "undefined") {
    (
      window as Window & { enhanceBackToHomeLink?: typeof enhanceBackToHomeLink }
    ).enhanceBackToHomeLink = enhanceBackToHomeLink;
  }
</script>
