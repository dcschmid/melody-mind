---
/**
 * Paragraph Component - Simple & Clean
 *
 * A clean paragraph component with different text sizes and basic styling.
 * Using Tailwind CSS 4 with tailwind-variants for maintainability.
 *
 * @component
 * @example
 * ```astro
 * <Paragraph textSize="lg" textAlign="center">
 *   This is a paragraph with custom styling
 * </Paragraph>
 * ```
 */
import { tv } from "tailwind-variants";

interface Props {
  /** Additional CSS classes to apply */
  className?: string;
  /** Text size variant using Tailwind text size classes */
  textSize?: "sm" | "base" | "lg" | "xl" | "2xl" | "3xl" | "4xl";
  /** Text alignment option */
  textAlign?: "left" | "center" | "right";
}

const { textSize = "xl", className = "", textAlign = "left" } = Astro.props;

// Tailwind Variants configuration for the paragraph component
const paragraphVariants = tv({
  base: [
    // Base typography
    "font-primary font-normal leading-relaxed tracking-base text-secondary",
    // Responsive margin - besser f√ºr mobile
    "mb-4 sm:mb-6 md:mb-8 lg:mb-12",
    // Enhanced text rendering
    "text-rendering-optimize-legibility antialiased",
    // Smooth transitions
    "transition-all duration-300",
    // Text wrapping and balance
    "max-w-full break-words hyphens-auto text-balance",
    // Responsive line height
    "leading-relaxed sm:leading-relaxed md:leading-relaxed lg:leading-relaxed",
  ].join(" "),

  variants: {
    textSize: {
      sm: "text-lg", // Nie unter 16px
      base: "text-base sm:text-base md:text-lg", // Nie unter 16px
      lg: "text-xl", // Nie unter 16px
      xl: "text-2xl", // Nie unter 16px
      "2xl": "text-2xl lg:text-3xl", // Nie unter 16px
      "3xl": "text-3xl lg:text-4xl", // Nie unter 16px
      "4xl": "text-4xl lg:text-5xl", // Nie unter 16px
    },

    textAlign: {
      left: "text-left",
      center: "text-center",
      right: "text-right",
    },
  },

  defaultVariants: {
    textSize: "xl",
    textAlign: "left",
  },
});

// Generate classes using tailwind-variants
const classes = paragraphVariants({
  textSize,
  textAlign,
  className,
});

// Simple attributes
const attributes: Record<string, any> = {
  class: classes,
};
---

<p {...attributes}>
  <slot />
</p>
