---
import { getLangFromUrl, useTranslations } from "@utils/i18n";

interface Props {
  label?: string;
  id?: string;
  type?: "indeterminate" | "determinate";
  progress?: number;
}

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const {
  label = t("loading.content"),
  id = "loading-spinner",
  type = "indeterminate",
  progress = 0,
} = Astro.props as Props;

const isDeterminate = type === "determinate";
const clampedProgress = Math.max(0, Math.min(100, progress));
---

<div
  {id}
  class="flex min-h-[44px] flex-col items-center justify-center gap-4 rounded-lg border border-transparent p-6"
  role={isDeterminate ? "progressbar" : "status"}
  aria-live="polite"
  aria-busy={isDeterminate ? "false" : "true"}
  aria-valuemin={isDeterminate ? "0" : undefined}
  aria-valuemax={isDeterminate ? "100" : undefined}
  aria-valuenow={isDeterminate ? String(clampedProgress) : undefined}
  data-testid={isDeterminate ? "loading-progress" : "loading-spinner"}
  data-loading-spinner
  data-type={type}
>
  {
    isDeterminate ? (
      <div class="w-full">
        <div class="relative h-2 w-full overflow-hidden rounded-full bg-gray-700">
          <div
            class="absolute inset-0 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 transition-transform duration-300 ease-out"
            style={`transform: scaleX(${clampedProgress / 100})`}
          />
        </div>
        <div class="mt-3 text-center text-sm font-medium text-gray-200" aria-live="polite">
          {label} ({clampedProgress}%)
        </div>
      </div>
    ) : (
      <>
        <div
          class="relative h-16 w-16 animate-spin rounded-full border-4 border-transparent border-t-blue-500 border-r-gray-300 border-b-gray-300 border-l-gray-300"
          aria-hidden="true"
        >
          <span class="sr-only">{label}</span>
        </div>
        <div class="text-center text-lg font-medium text-gray-200">{label}</div>
      </>
    )
  }
</div>

<script>
  import { initLoadingSpinnerAuto } from "../../utils/components/loadingSpinnerUtils";

  const init = (): void => {
    initLoadingSpinnerAuto();
  };

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", init, { once: true });
  } else {
    init();
  }
</script>
