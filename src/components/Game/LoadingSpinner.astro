---
import { getLangFromUrl, useTranslations } from "@utils/i18n";

/**
 * LoadingSpinner Component Properties
 *
 * @interface Props
 * @property {('small'|'medium'|'large')} [size='large'] - Size variant for the spinner
 * @property {string} [label] - Text label displayed next to the spinner
 * @property {string} [id='loading-spinner'] - Unique identifier for this spinner instance
 * @property {string} [loadingStartText] - Text announced to screen readers when loading starts
 * @property {string} [loadingEndText] - Text announced to screen readers when loading completes
 */
interface Props {
  size?: "small" | "medium" | "large";
  label?: string;
  id?: string;
  /** Text announced to screen readers when loading begins */
  loadingStartText?: string;
  /** Text announced to screen readers when loading ends */
  loadingEndText?: string;
}

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const {
  size = "large",
  label = t("loading.content"),
  id = "loading-spinner",
  loadingStartText = t("loading.started"),
  loadingEndText = t("loading.completed"),
} = Astro.props;

/**
 * Size class mapping for different spinner dimensions
 * Each size defines width, height, and border thickness
 */
const sizeClasses = {
  small: "w-6 h-6 border-2",
  medium: "w-12 h-12 border-3",
  large: "w-16 h-16 border-4",
};

// Enhanced contrast colors for better visibility (WCAG AAA standard)
const primaryColor = "border-t-sky-600"; // Darker blue for better contrast
const secondaryColor = "border-zinc-800"; // Darker gray for background
---

<!-- 
  LoadingSpinner component
  - Hidden by default, shown via JavaScript
  - Includes accessibility features for screen readers
  - Supports motion reduction preferences
  - Optimized for performance with GPU acceleration
-->
<div
  class="items-center justify-center min-h-12 p-4 spinnerContainer hidden"
  id={id}
  role="status"
  aria-live="polite"
  aria-busy="false"
  data-testid="loading-spinner"
  data-loading-start={loadingStartText}
  data-loading-end={loadingEndText}
>
  <!-- Animated spinner circle -->
  <div
    class:list={[
      "relative rounded-full",
      secondaryColor,
      primaryColor,
      `animate-spin will-change-transform ${sizeClasses[size]}`,
      "motion-safe:animate-spin motion-reduce:animate-none",
    ]}
    aria-hidden="true"
    data-size={size}
  >
    <!-- Screen reader text for the spinner -->
    <span class="sr-only">{label}</span>
  </div>
  <!-- Visible text label -->
  <div class="ml-3 text-lg font-medium" aria-hidden="true">
    {label}
  </div>
  <!-- Live region for screen reader announcements -->
  <div class="sr-only" aria-live="assertive" id={`${id}-announcement`}></div>
</div>

<style>
  /**
   * Custom compatibility styling for JavaScript manipulation
   * This ensures the hidden class actually hides the element
   * even when other display properties are present
   */
  .spinnerContainer.hidden {
    display: none;
  }

  /**
   * Performance optimization for animations
   * Apply GPU acceleration to improve animation smoothness
   * especially on mobile devices
   */
  [data-size] {
    transform: translateZ(0); /* Enable GPU acceleration */
  }

  /**
   * Accessibility enhancement for users who prefer reduced motion
   * This respects user preferences beyond Tailwind's motion-safe utilities
   */
  @media (prefers-reduced-motion: reduce) {
    [data-size] {
      animation: none !important;
    }
  }
</style>

<script>
  /**
   * LoadingSpinner - A class to manage the visibility and state of loading indicators
   *
   * This utility class provides methods for showing/hiding loading indicators and properly
   * managing their ARIA attributes for accessibility. It implements a singleton pattern
   * per spinner ID to ensure consistent state management throughout the application.
   *
   * @example
   * // Show a spinner
   * LoadingSpinner.getInstance().show();
   *
   * // Hide the same spinner
   * LoadingSpinner.getInstance().hide();
   *
   * // Use a specific spinner by ID
   * LoadingSpinner.getInstance('custom-spinner').show();
   */
  class LoadingSpinner {
    /** Reference to the spinner DOM element */
    private readonly spinner: HTMLElement | null;
    /** Reference to the announcement element for screen readers */
    private readonly announcement: HTMLElement | null;
    /** Text announced when loading starts */
    private readonly loadingStartText: string;
    /** Text announced when loading ends */
    private readonly loadingEndText: string;

    /** Storage for all spinner instances by ID for singleton pattern */
    private static instances: Map<string, LoadingSpinner> = new Map();

    /**
     * Creates a new LoadingSpinner instance
     *
     * @param {string} id - The ID of the spinner element to control
     */
    constructor(id: string = "loading-spinner") {
      this.spinner = document.getElementById(id);
      this.announcement = document.getElementById(`${id}-announcement`);

      // Load announcement texts from data attributes
      this.loadingStartText =
        this.spinner?.dataset.loadingStart || "Loading started";
      this.loadingEndText =
        this.spinner?.dataset.loadingEnd || "Loading completed";

      // Register this instance
      LoadingSpinner.instances.set(id, this);

      if (!this.spinner) {
        console.warn(
          `LoadingSpinner: Element with ID "${id}" not found in the DOM`,
        );
      }
    }

    /**
     * Returns a singleton instance of LoadingSpinner for the specified ID
     *
     * @param {string} id - The ID of the spinner to control
     * @returns {LoadingSpinner} A spinner instance for the specified ID
     */
    static getInstance(id: string = "loading-spinner"): LoadingSpinner {
      return this.instances.get(id) || new LoadingSpinner(id);
    }

    /**
     * Shows the spinner and updates its accessibility attributes
     *
     * @returns {boolean} True on success, false if spinner element not found
     */
    show(): boolean {
      if (!this.spinner) return false;

      // Make visible and update accessibility
      this.spinner.classList.remove("hidden");
      this.spinner.setAttribute("aria-busy", "true");

      // Announce for screen readers
      if (this.announcement) {
        this.announcement.textContent = this.loadingStartText;
      }

      return true;
    }

    /**
     * Hides the spinner and updates its accessibility attributes
     *
     * @returns {boolean} True on success, false if spinner element not found
     */
    hide(): boolean {
      if (!this.spinner) return false;

      // Hide and update accessibility
      this.spinner.classList.add("hidden");
      this.spinner.setAttribute("aria-busy", "false");

      // Announce for screen readers
      if (this.announcement) {
        this.announcement.textContent = this.loadingEndText;
      }

      return true;
    }

    /**
     * Toggles spinner visibility based on current state
     *
     * @returns {boolean} New visibility state (true = visible, false = hidden)
     */
    toggle(): boolean {
      if (!this.spinner) return false;

      const isCurrentlyHidden = this.spinner.classList.contains("hidden");
      return isCurrentlyHidden ? this.show() : this.hide();
    }

    /**
     * Checks if the spinner is currently visible
     *
     * @returns {boolean} True if the spinner is visible, otherwise false
     */
    isVisible(): boolean {
      return this.spinner ? !this.spinner.classList.contains("hidden") : false;
    }

    /**
     * Shows the spinner for a specified duration then hides it
     *
     * @param {number} durationMs - Duration in milliseconds to show the spinner
     * @returns {Promise<void>} Promise that resolves when the spinner is hidden
     */
    async showFor(durationMs: number): Promise<void> {
      this.show();

      return new Promise((resolve) => {
        setTimeout(() => {
          this.hide();
          resolve();
        }, durationMs);
      });
    }
  }

  // Make LoadingSpinner class available in the global scope
  declare global {
    interface Window {
      LoadingSpinner: typeof LoadingSpinner;
    }
  }

  window.LoadingSpinner = LoadingSpinner;

  // Handle page transitions
  document.addEventListener("astro:page-load", () => {
    // Hide any visible spinners on page change
    document
      .querySelectorAll('[role="status"][aria-busy="true"]')
      .forEach((el) => {
        const id = el.id;
        if (id) {
          LoadingSpinner.getInstance(id).hide();
        }
      });
  });
</script>
