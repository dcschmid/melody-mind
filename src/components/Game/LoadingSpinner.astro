---
import { getLangFromUrl, useTranslations } from "@utils/i18n";

/**
 * LoadingSpinner - Accessible loading indicator
 *
 * Features:
 * - WCAG AAA compliant
 * - Responsive design
 * - Screen reader support
 * - Multiple states
 */
export interface Props {
  size?: "small" | "medium" | "large";
  label?: string;
  id?: string;
  loadingStartText?: string;
  loadingEndText?: string;
  ariaLabel?: string;
  type?: "indeterminate" | "determinate";
  progress?: number;
  state?: "normal" | "error" | "timeout";
  context?: string;
}

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const {
  size = "large",
  label = t("loading.content"),
  id = "loading-spinner",
  loadingStartText = t("loading.started"),
  loadingEndText = t("loading.completed"),
  ariaLabel = t("loading.progress.indicator"),
  type = "indeterminate",
  progress = 0,
  state = "normal",
  context = "",
} = Astro.props;

const sizeClasses = {
  small: "w-8 h-8 border-2",
  medium: "w-12 h-12 border-2",
  large: "w-16 h-16 border-2",
};

const stateClasses = {
  normal: "",
  error: "border-red-600 bg-red-50 border-red-200",
  timeout: "border-yellow-600 bg-yellow-50 border-yellow-200",
};

const contextualAnnouncements = {
  gameLoading: t("loading.context.game"),
  questionLoading: t("loading.context.question"),
  resultsLoading: t("loading.context.results"),
  default: t("loading.context.default"),
};

const startAnnouncement =
  context && contextualAnnouncements[context as keyof typeof contextualAnnouncements]
    ? contextualAnnouncements[context as keyof typeof contextualAnnouncements]
    : loadingStartText;

const enhancedAriaLabel = context
  ? `${ariaLabel} - ${contextualAnnouncements[context as keyof typeof contextualAnnouncements] || context}`
  : ariaLabel;
---

<div
  class={`flex items-center justify-center min-h-[44px] gap-6 p-6 ${type === "determinate" ? "flex-col items-stretch gap-3" : ""} ${stateClasses[state]} ${state === "error" || state === "timeout" ? "border rounded-lg" : ""}`}
  {id}
  role={type === "determinate" ? "progressbar" : "status"}
  aria-live="polite"
  aria-busy="false"
  aria-label={enhancedAriaLabel}
  aria-valuenow={type === "determinate" ? progress : undefined}
  aria-valuemin={type === "determinate" ? "0" : undefined}
  aria-valuemax={type === "determinate" ? "100" : undefined}
  data-testid={type === "determinate" ? "loading-progress" : "loading-spinner"}
  data-loading-start={startAnnouncement}
  data-loading-end={loadingEndText}
  data-type={type}
  data-state={state}
>
  {
    type === "determinate" ? (
      <div
        class="relative h-6 w-full overflow-hidden rounded-lg border border-gray-300 bg-gray-200 shadow-inner"
        aria-hidden="true"
      >
        <div
          class="relative h-full rounded-lg bg-gradient-to-r from-blue-500 to-blue-600 transition-all duration-300 ease-out"
          style={`width: ${progress}%`}
        >
          <div class="absolute inset-0 animate-pulse bg-gradient-to-r from-transparent via-white/30 to-transparent" />
        </div>
      </div>
    ) : (
      <div
        class={`relative animate-spin rounded-full border-transparent border-t-blue-500 border-r-gray-300 border-b-gray-300 border-l-gray-300 ${sizeClasses[size]}`}
        aria-hidden="true"
        data-size={size}
      >
        <span class="sr-only">{label}</span>
      </div>
    )
  }

  <div class="text-center text-xl font-medium text-gray-600" aria-hidden="true">
    {type === "determinate" ? `${label} (${progress}%)` : label}
  </div>

  <div class="sr-only" aria-live="assertive" id={`${id}-announcement`}></div>
</div>

<script>
  import { initLoadingSpinnerAuto } from "../../utils/components/loadingSpinnerUtils";

  // Initialize loading spinner functionality
  document.addEventListener("DOMContentLoaded", () => {
    initLoadingSpinnerAuto();
  });
</script>
