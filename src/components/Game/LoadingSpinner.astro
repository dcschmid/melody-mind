---
import { getLangFromUrl, useTranslations } from '@utils/i18n';

interface Props {
  size?: "small" | "medium" | "large";
  label?: string;
  id?: string;
}

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const {
  size = "large",
  label = t('loading.content'),
  id = "loading-spinner",
} = Astro.props;
---

<div
  class="spinnerContainer hidden"
  id={id}
  role="status"
  aria-live="polite"
  aria-busy="false"
>
  <div class={`spinner spinner--${size}`} aria-hidden="true"></div>
  <span class="sr-only">{label}</span>
</div>

<style lang="scss">
  .spinnerContainer {
    display: flex;
    align-items: center;
    justify-content: center;

    min-height: var(--min-touch-target);
    padding: var(--padding-medium);

    &.hidden {
      display: none;
    }
  }

  .spinner {
    --spinner-width: calc(var(--spinner-size) / 12);

    position: relative;
    border: var(--spinner-width) solid var(--secondary-color);
    border-top-color: var(--highlight-color);
    border-radius: 50%;

    &::before,
    &::after {
      content: "";
      position: absolute;
      border-radius: 50%;
    }

    &::before {
      inset: calc(var(--spinner-width) * -0.5);
      opacity: 0.5;
      border: var(--spinner-width) solid transparent;
      border-top-color: var(--highlight-color);

      @media (prefers-reduced-motion: no-preference) {
        animation: spin 2s linear infinite;
      }
    }

    &--small {
      --spinner-size: var(--spinner-size-small);

      width: var(--spinner-size);
      height: var(--spinner-size);
    }

    &--medium {
      --spinner-size: var(--spinner-size-medium);

      width: var(--spinner-size);
      height: var(--spinner-size);
    }

    &--large {
      --spinner-size: var(--spinner-size-large);

      width: var(--spinner-size);
      height: var(--spinner-size);
    }

    @media (prefers-reduced-motion: no-preference) {
      animation: spin 1s linear infinite;
    }

    @media (prefers-reduced-motion: no-preference) {
      will-change: transform;
      animation: spin 1s linear infinite;
    }
  }

  @keyframes spin {
    from {
      transform: rotate(0deg);
    }

    to {
      transform: rotate(360deg);
    }
  }

  @media (forced-colors: active) {
    .spinner {
      border-color: CanvasText;
      border-top-color: Highlight;

      &::before {
        border-top-color: Highlight;
      }
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .spinner {
      &::before {
        display: none;
      }
    }
  }

  @media (prefers-color-scheme: dark) {
    .spinner {
      opacity: 0.8;
    }
  }
</style>

<script>
  class LoadingSpinner {
    private readonly spinner: HTMLElement | null;
    private static instances: Map<string, LoadingSpinner> = new Map();

    constructor(id: string = "loading-spinner") {
      this.spinner = document.getElementById(id);
      LoadingSpinner.instances.set(id, this);
    }

    static getInstance(id: string = "loading-spinner"): LoadingSpinner {
      if (!this.instances.has(id)) {
        return new LoadingSpinner(id);
      }
      return this.instances.get(id)!;
    }

    show(): void {
      if (!this.spinner) return;
      this.spinner.classList.remove("hidden");
      this.spinner.setAttribute("aria-busy", "true");
    }

    hide(): void {
      if (!this.spinner) return;
      this.spinner.classList.add("hidden");
      this.spinner.setAttribute("aria-busy", "false");
    }
  }

  declare global {
    interface Window {
      LoadingSpinner: typeof LoadingSpinner;
    }
  }

  window.LoadingSpinner = LoadingSpinner;
</script>
