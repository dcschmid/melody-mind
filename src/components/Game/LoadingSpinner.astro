---
import { getLangFromUrl, useTranslations } from "@utils/i18n";

interface Props {
  size?: "small" | "medium" | "large";
  label?: string;
  id?: string;
}

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const {
  size = "large",
  label = t("loading.content"),
  id = "loading-spinner",
} = Astro.props;

const sizeClasses = {
  small: "w-6 h-6 border-2",
  medium: "w-12 h-12 border-3",
  large: "w-16 h-16 border-4",
};
---

<div
  class="hidden flex items-center justify-center min-h-12 p-4 spinnerContainer"
  id={id}
  role="status"
  aria-live="polite"
  aria-busy="false"
  data-testid="loading-spinner"
>
  <div
    class={`relative rounded-full border-zinc-700 border-t-sky-500 animate-spin motion-reduce:animate-none ${sizeClasses[size]}`}
    aria-hidden="true"
    data-size={size}
  >
    <span
      class="absolute inset-0 rounded-full border-t-sky-500 border-transparent opacity-50 -m-[2px]"
    ></span>
  </div>
  <span class="sr-only">{label}</span>
</div>

<style>
  /* Kompatibilitätsklasse für JS */
  .spinnerContainer.hidden {
    display: none;
  }

  [data-size] {
    animation: custom-spin 1s linear infinite;
  }

  [data-size] span {
    animation: custom-spin 2s linear infinite;
  }

  /* High Contrast Mode Support */
  @media (forced-colors: active) {
    [data-size] {
      border-color: CanvasText;
      border-top-color: Highlight;
    }

    [data-size] span {
      border-top-color: Highlight;
      opacity: 0.7;
    }
  }

  @media (prefers-reduced-motion: reduce) {
    [data-size],
    [data-size] span {
      animation: none;
    }
  }

  /* Feinere Animation-Kontrolle */
  @keyframes custom-spin {
    from {
      transform: rotate(0deg);
    }

    to {
      transform: rotate(360deg);
    }
  }
</style>

<script>
  class LoadingSpinner {
    private readonly spinner: HTMLElement | null;
    private static instances: Map<string, LoadingSpinner> = new Map();

    constructor(id: string = "loading-spinner") {
      this.spinner = document.getElementById(id);
      LoadingSpinner.instances.set(id, this);
    }

    static getInstance(id: string = "loading-spinner"): LoadingSpinner {
      if (!this.instances.has(id)) {
        return new LoadingSpinner(id);
      }
      return this.instances.get(id)!;
    }

    show(): void {
      if (!this.spinner) return;
      this.spinner.classList.remove("hidden");
      this.spinner.setAttribute("aria-busy", "true");
    }

    hide(): void {
      if (!this.spinner) return;
      this.spinner.classList.add("hidden");
      this.spinner.setAttribute("aria-busy", "false");
    }
  }

  declare global {
    interface Window {
      LoadingSpinner: typeof LoadingSpinner;
    }
  }

  window.LoadingSpinner = LoadingSpinner;
</script>
