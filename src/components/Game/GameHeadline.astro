---
import { getLangFromUrl, useTranslations } from "@utils/i18n";

interface Props {
  headline: string | undefined;
}

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const { headline = t("game.default.headline") } = Astro.props;
---

<header class="gameHeadline" role="banner" aria-label="Spielinformationen">
  <h1 class="category" id="game-category">
    {headline}
  </h1>
  <div class="roundInfo" aria-live="polite" role="status">
    {t("game.current.round")}
    <span class="round" aria-label={t("game.current.round.label")}></span>
  </div>
</header>

<style lang="scss">
  .gameHeadline {
    position: relative;

    display: flex;
    flex-direction: column;
    gap: var(--padding-small);
    align-items: center;
    justify-content: center;

    width: 100%;
    max-width: var(--max-line-length);
    margin: var(--padding-medium) auto;
    padding: var(--padding-medium);

    background: linear-gradient(90deg, var(--highlight-color), var(--secondary-color));
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);

    @media (prefers-reduced-motion: no-preference) {
      will-change: transform;
      transition:
        transform var(--transition-speed) ease-in-out,
        box-shadow var(--transition-speed) ease-in-out;
    }

    @media (width <= 768px) {
      margin: var(--padding-small) auto;
      padding: var(--padding-small);
    }
  }

  .category {
    margin: 0;

    font-family: var(--font-family);
    font-size: var(--header-font-size);
    font-weight: 900;
    line-height: var(--line-height-tight);
    color: var(--text-color);
    text-align: center;
    text-shadow: 0 1px 2px rgb(0 0 0 / 10%);
    text-transform: uppercase;
    letter-spacing: var(--spacing-text);

    @media (width <= 768px) {
      font-size: calc(var(--header-font-size) * 0.85);
    }
  }

  .roundInfo {
    display: flex;
    gap: var(--padding-small);
    align-items: center;

    font-family: var(--font-family);
    font-size: var(--body-font-size);
    font-weight: 600;
    line-height: var(--line-height-body);
    color: var(--text-color);
  }

  .round {
    padding: calc(var(--padding-small) / 2) var(--padding-small);

    font-weight: 700;
    color: var(--text-color);

    background-color: rgb(255 255 255 / 15%);
    border-radius: calc(var(--border-radius) / 2);
  }

  @media (forced-colors: active) {
    .gameHeadline {
      background: Canvas;
      border: 2px solid CanvasText;
    }

    .round {
      border: 1px solid CurrentColor;
    }
  }

  @media print {
    .gameHeadline {
      background: none;
      border: 1px solid #000;
      box-shadow: none;
    }

    .category,
    .roundInfo {
      color: #000;
    }
  }

  @media (prefers-color-scheme: dark) {
    .category,
    .roundInfo {
      text-shadow: 0 1px 3px rgb(0 0 0 / 30%);
    }
  }
</style>

<script>
  type SupportedLanguages = "de" | "en" | "es" | "fr" | "it";

  export function updateRoundNumber(round: number) {
    const ROUND_SELECTOR = ".round" as const;
    const roundElement = document.querySelector(ROUND_SELECTOR);
    if (!roundElement) return;

    const roundText = round.toString();
    roundElement.textContent = roundText;

    const lang = document.documentElement.lang as SupportedLanguages;
    const ariaLabels: Record<SupportedLanguages, string> = {
      de: `Aktuelle Runde: ${round}`,
      en: `Current round: ${round}`,
      es: `Ronda actual: ${round}`,
      fr: `Tour actuel: ${round}`,
      it: `Round attuale: ${round}`,
    };

    roundElement.setAttribute("aria-label", ariaLabels[lang] || ariaLabels.en);
  }
</script>
