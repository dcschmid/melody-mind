---
import { getLangFromUrl, useTranslations } from "@utils/i18n";

interface Props {
  headline?: string;
  className?: string;
}

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const { headline = t("game.default.headline"), className = "" } = Astro.props;

const remainingText = t("game.remaining");
---

<div
  class="flex flex-col sm:flex-row justify-between items-center gap-4 mb-8 px-4 mx-auto w-full"
>
  <h1
    class={`text-2xl sm:text-3xl font-bold text-sky-500 text-center sm:text-left ${className}`}
  >
    {headline}
  </h1>

  <div class="flex items-center gap-4 text-zinc-300">
    <div
      class="flex gap-2 items-center justify-center"
      aria-label={t("game.current.round.label")}
    >
      <span class="text-zinc-400 text-sm uppercase tracking-wide font-medium">
        {t("game.current.round")}:
      </span>
      <span class="round tabular-nums text-lg font-bold text-zinc-50">0/0</span>
    </div>

    <div
      class="hidden w-px h-6 bg-zinc-700 motion-safe:animate-pulse"
      aria-hidden="true"
    >
    </div>

    <div class="hidden items-center gap-2 text-sm" data-remaining>
      <span class="font-medium text-amber-400">
        <span class="remaining-count tabular-nums">0</span>
        {remainingText}
      </span>
    </div>
  </div>
</div>

<script>
  /**
   * Defines all supported languages in the application.
   * This type ensures that we only work with languages we have translations for.
   * When adding a new language, update this type.
   */
  type SupportedLanguages =
    | "de"
    | "en"
    | "es"
    | "fr"
    | "it"
    | "pt"
    | "da"
    | "nl"
    | "sv"
    | "fi";

  /**
   * Updates the round number displayed in the game interface and sets appropriate accessibility attributes.
   *
   * @param {number} round - The current round number to be displayed
   * @returns {void}
   *
   * @example
   * // Update the round to show round 3
   * updateRoundNumber(3);
   */
  export function updateRoundNumber(round: number): void {
    // Constants
    const ROUND_SELECTOR = ".round";

    // Get the element displaying the round number
    const roundElement = document.querySelector<HTMLElement>(ROUND_SELECTOR);
    if (!roundElement) {
      console.warn("Round element not found. Unable to update round number.");
      return;
    }

    // Update the visible text content
    roundElement.textContent = round.toString();

    // Set appropriate aria-label based on the current language
    const lang = document.documentElement.lang as SupportedLanguages;

    // Mapping of languages to properly formatted round announcements
    // These are used by screen readers to announce the current round
    const ariaLabels: Record<SupportedLanguages, string> = {
      de: `Aktuelle Runde: ${round}`,
      en: `Current round: ${round}`,
      es: `Ronda actual: ${round}`,
      fr: `Tour actuel: ${round}`,
      it: `Round attuale: ${round}`,
      pt: `Rodada atual: ${round}`,
      da: `Nuv√¶rende runde: ${round}`,
      nl: `Huidige ronde: ${round}`,
      sv: `Aktuell runda: ${round}`,
      fi: `Nykyinen kierros: ${round}`,
    };

    // Set the label with fallback to English if the language is not supported
    roundElement.setAttribute("aria-label", ariaLabels[lang] || ariaLabels.en);
  }

  /**
   * Updates the remaining count display if the element exists.
   *
   * @param {number} count - The remaining count to display
   * @returns {void}
   */
  export function updateRemainingCount(count: number): void {
    const remainingElement =
      document.querySelector<HTMLElement>("[data-remaining]");
    const countElement =
      document.querySelector<HTMLElement>(".remaining-count");

    if (remainingElement && countElement) {
      countElement.textContent = count.toString();

      // Only show if there's something to count
      if (count > 0) {
        remainingElement.classList.remove("hidden");
        remainingElement.classList.add("flex");
      } else {
        remainingElement.classList.add("hidden");
        remainingElement.classList.remove("flex");
      }
    }
  }
</script>
