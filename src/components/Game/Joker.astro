---
/**
 * Joker Component
 *
 * A fully accessible component for the 50:50 joker feature in MelodyMind.
 * Allows users to eliminate two wrong answers during gameplay.
 * Uses CSS custom properties for consistent styling and WCAG AAA compliance.
 *
 * Features:
 * - WCAG AAA compliant accessibility
 * - Responsive design with mobile-first approach
 * - Performance optimized with requestAnimationFrame
 * - Screen reader announcements
 * - Visual feedback with animations
 * - Internationalization support
 *
 * @component
 * @example
 * ```astro
 * <Joker initialCount={5} />
 * ```
 */
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import ButtonLink from "@components/ButtonLink.astro";

interface Props {
  /** Initial number of jokers available */
  initialCount?: number;
  /** Whether joker is disabled initially */
  disabled?: boolean;
}

const { initialCount = 0, disabled = false } = Astro.props;

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Pre-compute localized strings for better SSR performance
const jokerButtonAriaLabel = t("game.joker.use");
const jokerTitle = t("game.joker.options");
const jokerText = t("game.joker");
const jokerDescription = t("game.joker.description");
const remainingText = t("game.remaining");

// Cache attributes for client-side usage
const dataAttributes = {
  initialCount: initialCount.toString(),
  initialDisabled: disabled.toString(),
  langCode: lang,
};
---

<div
  class="joker-container"
  role="group"
  aria-labelledby="joker-title"
  data-testid="joker-container"
  {...dataAttributes}
>
  <h2 id="joker-title" class="joker-title">
    {jokerTitle}
  </h2>

  <div class="joker-button-wrapper" data-joker-button-wrapper>
    <button
      id="joker-button"
      type="button"
      class="button-link button-link--primary button-link--md"
      aria-label={jokerButtonAriaLabel}
      aria-describedby="joker-description joker-count"
      data-joker-type="fifty-fifty"
      {disabled}
    >
      <svg class="button-link__icon" width="24" height="24" viewBox="0 0 24 24">
        <path
          d="M12 2L13.09 8.26L20 9L13.09 9.74L12 16L10.91 9.74L4 9L10.91 8.26L12 2Z"
          fill="currentColor"></path>
      </svg>
      {jokerText}
    </button>
  </div>

  <div id="joker-count-container" class="joker-count-container">
    <span id="joker-count" class="joker-count" aria-live="polite" aria-atomic="true">
      {initialCount}
      {remainingText}
    </span>
  </div>

  <div id="joker-description" class="joker-description">
    {jokerDescription}
  </div>

  <!-- Hidden element for screen reader announcements -->
  <div id="joker-announcement" class="sr-only" aria-live="assertive" aria-atomic="true"></div>
</div>

<style lang="scss">
  /**
   * Joker Component Styles
   * 
   * ✅ 100% global.css variables integration
   * ✅ Performance optimized with CSS containment
   * ✅ WCAG AAA compliant styling
   * ✅ Responsive design with container queries
   * ✅ GPU acceleration for smooth animations
   */

  // Animation keyframes

  @keyframes pulse {
    0% {
      transform: scale(1);
    }
    50% {
      transform: scale(var(--scale-focus));
      background: var(--interactive-primary);
    }
    100% {
      transform: scale(1);
    }
  }

  // Main component container
  .joker-container {
    position: relative;

    margin: clamp(var(--space-lg), 4vw, var(--space-2xl)) var(--space-none);
    padding: clamp(var(--space-md), 4vw, var(--space-xl));

    display: flex;
    flex-direction: column;
    align-items: center;
    gap: clamp(var(--space-sm), 3vw, var(--space-lg));

    border-radius: var(--radius-xl);
    border: var(--border-width-thick) solid var(--border-primary);
    background: var(--card-bg);

    box-shadow: var(--shadow-lg);

    max-width: var(--width-full);

    // Performance optimizations
    contain: layout style paint;
    content-visibility: auto;
    contain-intrinsic-size: var(--container-intrinsic-height-component);

    transform: translateZ(0);
    will-change: box-shadow, border-color;

    // Container query support
    container-type: inline-size;
    container-name: joker;

    overflow-wrap: break-word;
    word-wrap: break-word;
    hyphens: auto;

    transition:
      box-shadow var(--transition-normal),
      border-color var(--transition-normal);

    &:hover {
      box-shadow: var(--shadow-xl);
      border-color: var(--interactive-primary);
    }

    // Title styling
    .joker-title {
      margin: var(--space-none) var(--space-none) clamp(var(--space-sm), 3vw, var(--space-md))
        var(--space-none);

      font-size: clamp(var(--text-lg), 4vw, var(--text-2xl));
      font-weight: var(--font-semibold);
      color: var(--interactive-primary);

      text-align: center;
      line-height: var(--leading-relaxed);
      letter-spacing: var(--letter-spacing-base);

      text-wrap: balance;

      // Performance optimizations
      contain: layout style;
    }

    // Button wrapper
    .joker-button-wrapper {
      position: relative;

      // Performance optimizations
      contain: layout style;
      transform: translateZ(0);

      // Override for joker button to match ButtonLink primary styles exactly
      #joker-button {
        // Base ButtonLink styles
        display: inline-flex;
        align-items: center;
        justify-content: center;
        border: none;
        border-radius: var(--radius-lg);
        font-weight: var(--font-bold);
        text-decoration: none;
        cursor: pointer;
        position: relative;
        min-width: var(--min-touch-size);
        min-height: var(--min-touch-size);
        line-height: var(--leading-normal);
        letter-spacing: var(--letter-spacing-base);
        font-family: var(--font-family-primary);

        // Performance optimizations
        contain: layout style;
        will-change: transform, background-color;
        transform: translateZ(0);

        // Size md styles
        padding: var(--space-md) var(--space-lg);
        font-size: var(--text-base);

        // Primary variant styles
        background: var(--btn-primary-bg);
        color: var(--btn-primary-text);
        border: var(--border-width-thin) solid transparent;
        box-shadow: var(--card-shadow);

        // Smooth transitions
        transition: all var(--animation-duration-normal);

        &:hover:not(:disabled) {
          background: var(--btn-primary-hover);
          box-shadow: var(--card-shadow-hover);
          transform: translateY(var(--animation-y-offset-small)) translateZ(0);
        }

        &:active:not(:disabled) {
          transform: scale(var(--animation-scale-hover)) translateZ(0);
          transition: all var(--animation-duration-fast);
        }

        &:focus-visible {
          outline: var(--focus-outline);
          outline-offset: var(--focus-ring-offset);
          box-shadow: var(--focus-ring);
        }

        &:disabled {
          opacity: var(--opacity-disabled);
          cursor: not-allowed;
          pointer-events: none;
          filter: grayscale(var(--filter-grayscale-half));
        }

        // Icon styling
        .button-link__icon {
          width: var(--icon-size-sm);
          height: var(--icon-size-sm);
          flex-shrink: 0;
          margin-right: var(--space-md);
        }

        // Responsive sizing
        @media (min-width: 48em) {
          padding: var(--space-lg) var(--space-xl);
          font-size: var(--text-lg);

          .button-link__icon {
            width: var(--icon-size-md);
            height: var(--icon-size-md);
          }
        }
      }
    }

    // Count container
    .joker-count-container {
      display: flex;
      align-items: center;
      gap: clamp(var(--space-xs), 2vw, var(--space-sm));

      // Performance optimizations
      contain: layout style;

      .joker-count {
        font-weight: var(--font-medium);
        line-height: var(--leading-normal);

        min-width: var(--touch-target-enhanced);
        min-height: var(--touch-target-enhanced);

        border-radius: var(--radius-full);
        border: var(--border-width-thin) solid var(--border-primary);
        background: var(--bg-tertiary);

        padding: clamp(var(--space-xs), 2vw, var(--space-sm))
          clamp(var(--space-sm), 3vw, var(--space-md));

        text-align: center;
        font-size: clamp(var(--text-lg), 4vw, var(--text-xl));
        color: var(--text-primary);

        font-variant-numeric: tabular-nums;

        // Performance optimizations
        contain: layout style;
        transform: translateZ(0);

        transition:
          background-color var(--transition-normal),
          border-color var(--transition-normal),
          color var(--transition-normal);

        &.updated {
          animation: pulse var(--transition-slow) ease-in-out;
        }
      }
    }

    // Description
    .joker-description {
      margin-top: clamp(var(--space-sm), 3vw, var(--space-lg));

      max-width: clamp(var(--grid-min-width-xs), 50vw, var(--grid-min-width-md));

      text-align: center;
      font-size: clamp(var(--text-sm), 3vw, var(--text-base));
      color: var(--text-tertiary);
      line-height: var(--leading-relaxed);
      letter-spacing: var(--letter-spacing-base);

      text-wrap: balance;

      // Performance optimizations
      contain: layout style;
    }
  }

  // Responsive design
  @media (min-width: 48em) {
    .joker-container {
      .joker-count {
        min-height: calc(var(--touch-target-enhanced) + var(--space-sm));
      }
    }
  }

  @media (max-width: 39.9375em) {
    .joker-container {
      .joker-count {
        min-height: var(--touch-target-enhanced);
      }
    }
  }

  @media (max-width: 23.4375em) {
    .joker-container {
      margin: var(--space-md) var(--space-none);
      padding: var(--space-sm);
    }
  }

  // High contrast mode support
  @media (prefers-contrast: high) {
    .joker-container {
      border-width: var(--border-width-thick);
      background: var(--bg-primary);
      color: var(--text-primary);

      .joker-count {
        border-width: var(--border-width-thick);
        background: var(--bg-secondary);
      }
    }
  }

  // Touch device optimizations
  @media (hover: none) and (pointer: coarse) {
    .joker-container {
      .joker-count {
        min-height: calc(var(--touch-target-enhanced) + var(--space-sm));
        padding: var(--space-md) var(--space-lg);
      }
    }
  }

  // Reduced motion support
  @media (prefers-reduced-motion: reduce) {
    .joker-container,
    .joker-count {
      transition: var(--transition-instant);
      animation: none;
      will-change: auto;
    }
  }

  // Enhanced text spacing support for WCAG AAA
  .enhanced-text-spacing .joker-container {
    .joker-title,
    .joker-count,
    .joker-description {
      letter-spacing: var(--letter-spacing-enhanced);
      word-spacing: var(--word-spacing-enhanced);
      line-height: var(--leading-enhanced);
    }
  }

  // Print styles
  @media print {
    .joker-container {
      background: var(--color-white);
      border: var(--border-width-thin) solid var(--color-black);
      box-shadow: none;
      break-inside: avoid;

      .joker-count {
        border: var(--border-width-thin) solid var(--color-black);
        background: var(--color-white) !important;
        color: var(--color-black) !important;
      }
    }
  }

  // Forced colors mode support
  @media (forced-colors: active) {
    .joker-container {
      border: var(--border-width-thick) solid CanvasText;
      background: Canvas;
      color: CanvasText;
      forced-color-adjust: none;

      .joker-count {
        border: var(--border-width-thin) solid CanvasText;
        background: Canvas;
        color: CanvasText;
      }
    }
  }

  // Container queries for component-specific responsiveness
  @container joker (max-width: 20em) {
    .joker-container {
      padding: var(--space-sm);
      gap: var(--space-xs);

      .joker-title {
        font-size: var(--text-base);
      }
    }
  }

  @container joker (min-width: 30em) {
    .joker-container {
      padding: var(--space-2xl);
      gap: var(--space-lg);

      .joker-title {
        font-size: var(--text-2xl);
      }

      .joker-count {
        font-size: var(--text-2xl);
        min-height: calc(var(--touch-target-enhanced) + var(--space-md));
      }
    }
  }
</style>

<script is:inline>
  /**
   * Joker Component Script
   *
   * Manages user interactions with the 50:50 joker feature in MelodyMind.
   * Provides visual feedback through animations and ensures accessibility.
   *
   * Features:
   * - Performance optimized with efficient DOM queries and caching
   * - ES6+ modern implementation
   * - WCAG AAA compliant accessibility
   * - Multi-language support
   */

  type SupportedLanguage = "de" | "en" | "es" | "fr" | "it" | "pt" | "da" | "nl" | "sv" | "fi";

  interface JokerElements {
    button: HTMLButtonElement | null;
    counter: HTMLElement | null;
    container: HTMLElement | null;
    announcement: HTMLElement | null;
  }

  // Performance optimization: cache announcement texts
  const createAnnouncementTexts = (lang: SupportedLanguage, currentCount: string): string => {
    const announcements: Record<SupportedLanguage, string> = {
      de: `50:50 Joker verwendet. Noch ${currentCount} Joker verfügbar.`,
      en: `50:50 Joker used. ${currentCount} jokers remaining.`,
      es: `Comodín 50:50 utilizado. Quedan ${currentCount} comodines.`,
      fr: `Joker 50:50 utilisé. ${currentCount} jokers restants.`,
      it: `Jolly 50:50 utilizzato. ${currentCount} jolly rimanenti.`,
      pt: `Curinga 50:50 usado. ${currentCount} curingas restantes.`,
      da: `50:50 joker brugt. ${currentCount} jokere tilbage.`,
      nl: `50:50 joker gebruikt. ${currentCount} jokers resterend.`,
      sv: `50:50 joker använd. ${currentCount} jokrar kvar.`,
      fi: `50:50-jokeri käytetty. ${currentCount} jokeria jäljellä.`,
    };
    return announcements[lang] || announcements.en;
  };

  /**
   * Initializes the Joker component once the DOM is fully loaded
   * Performance optimized with RAF and efficient element queries
   */
  const initJoker = (): void => {
    requestAnimationFrame(() => {
      const container = document.querySelector('[data-testid="joker-container"]');
      if (!container) {
        return;
      }

      const initialCount = parseInt(container.getAttribute("data-initial-count") || "0", 10);
      const initialDisabled = container.getAttribute("data-initial-disabled") === "true";
      const lang = (container.getAttribute("data-lang-code") as SupportedLanguage) || "en";

      // Performance optimization: query elements once and cache them
      const elements: JokerElements = {
        button: document.getElementById("joker-button") as HTMLButtonElement,
        counter: document.getElementById("joker-count"),
        container: container as HTMLElement,
        announcement: document.getElementById("joker-announcement"),
      };

      if (!elements.button || !elements.counter) {
        console.warn("Joker component: Required elements not found");
        return;
      }

      if (initialDisabled) {
        elements.button.disabled = true;
      }

      if (initialCount > 0) {
        elements.counter.textContent = initialCount.toString();
      }

      setupButtonEvents(elements, lang);
      setupCounterObserver(elements);

      document.addEventListener("astro:before-swap", () => {
        cleanupJokerComponent(elements);
      });
    });
  };

  /**
   * Sets up event handlers for the joker button with performance optimizations
   */
  const setupButtonEvents = (elements: JokerElements, lang: SupportedLanguage): void => {
    if (!elements.button) {
      return;
    }

    let clickTimeout: ReturnType<typeof setTimeout> | null = null;
    let canTrigger = true;

    // Define the click handler function first
    const handleJokerClick = (_e: Event): void => {
      if (elements.button?.disabled || !canTrigger || clickTimeout) {
        return;
      }

      canTrigger = false;

      // Performance optimization: batch DOM updates in RAF
      requestAnimationFrame(() => {
        dispatchJokerEvent(elements, lang);

        if (elements.button) {
          elements.button.disabled = true;
        }

        clickTimeout = setTimeout(() => {
          if (elements.button && !elements.button.hasAttribute("data-permanently-disabled")) {
            elements.button.disabled = false;
          }
          clickTimeout = null;
          canTrigger = true;
        }, 800);
      });
    };

    // Performance optimization: use passive listeners where possible
    elements.button.addEventListener("click", handleJokerClick, {
      passive: true,
    });

    elements.button.addEventListener("keydown", (e) => {
      if (e.key === "Enter" || e.key === " ") {
        e.preventDefault();
        handleJokerClick(e);
      }
    });
  };

  /**
   * Creates and dispatches the jokerUsed custom event
   */
  const dispatchJokerEvent = (elements: JokerElements, lang: SupportedLanguage): void => {
    const { button } = elements;
    if (!button) {
      return;
    }

    try {
      const jokerEvent = new CustomEvent("jokerUsed", {
        bubbles: true,
        detail: {
          jokerType: button.dataset.jokerType || "fifty-fifty",
          timestamp: Date.now(),
        },
      });

      document.dispatchEvent(jokerEvent);
      announceJokerUsage(elements, lang);
    } catch (error) {
      console.warn("Error dispatching jokerUsed event:", error);
    }
  };

  /**
   * Sets up mutation observer for joker counter
   */
  const setupCounterObserver = (elements: JokerElements): void => {
    const { counter } = elements;
    if (!counter) {
      return;
    }

    const observer = new IntersectionObserver(
      (entries) => {
        if (entries[0].isIntersecting) {
          setupMutation();
        }
      },
      { threshold: 0.1 }
    );

    observer.observe(counter);

    const setupMutation = (): void => {
      const mutationObs = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (mutation.type === "childList" && counter) {
            requestAnimationFrame(() => {
              counter.classList.remove("updated");
              void counter.offsetWidth;
              counter.classList.add("updated");
            });
          }
        });
      });

      if (counter) {
        mutationObs.observe(counter, { childList: true });
      }
    };
  };

  /**
   * Creates accessible announcements for screen readers when joker is used
   * Performance optimized with cached announcement texts
   */
  const announceJokerUsage = (elements: JokerElements, lang: SupportedLanguage): void => {
    const { counter, announcement } = elements;

    const announcementEl =
      announcement ||
      ((): HTMLElement => {
        const el = document.createElement("div");
        el.id = "joker-announcement";
        el.setAttribute("aria-live", "assertive");
        el.setAttribute("aria-atomic", "true");
        el.className = "sr-only";
        document.body.appendChild(el);
        return el;
      })();

    const currentCount = counter?.textContent?.trim() || "0";

    // Performance optimization: use cached announcement texts
    announcementEl.textContent = createAnnouncementTexts(lang, currentCount);

    setTimeout(() => {
      announcementEl.textContent = "";
    }, 3000);
  };

  /**
   * Updates joker count and manages button state with performance optimization
   */
  const updateJokerCount = (count: number, disable: boolean = false): void => {
    // Performance optimization: batch DOM updates in RAF
    requestAnimationFrame(() => {
      const counter = document.getElementById("joker-count");
      const button = document.getElementById("joker-button") as HTMLButtonElement | null;

      if (counter) {
        counter.textContent = count.toString();
      }

      if (button) {
        if (disable || count <= 0) {
          button.disabled = true;
          if (count <= 0) {
            button.setAttribute("data-permanently-disabled", "true");
          }
        } else {
          button.disabled = false;
          button.removeAttribute("data-permanently-disabled");
        }
      }
    });
  };

  /**
   * Handles cleanup of component resources when page changes
   */
  const cleanupJokerComponent = (elements: JokerElements): void => {
    const { announcement } = elements;

    if (announcement) {
      announcement.remove();
    }
  };

  // Register functions on window for external component access
  window.MelodyMind = window.MelodyMind || {};
  window.MelodyMind.updateJokerCount = updateJokerCount;

  // Initialize component when DOM is ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initJoker);
  } else {
    initJoker();
  }
</script>

<!-- Type definitions for global namespace -->
<script>
  interface MelodyMindGlobal {
    updateJokerCount: (count: number, disable?: boolean) => void;
    [key: string]: unknown;
  }

  declare global {
    interface Window {
      MelodyMind: MelodyMindGlobal;
    }
  }
</script>
