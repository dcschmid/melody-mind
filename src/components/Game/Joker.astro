---
/**
 * Joker Component
 *
 * A fully accessible component for the 50:50 joker feature in MelodyMind.
 * Allows users to eliminate two wrong answers during gameplay.
 * Uses CSS custom properties for consistent styling and WCAG AAA compliance.
 *
 * Features:
 * - WCAG AAA compliant accessibility
 * - Responsive design with mobile-first approach
 * - Screen reader announcements
 * - Visual feedback with animations
 * - Internationalization support
 */
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import { Icon } from "astro-icon/components";
import Headline from "@components/Headline.astro";

interface Props {
  initialCount?: number;
  disabled?: boolean;
}

const { initialCount = 0, disabled = false } = Astro.props;

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const jokerButtonAriaLabel = t("game.joker.use");
const jokerTitle = t("game.joker.options");
const jokerText = t("game.joker");
const jokerDescription = t("game.joker.description");
const remainingText = t("game.remaining");

const dataAttributes = {
  initialCount: initialCount.toString(),
  initialDisabled: disabled.toString(),
  langCode: lang,
};
---

<div
  class="joker-container"
  role="group"
  aria-labelledby="joker-title"
  data-testid="joker-container"
  {...dataAttributes}
>
  <Headline level="h2" size="lg" id="joker-title">
    {jokerTitle}
  </Headline>

  <div class="joker-button-wrapper" data-joker-button-wrapper>
    <button
      id="joker-button"
      type="button"
      class="button-link button-link--primary button-link--md"
      aria-label={jokerButtonAriaLabel}
      aria-describedby="joker-description joker-count"
      data-joker-type="fifty-fifty"
      {disabled}
    >
      <Icon name="star" class="button-link__icon" aria-hidden="true" />
      {jokerText}
    </button>
  </div>

  <div id="joker-count-container" class="joker-count-container">
    <span id="joker-count" class="joker-count" aria-live="polite" aria-atomic="true">
      {initialCount}
      {remainingText}
    </span>
  </div>

  <div id="joker-description" class="joker-description">
    {jokerDescription}
  </div>

  <div id="joker-announcement" class="sr-only" aria-live="assertive" aria-atomic="true"></div>
</div>

<style lang="scss">
  @keyframes pulse {
    0% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.1);
      background: var(--interactive-primary);
    }
    100% {
      transform: scale(1);
    }
  }

  .joker-container {
    position: relative;
    padding: var(--space-xl);
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--space-lg);
    border-radius: var(--radius-xl);
    border: var(--border-width-thick) solid var(--border-primary);
    background: var(--card-bg);
    box-shadow: var(--shadow-lg);
    transition:
      box-shadow var(--transition-normal),
      border-color var(--transition-normal);

    .joker-button-wrapper {
      position: relative;

      #joker-button {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        border: none;
        border-radius: var(--radius-lg);
        font-weight: var(--font-bold);
        text-decoration: none;
        cursor: pointer;
        position: relative;
        min-width: var(--min-touch-size);
        min-height: var(--min-touch-size);
        line-height: var(--leading-normal);
        letter-spacing: var(--letter-spacing-base);
        font-family: var(--font-family-primary);
        padding: var(--space-md) var(--space-lg);
        font-size: var(--text-base);
        background: var(--btn-primary-bg);
        color: var(--btn-primary-text);
        border: var(--border-width-thin) solid transparent;
        box-shadow: var(--card-shadow);
        transition:
          background-color var(--transition-normal),
          box-shadow var(--transition-normal);

        &:hover:not(:disabled) {
          background: var(--btn-primary-hover);
          box-shadow: var(--card-shadow-hover);
        }

        &:active:not(:disabled) {
          background: var(--btn-primary-hover);
        }

        &:focus-visible {
          outline: var(--focus-outline);
          outline-offset: var(--focus-ring-offset);
          box-shadow: var(--focus-ring);
        }

        &:disabled {
          opacity: var(--opacity-disabled);
          cursor: not-allowed;
          pointer-events: none;
          filter: grayscale(var(--filter-grayscale-half));
        }

        .button-link__icon {
          width: var(--icon-size-sm);
          height: var(--icon-size-sm);
          flex-shrink: 0;
          margin-right: var(--space-md);
        }
      }
    }

    .joker-count-container {
      display: flex;
      align-items: center;
      gap: var(--space-sm);

      .joker-count {
        font-weight: var(--font-medium);
        line-height: var(--leading-normal);
        min-width: var(--touch-target-enhanced);
        min-height: var(--touch-target-enhanced);
        border-radius: var(--radius-full);
        border: var(--border-width-thin) solid var(--border-primary);
        background: var(--bg-tertiary);
        padding: var(--space-sm) var(--space-md);
        text-align: center;
        font-size: var(--text-xl);
        color: var(--text-primary);
        font-variant-numeric: tabular-nums;
        transition:
          background-color var(--transition-normal),
          border-color var(--transition-normal),
          color var(--transition-normal);

        &.updated {
          animation: pulse var(--transition-slow) ease-in-out;
        }
      }
    }

    .joker-description {
      margin-top: var(--space-lg);
      max-width: var(--grid-min-width-md);
      text-align: center;
      font-size: var(--text-lg);
      color: var(--text-tertiary);
      line-height: var(--leading-relaxed);
      letter-spacing: var(--letter-spacing-base);
    }
  }
</style>

<script is:inline>
  const createAnnouncementTexts = (lang, currentCount) => {
    const announcements = {
      de: `50:50 Joker verwendet. Noch ${currentCount} Joker verfügbar.`,
      en: `50:50 Joker used. ${currentCount} jokers remaining.`,
      es: `Comodín 50:50 utilizado. Quedan ${currentCount} comodines.`,
      fr: `Joker 50:50 utilisé. ${currentCount} jokers restants.`,
      it: `Jolly 50:50 utilizzato. ${currentCount} jolly rimanenti.`,
      pt: `Curinga 50:50 usado. ${currentCount} curingas restantes.`,
      da: `50:50 joker brugt. ${currentCount} jokere tilbage.`,
      nl: `50:50 joker gebruikt. ${currentCount} jokers resterend.`,
      sv: `50:50 joker använd. ${currentCount} jokrar kvar.`,
      fi: `50:50-jokeri käytetty. ${currentCount} jokeria jäljellä.`,
    };
    return announcements[lang] || announcements.en;
  };

  const initJoker = () => {
    const container = document.querySelector('[data-testid="joker-container"]');
    if (!container) {
      return;
    }

    const initialCount = parseInt(container.getAttribute("data-initial-count") || "0", 10);
    const initialDisabled = container.getAttribute("data-initial-disabled") === "true";
    const lang = container.getAttribute("data-lang-code") || "en";

    const elements = {
      button: document.getElementById("joker-button"),
      counter: document.getElementById("joker-count"),
      container: container,
      announcement: document.getElementById("joker-announcement"),
    };

    if (!elements.button || !elements.counter) {
      console.warn("Joker component: Required elements not found");
      return;
    }

    if (initialDisabled) {
      elements.button.disabled = true;
    }

    if (initialCount > 0) {
      elements.counter.textContent = initialCount.toString();
    }

    setupButtonEvents(elements, lang);
    setupCounterObserver(elements);
  };

  const setupButtonEvents = (elements, lang) => {
    if (!elements.button) {
      return;
    }

    let clickTimeout = null;
    let canTrigger = true;

    const handleJokerClick = (_e) => {
      if (elements.button?.disabled || !canTrigger || clickTimeout) {
        return;
      }

      canTrigger = false;

      dispatchJokerEvent(elements, lang);

      if (elements.button) {
        elements.button.disabled = true;
      }

      clickTimeout = setTimeout(() => {
        if (elements.button && !elements.button.hasAttribute("data-permanently-disabled")) {
          elements.button.disabled = false;
        }
        clickTimeout = null;
        canTrigger = true;
      }, 800);
    };

    elements.button.addEventListener("click", handleJokerClick);

    elements.button.addEventListener("keydown", (e) => {
      if (e.key === "Enter" || e.key === " ") {
        e.preventDefault();
        handleJokerClick(e);
      }
    });
  };

  const dispatchJokerEvent = (elements, lang) => {
    const { button } = elements;
    if (!button) {
      return;
    }

    try {
      const jokerEvent = new CustomEvent("jokerUsed", {
        bubbles: true,
        detail: {
          jokerType: button.dataset.jokerType || "fifty-fifty",
          timestamp: Date.now(),
        },
      });

      document.dispatchEvent(jokerEvent);
      announceJokerUsage(elements, lang);
    } catch (error) {
      console.warn("Error dispatching jokerUsed event:", error);
    }
  };

  const setupCounterObserver = (elements) => {
    const { counter } = elements;
    if (!counter) {
      return;
    }

    const observer = new IntersectionObserver(
      (entries) => {
        if (entries[0].isIntersecting) {
          setupMutation();
        }
      },
      { threshold: 0.1 }
    );

    observer.observe(counter);

    const setupMutation = () => {
      const mutationObs = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (mutation.type === "childList" && counter) {
            counter.classList.remove("updated");
            void counter.offsetWidth;
            counter.classList.add("updated");
          }
        });
      });

      if (counter) {
        mutationObs.observe(counter, { childList: true });
      }
    };
  };

  const announceJokerUsage = (elements, lang) => {
    const { counter, announcement } = elements;

    const announcementEl =
      announcement ||
      (() => {
        const el = document.createElement("div");
        el.id = "joker-announcement";
        el.setAttribute("aria-live", "assertive");
        el.setAttribute("aria-atomic", "true");
        el.className = "sr-only";
        document.body.appendChild(el);
        return el;
      })();

    const currentCount = counter?.textContent?.trim() || "0";

    announcementEl.textContent = createAnnouncementTexts(lang, currentCount);

    setTimeout(() => {
      announcementEl.textContent = "";
    }, 3000);
  };

  const updateJokerCount = (count, disable = false) => {
    const counter = document.getElementById("joker-count");
    const button = document.getElementById("joker-button");

    if (counter) {
      counter.textContent = count.toString();
    }

    if (button) {
      if (disable || count <= 0) {
        button.disabled = true;
        if (count <= 0) {
          button.setAttribute("data-permanently-disabled", "true");
        }
      } else {
        button.disabled = false;
        button.removeAttribute("data-permanently-disabled");
      }
    }
  };

  window.MelodyMind = window.MelodyMind || {};
  window.MelodyMind.updateJokerCount = updateJokerCount;

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initJoker);
  } else {
    initJoker();
  }
</script>
