---
/**
 * Joker Component
 *
 * A fully accessible component for the 50:50 joker feature in MelodyMind.
 * Allows users to eliminate two wrong answers during gameplay.
 * Uses CSS custom properties for consistent styling and WCAG AAA compliance.
 *
 * @component
 * @example
 * ```astro
 * <Joker initialCount={5} />
 * ```
 */
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import { Icon } from "astro-icon/components";

interface Props {
  /** Initial number of jokers available */
  initialCount?: number;
  /** Whether joker is disabled initially */
  disabled?: boolean;
}

const { initialCount = 0, disabled = false } = Astro.props;

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Pre-compute localized strings for better SSR performance
const jokerButtonAriaLabel = t("game.joker.use");
const jokerTitle = t("game.joker.options");
const jokerText = t("game.joker");
const jokerDescription = t("game.joker.description");
const remainingText = t("game.remaining");

// Cache attributes for client-side usage
const dataAttributes = {
  initialCount: initialCount.toString(),
  initialDisabled: disabled.toString(),
  langCode: lang,
};
---

<div
  class="joker-container"
  role="group"
  aria-labelledby="joker-title"
  data-testid="joker-container"
  {...dataAttributes}
>
  <h2 id="joker-title" class="joker-title">
    {jokerTitle}
  </h2>

  <div class="joker-button-wrapper" data-joker-button-wrapper>
    <button
      id="joker-button"
      class="joker-button"
      aria-label={jokerButtonAriaLabel}
      aria-describedby="joker-description joker-count"
      data-joker-type="fifty-fifty"
      {disabled}
    >
      <span class="joker-button-content">
        <!-- Performance optimization: preload icon with CSS variable dimensions -->
        <Icon name="lifeline" class="joker-icon" aria-hidden="true" width={24} height={24} />
        <span class="joker-text">{jokerText}</span>
      </span>

      <!-- Visual effect for button when pressed (GPU accelerated) -->
      <span class="joker-button-effect" aria-hidden="true"></span>
    </button>

    <!-- Ripple animation for active feedback (GPU accelerated) -->
    <span id="joker-ripple" class="joker-ripple" aria-hidden="true"></span>
  </div>

  <div id="joker-count-container" class="joker-count-container">
    <span id="joker-count" class="joker-count" aria-live="polite" aria-atomic="true">
      {initialCount}
    </span>
    <span class="joker-count-label">
      {remainingText}
    </span>
  </div>

  <div id="joker-description" class="joker-description">
    {jokerDescription}
  </div>

  <!-- Hidden element for screen reader announcements -->
  <div id="joker-announcement" class="sr-only" aria-live="assertive" aria-atomic="true"></div>
</div>

<style>
  /* ======================================
   * JOKER COMPONENT STYLES
   * WCAG AAA 2.2 COMPLIANT WITH CSS VARIABLES
   * ====================================== */

  /* Common base styles for reusability (DRY principle) */
  .joker-base-interactive {
    border-radius: var(--radius-lg);
    transition: all var(--transition-normal);
    cursor: pointer;
  }

  .joker-base-text {
    font-weight: var(--font-medium);
    line-height: var(--leading-normal);
  }

  .joker-container {
    position: relative;
    margin: var(--space-xl) 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--space-md);
    border-radius: var(--radius-xl);
    border: var(--border-width-thin) solid var(--border-primary);
    background: var(--card-bg);
    padding: var(--space-lg);
    box-shadow: var(--shadow-md);
    /* Performance optimization */
    contain: layout style;
  }

  .joker-title {
    margin-bottom: var(--space-sm);
    font-size: var(--text-lg);
    font-weight: var(--font-semibold);
    color: var(--interactive-primary);
    text-align: center;
    line-height: var(--leading-normal);
  }

  .joker-button-wrapper {
    position: relative;
  }

  .joker-button {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: var(--touch-target-min);
    min-width: var(--touch-target-min);
    gap: var(--space-sm);
    border-radius: var(--radius-lg);
    background: var(--btn-primary-bg);
    padding: var(--space-md) var(--space-xl);
    font-weight: var(--font-semibold);
    color: var(--btn-primary-text);
    border: none;
    cursor: pointer;
    box-shadow: var(--shadow-lg);
    transition: all var(--transition-normal);
    transform: translateY(0);
    /* Performance optimization */
    will-change: transform, background-color;
  }

  .joker-button:hover:not(:disabled) {
    background: var(--btn-primary-hover);
    transform: translateY(calc(-1 * var(--space-micro)));
    box-shadow: var(--shadow-xl);
  }

  .joker-button:active:not(:disabled) {
    transform: translateY(0);
    box-shadow: var(--shadow-md);
  }

  .joker-button:disabled {
    cursor: not-allowed;
    background: var(--bg-tertiary);
    color: var(--text-disabled);
    box-shadow: none;
    transform: none;
    opacity: var(--opacity-disabled);
  }

  .joker-button:focus-visible {
    outline: var(--focus-outline);
    outline-offset: var(--focus-ring-offset);
    box-shadow: var(--focus-ring), var(--shadow-lg);
  }

  .joker-button-content {
    display: flex;
    align-items: center;
    position: relative;
    z-index: 1;
  }

  .joker-icon {
    margin-right: var(--space-sm);
    width: var(--space-lg);
    height: var(--space-lg);
    transition: transform var(--transition-normal);
  }

  .joker-button:hover:not(:disabled) .joker-icon {
    transform: scale(var(--scale-focus));
  }

  .joker-text {
    white-space: nowrap;
    font-size: var(--text-base);
    line-height: var(--leading-normal);
  }

  .joker-button-effect {
    position: absolute;
    inset: 0;
    border-radius: var(--radius-lg);
    background: var(--focus-bg-overlay);
    opacity: 0;
    transform: scale(var(--scale-active));
    transition: all var(--transition-normal);
    pointer-events: none;
  }

  .joker-button:hover:not(:disabled) .joker-button-effect {
    opacity: 1;
    transform: scale(1);
  }

  .joker-ripple {
    position: absolute;
    inset: 0;
    border-radius: var(--radius-lg);
    background: var(--interactive-primary);
    opacity: 0;
    pointer-events: none;
    will-change: transform, opacity;
  }

  .joker-ripple.animate {
    animation: ripple var(--transition-slow) ease-out forwards;
  }

  .joker-count-container {
    display: flex;
    align-items: center;
    gap: var(--space-sm);
  }

  .joker-count-label {
    color: var(--text-secondary);
    font-size: var(--text-sm);
    font-weight: var(--font-medium);
    line-height: var(--leading-normal);
  }

  .joker-count {
    min-width: var(--touch-target-min);
    border-radius: var(--radius-full);
    border: var(--border-width-thin) solid var(--border-primary);
    background: var(--bg-tertiary);
    padding: var(--space-xs) var(--space-md);
    text-align: center;
    font-size: var(--text-lg);
    color: var(--text-primary);
    font-variant-numeric: tabular-nums;
    /* Shared text properties */
    font-weight: var(--font-medium);
    line-height: var(--leading-normal);
  }

  .joker-count.updated {
    animation: pulse var(--transition-slow) ease-in-out;
  }

  .joker-description {
    margin-top: var(--space-sm);
    max-width: var(--grid-min-width-sm);
    text-align: center;
    font-size: var(--text-base);
    color: var(--text-tertiary);
    line-height: var(--leading-relaxed);
  }

  /* ======================================
   * ANIMATIONS
   * ====================================== */

  @keyframes ripple {
    0% {
      transform: scale(var(--scale-active));
      opacity: var(--opacity-medium);
    }
    50% {
      transform: scale(var(--scale-focus));
      opacity: var(--opacity-low);
    }
    100% {
      transform: scale(1.2);
      opacity: 0;
    }
  }

  @keyframes pulse {
    0% {
      transform: scale(1);
    }
    50% {
      transform: scale(var(--scale-focus));
      background: var(--interactive-primary);
    }
    100% {
      transform: scale(1);
    }
  }

  /* ======================================
   * RESPONSIVE DESIGN
   * ====================================== */

  @media (max-width: var(--breakpoint-sm)) {
    .joker-button {
      min-height: var(--touch-target-enhanced);
      min-width: var(--touch-target-enhanced);
      padding: var(--space-lg);
    }

    .joker-container {
      margin: var(--space-lg) 0;
      padding: var(--space-md);
    }
  }

  /* ======================================
   * ACCESSIBILITY ENHANCEMENTS
   * ====================================== */

  /* High contrast mode support using CSS variables */
  @media (forced-colors: active) {
    .joker-container {
      border: var(--border-width-thick) solid CanvasText;
      background: Canvas;
    }

    .joker-button {
      border: var(--border-width-thick) solid ButtonText;
      background: ButtonFace;
      color: ButtonText;
      forced-color-adjust: none;
    }

    .joker-button:disabled {
      opacity: var(--opacity-disabled);
    }

    .joker-count {
      border: var(--border-width-thin) solid CanvasText;
      background: Canvas;
      color: CanvasText;
    }

    .joker-button:focus-visible {
      outline: var(--border-width-enhanced) solid Highlight;
    }
  }

  /* Reduced motion preferences using CSS variables */
  @media (prefers-reduced-motion: reduce) {
    .joker-button,
    .joker-ripple,
    .joker-count,
    .joker-icon,
    .joker-button-effect {
      transition-duration: var(--transition-fast) !important;
      animation-duration: var(--transition-fast) !important;
      animation-iteration-count: 1 !important;
    }
  }

  /* Print styles */
  @media print {
    .joker-container {
      border: var(--border-width-thin) solid var(--print-text);
      background: var(--print-bg) !important;
      break-inside: avoid;
    }

    .joker-button {
      border: var(--border-width-thin) solid var(--print-text);
      background: var(--print-bg) !important;
      color: var(--print-text) !important;
    }

    .joker-count {
      border: var(--border-width-thin) solid var(--print-text);
      background: var(--print-bg) !important;
      color: var(--print-text) !important;
    }
  }
</style>

<script>
  /**
   * Joker Component Script
   *
   * Manages user interactions with the 50:50 joker feature, provides visual feedback
   * through animations, and ensures accessibility through screen reader announcements.
   *
   * Performance optimized with efficient DOM queries and caching strategies.
   */

  type SupportedLanguage = "de" | "en" | "es" | "fr" | "it" | "pt" | "da" | "nl" | "sv" | "fi";

  interface JokerElements {
    button: HTMLButtonElement | null;
    counter: HTMLElement | null;
    ripple: HTMLElement | null;
    container: HTMLElement | null;
    announcement: HTMLElement | null;
  }

  // Performance optimization: cache announcement texts
  const createAnnouncementTexts = (lang: SupportedLanguage, currentCount: string): string => {
    const announcements: Record<SupportedLanguage, string> = {
      de: `50:50 Joker verwendet. Noch ${currentCount} Joker verfügbar.`,
      en: `50:50 Joker used. ${currentCount} jokers remaining.`,
      es: `Comodín 50:50 utilizado. Quedan ${currentCount} comodines.`,
      fr: `Joker 50:50 utilisé. ${currentCount} jokers restants.`,
      it: `Jolly 50:50 utilizzato. ${currentCount} jolly rimanenti.`,
      pt: `Curinga 50:50 usado. ${currentCount} curingas restantes.`,
      da: `50:50 joker brugt. ${currentCount} jokere tilbage.`,
      nl: `50:50 joker gebruikt. ${currentCount} jokers resterend.`,
      sv: `50:50 joker använd. ${currentCount} jokrar kvar.`,
      fi: `50:50-jokeri käytetty. ${currentCount} jokeria jäljellä.`,
    };
    return announcements[lang] || announcements.en;
  };

  /**
   * Initializes the Joker component once the DOM is fully loaded
   * Performance optimized with RAF and efficient element queries
   */
  const initJoker = (): void => {
    requestAnimationFrame(() => {
      const container = document.querySelector('[data-testid="joker-container"]');
      if (!container) {
        return;
      }

      const initialCount = parseInt(container.getAttribute("data-initial-count") || "0", 10);
      const initialDisabled = container.getAttribute("data-initial-disabled") === "true";
      const lang = (container.getAttribute("data-lang-code") as SupportedLanguage) || "en";

      // Performance optimization: query elements once and cache them
      const elements: JokerElements = {
        button: document.getElementById("joker-button") as HTMLButtonElement,
        counter: document.getElementById("joker-count"),
        ripple: document.getElementById("joker-ripple"),
        container: container as HTMLElement,
        announcement: document.getElementById("joker-announcement"),
      };

      if (!elements.button || !elements.counter) {
        console.warn("Joker component: Required elements not found");
        return;
      }

      if (initialDisabled) {
        elements.button.disabled = true;
      }

      if (initialCount > 0) {
        elements.counter.textContent = initialCount.toString();
      }

      setupButtonEvents(elements, lang);
      setupCounterObserver(elements);

      document.addEventListener("astro:before-swap", () => {
        cleanupJokerComponent(elements);
      });
    });
  };

  /**
   * Sets up event handlers for the joker button with performance optimizations
   */
  function setupButtonEvents(elements: JokerElements, lang: SupportedLanguage): void {
    if (!elements.button) {
      return;
    }

    let clickTimeout: ReturnType<typeof setTimeout> | null = null;
    let canTrigger = true;

    // Performance optimization: use passive listeners where possible
    elements.button.addEventListener("click", handleJokerClick, {
      passive: true,
    });

    elements.button.addEventListener("keydown", (e) => {
      if (e.key === "Enter" || e.key === " ") {
        e.preventDefault();
        handleJokerClick(e);
      }
    });

    function handleJokerClick(_e: Event): void {
      if (elements.button?.disabled || !canTrigger || clickTimeout) {
        return;
      }

      canTrigger = false;

      // Performance optimization: batch DOM updates in RAF
      requestAnimationFrame(() => {
        applyRippleEffect(elements);
        dispatchJokerEvent(elements, lang);

        if (elements.button) {
          elements.button.disabled = true;
        }

        clickTimeout = setTimeout(() => {
          if (elements.button && !elements.button.hasAttribute("data-permanently-disabled")) {
            elements.button.disabled = false;
          }
          clickTimeout = null;
          canTrigger = true;
        }, 800);
      });
    }
  }

  /**
   * Applies the ripple animation effect when joker is activated
   */
  function applyRippleEffect(elements: JokerElements): void {
    const { ripple } = elements;
    if (!ripple) {
      return;
    }

    ripple.classList.remove("animate");
    void ripple.offsetWidth;
    ripple.classList.add("animate");
  }

  /**
   * Creates and dispatches the jokerUsed custom event
   */
  function dispatchJokerEvent(elements: JokerElements, lang: SupportedLanguage): void {
    const { button } = elements;
    if (!button) {
      return;
    }

    try {
      const jokerEvent = new CustomEvent("jokerUsed", {
        bubbles: true,
        detail: {
          jokerType: button.dataset.jokerType || "fifty-fifty",
          timestamp: Date.now(),
        },
      });

      document.dispatchEvent(jokerEvent);
      announceJokerUsage(elements, lang);
    } catch (error) {
      console.warn("Error dispatching jokerUsed event:", error);
    }
  }

  /**
   * Sets up mutation observer for joker counter
   */
  function setupCounterObserver(elements: JokerElements): void {
    const { counter } = elements;
    if (!counter) {
      return;
    }

    const observer = new IntersectionObserver(
      (entries) => {
        if (entries[0].isIntersecting) {
          setupMutation();
        }
      },
      { threshold: 0.1 }
    );

    observer.observe(counter);

    function setupMutation(): void {
      const mutationObs = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (mutation.type === "childList" && counter) {
            requestAnimationFrame(() => {
              counter.classList.remove("updated");
              void counter.offsetWidth;
              counter.classList.add("updated");
            });
          }
        });
      });

      if (counter) {
        mutationObs.observe(counter, { childList: true });
      }
    }
  }

  /**
   * Creates accessible announcements for screen readers when joker is used
   * Performance optimized with cached announcement texts
   */
  function announceJokerUsage(elements: JokerElements, lang: SupportedLanguage): void {
    const { counter, announcement } = elements;

    const announcementEl =
      announcement ||
      ((): HTMLElement => {
        const el = document.createElement("div");
        el.id = "joker-announcement";
        el.setAttribute("aria-live", "assertive");
        el.setAttribute("aria-atomic", "true");
        el.className = "sr-only";
        document.body.appendChild(el);
        return el;
      })();

    const currentCount = counter?.textContent?.trim() || "0";

    // Performance optimization: use cached announcement texts
    announcementEl.textContent = createAnnouncementTexts(lang, currentCount);

    setTimeout(() => {
      announcementEl.textContent = "";
    }, 3000);
  }

  /**
   * Updates joker count and manages button state with performance optimization
   */
  function updateJokerCount(count: number, disable: boolean = false): void {
    // Performance optimization: batch DOM updates in RAF
    requestAnimationFrame(() => {
      const counter = document.getElementById("joker-count");
      const button = document.getElementById("joker-button") as HTMLButtonElement | null;

      if (counter) {
        counter.textContent = count.toString();
      }

      if (button) {
        if (disable || count <= 0) {
          button.disabled = true;
          if (count <= 0) {
            button.setAttribute("data-permanently-disabled", "true");
          }
        } else {
          button.disabled = false;
          button.removeAttribute("data-permanently-disabled");
        }
      }
    });
  }

  /**
   * Handles cleanup of component resources when page changes
   */
  function cleanupJokerComponent(elements: JokerElements): void {
    const { announcement } = elements;

    if (announcement) {
      announcement.remove();
    }
  }

  // Register functions on window for external component access
  window.MelodyMind = window.MelodyMind || {};
  window.MelodyMind.updateJokerCount = updateJokerCount;

  // Initialize component when DOM is ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initJoker);
  } else {
    initJoker();
  }
</script>

<!-- Type definitions for global namespace -->
<script>
  interface MelodyMindGlobal {
    updateJokerCount: (count: number, disable?: boolean) => void;
    [key: string]: unknown;
  }

  declare global {
    interface Window {
      MelodyMind: MelodyMindGlobal;
    }
  }
</script>
