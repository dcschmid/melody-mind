---
import { getLangFromUrl, useTranslations } from "@utils/i18n";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<div
  class="jokerContainer flex flex-col items-center gap-2 my-6 p-3 isolate"
  role="group"
  aria-labelledby="joker-title"
>
  <h2 id="joker-title" class="sr-only">{t("game.joker.options")}</h2>
  <button
    id="joker-button"
    class="jokerButton relative cursor-pointer flex items-center justify-center gap-2 min-w-[48px] min-h-[48px] py-2 px-4 bg-sky-500 hover:bg-sky-400 active:bg-sky-600 text-zinc-900 font-semibold rounded-lg shadow-md transition-all duration-300 hover:-translate-y-0.5 hover:shadow-lg disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:translate-y-0 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-sky-300"
    aria-label={t("game.joker.use")}
    aria-describedby="joker-description"
    data-joker-type="fifty-fifty"
  >
    <span class="buttonText">{t("game.joker")}</span>
  </button>
  <p id="joker-count" class="jokerCount text-base text-zinc-300 text-center">
    <span class="font-bold text-sky-400">{t("game.joker")}</span>
  </p>
  <span id="joker-description" class="sr-only">
    {t("game.joker.description")}
  </span>
</div>

<style>
  /* Fallback für ältere Browser und JS-Unterstützung */
  .jokerButton:disabled {
    cursor: not-allowed;
    opacity: 0.5;
  }

  /* Explizite will-change-Eigenschaften für Performance */
  .jokerButton {
    will-change: transform, opacity;
    backface-visibility: hidden;
  }

  @media (forced-colors: active) {
    .jokerButton {
      border: 2px solid ButtonText;
    }

    .jokerButton:disabled {
      border: 2px solid GrayText;
    }

    .jokerButton:focus-visible {
      outline: 2px solid Highlight;
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .jokerButton {
      transition: none;
    }
  }

  /* Verbesserte Touch-Targets für mobile Geräte */
  @media (hover: none) and (pointer: coarse) {
    .jokerButton {
      padding: 0.75rem 1rem;
    }
  }
</style>

<script>
  // Direkter Event-Listener für den Joker-Button
  document.addEventListener("DOMContentLoaded", () => {
    const jokerButton = document.getElementById("joker-button");

    // Debug-Meldung zur Überprüfung, ob der Button gefunden wurde
    if (jokerButton) {
      console.log("Joker-Button gefunden:", jokerButton);

      // Füge einen Click-Event-Handler direkt am Button hinzu
      jokerButton.addEventListener("click", (e) => {
        console.log("Joker-Button wurde geklickt");
        // Der JokerManager sollte dieses Event bereits behandeln,
        // aber wir stellen sicher, dass ein Klick-Event ausgelöst wird
        const clickEvent = new Event("jokerUsed", { bubbles: true });
        document.dispatchEvent(clickEvent);
      });
    } else {
      console.error("Joker-Button nicht gefunden!");
    }
  });
</script>
