---
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import { Icon } from "astro-icon/components";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<div
  class="jokerContainer relative flex flex-col items-center gap-3 my-6 p-4 bg-gradient-to-b from-zinc-800/70 to-zinc-900/70 rounded-xl border border-zinc-700 shadow-md"
  role="group"
  aria-labelledby="joker-title"
>
  <h2 id="joker-title" class="text-lg font-semibold text-sky-300 mb-1">
    {t("game.joker.options")}
  </h2>

  <div class="relative">
    <button
      id="joker-button"
      class="jokerButton relative cursor-pointer flex items-center justify-center gap-2 min-w-[48px] min-h-[48px] py-3 px-6 bg-gradient-to-r from-sky-600 to-indigo-600 hover:from-sky-500 hover:to-indigo-500 text-white font-semibold rounded-lg shadow-lg transition duration-300 ease-in-out transform hover:-translate-y-0.5 hover:shadow-xl disabled:from-zinc-600 disabled:to-zinc-700 disabled:text-zinc-400 disabled:cursor-not-allowed disabled:hover:translate-y-0 disabled:shadow-none focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-sky-300"
      aria-label={t("game.joker.use")}
      aria-describedby="joker-description joker-count"
      data-joker-type="fifty-fifty"
    >
      <span class="flex items-center">
        <Icon name="lifeline" class="w-5 h-5 mr-2" aria-hidden="true" />
        <span class="buttonText whitespace-nowrap">{t("game.joker")}</span>
      </span>

      <!-- Visual effect for button when pressed -->
      <span
        class="absolute inset-0 rounded-lg hover:shadow-inner-lg transform ease-out scale-95 hover:scale-100 transition duration-300 opacity-0 bg-white/10 hover:opacity-100 disabled:opacity-0 pointer-events-none"
      ></span>
    </button>

    <!-- Ripple animation for active feedback -->
    <span
      id="joker-ripple"
      class="joker-ripple absolute inset-0 rounded-lg pointer-events-none opacity-0 bg-sky-400/20"
    ></span>
  </div>

  <div
    id="joker-count-container"
    class="jokerCountContainer flex items-center gap-2"
  >
    <span
      id="joker-count"
      class="jokerCount text-lg text-white font-medium bg-zinc-800 px-3 py-1 rounded-full border border-zinc-700 min-w-[32px] text-center"
      aria-live="polite"
    >
      0
    </span>
    <span class="text-zinc-300">
      {t("game.remaining")}
    </span>
  </div>

  <div
    id="joker-description"
    class="mt-1 text-zinc-400 text-base max-w-[20rem] text-center"
  >
    {t("game.joker.description")}
  </div>
</div>

<style>
  /* Optimierte Joker-Komponente mit WCAG AAA Konformität */

  /* Animation für den Joker-Button bei Aktivierung */
  @keyframes ripple {
    0% {
      transform: scale(0.8);
      opacity: 0.8;
    }
    50% {
      transform: scale(1.05);
      opacity: 0.5;
    }
    100% {
      transform: scale(1.2);
      opacity: 0;
    }
  }

  /* Animation für den Zähler, wenn sich der Wert ändert */
  @keyframes pulse {
    0% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.15);
      background-color: rgb(14, 165, 233); /* sky-500 */
    }
    100% {
      transform: scale(1);
    }
  }

  /* Anwendung der Animationen */
  .joker-ripple.animate {
    animation: ripple 0.6s ease-out forwards;
  }

  .jokerCount.updated {
    animation: pulse 0.6s ease-in-out;
  }

  /* Verbesserter Fokus-Stil für bessere Sichtbarkeit */
  .jokerButton:focus-visible {
    outline: 3px solid rgb(56, 189, 248); /* sky-300 */
    outline-offset: 3px;
  }

  /* Unterstützung für High Contrast Mode */
  @media (forced-colors: active) {
    .jokerContainer {
      border: 2px solid CanvasText;
      background: Canvas;
    }

    .jokerButton {
      border: 2px solid ButtonText;
      background: ButtonFace;
      color: ButtonText;
      forced-color-adjust: none;
    }

    .jokerButton:disabled {
      opacity: 0.5;
    }

    .jokerCount {
      border: 1px solid CanvasText;
      background: Canvas;
      color: CanvasText;
    }

    /* Bei Fokus im High Contrast Mode */
    .jokerButton:focus-visible {
      outline: 3px solid Highlight;
    }
  }

  /* Unterstützung für reduzierte Bewegung */
  @media (prefers-reduced-motion: reduce) {
    .jokerButton,
    .joker-ripple,
    .jokerCount {
      transition: none !important;
      animation: none !important;
      transform: none !important;
    }
  }

  /* Print-Stile */
  @media print {
    .jokerContainer {
      border: 1px solid #000;
      background: none !important;
    }

    .jokerButton {
      border: 1px solid #000;
      background: none !important;
      color: #000 !important;
    }

    .jokerCount {
      border: 1px solid #000;
      background: none !important;
    }
  }
</style>

<script>
  /**
   * Joker Component Script
   *
   * Manages user interactions with the 50:50 joker feature, provides visual feedback
   * through animations, and ensures accessibility through screen reader announcements.
   *
   * @module JokerComponent
   */

  document.addEventListener("DOMContentLoaded", () => {
    // Element references
    const elements = {
      button: document.getElementById("joker-button") as HTMLButtonElement,
      counter: document.getElementById("joker-count"),
      ripple: document.getElementById("joker-ripple"),
    };

    // Early return if essential elements are missing
    if (!elements.button) {
      console.error(
        "Joker button not found - component initialization aborted",
      );
      return;
    }

    /**
     * Initializes the joker component functionality
     * @function initJokerComponent
     */
    function initJokerComponent() {
      setupButtonEvents();
      setupCounterObserver();
    }

    /**
     * Sets up event handlers for the joker button
     * @function setupButtonEvents
     */
    function setupButtonEvents() {
      // Apply click handler with debounce to prevent double triggering
      let clickTimeout: ReturnType<typeof setTimeout> | null = null;
      elements.button.addEventListener("click", (e) => {
        // Prevent handling if already in progress or disabled
        if (clickTimeout || elements.button.disabled) {
          console.log(
            "Joker click ignored - button disabled or click in progress",
          );
          return;
        }

        console.log("Joker button clicked - triggering animation and events");

        // Activate ripple animation effect
        applyRippleEffect();

        // Dispatch the custom event
        dispatchJokerEvent();

        // Temporarily disable button to prevent double clicks
        elements.button.disabled = true;
        clickTimeout = setTimeout(() => {
          // Only re-enable if not permanently disabled
          if (!elements.button.hasAttribute("data-permanently-disabled")) {
            elements.button.disabled = false;
          }
          clickTimeout = null;
        }, 1000);
      });
    }

    /**
     * Applies the ripple animation effect when joker is activated
     * @function applyRippleEffect
     */
    function applyRippleEffect() {
      if (!elements.ripple) return;

      // Reset animation to ensure it plays again
      elements.ripple.classList.remove("animate");
      void elements.ripple.offsetWidth; // Force reflow to restart animation
      elements.ripple.classList.add("animate");
    }

    /**
     * Creates and dispatches the jokerUsed custom event
     * @function dispatchJokerEvent
     */
    function dispatchJokerEvent() {
      try {
        if (!elements.button) return;

        const jokerEvent = new CustomEvent("jokerUsed", {
          bubbles: true,
          detail: {
            jokerType: elements.button.dataset.jokerType,
            timestamp: Date.now(),
          },
        });

        document.dispatchEvent(jokerEvent);
        console.log("jokerUsed event dispatched successfully");

        // Make announcement for screen readers
        announceJokerUsage();
      } catch (error) {
        console.error("Error dispatching jokerUsed event:", error);
      }
    }

    /**
     * Creates and observes mutations on the joker counter element
     * @function setupCounterObserver
     */
    function setupCounterObserver() {
      if (!elements.counter) return;

      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (mutation.type === "childList" && elements.counter) {
            // Apply animation for counter updates
            elements.counter.classList.remove("updated");
            void elements.counter.offsetWidth; // Force reflow to restart animation
            elements.counter.classList.add("updated");

            console.log(
              "Joker counter updated to:",
              elements.counter.textContent,
            );
          }
        });
      });

      observer.observe(elements.counter, { childList: true });
    }

    /**
     * Creates an accessible announcement for screen readers when joker is used
     * @function announceJokerUsage
     */
    function announceJokerUsage() {
      // Create or reuse announcement element
      let announcement = document.getElementById("joker-announcement");
      if (!announcement) {
        announcement = document.createElement("div");
        announcement.id = "joker-announcement";
        announcement.setAttribute("aria-live", "assertive");
        announcement.setAttribute("aria-atomic", "true");
        announcement.className = "sr-only";
        document.body.appendChild(announcement);
      }

      // Get current count and language for localized announcements
      const currentCount = elements.counter?.textContent?.trim() || "0";
      const lang = (document.documentElement.lang || "en") as "de" | "en";

      // Localized announcement templates
      const announcements = {
        de: `50:50 Joker verwendet. Noch ${currentCount} Joker verfügbar.`,
        en: `50:50 Joker used. ${currentCount} jokers remaining.`,
        // Add more languages as needed
      };

      // Set announcement text with fallback to English
      announcement.textContent = announcements[lang] || announcements.en;

      // Clean up after sufficient time for screen readers
      setTimeout(() => {
        announcement.textContent = "";
      }, 3000);
    }

    /**
     * Handles cleanup of component resources
     * @function cleanupJokerComponent
     */
    function cleanupJokerComponent() {
      const announcement = document.getElementById("joker-announcement");
      if (announcement) announcement.remove();
    }

    // Initialize component
    initJokerComponent();

    // Set up cleanup for page navigation
    document.addEventListener("astro:before-swap", cleanupJokerComponent);
  });
</script>
