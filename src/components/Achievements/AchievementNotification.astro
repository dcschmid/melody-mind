---
/**
 * Achievement Notification Component
 *
 * Displays a toast-like notification when a user unlocks an achievement.
 * The notification appears with animation, plays a sound (if enabled),
 * and automatically disappears after a configurable time period.
 *
 * @component
 * @implements {WCAG AAA compliance}
 *
 * Accessibility Features:
 * - Uses role="alert" for screen reader announcements
 * - Provides aria-live="polite" for non-intrusive updates
 * - Supports close button with appropriate aria-label
 * - Implements focus management and outline for keyboard navigation
 * - Follows WCAG AAA contrast requirements (7:1 ratio)
 * - Supports reduced motion preferences
 *
 * @example
 * ```astro
 * <AchievementNotification lang="en" />
 * ```
 */

import { useTranslations } from "../../utils/i18n.ts";
import { Icon } from "astro-icon/components";

interface Props {
  /** Language code for translations */
  lang: string;
}

const { lang } = Astro.props;
const t = useTranslations(lang);
---

<div
  id="achievement-notification"
  class="achievement-notification"
  role="alert"
  aria-live="polite"
  aria-labelledby="achievement-title achievement-category"
  aria-describedby="achievement-description sr-notification-type"
  tabindex="-1"
>
  <div class="achievement-notification__container">
    <div class="achievement-notification__icon">
      <Icon name="trophy" width="24" height="24" aria-hidden="true" />
    </div>
    <div class="achievement-notification__content">
      <h3 id="achievement-title" class="achievement-notification__title">
        {t("achievements.notification.unlocked")}
      </h3>
      <p id="achievement-description" class="achievement-notification__description">
        {t("achievements.notification.progress")}
      </p>
      <!-- Additional hidden information for screen readers -->
      <span id="sr-notification-type" class="sr-only">
        {t("achievements.notification.new_achievement")}
      </span>
    </div>
    <!-- Notification controls -->
    <div class="achievement-notification__controls">
      <button
        id="achievement-pause"
        class="achievement-notification__control-button"
        aria-label={t("achievements.notification.pause")}
        title={t("achievements.notification.pause_title")}
      >
        <Icon name="pause" width="16" height="16" aria-hidden="true" />
      </button>
      <button
        id="achievement-sound-toggle"
        class="achievement-notification__control-button"
        aria-label={t("achievements.notification.toggle_sound")}
        title={t("achievements.notification.toggle_sound_title")}
      >
        <Icon name="volume-2" width="16" height="16" aria-hidden="true" />
      </button>
      <button
        id="achievement-close"
        class="achievement-notification__close"
        aria-label={t("achievements.notification.close")}
      >
        <Icon name="x" width="20" height="20" aria-hidden="true" />
      </button>
    </div>
  </div>
  <div id="achievement-category" class="achievement-notification__category"></div>

  <!-- Notification timer -->
  <div class="achievement-notification__timer" aria-hidden="true">
    <div class="achievement-notification__timer-progress" id="notification-timer"></div>
  </div>
</div>

<!-- Audio for notifications with enhanced accessibility -->
<audio id="achievement-sound" preload="none">
  <source src="/sounds/achievement-unlocked.mp3" type="audio/mpeg" />
  <source src="/sounds/achievement-unlocked.ogg" type="audio/ogg" />
  <track
    kind="captions"
    src="/sounds/achievement-unlocked-captions.vtt"
    srclang="en"
    label="English"
    default
  />
</audio>

<!-- Accessibility settings (loaded dynamically with JavaScript) -->
<div
  id="achievement-a11y-settings"
  class="sr-only"
  aria-hidden="true"
  data-display-time="5000"
  data-enable-sound="true"
  data-display-time-min="3000"
  data-display-time-max="10000"
  data-display-time-step="1000"
>
</div>

<style>
  /* Achievement notification main container */
  .achievement-notification {
    position: fixed;
    right: var(--space-xl);
    bottom: var(--space-xl);
    z-index: var(--z-notification);
    max-width: calc(var(--space-3xl) * 6); /* 24rem equivalent */
    transform: translateY(150%);
    overflow: hidden;
    border-radius: var(--radius-md);
    background-color: var(--card-bg);
    border: var(--border-width-thin) solid var(--border-primary);
    padding: var(--space-md);
    color: var(--text-primary);
    opacity: 0;
    box-shadow: var(--shadow-lg);
    outline: none;
    transition:
      transform var(--transition-normal),
      opacity var(--transition-normal);
    isolation: isolate;
    line-height: var(--leading-relaxed);
    letter-spacing: var(--letter-spacing-base);
    overflow-wrap: break-word;
    font-size: var(--text-base);
  }

  /* Container for notification content */
  .achievement-notification__container {
    position: relative;
    display: flex;
    align-items: flex-start;
    gap: var(--space-md);
  }

  /* Icon container with improved contrast */
  .achievement-notification__icon {
    display: flex;
    height: calc(var(--min-touch-size) - var(--space-sm)); /* 2.5rem equivalent */
    width: calc(var(--min-touch-size) - var(--space-sm));
    flex-shrink: 0;
    align-items: center;
    justify-content: center;
    border-radius: var(--radius-full);
    background-color: var(--interactive-primary);
    padding: var(--space-sm);
    color: var(--text-primary);
    box-shadow: 0 0 0 var(--interactive-primary);
    animation: pulse var(--transition-slow) infinite;
  }

  /* Subtle pulse animation for achievement icon with CSS variables */
  @keyframes pulse {
    0% {
      box-shadow: 0 0 0 0 var(--interactive-primary);
    }
    70% {
      box-shadow: 0 0 0 var(--space-xs) transparent;
    }
    100% {
      box-shadow: 0 0 0 0 transparent;
    }
  }

  /* Disable animation for users with reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .achievement-notification__icon {
      animation: none;
      box-shadow: 0 0 0 var(--border-width-thick) var(--interactive-primary);
    }
  }

  /* Content area */
  .achievement-notification__content {
    flex-grow: 1;
    padding-right: var(--space-lg);
  }

  /* Title with improved contrast */
  .achievement-notification__title {
    margin: 0;
    margin-bottom: var(--space-xs);
    font-size: var(--text-lg);
    font-weight: var(--font-semibold);
    color: inherit;
    line-height: var(--leading-tight);
  }

  /* Description with improved contrast and CSS variables */
  .achievement-notification__description {
    margin: 0;
    font-size: var(--text-sm);
    opacity: var(--opacity-medium);
    line-height: var(--leading-normal);
    max-width: 100%;
    word-wrap: break-word;
  }

  /* Common properties for buttons */
  .achievement-notification__close,
  .achievement-notification__control-button {
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: transparent;
    color: var(--text-tertiary);
    border: none;
    border-radius: var(--radius-sm);
    cursor: pointer;
    transition:
      color var(--transition-fast),
      background-color var(--transition-fast),
      outline var(--transition-fast);
    min-height: var(--min-touch-size);
    min-width: var(--min-touch-size);
  }

  /* Spezifische Eigenschaften für Schließen-Button */
  .achievement-notification__close {
    position: absolute;
    top: 0;
    right: 0;
    height: calc(var(--min-touch-size) - var(--space-sm));
    width: calc(var(--min-touch-size) - var(--space-sm));
    padding: 0;
  }

  /* Specific properties for control buttons */
  .achievement-notification__control-button {
    height: var(--space-xl);
    width: var(--space-xl);
  }

  /* Combined hover/focus states for all buttons */
  .achievement-notification__close:hover,
  .achievement-notification__close:focus-visible,
  .achievement-notification__control-button:hover,
  .achievement-notification__control-button:focus-visible {
    color: var(--text-primary);
  }

  /* Unified focus style according to WCAG 2.2 Enhanced Focus Appearance */
  .achievement-notification__close:focus-visible,
  .achievement-notification__control-button:focus-visible {
    outline: var(--focus-outline);
    outline-offset: var(--focus-ring-offset);
    border-radius: var(--radius-sm);
    background-color: var(--focus-bg-overlay);
    min-width: var(--min-touch-size);
    min-height: var(--min-touch-size);
    box-shadow: var(--focus-ring);
  }

  /* Category */
  .achievement-notification__category {
    margin-top: var(--space-sm);
    padding: var(--space-xs) 0 0 0;
    text-align: center;
    font-size: var(--text-sm);
    font-weight: var(--font-semibold);
    text-transform: uppercase;
    letter-spacing: var(--letter-spacing-enhanced);
    border-top: var(--border-width-thin) solid var(--border-primary);
  }

  /* Modifier for visible state */
  .achievement-notification--visible {
    transform: translateY(0);
    opacity: 1;
  }

  /* Notification controls */
  .achievement-notification__controls {
    position: absolute;
    top: 0;
    right: 0;
    display: flex;
    gap: var(--space-xs);
  }

  /* Timer für Benachrichtigung */
  .achievement-notification__timer {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: var(--space-xs);
    background-color: var(--color-neutral-700);
    overflow: hidden;
  }

  .achievement-notification__timer-progress {
    height: 100%;
    width: 100%;
    background-color: var(--interactive-primary);
    transform-origin: left;
    transform: translateZ(0);
    will-change: transform;
  }

  @keyframes timer-countdown {
    from {
      transform: translateX(0);
    }
    to {
      transform: translateX(-100%);
    }
  }

  /* Responsive Anpassungen mit CSS-Variablen */
  @media (min-width: 40em) {
    /* 640px entspricht --breakpoint-sm */
    .achievement-notification {
      max-width: calc(var(--space-3xl) * 7.5); /* 30rem equivalent */
      bottom: var(--space-2xl);
      right: var(--space-2xl);
    }
  }

  @media (min-width: 48em) {
    /* 768px entspricht --breakpoint-md */
    .achievement-notification {
      max-width: calc(var(--space-3xl) * 9); /* 36rem equivalent */
    }
  }

  /* Support for reduced motion with CSS variables */
  @media (prefers-reduced-motion: reduce) {
    .achievement-notification {
      transition-duration: var(--transition-fast);
    }

    .achievement-notification--visible {
      transition: none;
    }
  }

  /* Unterstützung für High Contrast Mode - konsolidiert für DRY-Prinzip */
  @media (forced-colors: active) {
    .achievement-notification {
      border: var(--border-width-thin) solid CanvasText;
    }

    .achievement-notification__icon {
      background-color: Highlight;
      color: HighlightText;
      border: var(--border-width-thin) solid CanvasText;
    }

    .achievement-notification__category {
      border-top: var(--border-width-thin) solid CanvasText;
    }

    .achievement-notification__timer {
      background-color: Canvas;
      border-bottom: var(--border-width-thin) solid CanvasText;
    }

    .achievement-notification__timer-progress {
      background-color: Highlight;
    }

    /* Konsolidierte Button-Styles für High Contrast Mode */
    .achievement-notification__control-button {
      border: var(--border-width-thin) solid CanvasText;
    }

    .achievement-notification__close:focus-visible,
    .achievement-notification__control-button:focus-visible {
      outline: var(--enhanced-border-thickness) solid CanvasText;
    }
  }
</style>

<script>
  /**
   * Performance-optimized Achievement Notifications
   *
   * This script integrates the achievement notification system with the DOM.
   * The core functionality is extracted to an external TypeScript module for
   * better maintainability and performance optimizations.
   *
   * Key optimizations include:
   * - GPU acceleration using will-change and transform: translateZ(0)
   * - Efficient SVG icon handling with DocumentFragments
   * - Animation using translateX instead of scaleX for better performance
   * - Proper cleanup of resources when no longer needed
   * - Respect for user motion preferences
   */
  import { setupAchievementNotificationSystem } from "../../utils/achievements/achievementNotification";

  // Initialize notification system when document is ready
  const cleanupFunction = setupAchievementNotificationSystem();

  // Execute cleanup function when component is removed
  document.addEventListener("beforeunload", () => {
    if (typeof cleanupFunction === "function") {
      cleanupFunction();
    }
  });
</script>
