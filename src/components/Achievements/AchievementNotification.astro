---
/**
 * AchievementNotification - Toast notification for unlocked achievements
 *
 * Shows animated notification when achievements are unlocked
 * WCAG AAA compliant with sound support and accessibility features
 */

import { useTranslations } from "../../utils/i18n.ts";
import { Icon } from "astro-icon/components";

interface Props {
  lang: string;
}

const { lang } = Astro.props;
const t = useTranslations(lang);
---

<div
  id="achievement-notification"
  class="achievement-notification"
  role="alert"
  aria-live="polite"
  aria-labelledby="achievement-title achievement-category"
  aria-describedby="achievement-description sr-notification-type"
  tabindex="-1"
>
  <div class="achievement-notification__container">
    <div class="achievement-notification__icon">
      <Icon name="trophy" width="24" height="24" aria-hidden="true" />
    </div>
    <div class="achievement-notification__content">
      <h3 id="achievement-title" class="achievement-notification__title">
        {t("achievements.notification.unlocked")}
      </h3>
      <p id="achievement-description" class="achievement-notification__description">
        {t("achievements.notification.progress")}
      </p>
      <span id="sr-notification-type" class="sr-only">
        {t("achievements.notification.new_achievement")}
      </span>
    </div>
    <div class="achievement-notification__controls">
      <button
        id="achievement-pause"
        class="achievement-notification__control-button"
        aria-label={t("achievements.notification.pause")}
        title={t("achievements.notification.pause_title")}
      >
        <Icon name="pause" width="16" height="16" aria-hidden="true" />
      </button>
      <button
        id="achievement-sound-toggle"
        class="achievement-notification__control-button"
        aria-label={t("achievements.notification.toggle_sound")}
        title={t("achievements.notification.toggle_sound_title")}
      >
        <Icon name="volume-2" width="16" height="16" aria-hidden="true" />
      </button>
      <button
        id="achievement-close"
        class="achievement-notification__close"
        aria-label={t("achievements.notification.close")}
      >
        <Icon name="x" width="20" height="20" aria-hidden="true" />
      </button>
    </div>
  </div>
  <div id="achievement-category" class="achievement-notification__category"></div>

  <div class="achievement-notification__timer" aria-hidden="true">
    <div class="achievement-notification__timer-progress" id="notification-timer"></div>
  </div>
</div>

<audio id="achievement-sound" preload="none">
  <source src="/sounds/achievement-unlocked.mp3" type="audio/mpeg" />
  <source src="/sounds/achievement-unlocked.ogg" type="audio/ogg" />
  <track
    kind="captions"
    src="/sounds/achievement-unlocked-captions.vtt"
    srclang="en"
    label="English"
    default
  />
</audio>

<div
  id="achievement-a11y-settings"
  class="sr-only"
  aria-hidden="true"
  data-display-time="5000"
  data-enable-sound="true"
  data-display-time-min="3000"
  data-display-time-max="10000"
  data-display-time-step="1000"
>
</div>

<style lang="scss">
  .achievement-notification {
    position: fixed;
    right: var(--space-sm);
    bottom: var(--space-sm);
    z-index: var(--z-notification);
    max-width: 400px;
    min-width: 280px;
    transform: translateY(150%);
    overflow: hidden;
    border-radius: var(--radius-lg);
    background-color: var(--card-bg);
    border: var(--border-width-thin) solid var(--border-primary);
    padding: var(--space-sm);
    color: var(--text-primary);
    opacity: 0;
    box-shadow: var(--shadow-lg);
    outline: none;
    transition:
      transform var(--transition-normal),
      opacity var(--transition-normal);
    line-height: var(--leading-relaxed);
    letter-spacing: var(--letter-spacing-base);
    overflow-wrap: break-word;
    font-size: var(--text-sm);

    @media (min-width: 30em) {
      right: var(--space-md);
      bottom: var(--space-md);
      max-width: 450px;
      font-size: var(--text-base);
    }

    @media (min-width: 48em) {
      right: var(--space-lg);
      bottom: var(--space-lg);
      max-width: 500px;
    }

    @media (min-width: 64em) {
      right: var(--space-xl);
      bottom: var(--space-xl);
      max-width: 550px;
    }

    &--visible {
      transform: translateY(0);
      opacity: 1;
    }

    &__container {
      position: relative;
      display: flex;
      align-items: flex-start;
      gap: var(--space-sm);

      @media (min-width: 30em) {
        gap: var(--space-md);
      }
    }

    &__icon {
      display: flex;
      height: var(--space-2xl);
      width: var(--space-2xl);
      flex-shrink: 0;
      align-items: center;
      justify-content: center;
      border-radius: var(--radius-full);
      background-color: var(--interactive-primary);
      padding: var(--space-xs);
      color: var(--text-primary);
      box-shadow: 0 0 0 var(--interactive-primary);

      @media (min-width: 30em) {
        height: var(--space-3xl);
        width: var(--space-3xl);
        padding: var(--space-sm);
      }

      @media (prefers-reduced-motion: reduce) {
        box-shadow: 0 0 0 var(--border-width-thick) var(--interactive-primary);
      }
    }

    &__content {
      flex-grow: 1;
      padding-right: var(--space-md);

      @media (min-width: 30em) {
        padding-right: var(--space-lg);
      }
    }

    &__title {
      margin: 0;
      margin-bottom: var(--space-xs);
      font-size: var(--text-base);
      font-weight: var(--font-semibold);
      color: inherit;
      line-height: var(--leading-tight);

      @media (min-width: 30em) {
        font-size: var(--text-lg);
        margin-bottom: var(--space-sm);
      }
    }

    &__description {
      margin: 0;
      font-size: var(--text-xs);
      opacity: 0.7;
      line-height: var(--leading-normal);
      max-width: var(--width-full);
      word-wrap: break-word;
      letter-spacing: var(--letter-spacing-base);
      word-spacing: normal;

      @media (min-width: 30em) {
        font-size: var(--text-sm);
      }
    }

    &__close,
    &__control-button {
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: transparent;
      color: var(--text-tertiary);
      border: none;
      border-radius: var(--radius-sm);
      cursor: pointer;
      transition:
        color var(--transition-normal),
        background-color var(--transition-normal),
        outline var(--transition-normal);
      min-height: var(--touch-target-enhanced);
      min-width: var(--touch-target-enhanced);

      &:hover,
      &:focus-visible {
        color: var(--text-primary);
      }

      &:focus-visible {
        outline: var(--focus-outline);
        outline-offset: var(--focus-ring-offset);
        border-radius: var(--radius-sm);
        background-color: var(--focus-bg-overlay);
        min-width: var(--touch-target-enhanced);
        min-height: var(--touch-target-enhanced);
        box-shadow: var(--focus-ring);
      }
    }

    &__close {
      position: absolute;
      top: 0;
      right: 0;
      height: calc(var(--touch-target-enhanced) - var(--space-sm));
      width: calc(var(--touch-target-enhanced) - var(--space-sm));
      padding: 0;
    }

    &__control-button {
      height: var(--space-xl);
      width: var(--space-xl);
    }

    &__category {
      margin-top: var(--space-sm);
      padding: var(--space-xs) 0 0 0;
      text-align: center;
      font-size: var(--text-sm);
      font-weight: var(--font-semibold);
      text-transform: uppercase;
      letter-spacing: var(--letter-spacing-enhanced);
      border-top: var(--border-width-thin) solid var(--border-primary);
    }

    &__controls {
      position: absolute;
      top: 0;
      right: 0;
      display: flex;
      gap: var(--space-xs);
    }

    &__timer {
      position: absolute;
      bottom: 0;
      left: 0;
      width: var(--width-full);
      height: var(--space-xs);
      background-color: var(--color-neutral-700);
      overflow: hidden;

      &-progress {
        height: var(--width-full);
        width: var(--width-full);
        background-color: var(--interactive-primary);
        transform-origin: left;
      }
    }

    @media (prefers-reduced-motion: reduce) {
      transition-duration: var(--transition-instant);

      &--visible {
        transition: none;
      }

      &__close,
      &__control-button {
        transition: var(--transition-instant);

        &:hover,
        &:focus-visible {
          transform: none;
        }
      }
    }

    @media (forced-colors: active) {
      border: var(--border-width-thin) solid CanvasText;

      &__icon {
        background-color: Highlight;
        color: HighlightText;
        border: var(--border-width-thin) solid CanvasText;
      }

      &__category {
        border-top: var(--border-width-thin) solid CanvasText;
      }

      &__timer {
        background-color: Canvas;
        border-bottom: var(--border-width-thin) solid CanvasText;

        &-progress {
          background-color: Highlight;
        }
      }

      &__control-button {
        border: var(--border-width-thin) solid CanvasText;
      }

      &__close:focus-visible,
      &__control-button:focus-visible {
        outline: var(--border-width-enhanced) solid CanvasText;
      }
    }
  }

  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
</style>

<script>
  import { setupAchievementNotificationSystem } from "../../utils/achievements/achievementNotification";

  const cleanupFunction = setupAchievementNotificationSystem();

  document.addEventListener("beforeunload", () => {
    if (typeof cleanupFunction === "function") {
      cleanupFunction();
    }
  });
</script>
