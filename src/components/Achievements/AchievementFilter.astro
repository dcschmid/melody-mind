---
/**
 * AchievementFilter - Responsive achievement filter component
 *
 * Filters achievements by status and category with keyboard shortcuts
 * WCAG AAA compliant with performance optimizations
 */

import { useTranslations } from "../../utils/i18n.ts";
import Headline from "../Headline.astro";
import ButtonLink from "../ButtonLink.astro";

interface Props {
  lang: string;
}

const { lang } = Astro.props;
const t = useTranslations(lang);

const statusOptions = [
  { value: "all", label: t("achievements.filter.all") },
  { value: "unlocked", label: t("achievements.status.unlocked") },
  { value: "in-progress", label: t("achievements.status.in_progress") },
  { value: "locked", label: t("achievements.status.locked") },
];

const categoryOptions = [
  { value: "all", label: t("achievements.filter.all_categories") },
  { value: "bronze", label: t("achievements.category.bronze") },
  { value: "silver", label: t("achievements.category.silver") },
  { value: "gold", label: t("achievements.category.gold") },
  { value: "platinum", label: t("achievements.category.platinum") },
  { value: "diamond", label: t("achievements.category.diamond") },
  { value: "time", label: t("achievements.category.time") },
];
---

<div
  class="achievement-filter"
  data-testid="achievement-filter"
  role="region"
  aria-labelledby="filter-heading"
  data-announcement-changed={t("achievements.filter.announcement.changed")}
  data-announcement-no-results={t("achievements.filter.announcement.no_results")}
  data-announcement-results={t("achievements.filter.announcement.results")}
  data-announcement-reset={t("achievements.filter.announcement.reset")}
  data-count-all={t("achievements.filter.count.all")}
  data-count-category-all={t("achievements.filter.count.category_all")}
  data-count-generic={t("achievements.filter.count.generic")}
>
  <Headline
    level="h2"
    id="filter-heading"
    title={t("achievements.filter.title")}
    size="xl"
    variant="default"
    className="achievement-filter__title"
  />

  <div class="achievement-filter__container">
    <div class="achievement-filter__field">
      <label for="status-filter" class="achievement-filter__label" id="status-filter-label"
        >{t("achievements.filter.status")}</label
      >
      <select
        id="status-filter"
        class="achievement-filter__select"
        aria-labelledby="filter-heading status-filter-label"
        aria-controls="achievement-list"
      >
        {statusOptions.map((option) => <option value={option.value}>{option.label}</option>)}
      </select>
      <span class="achievement-filter__count" id="status-count" aria-live="polite"></span>
    </div>

    <div class="achievement-filter__field">
      <label for="category-filter" class="achievement-filter__label" id="category-filter-label"
        >{t("achievements.filter.category")}</label
      >
      <select
        id="category-filter"
        class="achievement-filter__select"
        aria-labelledby="filter-heading category-filter-label"
        aria-controls="achievement-list"
      >
        {categoryOptions.map((option) => <option value={option.value}>{option.label}</option>)}
      </select>
      <span class="achievement-filter__count" id="category-count" aria-live="polite"></span>
    </div>
  </div>

  <div class="achievement-filter__actions">
    <ButtonLink
      type="button"
      className="achievement-filter__reset"
      ariaLabel={t("achievements.filter.reset_aria")}
    >
      {t("achievements.filter.reset")}
    </ButtonLink>

    <ButtonLink
      type="button"
      className="achievement-filter__help-button"
      ariaLabel={t("achievements.filter.keyboard_shortcuts")}
    >
      {t("achievements.filter.keyboard_shortcuts")}
    </ButtonLink>
  </div>

  <div
    class="achievement-filter__keyboard-shortcuts"
    id="keyboard-shortcuts-panel"
    aria-labelledby="help-button-label"
    hidden
  >
    <Headline
      level="h3"
      title={t("achievements.filter.available_shortcuts")}
      size="sm"
      variant="default"
      className="achievement-filter__shortcuts-title"
    />
    <dl class="achievement-filter__shortcuts-list">
      <div class="achievement-filter__shortcut-item">
        <dt class="achievement-filter__shortcut-key"><kbd>Alt</kbd> + <kbd>R</kbd></dt>
        <dd class="achievement-filter__shortcut-description">
          {t("achievements.filter.reset_filters")}
        </dd>
      </div>
      <div class="achievement-filter__shortcut-item">
        <dt class="achievement-filter__shortcut-key"><kbd>Alt</kbd> + <kbd>S</kbd></dt>
        <dd class="achievement-filter__shortcut-description">
          {t("achievements.filter.focus_status")}
        </dd>
      </div>
      <div class="achievement-filter__shortcut-item">
        <dt class="achievement-filter__shortcut-key"><kbd>Alt</kbd> + <kbd>C</kbd></dt>
        <dd class="achievement-filter__shortcut-description">
          {t("achievements.filter.focus_category")}
        </dd>
      </div>
      <div class="achievement-filter__shortcut-item">
        <dt class="achievement-filter__shortcut-key"><kbd>Alt</kbd> + <kbd>K</kbd></dt>
        <dd class="achievement-filter__shortcut-description">
          {t("achievements.filter.toggle_keyboard_help")}
        </dd>
      </div>
    </dl>
  </div>

  <div id="filter-announcements" aria-live="polite" aria-atomic="true" class="sr-only"></div>
</div>

<style lang="scss">
  .achievement-filter {
    background-color: var(--card-bg);
    border: var(--border-width-thin) solid var(--card-border);
    border-radius: var(--radius-lg);
    padding: var(--space-sm);
    margin-bottom: var(--space-md);
    box-shadow: var(--card-shadow);
    transition: box-shadow var(--transition-normal);

    @media (min-width: 30em) {
      padding: var(--space-md);
      margin-bottom: var(--space-lg);
    }

    @media (min-width: 48em) {
      padding: var(--space-lg);
      margin-bottom: var(--space-xl);
    }

    @media (min-width: 64em) {
      padding: var(--space-xl);
      margin-bottom: var(--space-2xl);
    }

    &:hover {
      box-shadow: var(--card-shadow-hover);
    }

    &__title {
      margin-bottom: var(--space-md);
      text-align: center;

      @media (min-width: 30em) {
        margin-bottom: var(--space-lg);
        text-align: left;
      }
    }

    &__container {
      display: grid;
      grid-template-columns: 1fr;
      gap: var(--space-sm);
      margin-bottom: var(--space-sm);

      @media (min-width: 30em) {
        grid-template-columns: repeat(2, 1fr);
        gap: var(--space-md);
        margin-bottom: var(--space-md);
      }

      @media (min-width: 48em) {
        gap: var(--space-lg);
        margin-bottom: var(--space-lg);
      }

      @media (min-width: 64em) {
        gap: var(--space-xl);
        margin-bottom: var(--space-xl);
      }
    }

    &__field {
      display: flex;
      flex-direction: column;
      gap: var(--space-xs);
      position: relative;

      @media (min-width: 30em) {
        gap: var(--space-sm);
      }
    }

    &__label {
      color: var(--text-primary);
      letter-spacing: var(--letter-spacing-base);
      text-wrap: balance;
      margin: 0;
      font-size: var(--text-base);
      font-weight: var(--font-medium);
      line-height: var(--leading-normal);
      margin-bottom: var(--space-xs);
      display: block;

      @media (min-width: 30em) {
        font-size: var(--text-lg);
        margin-bottom: var(--space-sm);
      }
    }

    &__select {
      font-size: var(--text-sm);
      font-weight: var(--font-medium);
      line-height: var(--leading-normal);
      letter-spacing: var(--letter-spacing-base);
      border-radius: var(--radius-md);
      min-height: var(--touch-target-enhanced);
      min-width: var(--touch-target-enhanced);
      cursor: pointer;
      appearance: none;
      background-color: var(--form-bg);
      border: var(--border-width-thick) solid var(--form-border);
      color: var(--form-text);
      padding: var(--space-sm) var(--space-md);
      width: var(--width-full);
      position: relative;
      transition:
        border-color var(--transition-normal),
        background-color var(--transition-normal),
        box-shadow var(--transition-normal);

      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6,9 12,15 18,9'%3E%3C/polyline%3E%3C/svg%3E");
      background-repeat: no-repeat;
      background-position: right var(--space-md) center;
      background-size: var(--space-md) var(--space-md);
      padding-right: calc(var(--space-md) * 2 + var(--space-md));

      @media (min-width: 30em) {
        font-size: var(--text-lg);
        padding: var(--space-md) var(--space-lg);
        background-position: right var(--space-lg) center;
        background-size: var(--space-lg) var(--space-lg);
        padding-right: calc(var(--space-lg) * 2 + var(--space-lg));
      }

      @media (min-width: 48em) {
        padding: var(--space-lg) var(--space-xl);
        background-position: right var(--space-xl) center;
        background-size: var(--space-lg) var(--space-lg);
        padding-right: calc(var(--space-xl) * 2 + var(--space-lg));
      }

      &:hover:not(:focus) {
        border-color: var(--border-secondary);
        background-color: var(--bg-tertiary);
        box-shadow: var(--shadow-sm);
      }

      &:focus {
        outline: var(--focus-outline);
        outline-offset: var(--focus-ring-offset);
        border-color: var(--form-border-focus);
        background-color: var(--bg-tertiary);
        box-shadow: var(--shadow-md);
      }

      &:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        background-color: var(--bg-secondary);
        color: var(--text-disabled);
      }

      option {
        background-color: var(--form-bg);
        color: var(--form-text);
        padding: var(--space-sm) var(--space-md);
        font-size: var(--text-base);
        font-weight: var(--font-medium);

        &:hover {
          background-color: var(--bg-secondary);
        }

        &:checked {
          background-color: var(--bg-primary);
          color: var(--text-primary);
        }
      }
    }

    &__count {
      color: var(--text-secondary);
      letter-spacing: var(--letter-spacing-base);
      text-wrap: balance;
      margin: 0;
      font-size: var(--text-sm);
      font-weight: var(--font-medium);
      margin-top: var(--space-xs);
      line-height: var(--leading-normal);

      @media (min-width: 30em) {
        font-size: var(--text-base);
        margin-top: var(--space-sm);
      }

      &:empty {
        display: none;
      }
    }

    &__actions {
      display: flex;
      flex-wrap: wrap;
      gap: var(--space-sm);
      align-items: center;
      justify-content: flex-start;
      margin-top: var(--space-md);
      padding-top: var(--space-md);
      border-top: var(--border-width-thin) solid var(--border-primary);

      @media (max-width: 39.9375em) {
        flex-direction: column;
        align-items: stretch;
        gap: var(--space-md);
      }

      @media (min-width: 30em) {
        gap: var(--space-md);
        margin-top: var(--space-lg);
        padding-top: var(--space-lg);
      }
    }

    &__reset,
    &__help-button {
      font-size: var(--text-sm);
      font-weight: var(--font-medium);
      line-height: var(--leading-normal);
      letter-spacing: var(--letter-spacing-base);
      border-radius: var(--radius-md);
      min-height: var(--touch-target-enhanced);
      min-width: var(--touch-target-enhanced);
      cursor: pointer;
      background: var(--btn-primary-bg);
      border: none;
      color: var(--btn-primary-text);
      padding: var(--space-sm) var(--space-md);
      transition:
        background-color var(--transition-normal),
        box-shadow var(--transition-normal);

      @media (max-width: 39.9375em) {
        width: var(--width-full);
        text-align: center;
        min-height: var(--touch-target-enhanced);
        padding: var(--space-md) var(--space-lg);
      }

      &:hover {
        box-shadow: var(--shadow-md);
      }

      &:focus-visible {
        outline: var(--focus-outline);
        outline-offset: var(--focus-ring-offset);
      }
    }

    &__reset {
      &:hover {
        background: var(--btn-primary-hover);
      }
    }

    &__help-button {
      background: var(--btn-secondary-bg);
      border: var(--border-width-thick) solid var(--btn-secondary-border);
      color: var(--btn-secondary-text);

      &:hover {
        background: var(--btn-secondary-hover);
        border-color: var(--border-focus);
      }
    }

    &__keyboard-shortcuts {
      background-color: var(--bg-tertiary);
      border: var(--border-width-thin) solid var(--border-primary);
      border-radius: var(--radius-md);
      margin-top: var(--space-md);
      padding: var(--space-md);
      overflow: hidden;
      transition:
        max-height var(--transition-normal),
        opacity var(--transition-normal);

      @media (min-width: 30em) {
        margin-top: var(--space-lg);
        padding: var(--space-lg);
      }

      &[hidden] {
        display: none;
      }
    }

    &__shortcuts-title {
      margin-bottom: var(--space-sm);

      @media (min-width: 30em) {
        margin-bottom: var(--space-md);
      }
    }

    &__shortcuts-list {
      margin: 0;
      display: grid;
      gap: var(--space-xs);
      font-size: var(--text-sm);
      line-height: var(--leading-relaxed);

      @media (min-width: 30em) {
        font-size: var(--text-base);
        gap: var(--space-md);
        grid-template-columns: repeat(2, 1fr);
      }

      @media (min-width: 48em) {
        gap: var(--space-lg);
      }
    }

    &__shortcut-item {
      display: grid;
      grid-template-columns: auto 1fr;
      gap: var(--space-sm);
      align-items: baseline;

      @media (max-width: 39.9375em) {
        grid-template-columns: 1fr;
        gap: var(--space-xs);
      }

      @media (min-width: 30em) {
        gap: var(--space-md);
      }
    }

    &__shortcut-key {
      font-weight: var(--font-medium);
      color: var(--text-primary);

      kbd {
        background-color: var(--bg-secondary);
        border: var(--border-width-thin) solid var(--border-primary);
        border-radius: var(--radius-sm);
        padding: var(--space-xs) var(--space-sm);
        font-size: var(--text-xs);
        font-weight: var(--font-medium);
        color: var(--text-primary);
        margin: 0 var(--space-xs);

        @media (min-width: 30em) {
          font-size: var(--text-sm);
          padding: var(--space-sm) var(--space-md);
        }
      }
    }

    &__shortcut-description {
      margin: 0;
      color: var(--text-secondary);
      margin-bottom: var(--space-xs);

      @media (min-width: 30em) {
        margin-bottom: var(--space-sm);
      }
    }
  }

  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  .filtered-hidden {
    position: absolute !important;
    left: -10000px !important;
    width: 1px !important;
    height: 1px !important;
    overflow: hidden !important;
    clip: rect(1px, 1px, 1px, 1px) !important;
    clip-path: inset(50%) !important;
    white-space: nowrap !important;
    visibility: hidden;
    opacity: 0;
    pointer-events: none;
  }

  .achievements__grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: var(--space-md);
    width: var(--width-full);
    grid-auto-flow: row dense;
    align-items: start;
    justify-items: stretch;

    @media (min-width: 30em) {
      gap: var(--space-lg);
    }

    @media (min-width: 48em) {
      gap: var(--space-xl);
    }

    > *:not(.filtered-hidden) {
      position: relative;
      display: block;
    }

    &:has(.filtered-hidden) {
      filter: brightness(0.95);
    }

    @media (min-width: 48em) {
      grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
    }

    @media (min-width: 64em) {
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    }

    @media (min-width: 80em) {
      grid-template-columns: repeat(auto-fit, minmax(320px, 28%));
    }
  }

  .achievements__category {
    transition:
      opacity var(--transition-normal),
      margin var(--transition-normal),
      padding var(--transition-normal);

    &:has(.achievements__grid:empty),
    &:has(.achievements__grid > *:not(.filtered-hidden):empty) {
      display: none;
      margin: 0;
      padding: 0;
    }

    &:has(.achievements__grid:not(:has(*:not(.filtered-hidden)))) {
      display: none;
    }

    &.section-empty {
      opacity: 0;
      transform: translateY(calc(-1 * var(--space-lg)));
      margin: 0;
      padding: 0;
      max-height: 0;
      overflow: hidden;
    }

    @supports not selector(:has(*)) {
      &.all-filtered {
        display: none;
      }
      display: block;
    }
  }

  @media (prefers-contrast: high) {
    .achievement-filter {
      border-width: var(--border-width-thick);
      border-color: var(--text-primary);
      filter: contrast(2) saturate(1.5);

      &__select {
        border-width: var(--border-width-enhanced);
      }

      &__reset,
      &__help-button {
        border-width: var(--border-width-enhanced);
      }
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .achievement-filter {
      transition: none;

      &__select,
      &__reset,
      &__help-button,
      &__keyboard-shortcuts {
        transition: none;
      }

      &__reset:hover,
      &__help-button:hover {
        transform: none;
        filter: brightness(1.1);
      }
    }
  }

  @media (forced-colors: active) {
    .achievement-filter {
      border-color: ButtonBorder;
      background-color: ButtonFace;

      &__select {
        border-color: ButtonBorder;
        background-color: Field;
        color: FieldText;
      }

      &__reset {
        background-color: ButtonFace;
        border: var(--border-width-thin) solid ButtonBorder;
        color: ButtonText;
      }

      &__help-button {
        background-color: ButtonFace;
        border-color: ButtonBorder;
        color: ButtonText;
      }
    }
  }

  @media print {
    .achievement-filter {
      background-color: white;
      border: 1px solid #000;
      box-shadow: none;
      color: #000;
      page-break-inside: avoid;

      &__label {
        color: #000;
      }

      &__select {
        background-color: white;
        border: 1px solid #000;
        color: #000;
        padding: var(--space-sm) var(--space-md);
      }

      &__reset,
      &__help-button {
        background-color: white;
        border: 1px solid #000;
        color: #000;
        box-shadow: none;
        padding: var(--space-sm) var(--space-md);
      }

      &__keyboard-shortcuts {
        background-color: white;
        border: 1px solid #000;
        color: #000;
        margin-top: var(--space-md);
        padding: var(--space-md);
      }

      &__shortcut-key {
        color: #000;
        font-weight: var(--font-bold);
      }

      &__shortcut-description {
        color: #000;
        font-size: var(--text-sm);
      }
    }
  }

  .achievements__category.section-empty {
    display: none !important;
    margin: 0 !important;
    padding: 0 !important;
    max-height: 0 !important;
    min-height: 0 !important;
    overflow: hidden !important;
  }
</style>

<script>
  import { initializeAchievementFilter } from "../../utils/achievements/achievementFilter.ts";

  const initFilter = (): void => {
    initializeAchievementFilter();
  };

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initFilter, { once: true });
  } else {
    initFilter();
  }
</script>
