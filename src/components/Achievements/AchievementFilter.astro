---
/**
 * AchievementFilter - Responsive achievement filter component
 *
 * Filters achievements by status and category with keyboard shortcuts
 * WCAG AAA compliant with performance optimizations
 *
 * @param {string} lang - Language code for translations (e.g., 'en', 'de')
 */

import { useTranslations } from "../../utils/i18n.ts";
import Headline from "../Headline.astro";
import ButtonLink from "../ButtonLink.astro";

interface Props {
  /** Language code for translations (e.g., 'en', 'de') */
  lang: string;
}

const { lang } = Astro.props;
const t = useTranslations(lang);

/* Filter options */
const statusOptions = [
  { value: "all", label: t("achievements.filter.all") },
  { value: "unlocked", label: t("achievements.status.unlocked") },
  { value: "in-progress", label: t("achievements.status.in_progress") },
  { value: "locked", label: t("achievements.status.locked") },
];

const categoryOptions = [
  { value: "all", label: t("achievements.filter.all_categories") },
  { value: "bronze", label: t("achievements.category.bronze") },
  { value: "silver", label: t("achievements.category.silver") },
  { value: "gold", label: t("achievements.category.gold") },
  { value: "platinum", label: t("achievements.category.platinum") },
  { value: "diamond", label: t("achievements.category.diamond") },
  { value: "time", label: t("achievements.category.time") },
];
---

<div
  class="achievement-filter"
  data-testid="achievement-filter"
  role="region"
  aria-labelledby="filter-heading"
  data-announcement-changed={t("achievements.filter.announcement.changed")}
  data-announcement-no-results={t("achievements.filter.announcement.no_results")}
  data-announcement-results={t("achievements.filter.announcement.results")}
  data-announcement-reset={t("achievements.filter.announcement.reset")}
  data-count-all={t("achievements.filter.count.all")}
  data-count-category-all={t("achievements.filter.count.category_all")}
  data-count-generic={t("achievements.filter.count.generic")}
>
  <Headline
    level="h2"
    id="filter-heading"
    title={t("achievements.filter.title")}
    size="xl"
    variant="default"
    className="achievement-filter__title"
  />

  <div class="achievement-filter__container">
    <div class="achievement-filter__field">
      <label for="status-filter" class="achievement-filter__label" id="status-filter-label"
        >{t("achievements.filter.status")}</label
      >
      <select
        id="status-filter"
        class="achievement-filter__select"
        aria-labelledby="filter-heading status-filter-label"
        aria-controls="achievement-list"
      >
        {statusOptions.map((option) => <option value={option.value}>{option.label}</option>)}
      </select>
      <span class="achievement-filter__count" id="status-count" aria-live="polite"></span>
    </div>

    <div class="achievement-filter__field">
      <label for="category-filter" class="achievement-filter__label" id="category-filter-label"
        >{t("achievements.filter.category")}</label
      >
      <select
        id="category-filter"
        class="achievement-filter__select"
        aria-labelledby="filter-heading category-filter-label"
        aria-controls="achievement-list"
      >
        {categoryOptions.map((option) => <option value={option.value}>{option.label}</option>)}
      </select>
      <span class="achievement-filter__count" id="category-count" aria-live="polite"></span>
    </div>
  </div>

  <div class="achievement-filter__actions">
    <ButtonLink
      type="button"
      className="achievement-filter__reset"
      ariaLabel={t("achievements.filter.reset_aria")}
    >
      {t("achievements.filter.reset")}
    </ButtonLink>

    <ButtonLink
      type="button"
      className="achievement-filter__help-button"
      ariaLabel={t("achievements.filter.keyboard_shortcuts")}
    >
      {t("achievements.filter.keyboard_shortcuts")}
    </ButtonLink>
  </div>

  <div
    class="achievement-filter__keyboard-shortcuts"
    id="keyboard-shortcuts-panel"
    aria-labelledby="help-button-label"
    hidden
  >
    <Headline
      level="h3"
      title={t("achievements.filter.available_shortcuts")}
      size="sm"
      variant="default"
      className="achievement-filter__shortcuts-title"
    />
    <dl class="achievement-filter__shortcuts-list">
      <div class="achievement-filter__shortcut-item">
        <dt class="achievement-filter__shortcut-key"><kbd>Alt</kbd> + <kbd>R</kbd></dt>
        <dd class="achievement-filter__shortcut-description">
          {t("achievements.filter.reset_filters")}
        </dd>
      </div>
      <div class="achievement-filter__shortcut-item">
        <dt class="achievement-filter__shortcut-key"><kbd>Alt</kbd> + <kbd>S</kbd></dt>
        <dd class="achievement-filter__shortcut-description">
          {t("achievements.filter.focus_status")}
        </dd>
      </div>
      <div class="achievement-filter__shortcut-item">
        <dt class="achievement-filter__shortcut-key"><kbd>Alt</kbd> + <kbd>C</kbd></dt>
        <dd class="achievement-filter__shortcut-description">
          {t("achievements.filter.focus_category")}
        </dd>
      </div>
      <div class="achievement-filter__shortcut-item">
        <dt class="achievement-filter__shortcut-key"><kbd>Alt</kbd> + <kbd>K</kbd></dt>
        <dd class="achievement-filter__shortcut-description">
          {t("achievements.filter.toggle_keyboard_help")}
        </dd>
      </div>
    </dl>
  </div>

  <!-- ARIA live region for announcing filter changes -->
  <div id="filter-announcements" aria-live="polite" aria-atomic="true" class="sr-only"></div>
</div>

<style lang="scss">
  /* AchievementFilter - responsive achievement filter */
  /* Uses global.css variables, WCAG AAA compliant, performance optimized */

  /* Responsive mixins with hardcoded breakpoints */
  @mixin mobile {
    @media (max-width: 39.9375em) {
      @content;
    }
  }

  @mixin tablet {
    @media (min-width: 40em) {
      @content;
    }
  }

  @mixin desktop {
    @media (min-width: 48em) {
      @content;
    }
  }

  @mixin large-desktop {
    @media (min-width: 64em) {
      @content;
    }
  }

  /* Button base styles */
  @mixin button-base {
    font-size: clamp(var(--text-sm), 3vw, var(--text-base));
    font-weight: var(--font-medium);
    line-height: var(--leading-normal);
    letter-spacing: var(--letter-spacing-base);
    border-radius: var(--radius-md);
    min-height: var(--touch-target-enhanced);
    min-width: var(--touch-target-enhanced);
    cursor: pointer;

    /* Performance optimizations */
    contain: layout style;
    content-visibility: auto;
    transform: translateZ(0);
    will-change: transform, box-shadow;

    transition:
      border-color var(--animation-duration-normal),
      background-color var(--animation-duration-normal),
      box-shadow var(--animation-duration-normal),
      color var(--animation-duration-normal),
      transform var(--animation-duration-fast);

    &:hover {
      transform: translateY(var(--animation-y-offset-small)) translateZ(0);
      box-shadow: var(--shadow-md);
    }

    &:focus-visible {
      outline: var(--focus-outline);
      outline-offset: var(--focus-ring-offset);
    }

    &:active {
      transform: translateY(var(--space-none)) translateZ(0);
    }
  }

  /* Form field base styles */
  @mixin form-field-base {
    font-size: clamp(var(--text-sm), 3vw, var(--text-base));
    font-weight: var(--font-medium);
    line-height: var(--leading-normal);
    letter-spacing: var(--letter-spacing-base);
    border-radius: var(--radius-md);
    min-height: var(--touch-target-enhanced);
    min-width: var(--touch-target-enhanced);
    cursor: pointer;

    /* Performance optimizations */
    contain: layout style;
    content-visibility: auto;
    transform: translateZ(0);
    will-change: transform, box-shadow;

    transition:
      border-color var(--animation-duration-normal),
      background-color var(--animation-duration-normal),
      box-shadow var(--animation-duration-normal),
      color var(--animation-duration-normal),
      transform var(--animation-duration-fast);
  }

  .achievement-filter {
    background-color: var(--card-bg);
    border: var(--border-width-thin) solid var(--card-border);
    border-radius: var(--radius-lg);

    /* Responsive padding */
    padding: clamp(var(--space-sm), 4vw, var(--space-md));
    margin-bottom: clamp(var(--space-md), 5vw, var(--space-lg));

    box-shadow: var(--card-shadow);
    transition: box-shadow var(--animation-duration-normal);

    /* Performance optimizations */
    contain: layout style paint;
    content-visibility: auto;
    contain-intrinsic-size: var(--container-intrinsic-height-component);
    transform: translateZ(0);
    will-change: box-shadow;

    @include tablet {
      padding: clamp(var(--space-md), 5vw, var(--space-lg));
      margin-bottom: clamp(var(--space-lg), 6vw, var(--space-xl));
    }

    @include desktop {
      padding: var(--space-xl);
      margin-bottom: var(--space-2xl);
    }

    &:hover {
      box-shadow: var(--card-shadow-hover);
    }

    /* Title styling */
    &__title {
      margin-bottom: var(--space-md);
      text-align: center;

      @include tablet {
        margin-bottom: var(--space-lg);
        text-align: left;
      }
    }

    /* Container layout with CSS Grid */
    &__container {
      display: grid;
      grid-template-columns: 1fr;
      gap: clamp(var(--space-sm), 3vw, var(--space-md));
      margin-bottom: clamp(var(--space-sm), 3vw, var(--space-md));

      /* Performance optimizations */
      contain: layout style;
      content-visibility: auto;

      @include tablet {
        grid-template-columns: repeat(auto-fit, minmax(var(--grid-min-width-sm), 1fr));
        gap: clamp(var(--space-md), 4vw, var(--space-lg));
        margin-bottom: clamp(var(--space-md), 4vw, var(--space-lg));
      }

      @include desktop {
        gap: var(--space-xl);
        margin-bottom: var(--space-xl);
      }
    }

    /* Form field styling */
    &__field {
      display: flex;
      flex-direction: column;
      gap: var(--space-xs);
      position: relative;

      @include tablet {
        gap: var(--space-sm);
      }
    }

    /* Label styling */
    &__label {
      color: var(--text-primary);
      letter-spacing: var(--letter-spacing-base);
      text-wrap: balance;
      margin: var(--space-none);
      font-size: var(--text-base);
      font-weight: var(--font-medium);
      line-height: var(--leading-normal);
      margin-bottom: var(--space-xs);
      display: block;

      @include tablet {
        font-size: var(--text-lg);
        margin-bottom: var(--space-sm);
      }
    }

    /* Select dropdown styling */
    &__select {
      @include form-field-base;
      appearance: none;
      background-color: var(--form-bg);
      border: var(--border-width-thick) solid var(--form-border);
      color: var(--form-text);
      padding: var(--space-sm) var(--space-md);
      width: var(--width-full);
      position: relative;
      cursor: pointer;

      /* Custom dropdown arrow using CSS */
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6,9 12,15 18,9'%3E%3C/polyline%3E%3C/svg%3E");
      background-repeat: no-repeat;
      background-position: right var(--space-md) center;
      background-size: var(--space-md) var(--space-md);
      padding-right: calc(var(--space-md) * 2 + var(--space-md));

      @include tablet {
        font-size: var(--text-lg);
        padding: var(--space-md) var(--space-lg);
        background-position: right var(--space-lg) center;
        background-size: var(--space-lg) var(--space-lg);
        padding-right: calc(var(--space-lg) * 2 + var(--space-lg));
      }

      @include desktop {
        padding: var(--space-lg) var(--space-xl);
        background-position: right var(--space-xl) center;
        background-size: var(--space-lg) var(--space-lg);
        padding-right: calc(var(--space-xl) * 2 + var(--space-lg));
      }

      &:hover:not(:focus) {
        border-color: var(--border-secondary);
        background-color: var(--bg-tertiary);
        transform: translateY(calc(-1 * var(--space-xs)));
        box-shadow: var(--shadow-sm);
      }

      &:focus {
        outline: var(--focus-outline);
        outline-offset: var(--focus-ring-offset);
        border-color: var(--form-border-focus);
        background-color: var(--bg-tertiary);
        box-shadow: var(--shadow-md);
      }

      /* Active state when dropdown is open */
      &:active {
        transform: translateY(var(--space-none));
      }

      /* Disabled state */
      &:disabled {
        opacity: var(--opacity-disabled);
        cursor: not-allowed;
        background-color: var(--bg-secondary);
        color: var(--text-disabled);
      }

      /* Custom styling for options */
      option {
        background-color: var(--form-bg);
        color: var(--form-text);
        padding: var(--space-sm) var(--space-md);
        font-size: var(--text-base);
        font-weight: var(--font-medium);

        &:hover {
          background-color: var(--bg-secondary);
        }

        &:checked {
          background-color: var(--bg-primary);
          color: var(--text-primary);
        }
      }
    }

    /* Count display styling */
    &__count {
      color: var(--text-secondary);
      letter-spacing: var(--letter-spacing-base);
      text-wrap: balance;
      margin: var(--space-none);
      font-size: var(--text-sm);
      font-weight: var(--font-medium);
      margin-top: var(--space-xs);
      line-height: var(--leading-normal);

      @include tablet {
        font-size: var(--text-base);
        margin-top: var(--space-sm);
      }

      &:empty {
        display: none;
      }
    }

    /* Actions container styling */
    &__actions {
      display: flex;
      flex-wrap: wrap;
      gap: var(--space-sm);
      align-items: center;
      justify-content: flex-start;
      margin-top: var(--space-md);
      padding-top: var(--space-md);
      border-top: var(--border-width-thin) solid var(--border-primary);

      @include tablet {
        gap: var(--space-md);
        margin-top: var(--space-lg);
        padding-top: var(--space-lg);
      }

      @include mobile {
        flex-direction: column;
        align-items: stretch;
        gap: var(--space-md);
      }
    }

    /* Button styling */
    &__reset,
    &__help-button {
      @include button-base;
      background: var(--btn-primary-bg);
      border: none;
      color: var(--btn-primary-text);
      padding: var(--space-sm) var(--space-md);
      min-width: var(--touch-target-enhanced);

      @include mobile {
        width: var(--width-full);
        text-align: center;
        min-height: var(--touch-target-enhanced);
        padding: var(--space-md) var(--space-lg);
      }
    }

    &__reset {
      &:hover {
        background: var(--btn-primary-hover);
      }
    }

    &__help-button {
      background: var(--btn-secondary-bg);
      border: var(--border-width-thick) solid var(--btn-secondary-border);
      color: var(--btn-secondary-text);

      &:hover {
        background: var(--btn-secondary-hover);
        border-color: var(--border-focus);
      }
    }

    /* Keyboard shortcuts panel */
    &__keyboard-shortcuts {
      background-color: var(--bg-tertiary);
      border: var(--border-width-thin) solid var(--border-primary);
      border-radius: var(--radius-md);
      margin-top: var(--space-md);
      padding: var(--space-md);
      overflow: hidden;

      /* Performance optimizations */
      contain: layout style;
      content-visibility: auto;

      transition:
        max-height var(--animation-duration-normal),
        opacity var(--animation-duration-normal),
        padding var(--animation-duration-normal);

      @include tablet {
        margin-top: var(--space-lg);
        padding: var(--space-lg);
      }

      &[hidden] {
        display: none;
      }
    }

    &__shortcuts-title {
      margin-bottom: var(--space-sm);

      @include tablet {
        margin-bottom: var(--space-md);
      }
    }

    &__shortcuts-list {
      margin: var(--space-none);
      display: grid;
      gap: var(--space-xs);
      font-size: var(--text-sm);
      line-height: var(--leading-relaxed);

      @include tablet {
        font-size: var(--text-base);
        gap: var(--space-md);
        grid-template-columns: repeat(2, 1fr);
      }

      @include desktop {
        gap: var(--space-lg);
      }
    }

    &__shortcut-item {
      display: grid;
      grid-template-columns: auto 1fr;
      gap: var(--space-sm);
      align-items: baseline;

      @include mobile {
        grid-template-columns: 1fr;
        gap: var(--space-xs);
      }

      @include tablet {
        gap: var(--space-md);
      }
    }

    &__shortcut-key {
      font-weight: var(--font-medium);
      color: var(--text-primary);

      kbd {
        background-color: var(--bg-secondary);
        border: var(--border-width-thin) solid var(--border-primary);
        border-radius: var(--radius-sm);
        padding: var(--space-xs) var(--space-sm);
        font-size: var(--text-xs);
        font-weight: var(--font-medium);
        color: var(--text-primary);
        margin: 0 var(--space-xs);

        @include tablet {
          font-size: var(--text-sm);
          padding: var(--space-sm) var(--space-md);
        }
      }
    }

    &__shortcut-description {
      margin: var(--space-none);
      color: var(--text-secondary);
      margin-bottom: var(--space-xs);

      @include tablet {
        margin-bottom: var(--space-sm);
      }
    }
  }

  /* Screen reader only utility */
  .sr-only {
    position: absolute;
    width: var(--sr-only-width);
    height: var(--sr-only-height);
    margin: var(--sr-only-margin);
    overflow: hidden;
    clip: var(--sr-only-clip-path);
    white-space: nowrap;
    border: 0;
  }

  /* FILTER UTILITIES - Gap-free grid layout optimization */

  /* Complete removal from layout flow instead of display: none */
  /* This prevents grid gaps by removing filtered items from the layout entirely */
  .filtered-hidden {
    position: absolute !important;
    left: -10000px !important;
    width: 1px !important;
    height: 1px !important;
    overflow: hidden !important;
    clip: rect(1px, 1px, 1px, 1px) !important;
    clip-path: inset(50%) !important;
    white-space: nowrap !important;
    visibility: hidden;
    opacity: 0;
    pointer-events: none;
  }

  /* Enhanced CSS Grid Layout - Auto-collapse for filtered content */
  .achievements__grid {
    display: grid;
    grid-template-columns: repeat(
      auto-fit,
      minmax(min(var(--grid-min-width-sm), var(--percentage-full)), 1fr)
    );
    gap: var(--space-md);
    width: var(--width-full);
    grid-auto-flow: row dense;
    align-items: start;
    justify-items: stretch;
    transition:
      grid-template-columns var(--animation-duration-normal),
      gap var(--animation-duration-normal);
    contain: layout style;

    @include tablet {
      gap: var(--space-lg);
    }

    @include desktop {
      gap: var(--space-xl);
    }

    /* Target only visible achievement cards to prevent gaps */
    > *:not(.filtered-hidden) {
      position: relative;
      display: block;
    }

    /* Enhanced visual feedback when filtering is active */
    &:has(.filtered-hidden) {
      filter: brightness(var(--filter-brightness-medium));
    }

    /* Responsive grid behavior */
    @media (min-width: 48em) {
      grid-template-columns: repeat(
        auto-fit,
        minmax(min(var(--grid-min-width-md), var(--percentage-half)), 1fr)
      );
    }

    @media (min-width: 64em) {
      grid-template-columns: repeat(
        auto-fit,
        minmax(min(var(--grid-min-width-sm), var(--percentage-third)), 1fr)
      );
    }

    @media (min-width: 80em) {
      grid-template-columns: repeat(auto-fit, minmax(min(var(--grid-min-width-md), 28%), 1fr));
    }
  }

  /* Auto-hide empty category sections when all achievements are filtered */
  .achievements__category {
    transition:
      opacity var(--animation-duration-normal),
      margin var(--animation-duration-normal),
      padding var(--animation-duration-normal);
    contain: layout style;

    /* Hide empty sections using modern CSS */
    &:has(.achievements__grid:empty),
    &:has(.achievements__grid > *:not(.filtered-hidden):empty) {
      display: none;
      margin: var(--space-none);
      padding: var(--space-none);
    }

    &:has(.achievements__grid:not(:has(*:not(.filtered-hidden)))) {
      display: none;
    }

    /* Section animations for empty state */
    &.section-empty {
      opacity: 0;
      transform: translateY(calc(-1 * var(--space-lg)));
      margin: var(--space-none);
      padding: var(--space-none);
      max-height: 0;
      overflow: hidden;
    }

    /* Fallback for browsers without :has() support */
    @supports not selector(:has(*)) {
      &.all-filtered {
        display: none;
      }
      display: block;
    }
  }

  /* KEYFRAME ANIMATIONS - Reusable animations using CSS variables for timing */

  .achievement-card-entering {
    animation: cardEnter var(--animation-duration-slow) ease-out forwards;
  }

  .achievement-card-leaving {
    animation: cardLeave var(--animation-duration-normal) ease-in forwards;
  }

  @keyframes cardEnter {
    from {
      opacity: 0;
      transform: translateY(var(--space-lg)) scale(var(--scale-hover));
    }
    to {
      opacity: var(--animation-opacity-full);
      transform: translateY(var(--space-none)) scale(var(--animation-scale-end));
    }
  }

  @keyframes cardLeave {
    from {
      opacity: var(--animation-opacity-full);
      transform: translateY(var(--space-none)) scale(var(--animation-scale-end));
    }
    to {
      opacity: 0;
      transform: translateY(calc(-1 * var(--space-sm))) scale(var(--scale-hover));
    }
  }

  /* ENHANCED ACCESSIBILITY SUPPORT (WCAG AAA) */

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .achievement-filter {
      border-width: var(--border-width-thick);
      border-color: var(--text-primary);
      filter: contrast(2) saturate(var(--filter-saturate-high));

      &__select {
        border-width: var(--border-width-enhanced);
      }

      &__reset,
      &__help-button {
        border-width: var(--border-width-enhanced);
      }
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .achievement-filter {
      transition: none;
      will-change: auto;

      &__select,
      &__reset,
      &__help-button,
      &__keyboard-shortcuts {
        transition: none;
        will-change: auto;
      }

      &__reset:hover,
      &__help-button:hover {
        transform: none;
        filter: brightness(var(--filter-brightness-medium));
      }
    }

    @keyframes cardEnter {
      from,
      to {
        opacity: var(--animation-opacity-full);
        transform: none;
      }
    }

    @keyframes cardLeave {
      from,
      to {
        opacity: var(--animation-opacity-full);
        transform: none;
      }
    }
  }

  /* Enhanced text spacing support (WCAG 2.2) */
  @supports (letter-spacing: var(--letter-spacing-enhanced)) {
    .enhanced-text-spacing {
      .achievement-filter__label,
      .achievement-filter__select {
        letter-spacing: var(--letter-spacing-enhanced);
        word-spacing: var(--word-spacing-enhanced);
        line-height: var(--line-height-enhanced);
      }

      .achievement-filter__shortcut-description {
        letter-spacing: var(--letter-spacing-enhanced);
        word-spacing: var(--word-spacing-enhanced);
        line-height: var(--line-height-enhanced);
      }
    }
  }

  /* Forced colors mode support (Windows High Contrast) */
  @media (forced-colors: active) {
    .achievement-filter {
      border-color: ButtonBorder;
      background-color: ButtonFace;

      &__select {
        border-color: ButtonBorder;
        background-color: Field;
        color: FieldText;
      }

      &__reset {
        background-color: ButtonFace;
        border: var(--border-width-thin) solid ButtonBorder;
        color: ButtonText;
      }

      &__help-button {
        background-color: ButtonFace;
        border-color: ButtonBorder;
        color: ButtonText;
      }
    }
  }

  /* PRINT STYLES */
  @media print {
    .achievement-filter {
      background-color: var(--print-bg);
      border: var(--print-border);
      box-shadow: none;
      color: var(--print-text);
      page-break-inside: avoid;
      filter: contrast(var(--filter-contrast)) brightness(var(--filter-brightness-high));

      &__label {
        color: var(--print-text);
        text-rendering: optimizeLegibility;
        -webkit-print-color-adjust: exact;
      }

      &__select {
        background-color: var(--print-bg);
        border: var(--print-border);
        color: var(--print-text);
        padding: var(--space-sm) var(--space-md);
      }

      &__reset,
      &__help-button {
        background-color: var(--print-bg);
        border: var(--print-border);
        color: var(--print-text);
        box-shadow: none;
        padding: var(--space-sm) var(--space-md);
      }

      &__keyboard-shortcuts {
        background-color: var(--print-bg);
        border: var(--print-border);
        color: var(--print-text);
        margin-top: var(--space-md);
        padding: var(--space-md);
      }

      &__shortcut-key {
        color: var(--print-text);
        font-weight: var(--font-bold);
      }

      &__shortcut-description {
        color: var(--print-text);
        font-size: var(--text-sm);
      }
    }
  }

  .achievements__category.section-empty {
    display: none !important;
    margin: 0 !important;
    padding: 0 !important;
    max-height: 0 !important;
    min-height: 0 !important;
    overflow: hidden !important;
  }
</style>

<script>
  import { initializeAchievementFilter } from "../../utils/achievements/achievementFilter.ts";

  /* Initialize achievement filter */
  const initFilter = (): void => {
    initializeAchievementFilter();
  };

  /* DOM ready check */
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initFilter, { once: true });
  } else {
    initFilter();
  }
</script>
