---
/**
 * Achievement Card Component
 *
 * Displays a single achievement with its status, progress, and metadata.
 * Optimized for performance and accessibility, following WCAG AAA standards.
 *
 * @component
 * @example
 * ```astro
 * <AchievementCard achievement={achievementData} lang="en" />
 * ```
 */

import { Image } from "astro:assets";
import { Icon } from "astro-icon/components";
import { useTranslations } from "@utils/i18n";
import type { LocalizedAchievement } from "../../types/achievement";

interface Props {
  /** The achievement to be displayed */
  achievement: LocalizedAchievement;
  /** Language code for translations */
  lang: string;
}

const { achievement, lang } = Astro.props;
const t = useTranslations(lang);

// Destructure values for better performance
const { progressPercentage, status, name, description, category, rarityPercentage, iconPath } =
  achievement;

// Create class name based on status using CSS variables
const statusClass = `achievement-card--${status}`;

// Create status text for screen readers
const statusText =
  status === "unlocked"
    ? t("achievements.status.unlocked")
    : status === "in-progress"
      ? t("achievements.status.in_progress", { percent: progressPercentage })
      : t("achievements.status.locked");

// Calculate rarity percentage with proper formatting
const formattedRarity = rarityPercentage.toFixed(2);
const pointsValue = category?.points ?? 0;
---

<div
  class={`achievement-card ${statusClass}`}
  data-testid="achievement-card"
  data-category={category?.code}
  data-status={status}
  role="button"
  tabindex="0"
  aria-label={`${name}: ${statusText}`}
>
  <div class="achievement-card__header">
    {
      iconPath ? (
        <Image
          src={iconPath}
          alt=""
          width={64}
          height={64}
          loading="lazy"
          class="achievement-card__icon"
          format="webp"
          aria-hidden="true"
        />
      ) : (
        <div class="achievement-card__icon-placeholder">
          <Icon name="trophy" width="32" height="32" aria-hidden="true" />
        </div>
      )
    }
    {
      status === "unlocked" && (
        <div class="achievement-card__badge" aria-hidden="true">
          <Icon name="check-circle" width="16" height="16" />
        </div>
      )
    }
  </div>

  <div class="achievement-card__content">
    <h3 class="achievement-card__title">
      {name}
      <span class="achievement-card__status sr-only">{statusText}</span>
    </h3>

    <p class="achievement-card__description">
      {description}
    </p>

    <div class="achievement-card__meta">
      <span class="achievement-card__points">
        {t("achievements.points", { points: pointsValue })}
      </span>
      <span class="achievement-card__rarity" title={t("achievements.rarity.tooltip")}>
        {t("achievements.rarity", { percentage: formattedRarity })}
      </span>
    </div>

    <div
      class="achievement-card__progress-container"
      aria-label={t("achievements.progress", { progress: progressPercentage })}
    >
      <div
        class="achievement-card__progress-bar"
        role="progressbar"
        aria-valuenow={progressPercentage}
        aria-valuemin="0"
        aria-valuemax="100"
        style={`width: ${progressPercentage}%`}
      >
      </div>
    </div>
  </div>
</div>

<script is:inline>
  // Achievement card keyboard and click interaction
  // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
  (function () {
    const cards = document.querySelectorAll('.achievement-card[role="button"]');

    cards.forEach(function (card) {
      // Keyboard navigation
      card.addEventListener("keydown", function (e) {
        if (e.key === "Enter" || e.key === " ") {
          e.preventDefault();
          card.click();
        }
      });

      // Click handler for custom events
      if (!card.hasAttribute("data-click-handled")) {
        card.setAttribute("data-click-handled", "true");
        card.addEventListener("click", function () {
          const event = new CustomEvent("achievement:select", {
            bubbles: true,
            detail: {
              category: card.getAttribute("data-category"),
              status: card.getAttribute("data-status"),
            },
          });
          card.dispatchEvent(event);
        });
      }
    });
  })();
</script>

<style>
  /**
 * ACHIEVEMENT CARD COMPONENT STYLES
 * ===================================
 * 
 * Uses global CSS variables from global.css for consistency
 * Follows BEM methodology and WCAG AAA accessibility standards
 */

  /* Component-specific variables */
  .achievement-card {
    --icon-size: 64px;
    --badge-size: 24px;
  }

  /* Achievement Card Container */
  .achievement-card {
    position: relative;
    display: flex;
    flex-direction: column;
    padding: var(--space-lg);
    background: var(--card-bg);
    border: 1px solid var(--card-border);
    border-radius: var(--radius-lg);
    box-shadow: var(--card-shadow);
    transition: var(--transition-normal);
    cursor: pointer;
    min-height: var(--min-touch-size);
    overflow: hidden;
  }

  .achievement-card:hover {
    box-shadow: var(--card-shadow-hover);
    transform: translateY(calc(-1 * var(--space-xs)));
    border-color: var(--border-focus);
  }

  .achievement-card:focus-visible {
    outline: var(--focus-outline);
    outline-offset: var(--focus-ring-offset);
  }

  /* Achievement Card Header */
  .achievement-card__header {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: var(--space-md);
    min-height: var(--min-touch-size);
  }

  .achievement-card__icon {
    width: var(--icon-size);
    height: var(--icon-size);
    border-radius: var(--radius-md);
    object-fit: cover;
    transition: var(--transition-normal);
  }

  .achievement-card__icon-placeholder {
    display: flex;
    align-items: center;
    justify-content: center;
    width: var(--icon-size);
    height: var(--icon-size);
    background: var(--bg-tertiary);
    border: 1px solid var(--border-primary);
    border-radius: var(--radius-md);
    color: var(--text-tertiary);
    transition: var(--transition-normal);
  }

  .achievement-card__badge {
    position: absolute;
    top: calc(-1 * var(--space-sm));
    right: calc(-1 * var(--space-sm));
    display: flex;
    align-items: center;
    justify-content: center;
    width: var(--badge-size);
    height: var(--badge-size);
    background: var(--achievement-gold);
    border: 1px solid var(--bg-primary);
    border-radius: var(--radius-full);
    color: var(--color-black);
    box-shadow: var(--shadow-md);
  }

  /* Achievement Card Content */
  .achievement-card__content {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: var(--space-sm);
  }

  .achievement-card__title {
    margin: 0;
    font-size: var(--text-lg);
    font-weight: var(--font-semibold);
    color: var(--text-primary);
    line-height: var(--leading-tight);
  }

  .achievement-card__status {
    font-weight: var(--font-normal);
    color: var(--text-secondary);
  }

  .achievement-card__description {
    margin: 0;
    font-size: var(--text-sm);
    color: var(--text-secondary);
    line-height: var(--leading-normal);
  }

  .achievement-card__meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: var(--space-sm);
    margin-top: var(--space-sm);
  }

  .achievement-card__points {
    display: inline-flex;
    align-items: center;
    padding: var(--space-xs) var(--space-sm);
    background: var(--bg-tertiary);
    border: 1px solid var(--border-primary);
    border-radius: var(--radius-sm);
    font-size: var(--text-xs);
    font-weight: var(--font-medium);
    color: var(--text-primary);
  }

  .achievement-card__rarity {
    font-size: var(--text-xs);
    color: var(--text-tertiary);
    font-weight: var(--font-medium);
  }

  /* Progress Bar Container */
  .achievement-card__progress-container {
    position: relative;
    width: 100%;
    height: var(--space-sm);
    background: var(--bg-tertiary);
    border: 1px solid var(--border-primary);
    border-radius: var(--radius-sm);
    overflow: hidden;
    margin-top: var(--space-md);
  }

  .achievement-card__progress-bar {
    height: 100%;
    background: linear-gradient(
      90deg,
      var(--color-primary-600) 0%,
      var(--color-secondary-600) 100%
    );
    transition: width var(--transition-normal);
    border-radius: var(--radius-sm);
  }

  /* Status-specific styling */
  .achievement-card--unlocked {
    border-color: var(--color-success-500);
    background: linear-gradient(
      135deg,
      var(--card-bg) 0%,
      color-mix(in srgb, var(--color-success-500) 5%, transparent) 100%
    );
  }

  .achievement-card--unlocked .achievement-card__icon,
  .achievement-card--unlocked .achievement-card__icon-placeholder {
    filter: brightness(1.1) saturate(1.2);
  }

  .achievement-card--unlocked .achievement-card__progress-bar {
    background: var(--color-success-500);
  }

  .achievement-card--in-progress {
    border-color: var(--color-info-500);
    background: linear-gradient(
      135deg,
      var(--card-bg) 0%,
      color-mix(in srgb, var(--color-info-500) 5%, transparent) 100%
    );
  }

  .achievement-card--in-progress .achievement-card__progress-bar {
    background: linear-gradient(90deg, var(--color-info-500) 0%, var(--color-primary-600) 100%);
  }

  .achievement-card--locked {
    opacity: 0.7;
    filter: grayscale(0.5);
  }

  .achievement-card--locked .achievement-card__icon,
  .achievement-card--locked .achievement-card__icon-placeholder {
    filter: grayscale(1) opacity(0.6);
  }

  .achievement-card--locked .achievement-card__title {
    color: var(--text-tertiary);
  }

  .achievement-card--locked .achievement-card__description {
    color: var(--text-disabled);
  }

  .achievement-card--locked .achievement-card__progress-bar {
    background: var(--color-neutral-600);
  }

  /* Hover states for different statuses */
  .achievement-card--unlocked:hover {
    border-color: var(--color-success-400);
    box-shadow:
      var(--shadow-xl),
      0 0 40px color-mix(in srgb, var(--color-success-500) 20%, transparent);
  }

  .achievement-card--in-progress:hover {
    border-color: var(--color-info-400);
    box-shadow:
      var(--shadow-xl),
      0 0 40px color-mix(in srgb, var(--color-info-500) 20%, transparent);
  }

  .achievement-card--locked:hover {
    opacity: 0.8;
    transform: none;
  }

  /* Screen reader only text */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }

  /* Responsive adjustments */
  @media (min-width: var(--breakpoint-md)) {
    .achievement-card {
      padding: var(--space-xl);
    }

    .achievement-card__title {
      font-size: var(--text-xl);
    }

    .achievement-card__description {
      font-size: var(--text-base);
    }

    .achievement-card__meta {
      margin-top: var(--space-lg);
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .achievement-card,
    .achievement-card__icon,
    .achievement-card__icon-placeholder,
    .achievement-card__progress-bar {
      transition: none;
    }

    .achievement-card:hover {
      transform: none;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .achievement-card {
      border-width: 2px;
    }

    .achievement-card--unlocked {
      border-color: var(--color-success-600);
    }

    .achievement-card--in-progress {
      border-color: var(--color-info-600);
    }

    .achievement-card__badge {
      border-width: 2px;
    }
  }
</style>
