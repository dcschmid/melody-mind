---
/**
 * Achievement Card Component
 *
 * A comprehensive UI component for displaying individual achievements with their status,
 * progress, and metadata. Optimized for performance, accessibility (WCAG AAA compliance),
 * and internationalization while following MelodyMind's design standards.
 *
 * Features:
 * - WCAG AAA compliant accessibility with screen reader support
 * - Keyboard navigation (Enter/Space activation)
 * - Progress visualization with animated bars
 * - Multiple achievement states (locked, in-progress, unlocked)
 * - Internationalization support for multiple languages
 * - Custom event dispatching for achievement selection
 * - Responsive design with mobile-first approach
 * - Performance optimized with lazy image loading
 *
 * @component
 * @example
 * ```astro
 * <AchievementCard
 *   achievement={localizedAchievement}
 *   lang="en"
 * />
 * ```
 *
 * @example
 * ```astro
 * // In-progress achievement example
 * const achievement = {
 *   id: "music-master",
 *   code: "MUSIC_MASTER",
 *   name: "Music Master",
 *   description: "Play 100 games",
 *   status: "in-progress",
 *   progressPercentage: 65,
 *   category: { code: "gold", points: 500 }
 * };
 * <AchievementCard achievement={achievement} lang="de" />
 * ```
 */

import { Image } from "astro:assets";
import { Icon } from "astro-icon/components";
import { useTranslations } from "@utils/i18n";
import type { LocalizedAchievement } from "../../types/achievement";
import Headline from "../Headline.astro";
import Paragraph from "../Paragraph.astro";

interface Props {
  /** The achievement object containing all display data */
  achievement: LocalizedAchievement;
  /** Language code for internationalization (e.g., "en", "de") */
  lang: string;
}

const { achievement, lang } = Astro.props;
const t = useTranslations(lang);

// Destructure values for better performance and readability
const { progressPercentage, status, name, description, category, iconPath } = achievement;

// Create status-specific class name following BEM methodology
const statusClass = `achievement-card--${status}`;

// Generate accessible status text for screen readers
const statusText =
  status === "unlocked"
    ? t("achievements.status.unlocked")
    : status === "in-progress"
      ? t("achievements.status.in_progress", { percent: progressPercentage })
      : t("achievements.status.locked");

const pointsValue = category?.points ?? 0;
---

<div
  class={`achievement-card ${statusClass}`}
  data-testid={`achievement-card-${achievement.id}`}
  data-category={category?.code}
  data-status={status}
  role="button"
  tabindex="0"
  aria-label={`${name}: ${statusText}`}
  aria-describedby={`achievement-${achievement.id}-description achievement-${achievement.id}-points`}
>
  <div class="achievement-card__header">
    {
      iconPath ? (
        <Image
          src={iconPath}
          alt=""
          width={64}
          height={64}
          loading="lazy"
          class="achievement-card__icon"
          format="webp"
          aria-hidden="true"
        />
      ) : (
        <div class="achievement-card__icon-placeholder">
          <Icon name="trophy" width="32" height="32" aria-hidden="true" />
        </div>
      )
    }
    {
      status === "unlocked" && (
        <div class="achievement-card__badge" aria-hidden="true">
          <Icon name="check-circle" width="16" height="16" />
        </div>
      )
    }
  </div>

  <div class="achievement-card__content">
    <Headline
      level="h3"
      className="achievement-card__title"
      focusable={false}
      ariaLabel={`${name}: ${statusText}`}
    >
      {name}
      <span class="achievement-card__status sr-only">{statusText}</span>
    </Headline>

    <Paragraph
      {description}
      textSize="lg"
      className="achievement-card__description"
      enhancedSpacing={true}
      ariaLive="polite"
      id={`achievement-${achievement.id}-description`}
    />

    <div class="achievement-card__meta">
      <span class="achievement-card__points" id={`achievement-${achievement.id}-points`}>
        {t("achievements.points", { points: pointsValue })}
      </span>
    </div>

    <div
      class="achievement-card__progress-container"
      aria-label={t("achievements.progress", { progress: progressPercentage })}
      aria-describedby={`achievement-${achievement.id}-description`}
    >
      <div
        class="achievement-card__progress-bar"
        role="progressbar"
        aria-valuenow={progressPercentage}
        aria-valuemin="0"
        aria-valuemax="100"
        aria-label={t("achievements.progressBar", { name, progress: progressPercentage })}
        style={`width: ${progressPercentage}%`}
      >
      </div>
    </div>
  </div>
</div>

<script>
  // Modern achievement card interaction with improved performance and accessibility
  class AchievementCardController {
    constructor() {
      this.handleCardInteraction = this.handleCardInteraction.bind(this);
      this.init();
    }

    init(): void {
      // Use passive listeners for better performance
      document.addEventListener("click", this.handleCardInteraction, { passive: false });
      document.addEventListener("keydown", this.handleCardInteraction, { passive: false });
    }

    handleCardInteraction(event: Event): void {
      const target = event.target as HTMLElement;
      const card = target.closest('.achievement-card[role="button"]') as HTMLElement;

      if (!card) {
        return;
      }

      if (event.type === "keydown") {
        const keyEvent = event as KeyboardEvent;
        if (keyEvent.key === "Enter" || keyEvent.key === " ") {
          keyEvent.preventDefault();
          this.triggerCardSelection(card);
        }
        return;
      }

      if (event.type === "click") {
        this.triggerCardSelection(card);
      }
    }

    private triggerCardSelection(card: HTMLElement): void {
      // Enhanced custom event with more context
      const customEvent = new CustomEvent("achievement:select", {
        bubbles: true,
        detail: {
          achievementId: card.dataset.testid?.replace("achievement-card", ""),
          category: card.dataset.category,
          status: card.dataset.status,
          timestamp: Date.now(),
        },
      });
      card.dispatchEvent(customEvent);
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => new AchievementCardController());
  } else {
    new AchievementCardController();
  }
</script>

<style>
  /**
   * MODERN ACHIEVEMENT CARD COMPONENT STYLES
   * =========================================
   * 
   * Modernized with CSS custom properties, container queries, and improved performance.
   * Follows BEM methodology and WCAG AAA accessibility standards.
   * 
   * Features:
   * - Container queries for responsive design
   * - Modern CSS color functions (light-dark, oklch)
   * - Logical properties for better internationalization
   * - Optimized animations and transitions
   * - No rarity display (removed as requested)
   */

  /* Achievement Card Container */
  .achievement-card {
    position: relative;
    display: flex;
    flex-direction: column;
    padding: var(--space-lg);
    background: var(--card-bg);
    border: 1px solid var(--card-border);
    border-radius: var(--radius-lg);
    box-shadow: var(--card-shadow);
    transition: var(--transition-normal);
    cursor: pointer;
    min-block-size: var(--min-touch-size);
    overflow: hidden;
    container-type: inline-size;
  }

  .achievement-card:hover {
    box-shadow: var(--card-shadow-hover);
    transform: translateY(calc(-1 * var(--space-xs)));
    border-color: var(--border-focus);
  }

  .achievement-card:focus-visible {
    outline: var(--focus-outline);
    outline-offset: var(--focus-ring-offset);
  }

  /* Achievement Card Header */
  .achievement-card__header {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: var(--space-md);
    min-height: var(--min-touch-size);
  }

  .achievement-card__icon {
    width: var(--space-3xl);
    height: var(--space-3xl);
    border-radius: var(--radius-md);
    object-fit: cover;
    transition: var(--transition-normal);
  }

  .achievement-card__icon-placeholder {
    display: flex;
    align-items: center;
    justify-content: center;
    width: var(--space-3xl);
    height: var(--space-3xl);
    background: var(--bg-tertiary);
    border: 1px solid var(--border-primary);
    border-radius: var(--radius-md);
    color: var(--text-tertiary);
    transition: var(--transition-normal);
  }

  .achievement-card__badge {
    position: absolute;
    top: calc(-1 * var(--space-sm));
    right: calc(-1 * var(--space-sm));
    display: flex;
    align-items: center;
    justify-content: center;
    width: var(--text-lg);
    height: var(--text-lg);
    background: var(--achievement-gold);
    border: 1px solid var(--bg-primary);
    border-radius: var(--radius-full);
    color: var(--color-black);
    box-shadow: var(--shadow-md);
  }

  /* Achievement Card Content */
  .achievement-card__content {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: var(--space-sm);
  }

  /* Override Headline component styles for Achievement Card context */
  .achievement-card__title.headline {
    margin: 0 !important;
    font-size: var(--text-lg) !important;
    font-weight: var(--font-semibold) !important;
    color: var(--text-primary) !important;
    line-height: var(--leading-tight) !important;
    margin-bottom: 0 !important;
  }

  .achievement-card__status {
    font-weight: var(--font-normal);
    color: var(--text-secondary);
  }

  .achievement-card__description {
    margin-bottom: var(--space-sm);
  }

  .achievement-card__meta {
    display: flex;
    justify-content: flex-start;
    align-items: center;
    margin-top: var(--space-sm);
  }

  .achievement-card__points {
    display: inline-flex;
    align-items: center;
    padding: var(--space-xs) var(--space-sm);
    background: var(--bg-tertiary);
    border: 1px solid var(--border-primary);
    border-radius: var(--radius-sm);
    font-size: var(--text-xs);
    font-weight: var(--font-medium);
    color: var(--text-primary);
  }

  /* Progress Bar Container */
  .achievement-card__progress-container {
    position: relative;
    width: 100%;
    height: var(--space-sm);
    background: var(--bg-tertiary);
    border: 1px solid var(--border-primary);
    border-radius: var(--radius-sm);
    overflow: hidden;
    margin-top: var(--space-md);
  }

  .achievement-card__progress-bar {
    height: 100%;
    background: linear-gradient(
      90deg,
      var(--color-primary-600) 0%,
      var(--color-secondary-600) 100%
    );
    transition: width var(--transition-normal);
    border-radius: var(--radius-sm);
  }

  /* Status-specific styling with modern CSS */
  .achievement-card--unlocked {
    border-color: var(--color-success-500);
    background: light-dark(
      color-mix(in srgb, var(--color-success-500) 3%, var(--card-bg)),
      color-mix(in srgb, var(--color-success-500) 8%, var(--card-bg))
    );
  }

  .achievement-card--unlocked .achievement-card__icon,
  .achievement-card--unlocked .achievement-card__icon-placeholder {
    filter: brightness(1.1) saturate(1.2);
  }

  .achievement-card--unlocked .achievement-card__progress-bar {
    background: var(--color-success-500);
  }

  .achievement-card--in-progress {
    border-color: var(--color-info-500);
    background: light-dark(
      color-mix(in srgb, var(--color-info-500) 3%, var(--card-bg)),
      color-mix(in srgb, var(--color-info-500) 8%, var(--card-bg))
    );
  }

  .achievement-card--in-progress .achievement-card__progress-bar {
    background: linear-gradient(90deg, var(--color-info-500) 0%, var(--color-primary-600) 100%);
  }

  .achievement-card--locked {
    opacity: 0.7;
    filter: grayscale(0.5);
  }

  .achievement-card--locked .achievement-card__icon,
  .achievement-card--locked .achievement-card__icon-placeholder {
    filter: grayscale(1) opacity(0.6);
  }

  .achievement-card--locked .achievement-card__title {
    color: var(--text-tertiary);
  }

  .achievement-card--locked .achievement-card__description.paragraph {
    color: var(--text-disabled) !important;
  }

  .achievement-card--locked .achievement-card__progress-bar {
    background: var(--color-neutral-600);
  }

  /* Hover states with modern CSS and improved performance */
  .achievement-card--unlocked:hover {
    border-color: var(--color-success-400);
    box-shadow:
      var(--shadow-xl),
      0 0 var(--space-2xl) oklch(from var(--color-success-500) l c h / 0.2);
  }

  .achievement-card--in-progress:hover {
    border-color: var(--color-info-400);
    box-shadow:
      var(--shadow-xl),
      0 0 var(--space-2xl) oklch(from var(--color-info-500) l c h / 0.2);
  }

  .achievement-card--locked:hover {
    opacity: 0.8;
    transform: none;
  }

  /* Modern responsive design with container queries */
  @container (min-width: 300px) {
    .achievement-card {
      padding: var(--space-xl);
    }

    .achievement-card__title {
      font-size: var(--text-xl);
    }

    .achievement-card__meta {
      margin-top: var(--space-lg);
    }
  }

  /* Fallback for browsers without container query support */
  @media (min-width: 48em) {
    .achievement-card {
      padding: var(--space-xl);
    }

    .achievement-card__title {
      font-size: var(--text-xl);
    }

    .achievement-card__meta {
      margin-top: var(--space-lg);
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .achievement-card,
    .achievement-card__icon,
    .achievement-card__icon-placeholder,
    .achievement-card__progress-bar {
      transition: none;
    }

    .achievement-card:hover {
      transform: none;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .achievement-card {
      border-width: 2px;
    }

    .achievement-card--unlocked {
      border-color: var(--color-success-600);
    }

    .achievement-card--in-progress {
      border-color: var(--color-info-600);
    }

    .achievement-card__badge {
      border-width: 2px;
    }
  }
</style>
