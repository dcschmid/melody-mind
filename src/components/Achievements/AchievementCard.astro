---
/**
 * AchievementCard - Responsive achievement display card
 *
 * Displays individual achievements with progress and status
 * WCAG AAA compliant with performance optimizations
 *
 * @param {LocalizedAchievement} achievement - Achievement data object
 * @param {string} lang - Language code for translations (e.g., 'en', 'de')
 */

import { Icon } from "astro-icon/components";
import { useTranslations } from "@utils/i18n";
import type { LocalizedAchievement } from "../../types/achievement";
import Headline from "../Headline.astro";
import Paragraph from "../Paragraph.astro";

interface Props {
  /** Achievement object with status, progress, and metadata */
  achievement: LocalizedAchievement;
  /** Language code for translations (e.g., 'en', 'de') */
  lang: string;
}

const { achievement, lang } = Astro.props;
const t = useTranslations(lang);

/* Process achievement data */
const { progressPercentage, status, name, description, category } = achievement;
const statusClass = `achievement-card--${status}`;
const statusText =
  status === "unlocked"
    ? t("achievements.status.unlocked")
    : status === "in-progress"
      ? t("achievements.status.in_progress", { percent: progressPercentage })
      : t("achievements.status.locked");
const pointsValue = category?.points ?? 0;
const ariaExpanded = status === "unlocked" ? "true" : "false";
const ariaCurrent = status === "unlocked" ? "true" : undefined;
const progressBarStyles = `width: ${progressPercentage}%; transition: width var(--animation-duration-normal);`;
---

<section class="achievement-card-section" aria-labelledby={`achievement-${achievement.id}-title`}>
  <div
    class={`achievement-card ${statusClass}`}
    data-testid={`achievement-card-${achievement.id}`}
    data-category={category?.code}
    data-status={status}
    role="button"
    tabindex="0"
    aria-label={`${name}: ${statusText}`}
    aria-describedby={`achievement-${achievement.id}-description achievement-${achievement.id}-points achievement-tooltip-${achievement.id}`}
    aria-expanded={ariaExpanded}
    aria-current={ariaCurrent}
  >
    <div class="achievement-card__header">
      {
        status === "unlocked" && (
          <div class="achievement-card__badge" aria-hidden="true">
            <Icon name="check-circle" width="16" height="16" />
          </div>
        )
      }
    </div>

    <div class="achievement-card__content">
      <Headline
        level="h3"
        size="lg"
        variant="default"
        id={`achievement-${achievement.id}-title`}
        ariaLabel={`${name}: ${statusText}`}
        textAlign="center"
      >
        {name}
        <span class="achievement-card__status sr-only">{statusText}</span>
      </Headline>

      <Paragraph
        {description}
        textSize="lg"
        align="center"
        enhancedSpacing={false}
        ariaLive="polite"
        id={`achievement-${achievement.id}-description`}
      />

      <div class="achievement-card__meta">
        <span class="achievement-card__points" id={`achievement-${achievement.id}-points`}>
          {t("achievements.points", { points: pointsValue })}
        </span>
      </div>

      <div
        class="achievement-card__progress-container"
        aria-label={t("achievements.progress", { progress: progressPercentage })}
        aria-describedby={`achievement-${achievement.id}-description`}
        aria-live="polite"
        aria-atomic="true"
      >
        <div
          class="achievement-card__progress-bar"
          role="progressbar"
          aria-valuenow={progressPercentage}
          aria-valuemin="0"
          aria-valuemax="100"
          aria-label={t("achievements.progressBar", { name, progress: progressPercentage })}
          style={progressBarStyles}
        >
        </div>
      </div>

      <!-- Tooltip for additional context -->
      <span role="tooltip" id={`achievement-tooltip-${achievement.id}`} class="sr-only">
        {
          t("achievements.detailedDescription", {
            name,
            status: statusText,
            progress: progressPercentage,
            points: pointsValue,
          })
        }
      </span>
    </div>
  </div>
</section>

<script>
  import { initializeAchievementCards } from "../../utils/achievements/achievementCard.ts";

  /* Initialize achievement cards */
  const initializeController = (): void => {
    initializeAchievementCards();
  };

  /* DOM ready check */
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeController, { once: true });
  } else {
    initializeController();
  }
</script>

<style lang="scss">
  /* AchievementCard - responsive achievement display */
  /* Uses global.css variables, WCAG AAA compliant, performance optimized */

  /* Section container with CSS containment */
  .achievement-card-section {
    container-type: inline-size;
    contain: layout style paint;
    content-visibility: auto;
    contain-intrinsic-size: var(--container-intrinsic-height-card);
  }

  /* Achievement Card Container */
  .achievement-card {
    position: relative;
    display: flex;
    flex-direction: column;
    height: var(--width-full);

    /* Responsive padding */
    padding: clamp(var(--space-sm), 3vw, var(--space-md));

    /* Glassmorphism background */
    background: linear-gradient(
      var(--gradient-angle),
      color-mix(in srgb, var(--bg-secondary) 95%, var(--color-primary-500) var(--color-mix-light)),
      color-mix(in srgb, var(--bg-tertiary) 90%, var(--color-secondary-500) var(--color-mix-dark))
    );

    border: var(--border-width-thin) solid
      color-mix(in srgb, var(--border-primary) 80%, var(--color-primary-400) 20%);
    border-radius: var(--radius-lg);

    /* Shadow system */
    box-shadow:
      var(--shadow-md),
      0 0 0 1px color-mix(in srgb, var(--color-primary-500) 20%, transparent 80%);

    /* Transitions */
    transition: all var(--animation-duration-normal) cubic-bezier(0.4, 0, 0.2, 1);

    /* Interaction */
    cursor: pointer;
    min-block-size: var(--touch-target-enhanced);
    overflow: hidden;
    backdrop-filter: blur(var(--backdrop-blur));
    -webkit-backdrop-filter: blur(var(--backdrop-blur));

    /* Performance optimizations */
    contain: layout style paint;
    content-visibility: auto;
    contain-intrinsic-size: var(--container-intrinsic-height-card);
    transform: translateZ(0);
    will-change: transform, box-shadow;

    /* Responsive breakpoints */
    @media (min-width: 40em) {
      padding: clamp(var(--space-md), 4vw, var(--space-lg));
    }

    @media (min-width: 64em) {
      padding: clamp(var(--space-lg), 5vw, var(--space-xl));
    }

    /* Hover states */
    &:hover {
      transform: translateY(var(--animation-y-offset-small))
        scale(var(--animation-scale-hover-subtle)) translateZ(0);
      box-shadow:
        var(--shadow-xl),
        0 0 0 1px color-mix(in srgb, var(--color-primary-400) 40%, transparent 60%),
        0 8px 32px color-mix(in srgb, var(--color-primary-500) 15%, transparent 85%);
      border-color: var(--interactive-primary);
    }

    /* Focus states */
    &:focus-visible {
      outline: var(--focus-enhanced-outline-dark);
      outline-offset: var(--focus-ring-offset);
      box-shadow: var(--focus-enhanced-shadow);
      z-index: var(--z-notification);
    }

    /* Header section */
    &__header {
      position: relative;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: clamp(var(--space-sm), 3vw, var(--space-md));
      min-height: var(--touch-target-enhanced);
      padding: clamp(var(--space-xs), 2vw, var(--space-sm));
      contain: layout style;

      /* Responsive spacing */
      @media (min-width: 40em) {
        margin-bottom: clamp(var(--space-md), 4vw, var(--space-lg));
        padding: clamp(var(--space-sm), 3vw, var(--space-md));
      }

      @media (min-width: 64em) {
        margin-bottom: var(--space-xl);
        padding: var(--space-lg);
      }
    }

    /* Achievement badge */
    &__badge {
      position: absolute;
      top: calc(-1 * var(--space-xs));
      right: calc(-1 * var(--space-xs));
      display: flex;
      align-items: center;
      justify-content: center;

      /* Responsive sizing */
      width: clamp(var(--space-md), 4vw, var(--space-lg));
      height: clamp(var(--space-md), 4vw, var(--space-lg));

      background: linear-gradient(
        var(--gradient-angle),
        var(--color-success-500),
        var(--color-success-600)
      );
      border: var(--border-width-thick) solid var(--bg-primary);
      border-radius: var(--radius-full);
      color: var(--text-inverse);

      /* Enhanced shadow */
      box-shadow:
        var(--shadow-sm),
        0 0 var(--glow-distance-large)
          color-mix(in srgb, var(--color-success-400) 30%, transparent 70%);

      /* Animation */
      animation: pulse var(--animation-pulse-duration) ease-in-out infinite;

      /* Performance */
      contain: layout style;
      will-change: transform, opacity;

      /* Responsive sizing */
      @media (min-width: 40em) {
        width: var(--space-lg);
        height: var(--space-lg);
      }

      @keyframes pulse {
        0%,
        100% {
          transform: scale(var(--animation-scale-default)) translateZ(0);
          opacity: var(--animation-opacity-full);
        }
        50% {
          transform: scale(var(--animation-scale-hover-subtle)) translateZ(0);
          opacity: var(--animation-opacity-start);
        }
      }
    }

    /* Content area */
    &__content {
      flex: 1;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      gap: clamp(var(--space-xs), 2vw, var(--space-sm));
      contain: layout style;

      /* Responsive spacing */
      @media (min-width: 40em) {
        gap: clamp(var(--space-sm), 3vw, var(--space-md));
      }

      @media (min-width: 64em) {
        gap: var(--space-lg);
      }
    }

    /* Status text */
    &__status {
      font-weight: var(--font-medium);
      color: var(--text-secondary);
      letter-spacing: var(--letter-spacing-enhanced);
    }

    /* Meta information container */
    &__meta {
      display: flex;
      justify-content: center;
      align-items: center;
      margin-top: var(--space-sm);

      /* Responsive spacing */
      @media (min-width: 40em) {
        margin-top: var(--space-md);
      }

      @media (min-width: 64em) {
        margin-top: var(--space-lg);
      }
    }

    /* Points display */
    &__points {
      display: inline-flex;
      align-items: center;
      padding: var(--space-xs) var(--space-md);
      background: linear-gradient(
        var(--gradient-angle),
        color-mix(in srgb, var(--form-bg) 90%, var(--color-primary-500) var(--color-mix-dark)),
        color-mix(in srgb, var(--form-bg) 85%, var(--color-secondary-500) 15%)
      );
      border: var(--border-width-thin) solid
        color-mix(in srgb, var(--form-border) 70%, var(--color-primary-400) 30%);
      border-radius: var(--radius-md);
      font-size: var(--text-xs);
      font-weight: var(--font-semibold);
      color: var(--form-text);
      box-shadow: var(--shadow-sm);
      transition: all var(--animation-duration-fast);

      &:hover {
        transform: scale(var(--animation-scale-hover-subtle));
        box-shadow: var(--shadow-md);
      }

      /* Responsive typography */
      @media (min-width: 40em) {
        font-size: var(--text-sm);
        padding: var(--space-sm) var(--space-lg);
      }

      @media (min-width: 64em) {
        font-size: var(--text-base);
        padding: var(--space-md) var(--space-xl);
      }
    }

    /* Progress container */
    &__progress-container {
      position: relative;
      width: var(--width-full);
      height: var(--space-xs);
      background: color-mix(in srgb, var(--bg-tertiary) 80%, var(--color-primary-500) 20%);
      border: var(--border-width-thin) solid
        color-mix(in srgb, var(--border-primary) 60%, var(--color-primary-400) 40%);
      border-radius: var(--radius-md);
      overflow: hidden;
      margin-top: var(--space-md);
      backdrop-filter: blur(3px);
      -webkit-backdrop-filter: blur(3px);

      /* Responsive sizing */
      @media (min-width: 40em) {
        height: var(--space-sm);
        margin-top: var(--space-lg);
      }

      @media (min-width: 64em) {
        height: var(--space-md);
        margin-top: var(--space-xl);
      }
    }

    /* Progress bar with animated gradient */
    &__progress-bar {
      height: var(--width-full);
      background: linear-gradient(
        var(--rotation-90),
        var(--interactive-primary) var(--gradient-start),
        var(--interactive-secondary) var(--percentage-half),
        var(--color-primary-400) var(--gradient-end)
      );
      background-size: var(--shimmer-bg-size);
      border-radius: var(--radius-lg);
      transition:
        width var(--animation-duration-normal),
        background-position var(--animation-duration-slow);
      animation: shimmer var(--animation-shimmer-duration) ease-in-out infinite;

      @keyframes shimmer {
        0% {
          background-position: var(--shimmer-position-start);
        }
        100% {
          background-position: var(--shimmer-position-end);
        }
      }
    }

    /* STATUS-SPECIFIC STYLING */

    /* Unlocked achievements */
    &--unlocked {
      border-color: var(--color-success-500);
      background: linear-gradient(
        var(--gradient-angle),
        color-mix(in srgb, var(--bg-secondary) 85%, var(--color-success-500) 15%),
        color-mix(in srgb, var(--bg-tertiary) 80%, var(--color-success-600) 20%)
      );
      box-shadow:
        var(--shadow-lg),
        0 0 0 1px color-mix(in srgb, var(--color-success-500) 30%, transparent 70%),
        0 0 30px color-mix(in srgb, var(--color-success-400) 10%, transparent 90%);

      .achievement-card__progress-bar {
        background: linear-gradient(
          var(--rotation-90),
          var(--color-success-500) var(--gradient-start),
          var(--color-success-400) var(--percentage-half),
          var(--color-success-600) var(--gradient-end)
        );
        background-size: var(--shimmer-bg-size);
      }

      /* Enhanced hover state */
      &:hover {
        border-color: var(--color-success-400);
        box-shadow:
          var(--shadow-xl),
          0 0 0 1px color-mix(in srgb, var(--color-success-400) 50%, transparent 50%),
          0 0 40px color-mix(in srgb, var(--color-success-400) 20%, transparent 80%);
        transform: translateY(calc(-1 * var(--space-sm))) scale(var(--animation-scale-hover-subtle));
      }
    }

    /* In-progress achievements */
    &--in-progress {
      border-color: var(--color-info-500);
      background: linear-gradient(
        var(--gradient-angle),
        color-mix(in srgb, var(--bg-secondary) 85%, var(--color-info-500) 15%),
        color-mix(in srgb, var(--bg-tertiary) 80%, var(--color-info-600) 20%)
      );
      box-shadow:
        var(--shadow-lg),
        0 0 0 1px color-mix(in srgb, var(--color-info-500) 30%, transparent 70%),
        0 0 30px color-mix(in srgb, var(--color-info-400) 10%, transparent 90%);

      .achievement-card__progress-bar {
        background: linear-gradient(
          var(--rotation-90),
          var(--color-info-500) var(--gradient-start),
          var(--interactive-primary) var(--percentage-half),
          var(--color-info-600) var(--gradient-end)
        );
        background-size: var(--shimmer-bg-size);
      }

      /* Enhanced hover state */
      &:hover {
        border-color: var(--color-info-400);
        box-shadow:
          var(--shadow-xl),
          0 0 0 1px color-mix(in srgb, var(--color-info-400) 50%, transparent 50%),
          0 0 40px color-mix(in srgb, var(--color-info-400) 20%, transparent 80%);
        transform: translateY(calc(-1 * var(--space-sm))) scale(var(--animation-scale-hover-subtle));
      }
    }

    /* Locked achievements */
    &--locked {
      opacity: var(--opacity-disabled);
      filter: grayscale(var(--filter-grayscale-half));
      background: linear-gradient(
        var(--gradient-angle),
        color-mix(
          in srgb,
          var(--bg-secondary) 95%,
          var(--color-neutral-600) var(--color-mix-light)
        ),
        color-mix(in srgb, var(--bg-tertiary) 90%, var(--color-neutral-700) var(--color-mix-dark))
      );

      .achievement-card__title {
        color: var(--text-tertiary);
      }

      .achievement-card__description.paragraph {
        color: var(--text-disabled) !important;
      }

      .achievement-card__progress-bar {
        background: var(--color-neutral-600);
      }

      /* Subtle hover state */
      &:hover {
        opacity: var(--opacity-medium);
        transform: scale(var(--animation-scale-hover-subtle));
        filter: grayscale(var(--filter-grayscale-half)) brightness(var(--filter-brightness-medium));
      }
    }
  }

  /* Screen reader only utility */
  .sr-only {
    position: absolute;
    width: var(--sr-only-width);
    height: var(--sr-only-height);
    margin: var(--sr-only-margin);
    overflow: hidden;
    clip: var(--sr-only-clip-path);
    white-space: nowrap;
    border: 0;
  }

  /* ACCESSIBILITY OPTIMIZATIONS */

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .achievement-card {
      &,
      &__progress-bar,
      &__badge {
        transition: var(--transition-instant);
        animation: none;
        will-change: auto;
      }

      &:hover {
        transform: translateZ(0);
      }
    }
  }

  /* High contrast mode */
  @media (prefers-contrast: high) {
    .achievement-card {
      border-width: var(--border-width-enhanced);

      &--unlocked {
        border-color: var(--color-success-600);
      }

      &--in-progress {
        border-color: var(--color-info-600);
      }

      &__badge {
        border-width: var(--border-width-enhanced);
      }
    }
  }

  /* Container queries for responsive design */
  @container (min-width: var(--container-query-sm)) {
    .achievement-card {
      &__points {
        font-size: var(--text-sm);
        padding: var(--space-sm) var(--space-lg);
      }
    }
  }

  @container (min-width: var(--container-query-md)) {
    .achievement-card {
      &__points {
        font-size: var(--text-base);
        padding: var(--space-md) var(--space-xl);
      }
    }
  }
</style>
