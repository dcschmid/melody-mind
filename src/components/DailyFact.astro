---
/**
 * Daily Music Fact Component
 * Displays a daily music history fact with category styling
 */

import { getDailyMusicFact, type MusicFact } from "../services/dailyFactsService.ts";
import { useTranslations } from "../utils/i18n.ts";

interface Props {
  lang: string;
  date?: Date;
  showDate?: boolean;
  compact?: boolean;
}

const { lang, date = new Date(), showDate = true, compact = false } = Astro.props;
const t = useTranslations(lang);

// Get daily fact
const fact = await getDailyMusicFact(lang, date);

// Category icons and colors (includes both English and German category names)
const categoryData = {
  // English categories (standard)
  birth: { icon: "🎂", color: "var(--color-green-500)", bgColor: "var(--bg-success-aaa)" },
  death: { icon: "🕊️", color: "var(--color-red-500)", bgColor: "var(--bg-error-aaa)" },
  release: { icon: "💿", color: "var(--color-blue-500)", bgColor: "var(--bg-info-aaa)" },
  event: { icon: "🎪", color: "var(--color-purple-500)", bgColor: "var(--bg-warning-aaa)" },
  milestone: { icon: "🏆", color: "var(--color-yellow-500)", bgColor: "var(--bg-warning-aaa)" },
  formation: { icon: "🎸", color: "var(--color-indigo-500)", bgColor: "var(--primary-100)" },
  breakthrough: { icon: "⭐", color: "var(--color-pink-500)", bgColor: "var(--secondary-100)" },
  
  // German categories (legacy support)
  gestorben: { icon: "🕊️", color: "var(--color-red-500)", bgColor: "var(--bg-error-aaa)" },
  veroeffentlichung: { icon: "💿", color: "var(--color-blue-500)", bgColor: "var(--bg-info-aaa)" },
  ereignis: { icon: "🎪", color: "var(--color-purple-500)", bgColor: "var(--bg-warning-aaa)" },
  meilenstein: { icon: "🏆", color: "var(--color-yellow-500)", bgColor: "var(--bg-warning-aaa)" },
  gruendung: { icon: "🎸", color: "var(--color-indigo-500)", bgColor: "var(--primary-100)" }
};

// Get category data with fallback for unknown categories
const getCategoryData = (category: string) => {
  return categoryData[category as keyof typeof categoryData] || {
    icon: "🎵",
    color: "var(--text-secondary)",
    bgColor: "var(--bg-tertiary)"
  };
};

// Map German categories to English for translations
const getCategoryTranslationKey = (category: string) => {
  const categoryMapping: Record<string, string> = {
    gestorben: 'death',
    veroeffentlichung: 'release',
    ereignis: 'event',
    meilenstein: 'milestone',
    gruendung: 'formation'
  };
  
  return categoryMapping[category] || category;
};

const formatDate = (dateStr: string, year?: number) => {
  const [month, day] = dateStr.split('-');
  const dateObj = new Date(year || new Date().getFullYear(), parseInt(month) - 1, parseInt(day));
  return new Intl.DateTimeFormat(lang, { 
    day: 'numeric', 
    month: 'long',
    ...(year && { year: 'numeric' })
  }).format(dateObj);
};
---

{fact && (
  <article class={`daily-fact ${compact ? 'daily-fact--compact' : ''}`} itemscope itemtype="https://schema.org/Article">
    <div class="daily-fact__content">
      <header class="daily-fact__header">
        <div class="daily-fact__category" style={`--category-color: ${getCategoryData(fact.category).color}; --category-bg: ${getCategoryData(fact.category).bgColor}`}>
          <span class="daily-fact__category-icon" aria-hidden="true">
            {getCategoryData(fact.category).icon}
          </span>
          <span class="daily-fact__category-text">
            {t(`dailyFacts.categories.${getCategoryTranslationKey(fact.category)}`)}
          </span>
        </div>

        {showDate && (
          <time class="daily-fact__date" datetime={fact.year ? `${fact.year}-${fact.date}` : fact.date} itemprop="datePublished">
            {formatDate(fact.date, fact.year)}
          </time>
        )}
      </header>

      <div class="daily-fact__main">
        <h3 class="daily-fact__title" itemprop="headline">
          {fact.title}
        </h3>
        
        <p class="daily-fact__description" itemprop="description">
          {fact.description}
        </p>

        {(fact.artist || fact.album || fact.genre) && (
          <div class="daily-fact__meta">
            {fact.artist && (
              <span class="daily-fact__meta-item daily-fact__meta-item--artist" itemprop="author">
                <span class="daily-fact__meta-label">{t('dailyFacts.artist')}:</span>
                <span class="daily-fact__meta-value">{fact.artist}</span>
              </span>
            )}
            
            {fact.album && (
              <span class="daily-fact__meta-item daily-fact__meta-item--album">
                <span class="daily-fact__meta-label">{t('dailyFacts.album')}:</span>
                <span class="daily-fact__meta-value">{fact.album}</span>
              </span>
            )}
            
            {fact.genre && (
              <span class="daily-fact__meta-item daily-fact__meta-item--genre" itemprop="genre">
                <span class="daily-fact__meta-label">{t('dailyFacts.genre')}:</span>
                <span class="daily-fact__meta-value">{fact.genre}</span>
              </span>
            )}
          </div>
        )}
      </div>
    </div>

    {/* Share button for larger version */}
    {!compact && (
      <footer class="daily-fact__footer">
        <button 
          type="button" 
          class="daily-fact__share-btn"
          data-fact-title={fact.title}
          data-fact-description={fact.description}
          data-fact-date={fact.year ? `${fact.year}-${fact.date}` : fact.date}
          data-fact-artist={fact.artist || ''}
          aria-label={t('common.share')}
        >
          <span class="daily-fact__share-icon" aria-hidden="true">📤</span>
          <span class="daily-fact__share-text">{t('common.share')}</span>
        </button>
      </footer>
    )}
  </article>
)}

{!fact && (
  <div class="daily-fact daily-fact--error" role="alert">
    <p class="daily-fact__error-message">
      {t('dailyFacts.noFactAvailable')}
    </p>
  </div>
)}

<style lang="scss">
  /* ======================================
   * DAILY FACT COMPONENT STYLES
   * Following global.css variables and patterns
   * ====================================== */

  .daily-fact {
    background: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: var(--radius-xl);
    overflow: hidden;
    transition: all var(--transition-base);
    box-shadow: var(--shadow-sm);

    &:hover {
      box-shadow: var(--shadow-lg);
      border-color: var(--primary-400);
    }

    // Compact version for sidebar/small spaces
    &--compact {
      .daily-fact__content {
        padding: var(--space-md);
      }

      .daily-fact__title {
        font-size: var(--text-base);
        margin-bottom: var(--space-xs);
      }

      .daily-fact__description {
        font-size: var(--text-sm);
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
      }

      .daily-fact__meta {
        gap: var(--space-xs);
        flex-wrap: wrap;
      }

      .daily-fact__meta-item {
        font-size: var(--text-xs);
      }
    }

    // Error state
    &--error {
      background: var(--bg-error-aaa);
      border-color: var(--error-500);
      text-align: center;
      padding: var(--space-lg);
    }
  }

  .daily-fact__content {
    padding: var(--space-lg);

    @media (max-width: 47.9375em) {
      padding: var(--space-md);
    }
  }

  .daily-fact__header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: var(--space-md);
    gap: var(--space-md);

    @media (max-width: 47.9375em) {
      flex-direction: column;
      align-items: flex-start;
      gap: var(--space-sm);
    }
  }

  .daily-fact__category {
    display: flex;
    align-items: center;
    gap: var(--space-xs);
    padding: var(--space-xs) var(--space-sm);
    border-radius: var(--radius-full);
    background: var(--category-bg);
    border: 1px solid var(--category-color);
    font-size: var(--text-xs);
    font-weight: var(--font-semibold);
    color: var(--category-color);
  }

  .daily-fact__category-icon {
    font-size: var(--text-sm);
  }

  .daily-fact__date {
    color: var(--text-tertiary);
    font-size: var(--text-sm);
    font-weight: var(--font-medium);
    white-space: nowrap;
  }

  .daily-fact__title {
    color: var(--text-primary);
    font-size: var(--text-lg);
    font-weight: var(--font-bold);
    line-height: var(--leading-tight);
    margin-bottom: var(--space-sm);

    @media (min-width: 48em) {
      font-size: var(--text-xl);
    }
  }

  .daily-fact__description {
    color: var(--text-secondary);
    line-height: var(--leading-relaxed);
    margin-bottom: var(--space-md);
    font-size: var(--text-base);
  }

  .daily-fact__meta {
    display: flex;
    gap: var(--space-md);
    flex-wrap: wrap;

    @media (max-width: 47.9375em) {
      flex-direction: column;
      gap: var(--space-xs);
    }
  }

  .daily-fact__meta-item {
    display: flex;
    align-items: center;
    gap: var(--space-xs);
    font-size: var(--text-sm);
  }

  .daily-fact__meta-label {
    color: var(--text-tertiary);
    font-weight: var(--font-medium);
  }

  .daily-fact__meta-value {
    color: var(--text-primary);
    font-weight: var(--font-semibold);

    // Category-specific styling
    .daily-fact__meta-item--artist & {
      color: var(--primary-600);
    }

    .daily-fact__meta-item--album & {
      color: var(--secondary-600);
      font-style: italic;
    }

    .daily-fact__meta-item--genre & {
      color: var(--text-secondary);
      background: var(--bg-tertiary);
      padding: var(--space-xs) var(--space-sm);
      border-radius: var(--radius-md);
      font-size: var(--text-xs);
    }
  }

  .daily-fact__footer {
    padding: var(--space-md) var(--space-lg);
    border-top: 1px solid var(--border-color);
    background: var(--bg-tertiary);
    display: flex;
    justify-content: flex-end;
  }

  .daily-fact__share-btn {
    display: flex;
    align-items: center;
    gap: var(--space-xs);
    background: transparent;
    border: 1px solid var(--border-color);
    border-radius: var(--radius-lg);
    padding: var(--space-sm) var(--space-md);
    color: var(--text-secondary);
    font-size: var(--text-sm);
    cursor: pointer;
    transition: all var(--transition-fast);

    &:hover {
      background: var(--primary-500);
      color: var(--color-white);
      border-color: var(--primary-500);
      transform: translateY(-1px);
    }

    &:active {
      transform: translateY(0);
    }
  }

  .daily-fact__error-message {
    color: var(--text-error-aaa);
    font-weight: var(--font-medium);
    margin: 0;
  }

  // Accessibility improvements
  @media (prefers-reduced-motion: reduce) {
    .daily-fact {
      transition: none;

      &:hover {
        transform: none;
      }
    }

    .daily-fact__share-btn:hover {
      transform: none;
    }
  }

  // High contrast mode support
  @media (prefers-contrast: high) {
    .daily-fact {
      border-width: 2px;
    }

    .daily-fact__category {
      border-width: 2px;
    }
  }

  // Print styles
  @media print {
    .daily-fact__footer {
      display: none;
    }

    .daily-fact {
      box-shadow: none;
      break-inside: avoid;
    }
  }
</style>

<script>
/**
 * Enhanced Share Functionality for Daily Facts
 * Supports Web Share API with fallback to clipboard
 */
class DailyFactShare {
  constructor() {
    this.initializeShareButtons();
  }

  initializeShareButtons() {
    const shareButtons = document.querySelectorAll('.daily-fact__share-btn');
    shareButtons.forEach(button => {
      button.addEventListener('click', (e) => this.handleShare(e));
    });
  }

  async handleShare(event) {
    const button = event.currentTarget;
    const factData = this.extractFactData(button);
    
    // Create share content
    const shareData = {
      title: `🎵 ${factData.title}`,
      text: this.formatShareText(factData),
      url: window.location.href
    };

    try {
      // Try Web Share API first (mobile/modern browsers)
      if (navigator.share && this.isMobileDevice()) {
        await navigator.share(shareData);
        this.showShareSuccess(button);
      } else {
        // Fallback to clipboard
        await this.copyToClipboard(shareData);
        this.showShareSuccess(button, 'Copied to clipboard');
      }
    } catch (error) {
      console.warn('Share failed:', error);
      
      // Final fallback - show share modal
      this.showShareModal(shareData);
    }
  }

  extractFactData(button) {
    return {
      title: button.dataset.factTitle || '',
      description: button.dataset.factDescription || '',
      date: button.dataset.factDate || '',
      artist: button.dataset.factArtist || ''
    };
  }

  formatShareText(factData) {
    let text = factData.description;
    
    if (factData.artist) {
      text += `\n\n🎤 ${factData.artist}`;
    }
    
    if (factData.date) {
      const formattedDate = this.formatDate(factData.date);
      text += `\n📅 ${formattedDate}`;
    }
    
    text += '\n\n#MusicHistory #MelodyMind';
    return text;
  }

  formatDate(dateStr) {
    try {
      const [year, month, day] = dateStr.includes('-') ? 
        (dateStr.length > 5 ? dateStr.split('-') : ['', ...dateStr.split('-')]) :
        ['', dateStr.slice(0, 2), dateStr.slice(2)];
      
      if (year) {
        return new Date(parseInt(year), parseInt(month) - 1, parseInt(day))
          .toLocaleDateString(document.documentElement.lang || 'de');
      } else {
        return new Date(2024, parseInt(month) - 1, parseInt(day))
          .toLocaleDateString(document.documentElement.lang || 'de', { day: 'numeric', month: 'long' });
      }
    } catch {
      return dateStr;
    }
  }

  async copyToClipboard(shareData) {
    const textToCopy = `${shareData.title}\n\n${shareData.text}\n\n${shareData.url}`;
    
    if (navigator.clipboard && window.isSecureContext) {
      await navigator.clipboard.writeText(textToCopy);
    } else {
      // Fallback for older browsers
      const textArea = document.createElement('textarea');
      textArea.value = textToCopy;
      textArea.style.position = 'fixed';
      textArea.style.opacity = '0';
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
    }
  }

  showShareSuccess(button, message = 'Shared successfully') {
    const originalText = button.querySelector('.daily-fact__share-text').textContent;
    const originalIcon = button.querySelector('.daily-fact__share-icon').textContent;
    
    // Show success feedback
    button.querySelector('.daily-fact__share-text').textContent = message;
    button.querySelector('.daily-fact__share-icon').textContent = '✓';
    button.style.background = 'var(--color-green-600)';
    
    // Reset after 2 seconds
    setTimeout(() => {
      button.querySelector('.daily-fact__share-text').textContent = originalText;
      button.querySelector('.daily-fact__share-icon').textContent = originalIcon;
      button.style.background = '';
    }, 2000);
  }

  showShareModal(shareData) {
    // Create a simple modal for manual sharing
    const modal = document.createElement('div');
    modal.className = 'daily-fact-share-modal';
    modal.innerHTML = `
      <div class="daily-fact-share-modal__content">
        <h3>Share this music fact</h3>
        <textarea readonly class="daily-fact-share-modal__text">${shareData.title}\n\n${shareData.text}\n\n${shareData.url}</textarea>
        <div class="daily-fact-share-modal__actions">
          <button type="button" class="daily-fact-share-modal__copy">Copy Text</button>
          <button type="button" class="daily-fact-share-modal__close">Close</button>
        </div>
      </div>
    `;
    
    // Add modal styles
    const style = document.createElement('style');
    style.textContent = `
      .daily-fact-share-modal {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.8);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 10000;
        padding: var(--space-lg);
      }
      .daily-fact-share-modal__content {
        background: var(--bg-secondary);
        border-radius: var(--radius-xl);
        padding: var(--space-xl);
        max-width: 500px;
        width: 100%;
        color: var(--text-primary);
      }
      .daily-fact-share-modal__text {
        width: 100%;
        height: 120px;
        margin: var(--space-md) 0;
        padding: var(--space-sm);
        border: 1px solid var(--border-color);
        border-radius: var(--radius-lg);
        background: var(--bg-primary);
        color: var(--text-primary);
        resize: none;
      }
      .daily-fact-share-modal__actions {
        display: flex;
        gap: var(--space-sm);
        justify-content: flex-end;
      }
      .daily-fact-share-modal__copy,
      .daily-fact-share-modal__close {
        padding: var(--space-sm) var(--space-lg);
        border: none;
        border-radius: var(--radius-lg);
        cursor: pointer;
        font-weight: var(--font-medium);
      }
      .daily-fact-share-modal__copy {
        background: var(--primary-600);
        color: var(--color-white);
      }
      .daily-fact-share-modal__close {
        background: var(--bg-tertiary);
        color: var(--text-secondary);
      }
    `;
    
    document.head.appendChild(style);
    document.body.appendChild(modal);
    
    // Add event listeners
    modal.querySelector('.daily-fact-share-modal__copy').addEventListener('click', async () => {
      try {
        await this.copyToClipboard(shareData);
        modal.querySelector('.daily-fact-share-modal__copy').textContent = 'Copied!';
      } catch (error) {
        console.error('Copy failed:', error);
      }
    });
    
    modal.querySelector('.daily-fact-share-modal__close').addEventListener('click', () => {
      document.body.removeChild(modal);
      document.head.removeChild(style);
    });
    
    // Close on backdrop click
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        document.body.removeChild(modal);
        document.head.removeChild(style);
      }
    });
  }

  isMobileDevice() {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  }
}

// Initialize when DOM is ready
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => {
    new DailyFactShare();
  });
} else {
  new DailyFactShare();
}

// Re-initialize for dynamically loaded content
document.addEventListener('daily-fact:updated', () => {
  new DailyFactShare();
});
</script>