---
/**
 * KnowledgeCard Component - Responsive & Accessible
 *
 * An enhanced card component for displaying music knowledge articles with image,
 * title, description, and metadata. Fully responsive with WCAG AAA compliance.
 *
 * @component
 * @example
 * ```astro
 * // Standalone card with own link
 * <KnowledgeCard
 *   title="The History of Rock Music"
 *   description="Explore the evolution of rock from the 1950s to today..."
 *   image="/images/rock-history.jpg"
 *   createdAt={new Date('2024-01-15')}
 *   slug="history-of-rock-music"
 *   lang="en"
 *   readingTime={8}
 *   articleUrl="/en/knowledge/history-of-rock-music"
 * />
 *
 * // Card for use within parent link
 * <KnowledgeCard
 *   title="Jazz Fundamentals"
 *   description="Learn the basic elements that define jazz music..."
 *   slug="jazz-fundamentals"
 *   lang="en"
 *   readingTime={5}
 * />
 * ```
 */
import { useTranslations } from "@utils/i18n";
import { format } from "date-fns";
import { de, enUS as en } from "date-fns/locale";
import { Image } from "astro:assets";
import { Icon } from "astro-icon/components";

export const prerender = true;

interface Props {
  /** Title of the knowledge article */
  title: string;
  /** Brief description or excerpt of the article */
  description: string;
  /** Path to the article's cover image (uses default if not provided) */
  image?: string;
  /** Date when the article was created/published */
  createdAt: Date;
  /** URL slug for the article link */
  slug: string;
  /** Language code (en/de) for localization */
  lang: string;
  /** Estimated reading time in minutes */
  readingTime?: number;
  /** Complete URL to the article (optional - if omitted, component will be a non-linking card) */
  articleUrl?: string;
  /** Comma-separated keywords for searchability */
  keywords?: string;
  /** Index for animation delay calculation */
  index?: number;
}

const {
  title,
  description,
  image = "/default-cover.jpg",
  createdAt,
  slug,
  lang,
  readingTime = 0,
  articleUrl,
  keywords,
  index = 0,
} = Astro.props;

// Choose locale for date formatting using modern ES6+ syntax
const locales = { de, en } as const;
const locale = locales[lang as keyof typeof locales] ?? en;

const lang_t = useTranslations(lang as "de" | "en");
const formattedDate = format(createdAt, "MMMM d, yyyy", { locale });

// Use articleUrl if provided, otherwise let the parent handle the link
const hasOwnLink = Boolean(articleUrl);

// Generate unique IDs for this card for accessibility
const cardId = `card-title-${slug}-${index}`;
const metaId = `${cardId}-meta`;

// Generate appropriate alt text for the image
const imageAltText = title ? `Cover image for ${title}` : "";
---

<article
  class="knowledge-card"
  data-testid="knowledge-card"
  data-title={title}
  data-description={description}
  data-keywords={keywords}
  aria-labelledby={cardId}
  aria-describedby={`${cardId}-desc ${metaId}`}
>
  {
    hasOwnLink ? (
      <a
        href={articleUrl}
        class="knowledge-card__link"
        aria-labelledby={cardId}
        aria-describedby={`${cardId}-desc`}
      >
        <div class="knowledge-card__content">
          <div class="knowledge-card__accent-line" aria-hidden="true" />

          <div class="knowledge-card__image-container">
            <Image
              src={image}
              alt={imageAltText}
              loading="lazy"
              width={640}
              height={360}
              class="knowledge-card__image"
            />
          </div>

          <div class="knowledge-card__body">
            <h3 id={cardId} class="knowledge-card__title">
              {title}
            </h3>

            <p id={`${cardId}-desc`} class="knowledge-card__description">
              {description}
            </p>

            <div class="knowledge-card__footer" id={metaId}>
              <span
                class="knowledge-card__meta"
                aria-label={`${lang_t("knowledge.reading.time.label")}: ${readingTime} ${lang_t("knowledge.reading.time")}`}
              >
                <Icon name="clock" class="knowledge-card__icon" aria-hidden="true" />
                <span>
                  {readingTime} {lang_t("knowledge.reading.time")}
                </span>
              </span>

              <time
                datetime={createdAt.toISOString()}
                class="knowledge-card__meta"
                aria-label={`${lang_t("knowledge.published")}: ${formattedDate}`}
              >
                <Icon name="calendar" class="knowledge-card__icon" aria-hidden="true" />
                {formattedDate}
              </time>
            </div>
          </div>
        </div>
        <span class="sr-only" aria-live="polite">
          {lang_t("navigation.article.opens")}
        </span>
      </a>
    ) : (
      <div class="knowledge-card__content">
        <div class="knowledge-card__accent-line" aria-hidden="true" />

        <div class="knowledge-card__image-container">
          <Image
            src={image}
            alt={imageAltText}
            loading="lazy"
            width={640}
            height={360}
            class="knowledge-card__image"
          />
          <div class="knowledge-card__overlay" aria-hidden="true" />
        </div>

        <div class="knowledge-card__body">
          <h3 id={cardId} class="knowledge-card__title knowledge-card__title--clamp">
            {title}
          </h3>

          <p
            id={`${cardId}-desc`}
            class="knowledge-card__description knowledge-card__description--clamp"
          >
            {description}
          </p>

          <div class="knowledge-card__footer" id={metaId}>
            <span
              class="knowledge-card__meta"
              aria-label={`${lang_t("knowledge.reading.time.label")}: ${readingTime} ${lang_t("knowledge.reading.time")}`}
            >
              <Icon name="clock" class="knowledge-card__icon" aria-hidden="true" />
              <span>
                {readingTime} {lang_t("knowledge.reading.time")}
              </span>
            </span>

            <time
              datetime={createdAt.toISOString()}
              class="knowledge-card__meta"
              aria-label={`${lang_t("knowledge.published")}: ${formattedDate}`}
            >
              <Icon name="calendar" class="knowledge-card__icon" aria-hidden="true" />
              {formattedDate}
            </time>
          </div>
        </div>
      </div>
    )
  }
</article>

<style lang="scss">
  /* ======================================
   * KNOWLEDGE CARD COMPONENT STYLES
   * Modern SCSS with global.css variables
   * WCAG AAA compliant - Zero hardcoded values
   * ====================================== */

  .knowledge-card {
    position: relative;
    isolation: isolate;
    display: flex;
    height: 100%;
    flex-direction: column;
    overflow: hidden;
    border-radius: var(--radius-xl);
    border: var(--border-width-thin) solid var(--card-border);
    background-color: var(--card-bg);
    box-shadow: var(--card-shadow);
    transition: all var(--transition-normal);
    font-family: var(--font-family-primary);

    /* Enhanced hover states using semantic interactive colors */
    &:hover {
      border-color: var(--interactive-primary);
      box-shadow: var(--card-shadow-hover);
      transform: translateY(-4px);

      .knowledge-card__title {
        color: var(--color-primary-400);
        transition: color var(--transition-fast);
      }

      .knowledge-card__accent-line {
        height: calc(var(--space-xs) * 1.5);
        transition: height var(--transition-fast);
      }
    }

    /* Link wrapper for accessible navigation */
    &__link {
      display: flex;
      height: 100%;
      flex-direction: column;
      overflow: hidden;
      border-radius: var(--radius-xl);
      color: inherit;
      text-decoration: none;
      transition: all var(--transition-normal);

      /* Focus states using semantic focus system */
      &:focus-visible {
        outline: var(--focus-enhanced-outline-dark);
        outline-offset: var(--focus-ring-offset);
        box-shadow: var(--focus-enhanced-shadow);
        border-radius: var(--radius-xl);
        transform: translateY(-4px);
        transition: all var(--transition-fast) ease-out;
      }

      &:hover,
      &:focus-visible {
        .knowledge-card__image {
          transform: scale(1.1);
        }
      }
    }

    /* Content container with flexible layout */
    &__content {
      position: relative;
      height: 100%;
      display: flex;
      flex-direction: column;
    }

    /* Accent line using primary gradient with CSS variables */
    &__accent-line {
      position: absolute;
      top: 0;
      right: 0;
      left: 0;
      height: var(--space-xs);
      background: linear-gradient(
        to right,
        var(--color-primary-700) var(--gradient-start),
        var(--color-primary-500) calc(var(--gradient-start) + 50%),
        var(--color-primary-700) var(--gradient-end)
      );
    }

    /* Image container with optimal aspect ratio using CSS variables */
    &__image-container {
      position: relative;
      aspect-ratio: 16 / 9;
      overflow: hidden;
    }

    /* Image with smooth hover animation using CSS variables */
    &__image {
      height: 100%;
      width: 100%;
      object-fit: cover;
      transition: transform var(--transition-slow);
    }

    /* Overlay gradient using CSS variables for consistency */
    &__overlay {
      position: absolute;
      inset: 0;
      background: linear-gradient(
        to top,
        rgba(0, 0, 0, 0.95) var(--gradient-start),
        rgba(0, 0, 0, 0.75) calc(var(--gradient-start) + 50%),
        transparent var(--gradient-end)
      );
      opacity: 0;
    }

    /* Body content with semantic spacing */
    &__body {
      display: flex;
      flex-grow: 1;
      flex-direction: column;
      justify-content: flex-start;
      padding: var(--space-lg) var(--space-lg) var(--space-md);

      /* Responsive padding adjustments */
      @media (max-width: 47.9375em) {
        padding: var(--space-md) var(--space-md) var(--space-sm);
      }

      @media (max-width: 39.9375em) {
        padding: var(--space-sm) var(--space-sm) var(--space-xs);
      }
    }

    /* Title styling with semantic typography */
    &__title {
      margin-bottom: var(--space-md);
      font-size: var(--text-2xl);
      font-weight: var(--font-bold);
      letter-spacing: var(--letter-spacing-base);
      line-height: var(--leading-tight);
      color: var(--text-primary);

      &--clamp {
        display: -webkit-box;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: 2;
        overflow: hidden;
      }

      /* Responsive typography */
      @media (max-width: 47.9375em) {
        font-size: var(--text-xl);
        margin-bottom: var(--space-sm);
      }

      @media (max-width: 39.9375em) {
        font-size: var(--text-lg);
        margin-bottom: var(--space-xs);
      }
    }

    /* Description with enhanced readability using CSS variables */
    &__description {
      margin-bottom: var(--space-lg);
      font-size: var(--text-lg);
      line-height: var(--leading-relaxed);
      color: var(--text-secondary);

      &--clamp {
        display: -webkit-box;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: 3;
        overflow: hidden;
      }

      /* Responsive typography */
      @media (max-width: 47.9375em) {
        font-size: var(--text-base);
        margin-bottom: var(--space-md);
      }

      @media (max-width: 39.9375em) {
        font-size: var(--text-sm);
        margin-bottom: var(--space-sm);
      }
    }

    /* Footer with semantic border and spacing */
    &__footer {
      margin-top: auto;
      padding-top: var(--space-md);
      border-top: var(--border-width-thin) solid var(--border-primary);
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: var(--space-md);

      /* Responsive layout adjustments */
      @media (max-width: 47.9375em) {
        padding-top: var(--space-sm);
        gap: var(--space-sm);
      }

      @media (max-width: 39.9375em) {
        flex-direction: column;
        align-items: flex-start;
        gap: var(--space-xs);
        padding-top: var(--space-xs);
      }
    }

    /* Meta information styling with CSS variables */
    &__meta {
      display: flex;
      align-items: center;
      font-size: var(--text-base);
      color: var(--text-tertiary);

      /* Responsive typography */
      @media (max-width: 47.9375em) {
        font-size: var(--text-sm);
      }

      @media (max-width: 39.9375em) {
        font-size: var(--text-xs);
      }
    }

    /* Icon styling with semantic sizing */
    &__icon {
      width: var(--icon-size-sm);
      height: var(--icon-size-sm);
      margin-right: var(--space-sm);
      color: var(--color-primary-400);
      flex-shrink: 0;

      /* Responsive icon sizing */
      @media (max-width: 39.9375em) {
        width: var(--icon-size-sm);
        height: var(--icon-size-sm);
        margin-right: var(--space-xs);
      }
    }

    /* Responsive card adjustments */
    @media (max-width: 47.9375em) {
      border-radius: var(--radius-lg);

      &__link {
        border-radius: var(--radius-lg);
      }
    }

    @media (max-width: 39.9375em) {
      border-radius: var(--radius-md);

      &__link {
        border-radius: var(--radius-md);
      }
    }
  }

  /* ======================================
   * ACCESSIBILITY OPTIMIZATIONS
   * ====================================== */

  /* Print styles using semantic variables */
  @media print {
    .knowledge-card {
      page-break-inside: avoid;
      break-inside: avoid;
      border: var(--border-width-thin) solid var(--print-border);
      background-color: var(--print-bg);
      color: var(--print-text);
      box-shadow: none;

      &__title,
      &__description,
      &__meta {
        color: var(--print-text);
      }

      &__image {
        max-height: 3in;
      }
    }
  }

  /* High contrast mode using enhanced variables */
  @media (forced-colors: active) {
    .knowledge-card {
      border: var(--border-width-thick) solid CanvasText;

      &__link:focus-visible {
        outline: var(--border-width-thick) solid CanvasText;
      }
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .knowledge-card {
      &,
      &__link,
      &__image {
        transition: none;
        transform: none;
      }

      &:hover {
        transform: none;
      }

      &__link:hover .knowledge-card__image,
      &__link:focus-visible .knowledge-card__image {
        transform: none;
      }
    }
  }

  /* Screen Reader Only utility class */
  .sr-only {
    position: absolute;
    width: var(--sr-only-width);
    height: var(--sr-only-height);
    padding: 0;
    margin: var(--sr-only-margin);
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
</style>
