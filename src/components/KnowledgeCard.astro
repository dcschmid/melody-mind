---
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import { format } from "date-fns";
import { de, enUS as en } from "date-fns/locale";

export const prerender = true;

interface Props {
  title: string;
  description: string;
  image?: string;
  createdAt: Date;
  slug: string;
  lang: string;
  readingTime?: number;
}

const {
  title,
  description,
  image = "/default-cover.jpg",
  createdAt,
  slug,
  lang,
  readingTime = 0,
} = Astro.props;

// Choose locale for date formatting
const locales = { de, en };
const locale = locales[lang as keyof typeof locales] || en;

const lang_t = useTranslations(lang as "de" | "en");
const formattedDate = format(createdAt, "MMMM d, yyyy", { locale });
---

<!-- Optimized structure for better touch interaction -->
<a
  href={`/${lang}/knowledge/${slug}`}
  class="card-link block h-full no-underline text-white outline-none transition-colors"
  aria-label={title}
  tabindex="0"
  data-card-link
>
  <div
    class="card h-full bg-zinc-800 rounded-xl border border-zinc-700 overflow-hidden shadow-md transition-all duration-300 relative"
  >
    <!-- Image as background -->
    <div class="relative aspect-video overflow-hidden">
      <img
        src={image}
        alt={title}
        loading="lazy"
        class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
        width="640"
        height="360"
      />

      <!-- Gradient overlay for better text contrast -->
      <div
        class="absolute inset-0 bg-gradient-to-t from-zinc-900 to-transparent opacity-60"
      >
      </div>
    </div>

    <div class="p-4">
      <h3 class="text-lg font-semibold text-white mb-2">{title}</h3>
      <p class="text-zinc-300 text-sm line-clamp-3 mb-4 description">
        {description}
      </p>

      <div class="flex justify-between items-center mt-auto">
        <span class="text-xs text-zinc-400 flex items-center">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-4 w-4 mr-1"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="1.5"
              d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          {readingTime}
          {lang_t("knowledge.reading.time")}
        </span>
        <span class="text-xs text-zinc-400">
          {createdAt.toLocaleDateString()}
        </span>
      </div>
    </div>
  </div>
</a>

<style>
  /* Optimized styles for mobile touch interaction */
  .card-link {
    color: inherit;
    text-decoration: none;
    -webkit-tap-highlight-color: rgba(
      168,
      85,
      247,
      0.2
    ); /* More visible feedback on touch */
    /* Improved touch accessibility through padding */
    position: relative;
    display: block;
    will-change: transform; /* Performance optimization for animations */
    transform: translateZ(0); /* Enable hardware acceleration */
    touch-action: manipulation; /* Optimized for touch interactions */
  }

  /* Touch display for all devices - even without hover */
  .card-link:active .card {
    transform: scale(0.98);
    background-color: #2d283e;
    border-color: #6d28d9;
  }

  /* Specific touch device optimizations */
  @media (hover: none) {
    .card-link {
      cursor: pointer;
      /* Extra padding for better accessibility on mobile devices */
      position: relative;
    }

    /* Explicit touch target */
    .card-link::before {
      content: "";
      position: absolute;
      top: -10px;
      left: -10px;
      right: -10px;
      bottom: -10px;
      z-index: 1;
    }
  }

  /* Additionally maintain hover effect for desktop devices */
  @media (hover: hover) {
    .card-link:hover .card {
      transform: translateY(-4px);
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
      border-color: #6d28d9;
    }
  }

  /* High Contrast Mode Support */
  @media (forced-colors: active) {
    .card {
      border: 2px solid CanvasText;
    }

    .card-link:focus {
      outline: 2px solid Highlight;
      outline-offset: 2px;
    }
  }

  /* Print styles */
  @media print {
    .card {
      break-inside: avoid;
      border: 1px solid #000;
      page-break-inside: avoid;
    }

    .description {
      color: #000 !important;
    }

    h3 {
      color: #000 !important;
    }
  }
</style>

<script>
  // Improved touch handling that distinguishes between scrolling and tapping
  document.addEventListener("DOMContentLoaded", function () {
    const cardLinks = document.querySelectorAll("[data-card-link]");
    
    cardLinks.forEach(link => {
      let touchStartY = 0;
      let touchStartX = 0;
      let isTouchMove = false;
      const TOUCH_THRESHOLD = 10; // Pixels of movement to consider a scroll vs. a tap
      
      // Record starting touch position
      link.addEventListener("touchstart", function(e) {
        touchStartY = e.touches[0].clientY;
        touchStartX = e.touches[0].clientX;
        isTouchMove = false;
      }, { passive: true });
      
      // Detect movement to distinguish scroll from tap
      link.addEventListener("touchmove", function(e) {
        const touchY = e.touches[0].clientY;
        const touchX = e.touches[0].clientX;
        const diffY = Math.abs(touchY - touchStartY);
        const diffX = Math.abs(touchX - touchStartX);
        
        // If moved more than threshold, consider it a scroll, not a tap
        if (diffY > TOUCH_THRESHOLD || diffX > TOUCH_THRESHOLD) {
          isTouchMove = true;
        }
      }, { passive: true });
      
      // Only trigger navigation if it was a tap, not a scroll
      link.addEventListener("touchend", function(e) {
        if (!isTouchMove) {
          // It was a tap, navigate to the article
          const href = this.getAttribute("href");
          if (href) window.location.href = href;
        }
        // Reset for next interaction
        isTouchMove = false;
      });
    });
  });
</script>
