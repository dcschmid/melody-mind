---
export interface Props {
  categories: Array<{
    type: string;
    title: string;
    icon: string;
  }>;
  selectedValue?: string;
  className?: string;
}

const { categories, selectedValue = "all", className = "" } = Astro.props;
---

<div class={`mb-8 md:mb-10 ${className}`} role="search">
  <div class="relative mx-auto max-w-full sm:max-w-2xl md:max-w-4xl lg:max-w-5xl">
    <div class="mb-6 text-center">
      <span
        class="inline-block rounded-full border border-purple-500/30 bg-gray-800/50 px-6 py-3 text-base font-medium text-purple-300 backdrop-blur-sm"
      >
        Filter by category:
      </span>
    </div>
    <div class="group relative">
      <select
        id="category-filter"
        class="w-full cursor-pointer appearance-none rounded-2xl border-2 border-purple-500/50 bg-gray-900/80 p-5 px-8 pr-20 text-lg leading-relaxed font-medium text-white shadow-xl backdrop-blur-md transition-all duration-300 hover:border-purple-400 hover:bg-gray-800/90 hover:shadow-2xl hover:shadow-purple-500/25 focus:border-purple-400 focus:ring-2 focus:ring-purple-400 focus:ring-offset-2 focus:ring-offset-gray-900 focus:outline-none active:scale-[0.98]"
        name="category-filter"
        aria-label="Filter by category:"
        aria-controls="genre-content"
        data-selected={selectedValue}
        value={selectedValue}
      >
        <option value="all">All Categories</option>
        {categories.map((category) => <option value={category.type}>{category.title}</option>)}
      </select>
      <div
        class="pointer-events-none absolute top-0 right-0 bottom-0 flex items-center justify-center px-8"
      >
        <div
          class="flex h-8 w-8 items-center justify-center rounded-full bg-purple-500/20 transition-all duration-300 group-hover:bg-purple-500/30"
        >
          <svg
            class="h-5 w-5 text-purple-300 transition-colors duration-300 group-hover:text-purple-200"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"
            ></path>
          </svg>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Category filter functionality - reusable across pages
  class CategoryFilter {
    private filterSelect: HTMLSelectElement | null;
    private categoryGroups: NodeListOf<Element>;
    private targetSelector: string;

    constructor(targetSelector: string = ".category-group") {
      this.filterSelect = document.getElementById("category-filter") as HTMLSelectElement;
      this.categoryGroups = document.querySelectorAll(targetSelector);
      this.targetSelector = targetSelector;

      if (this.filterSelect) {
        this.init();
      }
    }

    private init = (): void => {
      this.filterSelect!.addEventListener("change", this.handleFilterChange);

      // Set initial state based on data-selected attribute
      const initialValue = this.filterSelect!.getAttribute("data-selected") || "all";
      this.filterSelect!.value = initialValue;
      this.filterCategories(initialValue);
    };

    private handleFilterChange = (event: Event): void => {
      const target = event.target as HTMLSelectElement;
      const selectedValue = target.value;
      this.filterCategories(selectedValue);
    };

    private filterCategories = (selectedType: string): void => {
      this.categoryGroups.forEach((group) => {
        if (group instanceof HTMLElement) {
          if (selectedType === "all") {
            // Show all category groups
            group.style.display = "";
            group.setAttribute("aria-hidden", "false");
          } else {
            // Check if this group has the matching data-category-type attribute
            const groupCategoryType = group.getAttribute("data-category-type");
            const shouldShow = groupCategoryType === selectedType;

            group.style.display = shouldShow ? "" : "none";
            group.setAttribute("aria-hidden", (!shouldShow).toString());
          }
        }
      });
    };
  }

  // Initialize filter functionality
  const initFilter = (): void => {
    // Try different selectors to find category groups
    const selectors = [
      ".category-group",
      ".genre-content",
      "[data-category-type]",
      ".category-section",
    ];

    for (const selector of selectors) {
      const groups = document.querySelectorAll(selector);
      if (groups.length > 0) {
        new CategoryFilter(selector);
        return;
      }
    }
  };

  // Initialize when DOM is ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initFilter);
  } else {
    initFilter();
  }
</script>
