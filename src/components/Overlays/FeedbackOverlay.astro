---
import { Icon } from "astro-icon/components";
---

<div
  id="overlay"
  class="overlay hidden"
  role="dialog"
  aria-labelledby="overlay-title"
  aria-modal="true"
  aria-live="polite"
>
  <div class="overlayContent" role="document">
    <h2 id="overlay-title" class="title">Auflösung</h2>
    <p id="feedback" class="feedback" role="status" aria-live="assertive"></p>

    <div class="mediaSection" aria-label="Medien-Bereich">
      <img
        id="overlay-cover"
        class="albumCover"
        src=""
        alt=""
        loading="eager"
        decoding="async"
      />
      <audio
        id="audio-preview"
        class="audioPlayer"
        controls
        preload="metadata"
        aria-label="Musik-Vorschau"
      >
        <source id="audio-preview-source" src="" type="audio/mpeg" />
        <source id="audio-preview-source-ogg" src="" type="audio/ogg" />
        <track kind="captions" src="" label="Untertitel" />
        <p>Dein Browser unterstützt keine Audio-Wiedergabe.</p>
      </audio>
    </div>

    <div class="musicLinks" role="group" aria-label="Musik-Streaming Links">
      <a
        id="spotify-link"
        class="musicButton"
        href="#"
        target="_blank"
        rel="noopener noreferrer"
        aria-label="Auf Spotify anhören"
      >
        <Icon name="spotify" width={36} height={36} aria-hidden="true" />
        <span class="sr-only">Spotify</span>
      </a>
      <a
        id="deezer-link"
        class="musicButton"
        href="#"
        target="_blank"
        rel="noopener noreferrer"
        aria-label="Auf Deezer anhören"
      >
        <Icon name="deezer" width={36} height={36} aria-hidden="true" />
        <span class="sr-only">Deezer</span>
      </a>
      <a
        id="apple-link"
        class="musicButton"
        href="#"
        target="_blank"
        rel="noopener noreferrer"
        aria-label="Auf Apple Music anhören"
      >
        <Icon name="apple-music" width={36} height={36} aria-hidden="true" />
        <span class="sr-only">Apple Music</span>
      </a>
    </div>

    <div class="infoSection" role="contentinfo">
      <p id="overlay-artist" class="artist"></p>
      <p id="overlay-album" class="album"></p>
      <p id="overlay-year" class="year"></p>
      <p id="overlay-funfact" class="funFact"></p>
    </div>

    <div class="buttonWrapper">
      <button
        id="next-round-button"
        class="nextButton"
        aria-label="Zur nächsten Runde"
      >
        Nächste Runde
      </button>
    </div>
  </div>
</div>

<style lang="scss">
  .overlay {
    position: fixed;
    z-index: var(--layer-above);
    inset: 0;

    display: flex;
    align-items: center;
    justify-content: center;

    padding: var(--padding-large);

    background: rgb(0 0 0 / 90%);
    backdrop-filter: blur(12px);

    &.hidden {
      pointer-events: none;
      visibility: hidden;
      opacity: 0;
    }

    &:not(.hidden) {
      will-change: opacity;
    }

    @media (prefers-reduced-motion: no-preference) {
      transition: opacity var(--transition-speed) ease-in-out;
    }
  }

  .overlayContent {
    scrollbar-gutter: stable;

    overflow-y: auto;
    overscroll-behavior: contain;

    width: 100%;
    max-width: min(768px, 90vw);
    max-height: 90vh;
    padding: var(--padding-large);

    color: var(--text-color);

    background-color: var(--secondary-color);
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);

    &:focus {
      outline: var(--focus-outline-width) solid var(--focus-outline-color);
      outline-offset: var(--focus-outline-offset);
    }

    @media (width <= 768px) {
      padding: var(--padding-medium);
    }
  }

  .title {
    margin-bottom: var(--padding-medium);

    font-size: var(--header-font-size);
    font-weight: 700;
    color: var(--text-color);
    text-align: center;
  }

  .feedback {
    margin: var(--padding-medium) 0;
    padding: var(--padding-medium);

    font-size: var(--body-font-size);
    font-weight: 600;
    text-align: center;

    border-radius: var(--border-radius);

    &.correct {
      color: var(--button-text-color);
      background-color: var(--highlight-color);
    }

    &.incorrect {
      color: var(--button-text-color);
      background-color: var(--error-color);
    }
  }

  .mediaSection {
    display: flex;
    flex-direction: column;
    gap: var(--padding-medium);
    align-items: center;

    margin-bottom: var(--padding-medium);
  }

  .albumCover {
    aspect-ratio: 1 / 1;
    width: 100%;
    max-width: 250px;
    height: auto;

    object-fit: cover;
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
  }

  .audioPlayer {
    width: 100%;
    max-width: 250px;
    margin-top: var(--padding-small);

    &:focus-within {
      outline: var(--focus-outline-width) solid var(--focus-outline-color);
      outline-offset: var(--focus-outline-offset);
    }
  }

  .musicLinks {
    display: flex;
    gap: var(--padding-medium);
    justify-content: center;
    margin: var(--padding-medium) 0;

    @media (width <= 480px) {
      flex-wrap: wrap;
    }
  }

  .musicButton {
    display: inline-flex;
    align-items: center;
    justify-content: center;

    min-width: var(--min-touch-target);
    min-height: var(--min-touch-target);
    padding: var(--padding-small);

    color: var(--button-text-color);

    background-color: var(--highlight-color);
    border-radius: var(--border-radius);

    &:hover {
      background-color: var(--button-hover-color);
    }

    &:focus-visible {
      outline: var(--focus-outline-width) solid var(--focus-outline-color);
      outline-offset: var(--focus-outline-offset);
    }

    @media (width <= 480px) {
      min-width: calc(var(--min-touch-target) * 1.2);
      min-height: calc(var(--min-touch-target) * 1.2);
      padding: var(--padding-medium);
    }
  }

  .infoSection {
    margin: var(--padding-medium) 0;
    text-align: center;
  }

  .artist {
    font-size: calc(var(--body-font-size) * 1.2);
    font-weight: 700;
    color: var(--highlight-color);
  }

  .album,
  .year,
  .funFact {
    margin-top: var(--padding-small);
    line-height: var(--line-height-body);
  }

  .nextButton {
    cursor: pointer;

    min-width: var(--min-touch-target);
    min-height: var(--min-touch-target);
    padding: var(--padding-medium) var(--padding-large);

    font-size: var(--button-font-size);
    font-weight: 600;
    color: var(--button-text-color);

    background-color: var(--highlight-color);
    border: none;
    border-radius: var(--border-radius);

    &:hover {
      background-color: var(--button-hover-color);
    }

    &:focus-visible {
      outline: var(--focus-outline-width) solid var(--focus-outline-color);
      outline-offset: var(--focus-outline-offset);
    }
  }

  .buttonWrapper {
    display: flex;
    gap: var(--padding-medium);
    justify-content: center;
    margin-top: var(--padding-medium);
  }

  @media (forced-colors: active) {
    .overlayContent {
      border: 2px solid CanvasText;
    }

    .musicButton,
    .nextButton {
      border: 2px solid ButtonText;
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .overlay {
      transition: none;
    }
  }
</style>

<script>
  const overlay = document.getElementById("overlay") as HTMLElement;
  const overlayContent = overlay.querySelector(
    ".overlayContent",
  ) as HTMLElement;

  const observer = new MutationObserver(() => {
    if (!overlay.classList.contains("hidden")) {
      overlayContent.scrollTop = 0;
      overlayContent.focus();
    }
  });

  observer.observe(overlay, { attributes: true, attributeFilter: ["class"] });

  const focusableElements =
    'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])';

  document.addEventListener("keydown", (event) => {
    const overlay = document.getElementById("overlay");
    if (!overlay?.classList.contains("hidden")) {
      const content = overlay!.querySelector(".overlayContent");
      const focusable = Array.from(
        content?.querySelectorAll(focusableElements) || [],
      );
      const firstFocusable = focusable[0] as HTMLElement;
      const lastFocusable = focusable[focusable.length - 1] as HTMLElement;

      switch (event.key) {
        case "Escape":
          document.getElementById("next-round-button")?.click();
          break;
        case "Tab":
          if (event.shiftKey && document.activeElement === firstFocusable) {
            event.preventDefault();
            lastFocusable.focus();
          } else if (
            !event.shiftKey &&
            document.activeElement === lastFocusable
          ) {
            event.preventDefault();
            firstFocusable.focus();
          }
          break;
      }
    }
  });

  document.addEventListener("astro:before-swap", () => {
    observer.disconnect();
  });

  // Audio cleanup
  const audioPlayer = document.getElementById(
    "audio-preview",
  ) as HTMLAudioElement;
  document.addEventListener("astro:before-swap", () => {
    audioPlayer.pause();
    audioPlayer.src = "";
  });
</script>
