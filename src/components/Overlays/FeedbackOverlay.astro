---
/**
 * @component FeedbackOverlay
 * @description A modal overlay that displays feedback after each game round, showing
 * album information, media preview, and streaming links. This component is optimized for
 * WCAG AAA accessibility standards and high performance.
 *
 */
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import { Icon } from "astro-icon/components";
import Headline from "@components/Headline.astro";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<div
  id="overlay"
  class="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/80 transition-all duration-300 hidden"
  role="dialog"
  aria-labelledby="overlay-title"
  aria-describedby="feedback"
  aria-modal="true"
  tabindex="-1"
>
  <!-- Overlay backdrop for click-to-close functionality -->
  <div id="overlay-backdrop" class="absolute inset-0 bg-transparent" aria-hidden="true"></div>

  <div
    class="relative z-10 max-h-[calc(100vh-2rem)] w-full max-w-4xl overflow-y-auto rounded-2xl border border-gray-600 bg-gray-800 p-6 shadow-2xl overlay__content"
    role="document"
    tabindex="-1"
  >
    <div class="flex items-center justify-between mb-8 gap-4 overlay__header">
      <Headline level="h2" textSize="2xl" textAlign="center" className="flex-1">
        {t("game.feedback.resolution")}
      </Headline>

      <!-- Close button for enhanced accessibility -->
      <button
        id="close-overlay-button"
        class="flex h-12 w-12 min-w-12 min-h-12 items-center justify-center rounded-full bg-gray-700 text-gray-300 border border-gray-600 cursor-pointer flex-shrink-0 transition-all duration-300 hover:bg-purple-600 hover:text-white hover:border-purple-500 hover:scale-105 hover:shadow-lg focus:outline-none focus:ring-4 focus:ring-purple-500/60 focus:border-purple-400 active:scale-95 active:shadow-sm"
        aria-label={t("general.close")}
      >
        <Icon name="close" width={24} height={24} aria-hidden="true" />
      </button>
    </div>

    <!-- Status announcer for screen readers -->
    <div id="feedback-status-announcer" aria-live="assertive" aria-atomic="true" class="sr-only">
    </div>

    <!-- Keyboard shortcuts documentation for screen readers -->
    <div class="sr-only" id="keyboard-shortcuts">
      <Headline level="h4" textSize="base">Keyboard Shortcuts (Tastaturk√ºrzel)</Headline>
      <ul>
        <li>{t("general.keyboard.escape")}: {t("general.close")}</li>
        <li>{t("general.keyboard.enter")}: {t("game.feedback.next.round")}</li>
        <li>{t("general.keyboard.tab")}: {t("general.navigate.elements")}</li>
      </ul>
    </div>

    <!-- Feedback message - This is what the game engine populates -->
    <div
      id="feedback"
      class="feedback rounded-xl p-6 border border-transparent transition-all duration-300 text-center text-lg font-medium"
      aria-live="polite"
    >
    </div>

    <div
      class="flex justify-center items-center min-h-48 my-8 album-info"
      aria-label={t("game.feedback.media.section")}
    >
      <div
        class="w-full text-center bg-gray-700/50 rounded-xl p-8 transition-all duration-300"
        role="contentinfo"
      >
        <div class="mb-8 pb-6 border-b border-gray-600">
          <h3 class="text-2xl font-bold text-white mb-4 break-words" id="overlay-artist">Artist</h3>
          <h4 class="text-xl font-semibold text-purple-300 mb-4 break-words" id="overlay-album">
            Album
          </h4>
          <p class="text-lg text-gray-300 break-words" id="overlay-year"></p>
        </div>
        <div class="mt-8">
          <div
            id="overlay-funfact"
            class="fun-fact m-0 text-lg leading-relaxed text-gray-300 w-full p-6 bg-gray-600/50 rounded-xl border border-gray-600 transition-all duration-300 hover:bg-gray-600 hover:border-purple-500 hover:-translate-y-1 break-words"
          >
          </div>
        </div>
      </div>
    </div>

    <button
      id="next-round-button"
      class="block mx-auto min-h-12 min-w-56 rounded-xl bg-purple-600 text-white font-semibold text-base border border-purple-500 cursor-pointer px-6 py-3 transition-all duration-300 hover:bg-purple-700 hover:border-purple-400 hover:-translate-y-1 hover:shadow-lg focus:outline-none focus:ring-4 focus:ring-purple-500/60 focus:border-purple-400 active:translate-y-0 active:scale-95 active:shadow-sm shadow-md"
      aria-label={t("game.feedback.next.round")}
    >
      <span class="flex items-center justify-center gap-2">
        {t("game.feedback.next.round")}
        <Icon name="arrow-right" width={20} height={20} aria-hidden="true" />
      </span>
    </button>
  </div>
</div>

<script>
  // Extend Window interface for our utilities
  declare global {
    interface Window {
      populateFeedbackOverlay: (data: {
        artist?: string;
        album?: string;
        year?: string;
        funFact?: string;
      }) => void;
    }
  }

  // Simple feedback overlay functionality
  document.addEventListener("DOMContentLoaded", () => {
    const overlay = document.getElementById("overlay");
    const closeButton = document.getElementById("close-overlay-button");
    const backdrop = document.getElementById("overlay-backdrop");
    const nextButton = document.getElementById("next-round-button");

    if (!overlay || !closeButton || !backdrop || !nextButton) {
      return;
    }

    // Close overlay function
    const closeOverlay = () => {
      // Find and trigger the next round button that the game engine set up
      const nextRoundButton = document.getElementById("next-round-button");
      if (nextRoundButton?.onclick) {
        // Call the game engine's onclick handler directly
        nextRoundButton.onclick(new MouseEvent("click"));
      } else {
        // Fallback: Hide overlay and dispatch click event
        overlay.classList.add("hidden");
        nextRoundButton?.click();
      }
    };

    // Event listeners
    closeButton.addEventListener("click", closeOverlay);
    backdrop.addEventListener("click", closeOverlay);
    nextButton.addEventListener("click", closeOverlay);

    // Keyboard navigation
    document.addEventListener("keydown", (e) => {
      if (!overlay.classList.contains("hidden")) {
        if (e.key === "Escape") {
          e.preventDefault();
          closeOverlay();
        }
      }
    });

    // Focus management
    const observer = new MutationObserver((mutations) => {
      mutations.forEach(({ type, target, attributeName }) => {
        if (type === "attributes" && attributeName === "class") {
          const isVisible = !(target as HTMLElement).classList.contains("hidden");
          if (isVisible) {
            window.scrollTo(0, 0);
            setTimeout(() => closeButton.focus(), 100);
          }
        }
      });
    });

    observer.observe(overlay, {
      attributes: true,
      attributeFilter: ["class"],
    });

    // Function to populate overlay with game data
    const populateOverlay = (data: {
      artist?: string;
      album?: string;
      year?: string;
      funFact?: string;
    }) => {
      const artistElement = document.getElementById("overlay-artist");
      const albumElement = document.getElementById("overlay-album");
      const yearElement = document.getElementById("overlay-year");
      const funFactElement = document.getElementById("overlay-funfact");

      if (artistElement && data.artist) {
        artistElement.textContent = data.artist;
      }
      if (albumElement && data.album) {
        albumElement.textContent = data.album;
      }
      if (yearElement && data.year) {
        yearElement.textContent = data.year;
      }
      if (funFactElement && data.funFact) {
        funFactElement.textContent = data.funFact;
      }
    };

    // Make populate function globally available
    window.populateFeedbackOverlay = populateOverlay;
  });
</script>
