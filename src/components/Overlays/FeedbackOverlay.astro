---
/**
 * @component FeedbacknOverlay
 * @description A modal overlay that displays feedback after each game round, showing
 * album information, media preview, and streaming links. This component is optimized for
 * WCAG AAA accessibility standards and high performance.
 *
 */
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import { Icon } from "astro-icon/components";
import Paragraph from "@components/Paragraph.astro";
import Headline from "@components/Headline.astro";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<div
  id="overlay"
  class="overlay hidden"
  role="dialog"
  aria-labelledby="overlay-title"
  aria-describedby="feedback"
  aria-modal="true"
  tabindex="-1"
>
  <!-- Overlay backdrop for click-to-close functionality -->
  <div id="overlay-backdrop" class="overlay__backdrop" aria-hidden="true"></div>

  <div class="overlay__content" role="document" tabindex="-1">
    <div class="overlay__header">
      <Headline level="h2" size="xl" id="overlay-title" textAlign="center">
        {t("game.feedback.resolution")}
      </Headline>

      <!-- Close button for enhanced accessibility -->
      <button
        id="close-overlay-button"
        class="overlay__close-button"
        aria-label={t("general.close")}
      >
        <Icon name="close" width={24} height={24} aria-hidden="true" />
      </button>
    </div>

    <!-- Status announcer for screen readers -->
    <div id="feedback-status-announcer" aria-live="assertive" aria-atomic="true" class="sr-only">
    </div>

    <!-- Keyboard shortcuts documentation for screen readers -->
    <div class="sr-only" id="keyboard-shortcuts">
      <Headline level="h4" size="base">Keyboard Shortcuts (Tastaturk√ºrzel)</Headline>
      <ul>
        <li>{t("general.keyboard.escape")}: {t("general.close")}</li>
        <li>{t("general.keyboard.enter")}: {t("game.feedback.next.round")}</li>
        <li>{t("general.keyboard.tab")}: {t("general.navigate.elements")}</li>
      </ul>
    </div>

    <Paragraph
      id="feedback"
      className="feedback"
      textSize="lg"
      align="center"
      highContrast={true}
      aria-live="polite"
      description=""
    />

    <div class="album-info" aria-label={t("game.feedback.media.section")}>
      <div class="album-info__content" role="contentinfo">
        <div class="album-info__header">
          <Headline level="h3" size="xl" id="overlay-artist">Artist</Headline>
          <Headline
            level="h4"
            size="lg"
            textAlign="center"
            id="overlay-album"
            className="album-name">Album</Headline
          >
          <Paragraph id="overlay-year" textSize="base" align="center" description="" />
        </div>
        <div class="album-info__details">
          <Paragraph
            id="overlay-funfact"
            className="fun-fact"
            textSize="lg"
            align="center"
            enhancedSpacing={true}
            description=""
          />
        </div>
      </div>
    </div>

    <button id="next-round-button" class="next-button" aria-label={t("game.feedback.next.round")}>
      <span class="next-button__content">
        {t("game.feedback.next.round")}
        <Icon name="arrow-right" width={20} height={20} aria-hidden="true" />
      </span>
    </button>
  </div>
</div>

<style lang="scss">
  // ======================================
  // OVERLAY BASE STYLES - Enhanced with comprehensive breakpoints
  // ======================================

  .overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    z-index: var(--z-modal);
    display: flex;
    align-items: center;
    justify-content: center;
    padding: var(--space-lg);
    background-color: var(--backdrop-overlay-dark);
    transition:
      opacity var(--transition-normal),
      visibility var(--transition-normal);

    &.hidden {
      pointer-events: none;
      visibility: hidden;
      opacity: 0;
    }
  }

  .overlay__backdrop {
    position: absolute;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    z-index: var(--z-backdrop);
    pointer-events: auto;
    background-color: var(--backdrop-overlay-dark);
    transition: opacity var(--transition-normal);
  }

  .overlay__content {
    position: relative;
    z-index: var(--z-modal-content);
    max-height: calc(100vh - var(--space-lg) * 2);
    width: 100vw;
    max-width: min(100vw, var(--container-lg));
    overflow-y: auto;
    border-radius: var(--radius-xl);
    border: var(--border-width-thin) solid var(--border-primary);
    background-color: var(--card-bg);
    padding: var(--space-sm);
    box-shadow: var(--card-shadow);
    pointer-events: auto;
    transition: opacity var(--transition-normal);
  }

  // ======================================
  // OVERLAY CONTENT - Enhanced responsive design with comprehensive breakpoints
  // ======================================

  .overlay__content {
    position: relative;
    z-index: var(--z-modal-content);
    max-height: calc(100vh - var(--space-lg) * 2);
    width: var(--width-full);
    max-width: min(100vw, var(--container-lg));
    overflow-y: auto;
    overscroll-behavior: contain;
    border-radius: var(--radius-xl);
    border: var(--border-width-thin) solid var(--border-primary);
    background-color: var(--card-bg);
    padding: var(--space-sm);
    box-shadow: var(--card-shadow);
    scrollbar-gutter: stable;
    pointer-events: auto;

    // Performance optimizations with global.css variables
    contain: layout style paint;
    content-visibility: auto;
    contain-intrinsic-size: var(--container-intrinsic-height-modal);
    transition: all var(--transition-normal);
  }

  // ======================================
  // HEADER SECTION - Enhanced responsive design
  // ======================================

  .overlay__header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: var(--space-xl);
    gap: var(--space-md);
  }

  .overlay__close-button {
    display: flex;
    align-items: center;
    justify-content: center;
    width: var(--touch-target-enhanced);
    height: var(--touch-target-enhanced);
    min-width: var(--touch-target-enhanced);
    min-height: var(--touch-target-enhanced);
    border-radius: var(--radius-full);
    background-color: var(--bg-tertiary);
    color: var(--text-secondary);
    border: var(--border-width-thin) solid var(--border-secondary);
    cursor: pointer;
    flex-shrink: 0;
    transition:
      background-color var(--transition-normal),
      color var(--transition-normal),
      transform var(--transition-fast),
      border-color var(--transition-normal);

    // Performance optimization with global.css variables
    contain: layout style;
    will-change: transform, background-color;

    &:hover,
    &:focus {
      background-color: var(--interactive-primary);
      color: var(--text-primary);
      border-color: var(--border-focus);
      transform: scale(var(--animation-scale-hover-subtle));
      box-shadow: var(--shadow-md);
    }

    &:active {
      transform: scale(var(--scale-active));
      box-shadow: var(--shadow-sm);
    }
  }

  // ======================================
  // FEEDBACK STYLES - Enhanced responsive design with global.css variables
  // ======================================

  .feedback {
    // Remove default paragraph margins to use Paragraph component spacing
    // Paragraph component handles all responsive typography and spacing

    // Only handle state-specific styling (correct/incorrect feedback)
    border-radius: var(--radius-lg);
    padding: var(--space-lg);
    border: var(--border-width-thin) solid transparent;
    transition: all var(--transition-normal);
    // WCAG AAA 2.2 compliant feedback colors with enhanced borders
    &.correct {
      color: var(--text-success-aaa) !important;
      background-color: var(--bg-success-aaa) !important;
      border-color: var(--border-success) !important;
    }

    &.incorrect {
      color: var(--text-error-aaa) !important;
      background-color: var(--bg-error-aaa) !important;
      border-color: var(--border-error) !important;
    }
  }

  // ======================================
  // ALBUM INFO SECTION - Enhanced responsive design with global.css variables
  // ======================================

  .album-info {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: calc(var(--container-intrinsic-height-modal) * 0.4);

    // Performance optimization with global.css variables
    contain: layout;

    &__content {
      width: var(--width-full);
      max-width: var(--container-md);
      text-align: center;
      background: var(--bg-secondary);
      transition: all var(--transition-normal);
    }

    &__header {
      margin-bottom: var(--space-lg);
      padding-bottom: var(--space-md);
      border-bottom: var(--border-width-thin) solid var(--border-secondary);
    }

    &__details {
      margin-top: var(--space-lg);
    }
  }

  .fun-fact {
    margin: 0;
    font-size: var(--text-lg);
    line-height: var(--leading-relaxed);
    color: var(--text-secondary);
    max-width: var(--width-full);
    padding: var(--space-lg);
    background: var(--bg-tertiary);
    border-radius: var(--radius-lg);
    border: var(--border-width-thin) solid var(--border-secondary);
    transition: all var(--transition-normal);

    &:hover {
      background: var(--interactive-secondary);
      border-color: var(--border-focus);
      transform: translateY(var(--animation-y-offset-micro));
    }

    // Hide if empty
    &:empty {
      display: none;
    }
  }

  // ======================================
  // NEXT BUTTON - Enhanced responsive design with global.css variables
  // ======================================

  .next-button {
    display: block;
    margin: 0 auto;
    min-height: var(--touch-target-enhanced);
    min-width: calc(var(--touch-target-enhanced) * 4.5);
    border-radius: var(--radius-lg);
    background: var(--btn-primary-bg);
    color: var(--btn-primary-text);
    font-weight: var(--font-semibold);
    font-size: var(--text-base);
    border: var(--border-width-thin) solid var(--btn-primary-border);
    cursor: pointer;
    padding: var(--space-md) var(--space-xl);
    transition:
      background var(--transition-normal),
      transform var(--transition-fast),
      box-shadow var(--transition-normal),
      border-color var(--transition-normal);
    box-shadow: var(--shadow-md);

    &:hover,
    &:focus {
      background: var(--btn-primary-hover);
      border-color: var(--btn-primary-hover-border);
      transform: translateY(var(--animation-y-offset-small));
      box-shadow: var(--card-shadow-hover);
    }

    &:active {
      transform: translateY(0) scale(var(--scale-active));
      box-shadow: var(--shadow-sm);
    }

    &__content {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: var(--space-sm);
    }
  }

  // ======================================
  // ENHANCED ACCESSIBILITY & FOCUS STYLES with global.css variables
  // ======================================

  .overlay__content:focus,
  .overlay__close-button:focus-visible,
  .next-button:focus-visible,
  .album-info__content:focus-visible {
    outline: var(--focus-enhanced-outline-dark);
    outline-offset: var(--focus-ring-offset);
    box-shadow: var(--focus-enhanced-shadow);
    border-color: var(--border-focus);
  }

  // ======================================
  // CUSTOM SCROLLBAR STYLES - Using Root Variables
  // ======================================

  .overlay__content {
    scrollbar-width: var(--scrollbar-thin);
    scrollbar-color: var(--scrollbar-thumb-bg) var(--scrollbar-track-bg);

    &::-webkit-scrollbar {
      width: var(--scrollbar-thin);
      height: var(--scrollbar-thin);
    }

    &::-webkit-scrollbar-track {
      background: var(--scrollbar-track-bg);
      border-radius: var(--scrollbar-track-radius);
    }

    &::-webkit-scrollbar-thumb {
      background: var(--scrollbar-thumb-bg);
      border-radius: var(--scrollbar-thumb-radius);

      &:hover {
        background: var(--scrollbar-thumb-hover);
      }
    }
  }

  // ======================================
  // CONTAINER QUERIES FOR ENHANCED RESPONSIVE BEHAVIOR
  // ======================================

  .overlay {
    container-type: inline-size;
  }
</style>

<script type="module" is:inline>
  /**
   * Modern ES6+ FeedbackOverlay Event Handlers
   * Using arrow functions, const/let, template literals, and modern event handling
   */

  // Global state management
  let handlersInitialized = false;
  let escapeHandler = null;

  /**
   * Initialize the overlay with modern ES6+ features
   */
  const initializeOverlay = () => {
    if (handlersInitialized) {
      return;
    }

    setupDirectEventHandlers();
    handlersInitialized = true;
  };

  /**
   * Set up direct event handlers using modern ES6+ syntax
   */
  const setupDirectEventHandlers = () => {
    // Close button handler
    const closeButton = document.getElementById("close-overlay-button");
    if (closeButton) {
      closeButton.onclick = (e) => {
        e.preventDefault();
        e.stopPropagation();
        closeOverlayAndNextRound();
      };
    }

    // Backdrop handler
    const backdrop = document.getElementById("overlay-backdrop");
    if (backdrop) {
      backdrop.onclick = (e) => {
        e.preventDefault();
        e.stopPropagation();
        closeOverlayAndNextRound();
      };
    }

    // Next round button handler
    const nextButton = document.getElementById("next-round-button");
    if (nextButton) {
      nextButton.onclick = (e) => {
        e.preventDefault();
        e.stopPropagation();
        closeOverlayAndNextRound();
      };
    }

    // Remove existing escape handler if any
    if (escapeHandler) {
      document.removeEventListener("keydown", escapeHandler);
    }

    // Enhanced keyboard navigation handler with modern syntax
    escapeHandler = (e) => {
      const overlay = document.getElementById("overlay");
      if (!overlay?.classList.contains("hidden")) {
        return;
      }

      const keyHandlers = {
        Escape: () => {
          e.preventDefault();
          e.stopPropagation();
          closeOverlayAndNextRound();
        },
        Tab: () => {
          e.preventDefault();
          handleTabNavigation(e.shiftKey);
        },
        Enter: () => {
          if (document.activeElement?.tagName === "BUTTON") {
            return;
          }
          e.preventDefault();
          closeOverlayAndNextRound();
        },
        " ": () => {
          if (document.activeElement?.tagName === "BUTTON") {
            return;
          }
          e.preventDefault();
          closeOverlayAndNextRound();
        },
        ArrowUp: () => {
          e.preventDefault();
          navigateFocus(-1);
        },
        ArrowLeft: () => {
          e.preventDefault();
          navigateFocus(-1);
        },
        ArrowDown: () => {
          e.preventDefault();
          navigateFocus(1);
        },
        ArrowRight: () => {
          e.preventDefault();
          navigateFocus(1);
        },
      };

      const handler = keyHandlers[e.key];
      if (handler) {
        handler();
      }
    };

    document.addEventListener("keydown", escapeHandler);

    // Set up focus management when overlay becomes visible
    setupFocusManagement();
  };

  /**
   * Set up focus management for the overlay using modern syntax
   */
  const setupFocusManagement = () => {
    const observer = new MutationObserver((mutations) => {
      mutations.forEach(({ type, target, attributeName }) => {
        if (type === "attributes" && attributeName === "class") {
          const overlay = target;
          const isVisible = !overlay.classList.contains("hidden");

          if (isVisible) {
            // Scroll to top immediately when overlay opens
            window.scrollTo(0, 0);

            // Focus the close button when overlay opens
            setTimeout(() => {
              const closeButton = document.getElementById("close-overlay-button");
              closeButton?.focus();
            }, 100);
          }
        }
      });
    });

    const overlay = document.getElementById("overlay");
    if (overlay) {
      observer.observe(overlay, {
        attributes: true,
        attributeFilter: ["class"],
      });
    }
  };

  /**
   * Get all focusable elements in the overlay using modern array methods
   */
  const getFocusableElements = () => {
    const overlay = document.getElementById("overlay");
    if (!overlay) {
      return [];
    }

    const selectors = [
      "button:not([disabled])",
      "a[href]:not([disabled])",
      "[tabindex]:not([tabindex='-1']):not([disabled])",
    ].join(", ");

    return Array.from(overlay.querySelectorAll(selectors)).filter((el) => {
      const style = getComputedStyle(el);
      return style.display !== "none" && style.visibility !== "hidden";
    });
  };

  /**
   * Handle Tab navigation through focusable elements
   */
  const handleTabNavigation = (isShiftKey) => {
    const focusableElements = getFocusableElements();
    if (focusableElements.length === 0) {
      return;
    }

    const currentIndex = focusableElements.indexOf(document.activeElement);
    const nextIndex = isShiftKey
      ? currentIndex <= 0
        ? focusableElements.length - 1
        : currentIndex - 1
      : currentIndex >= focusableElements.length - 1
        ? 0
        : currentIndex + 1;

    focusableElements[nextIndex]?.focus();
  };

  /**
   * Navigate focus with arrow keys
   */
  const navigateFocus = (direction) => {
    const focusableElements = getFocusableElements();
    if (focusableElements.length === 0) {
      return;
    }

    const currentIndex = focusableElements.indexOf(document.activeElement);
    const nextIndex =
      direction > 0
        ? currentIndex >= focusableElements.length - 1
          ? 0
          : currentIndex + 1
        : currentIndex <= 0
          ? focusableElements.length - 1
          : currentIndex - 1;

    focusableElements[nextIndex]?.focus();
  };

  /**
   * Close overlay and trigger next round using modern syntax
   */
  const closeOverlayAndNextRound = () => {
    const overlay = document.getElementById("overlay");
    if (!overlay) {
      return;
    }

    // Scroll to top immediately when overlay closes
    window.scrollTo(0, 0);

    // Find and trigger the next round button that the game engine set up
    const nextRoundButton = document.getElementById("next-round-button");
    if (nextRoundButton?.onclick) {
      // Call the game engine's onclick handler directly
      nextRoundButton.onclick(new MouseEvent("click"));
    } else {
      // Fallback: Hide overlay and dispatch click event
      overlay.classList.add("hidden");
      nextRoundButton?.click();
    }
  };

  // Initialize when DOM is ready using modern syntax
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeOverlay);
  } else {
    initializeOverlay();
  }

  // Re-initialize on Astro page load
  document.addEventListener("astro:page-load", () => {
    handlersInitialized = false;
    initializeOverlay();
  });
</script>
