---
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import { Icon } from "astro-icon/components";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<div
  id="overlay"
  class="overlay hidden fixed inset-0 z-50 flex items-center justify-center p-6 bg-black/90 backdrop-blur-md"
  role="dialog"
  aria-labelledby="overlay-title"
  aria-modal="true"
  aria-live="polite"
>
  <div
    class="overlayContent w-full max-w-[768px] max-h-[90vh] p-6 md:p-8 bg-zinc-800 border border-zinc-700 rounded-xl shadow-xl overflow-y-auto overscroll-contain scrollbar-gutter-stable"
    role="document"
    tabindex="-1"
  >
    <h2
      id="overlay-title"
      class="title text-2xl font-bold text-zinc-50 text-center mb-6"
    >
      {t("game.feedback.resolution")}
    </h2>

    <p
      id="feedback"
      class="feedback my-6 p-4 rounded-lg text-lg font-semibold text-center"
      role="status"
      aria-live="assertive"
    >
    </p>

    <div
      class="mediaSection flex flex-col items-center gap-4 mb-6"
      aria-label={t("game.feedback.media.section")}
    >
      <img
        id="overlay-cover"
        class="albumCover aspect-square w-full max-w-[250px] h-auto rounded-lg object-cover shadow-md"
        src=""
        alt=""
        loading="eager"
        decoding="async"
      />
      <audio
        id="audio-preview"
        class="audioPlayer w-full max-w-[250px] mt-2"
        controls
        preload="metadata"
        aria-label={t("game.feedback.audio.preview")}
      >
        <source id="audio-preview-source" src="" type="audio/mpeg" />
        <source id="audio-preview-source-ogg" src="" type="audio/ogg" />
        <track kind="captions" src="" label={t("game.feedback.subtitles")} />
        <p>{t("game.feedback.audio.unsupported")}</p>
      </audio>
    </div>

    <div
      class="musicLinks flex flex-wrap justify-center gap-4 my-6"
      role="group"
      aria-label={t("game.feedback.streaming.links")}
    >
      <a
        id="spotify-link"
        class="musicButton inline-flex items-center justify-center min-w-[48px] min-h-[48px] p-3 bg-sky-500 hover:bg-sky-400 text-zinc-900 rounded-lg transition-colors sm:p-2"
        href="#"
        target="_blank"
        rel="noopener noreferrer"
        aria-label={t("game.feedback.listen.spotify")}
      >
        <Icon name="spotify" width={36} height={36} aria-hidden="true" />
        <span class="sr-only">Spotify</span>
      </a>
      <a
        id="deezer-link"
        class="musicButton inline-flex items-center justify-center min-w-[48px] min-h-[48px] p-3 bg-sky-500 hover:bg-sky-400 text-zinc-900 rounded-lg transition-colors sm:p-2"
        href="#"
        target="_blank"
        rel="noopener noreferrer"
        aria-label={t("game.feedback.listen.deezer")}
      >
        <Icon name="deezer" width={36} height={36} aria-hidden="true" />
        <span class="sr-only">Deezer</span>
      </a>
      <a
        id="apple-link"
        class="musicButton inline-flex items-center justify-center min-w-[48px] min-h-[48px] p-3 bg-sky-500 hover:bg-sky-400 text-zinc-900 rounded-lg transition-colors sm:p-2"
        href="#"
        target="_blank"
        rel="noopener noreferrer"
        aria-label={t("game.feedback.listen.apple")}
      >
        <Icon name="apple-music" width={36} height={36} aria-hidden="true" />
        <span class="sr-only">Apple Music</span>
      </a>
    </div>

    <div class="infoSection my-6 text-center space-y-2" role="contentinfo">
      <p id="overlay-artist" class="artist text-xl font-bold text-sky-400"></p>
      <p id="overlay-album" class="album text-zinc-50 mt-2"></p>
      <p id="overlay-year" class="year text-zinc-300 mt-2"></p>
      <p id="overlay-funfact" class="funFact text-zinc-300 mt-2"></p>
    </div>

    <div class="buttonWrapper flex justify-center mt-6">
      <button
        id="next-round-button"
        class="nextButton min-w-[48px] min-h-[48px] py-3 px-6 bg-sky-500 hover:bg-sky-400 text-zinc-900 font-semibold rounded-lg transition-colors"
        aria-label={t("game.feedback.next.round")}
      >
        {t("game.feedback.next.round")}
      </button>
    </div>
  </div>
</div>

<style>
  /* Kompatibilitätsklassen für JS-Funktionen */
  .overlay.hidden {
    pointer-events: none;
    visibility: hidden;
    opacity: 0;
  }

  .feedback.correct {
    color: #fff;
    background-color: rgb(5 150 105); /* emerald-600 */
  }

  .feedback.incorrect {
    color: #fff;
    background-color: rgb(220 38 38); /* red-600 */
  }

  .overlayContent:focus {
    outline: 2px solid rgb(56 189 248); /* sky-300 */
    outline-offset: 2px;
  }

  /* Zusätzliche Stile für Barrierefreiheit */
  @media (forced-colors: active) {
    .overlayContent {
      border: 2px solid CanvasText;
    }

    .musicButton,
    .nextButton {
      border: 2px solid ButtonText;
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .overlay {
      transition: none;
    }
  }
</style>

<script>
  const overlay = document.getElementById("overlay") as HTMLElement;
  const overlayContent = overlay.querySelector(
    ".overlayContent",
  ) as HTMLElement;

  // Beobachter für Klassenänderungen am Overlay
  const observer = new MutationObserver(() => {
    if (!overlay.classList.contains("hidden")) {
      overlayContent.scrollTop = 0;
      overlayContent.focus();
    }
  });

  observer.observe(overlay, { attributes: true, attributeFilter: ["class"] });

  // Tastatursteuerung im Overlay (Focus Trap)
  const focusableElements =
    'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])';

  document.addEventListener("keydown", (event) => {
    const overlay = document.getElementById("overlay");
    if (!overlay?.classList.contains("hidden")) {
      const content = overlay!.querySelector(".overlayContent");
      const focusable = Array.from(
        content?.querySelectorAll(focusableElements) || [],
      );
      const firstFocusable = focusable[0] as HTMLElement;
      const lastFocusable = focusable[focusable.length - 1] as HTMLElement;

      switch (event.key) {
        case "Escape":
          document.getElementById("next-round-button")?.click();
          break;
        case "Tab":
          if (event.shiftKey && document.activeElement === firstFocusable) {
            event.preventDefault();
            lastFocusable.focus();
          } else if (
            !event.shiftKey &&
            document.activeElement === lastFocusable
          ) {
            event.preventDefault();
            firstFocusable.focus();
          }
          break;
      }
    }
  });

  document.addEventListener("astro:before-swap", () => {
    observer.disconnect();
  });

  // Audio cleanup
  const audioPlayer = document.getElementById(
    "audio-preview",
  ) as HTMLAudioElement;
  document.addEventListener("astro:before-swap", () => {
    audioPlayer.pause();
    audioPlayer.src = "";
  });
</script>
