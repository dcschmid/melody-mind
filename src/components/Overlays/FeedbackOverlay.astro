---
/**
 * @component FeedbackOverlay
 * @description A modal overlay that displays feedback after each game round, showing
 * album information, media preview, and streaming links. This component is optimized for
 * WCAG AAA accessibility standards and high performance.
 *
 * Features:
 * - Keyboard navigation with focus trap
 * - Screen reader announcements
 * - High contrast mode support
 * - Optimized animations with reduced motion support
 * - Performance-optimized interactions
 * - Uses CSS variables from global.css for WCAG AAA 2.2 compliance
 */
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import { Icon } from "astro-icon/components";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<div
  id="overlay"
  class="overlay hidden"
  role="dialog"
  aria-labelledby="overlay-title"
  aria-describedby="feedback"
  aria-modal="true"
  tabindex="-1"
>
  <!-- Overlay backdrop for click-to-close functionality -->
  <div id="overlay-backdrop" class="overlay__backdrop" aria-hidden="true"></div>

  <div class="overlay__content" role="document" tabindex="-1">
    <div class="overlay__header">
      <h2 id="overlay-title" class="overlay__title">
        {t("game.feedback.resolution")}
      </h2>

      <!-- Close button for enhanced accessibility -->
      <button
        id="close-overlay-button"
        class="overlay__close-button"
        aria-label={t("general.close") || "Close"}
      >
        <Icon name="close" width={24} height={24} aria-hidden="true" />
      </button>
    </div>

    <!-- Status announcer for screen readers -->
    <div id="feedback-status-announcer" aria-live="assertive" aria-atomic="true" class="sr-only">
    </div>

    <!-- Keyboard shortcuts documentation for screen readers -->
    <div class="sr-only" id="keyboard-shortcuts">
      <h4>{t("general.keyboard.shortcuts")}</h4>
      <ul>
        <li>{t("general.keyboard.escape")}: {t("general.close")}</li>
        <li>{t("general.keyboard.space")}: {t("game.feedback.play.audio")}</li>
        <li>{t("general.keyboard.enter")}: {t("game.feedback.next.round")}</li>
        <li>{t("general.keyboard.tab")}: {t("general.navigate.elements")}</li>
      </ul>
    </div>

    <p id="feedback" class="feedback" role="status"></p>

    <div class="media-section" aria-label={t("game.feedback.media.section")}>
      <div class="media-section__image">
        <img
          id="overlay-cover"
          class="album-cover"
          src=""
          alt=""
          loading="lazy"
          decoding="async"
          width="300"
          height="300"
          style="aspect-ratio: 1;"
        />
      </div>

      <div class="media-section__info" role="contentinfo">
        <div>
          <p id="overlay-artist" class="artist-name"></p>
          <p id="overlay-album" class="album-name"></p>
          <p id="overlay-year" class="album-year"></p>
          <p id="overlay-funfact" class="fun-fact"></p>
        </div>

        <div class="audio-container">
          <label id="audio-label" for="audio-preview" class="audio-label">
            {t("game.feedback.audio.preview")}
          </label>
          <audio id="audio-preview" class="audio-player" controls aria-labelledby="audio-label">
            <track kind="captions" src="" label={t("game.feedback.subtitles")} />
            <p>
              {t("game.feedback.audio.unsupported")}
              <button type="button" class="audio-fallback-link">
                {t("game.feedback.audio.fallback")}
              </button>
            </p>
          </audio>
        </div>
      </div>
    </div>

    <h3 class="streaming-links__title">
      {t("game.feedback.streaming.links")}
    </h3>

    <div
      id="streaming-links"
      class="streaming-links"
      role="group"
      aria-label={t("game.feedback.streaming.links")}
    >
      <a
        id="spotify-link"
        class="music-button"
        href="javascript:void(0)"
        target="_blank"
        rel="noopener noreferrer"
        aria-label={t("game.feedback.listen.spotify")}
      >
        <Icon name="spotify" class="music-button__icon" width={24} height={24} aria-hidden="true" />
        <span>Spotify</span>
      </a>
      <a
        id="deezer-link"
        class="music-button"
        href="javascript:void(0)"
        target="_blank"
        rel="noopener noreferrer"
        aria-label={t("game.feedback.listen.deezer")}
      >
        <Icon name="deezer" class="music-button__icon" width={24} height={24} aria-hidden="true" />
        <span>Deezer</span>
      </a>
      <a
        id="apple-link"
        class="music-button"
        href="javascript:void(0)"
        target="_blank"
        rel="noopener noreferrer"
        aria-label={t("game.feedback.listen.apple")}
      >
        <Icon
          name="apple-music"
          class="music-button__icon"
          width={24}
          height={24}
          aria-hidden="true"
        />
        <span>Apple Music</span>
      </a>
    </div>
    <button id="next-round-button" class="next-button" aria-label={t("game.feedback.next.round")}>
      <span class="next-button__content">
        {t("game.feedback.next.round")}
        <Icon name="arrow-right" width={20} height={20} aria-hidden="true" />
      </span>
    </button>
  </div>
</div>

<style>
  /* ======================================
   * OVERLAY BASE STYLES - Using Global CSS Variables
   * ====================================== */

  .overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: var(--z-modal);
    display: flex;
    align-items: center;
    justify-content: center;
    padding: var(--space-md);
    background-color: var(--backdrop-overlay-dark);
    backdrop-filter: blur(var(--backdrop-blur));
    -webkit-backdrop-filter: blur(var(--backdrop-blur));
    transition:
      opacity var(--transition-normal),
      visibility var(--transition-normal);
  }

  .overlay.hidden {
    pointer-events: none;
    visibility: hidden;
    opacity: 0;
  }

  .overlay__backdrop {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  /* ======================================
   * OVERLAY CONTENT - Using Root Variables
   * ====================================== */

  .overlay__content {
    max-height: var(--modal-content-max-height);
    width: 100%;
    max-width: var(--container-lg); /* 48rem / 768px */
    overflow-y: auto;
    overscroll-behavior: contain;
    border-radius: var(--radius-xl);
    border: var(--border-width-thin) solid var(--border-primary);
    background-color: var(--card-bg);
    padding: var(--modal-padding);
    box-shadow: var(--card-shadow);
    scrollbar-gutter: stable;
  }

  /* ======================================
   * HEADER SECTION - Using Root Variables
   * ====================================== */

  .overlay__header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: var(--space-xl);
  }

  .overlay__title {
    font-size: var(--text-2xl);
    font-weight: var(--font-bold);
    letter-spacing: var(--letter-spacing-base);
    color: var(--text-primary);
    margin: 0;
  }

  .overlay__close-button {
    display: flex;
    align-items: center;
    justify-content: center;
    width: var(--min-touch-size);
    height: var(--min-touch-size);
    min-width: var(--min-touch-size);
    min-height: var(--min-touch-size);
    border-radius: var(--radius-full);
    background-color: var(--bg-tertiary);
    color: var(--text-secondary);
    border: none;
    cursor: pointer;
    transition:
      background-color var(--transition-normal),
      color var(--transition-normal);
  }

  .overlay__close-button:hover,
  .overlay__close-button:focus {
    background-color: var(--interactive-primary);
    color: var(--text-primary);
  }

  /* ======================================
   * FEEDBACK STYLES - Using Root Variables
   * ====================================== */

  .feedback {
    margin: var(--space-xl) 0;
    border-radius: var(--radius-lg);
    padding: var(--space-lg);
    text-align: center;
    font-size: var(--text-xl);
    line-height: var(--leading-relaxed);
    font-weight: var(--font-semibold);
  }

  /* WCAG AAA 2.2 compliant feedback colors */
  .feedback.correct {
    color: var(--text-success-aaa);
    background-color: var(--bg-success-aaa);
  }

  .feedback.incorrect {
    color: var(--text-error-aaa);
    background-color: var(--bg-error-aaa);
  }

  /* ======================================
   * MEDIA SECTION - Using Root Variables
   * ====================================== */

  .media-section {
    margin-bottom: var(--space-2xl);
    display: grid;
    align-items: start;
    gap: var(--space-xl);
  }

  .media-section__image {
    display: flex;
    justify-content: center;
  }

  .album-cover {
    aspect-ratio: 1;
    height: auto;
    width: 100%;
    max-width: var(--container-sm); /* 18.75rem / 300px */
    border-radius: var(--radius-lg);
    object-fit: cover;
    box-shadow: var(--shadow-lg);
    /* Optimized transitions for GPU acceleration */
    transition:
      transform var(--transition-normal),
      box-shadow var(--transition-normal);
    /* Use transform3d for GPU layer promotion */
    transform: translateZ(0);
    /* Optimize will-change only during interaction */
    will-change: auto;
  }

  .media-section__info {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    gap: var(--space-md);
    text-align: left;
  }

  .artist-name {
    margin-bottom: var(--space-sm);
    font-size: var(--text-2xl);
    font-weight: var(--font-bold);
    color: var(--interactive-primary);
  }

  .album-name {
    margin-bottom: var(--space-xs);
    font-size: var(--text-xl);
    color: var(--text-primary);
  }

  .album-year {
    font-size: var(--text-lg);
    color: var(--text-secondary);
  }

  .fun-fact {
    margin-top: var(--space-md);
    font-size: var(--text-lg);
    line-height: var(--leading-relaxed);
    color: var(--text-secondary);
    max-width: var(--content-readable-width);
  }

  /* ======================================
   * AUDIO SECTION - Using Root Variables
   * ====================================== */

  .audio-label {
    display: block;
    margin-bottom: var(--space-xs);
    font-size: var(--text-sm);
    color: var(--text-tertiary);
  }

  .audio-player {
    margin-top: var(--space-sm);
    width: 100%;
    background-color: var(--form-bg);
    border-radius: var(--radius-md);
  }

  .audio-fallback-link {
    display: inline-block;
    margin-left: var(--space-sm);
    color: var(--interactive-primary);
    text-decoration: underline;
    text-decoration-color: var(--interactive-primary);
    text-underline-offset: var(--text-underline-offset);
    transition: color var(--transition-normal);
  }

  .audio-fallback-link:hover,
  .audio-fallback-link:focus {
    color: var(--interactive-primary-hover);
    text-decoration-color: var(--interactive-primary-hover);
  }

  .audio-fallback-link:focus-visible {
    outline: var(--focus-enhanced-outline-dark);
    outline-offset: var(--focus-ring-offset);
  }

  /* ======================================
   * STREAMING LINKS SECTION - Using Root Variables
   * ====================================== */

  .streaming-links__title {
    margin-bottom: var(--space-md);
    text-align: center;
    font-size: var(--text-xl);
    font-weight: var(--font-semibold);
    color: var(--text-primary);
  }

  .streaming-links {
    margin: var(--space-xl) 0;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: var(--space-md);
  }

  .music-button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    min-height: var(--min-touch-size);
    min-width: calc(var(--min-touch-size) * 3.6); /* 10rem / 160px optimized */
    border-radius: var(--radius-lg);
    background: var(--btn-primary-bg);
    color: var(--btn-primary-text);
    font-weight: var(--font-semibold);
    text-decoration: none;
    padding: var(--space-lg);
    transition:
      background var(--transition-normal),
      transform var(--transition-fast);
  }

  .music-button:hover,
  .music-button:focus {
    background: var(--btn-primary-hover);
    transform: translateY(var(--animation-y-offset-small));
  }

  .music-button__icon {
    margin-right: var(--space-md);
  }

  /* ======================================
   * NEXT BUTTON - Using Root Variables
   * ====================================== */

  .next-button {
    display: block;
    margin: 0 auto;
    min-height: var(--min-touch-size);
    min-width: calc(var(--min-touch-size) * 4.5); /* 12.5rem / 200px optimized */
    border-radius: var(--radius-lg);
    background: var(--btn-primary-bg);
    color: var(--btn-primary-text);
    font-weight: var(--font-semibold);
    border: none;
    cursor: pointer;
    padding: var(--space-md) var(--space-xl);
    transition:
      background var(--transition-normal),
      transform var(--transition-fast);
  }

  .next-button:hover,
  .next-button:focus {
    background: var(--btn-primary-hover);
    transform: translateY(var(--animation-y-offset-small));
  }

  .next-button__content {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-sm);
  }

  /* ======================================
   * RESPONSIVE DESIGN - Using Root Variables
   * ====================================== */

  @media (min-width: 48em) {
    .overlay__content {
      padding: var(--space-2xl);
    }

    .overlay__title {
      font-size: var(--text-3xl);
    }

    .media-section {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  /* ======================================
   * ACCESSIBILITY & FOCUS STYLES - Using Root Variables
   * ====================================== */

  .overlay__content:focus,
  .overlay__close-button:focus-visible,
  .music-button:focus-visible,
  .next-button:focus-visible,
  .audio-player:focus-visible {
    outline: var(--focus-enhanced-outline-dark);
    outline-offset: var(--focus-ring-offset);
    box-shadow: var(--focus-enhanced-shadow);
  }

  /* ======================================
   * ANIMATIONS & MOTION - Performance Optimized with Root Variables
   * ====================================== */

  @media (prefers-reduced-motion: no-preference) {
    .album-cover:hover {
      /* Enable will-change only during interaction */
      will-change: transform, box-shadow;
      transform: scale(var(--scale-focus)) translateZ(0);
      box-shadow: var(--shadow-xl);
    }

    .album-cover:not(:hover) {
      /* Clean up will-change after interaction */
      will-change: auto;
    }

    .overlay:not(.hidden) .overlay__content {
      animation: fade-in var(--transition-normal) cubic-bezier(0.25, 0.1, 0.25, 1) forwards;
    }

    @keyframes fade-in {
      from {
        opacity: 0;
        /* Use transform3d for GPU acceleration */
        transform: translateY(var(--animation-y-offset)) scale(var(--animation-scale-start))
          translateZ(0);
      }
      to {
        opacity: 1;
        transform: translateY(0) scale(var(--animation-scale-end)) translateZ(0);
      }
    }
  }

  /* ======================================
   * REDUCED MOTION SUPPORT
   * ====================================== */

  @media (prefers-reduced-motion: reduce) {
    .overlay,
    .overlay__content,
    .album-cover,
    .overlay__close-button,
    .music-button,
    .next-button {
      animation-duration: 0.001ms !important;
      transition-duration: 0.001ms !important;
      animation-iteration-count: 1 !important;
    }
  }

  /* ======================================
   * HIGH CONTRAST MODE SUPPORT
   * ====================================== */

  @media (forced-colors: active) {
    .overlay__content {
      border: var(--border-width-enhanced) solid CanvasText;
      background-color: Canvas;
    }

    .music-button,
    .next-button,
    .overlay__close-button {
      border: var(--border-width-thick) solid ButtonText;
      background-color: ButtonFace;
      color: ButtonText;
      forced-color-adjust: none;
    }

    .music-button:focus-visible,
    .next-button:focus-visible,
    .overlay__close-button:focus-visible {
      outline: var(--border-width-enhanced) solid Highlight;
      outline-offset: var(--focus-ring-offset);
    }

    .feedback.correct,
    .feedback.incorrect {
      border: var(--border-width-thick) solid CanvasText;
      background-color: Canvas;
      color: CanvasText;
    }

    .overlay__backdrop {
      background-color: Canvas;
      opacity: 0.9;
    }
  }

  /* ======================================
   * CUSTOM SCROLLBAR STYLES - Using Root Variables
   * ====================================== */

  .overlay__content {
    scrollbar-width: var(--scrollbar-thin);
    scrollbar-color: var(--scrollbar-thumb-bg) var(--scrollbar-track-bg);
  }

  .overlay__content::-webkit-scrollbar {
    width: var(--scrollbar-thin);
    height: var(--scrollbar-thin);
  }

  .overlay__content::-webkit-scrollbar-track {
    background: var(--scrollbar-track-bg);
    border-radius: var(--scrollbar-track-radius);
  }

  .overlay__content::-webkit-scrollbar-thumb {
    background: var(--scrollbar-thumb-bg);
    border-radius: var(--scrollbar-thumb-radius);
  }

  .overlay__content::-webkit-scrollbar-thumb:hover {
    background: var(--scrollbar-thumb-hover);
  }

  /* ======================================
   * ENHANCED TEXT SPACING SUPPORT (WCAG 2.2) - Using Root Variables
   * ====================================== */

  /* Enhanced text spacing class for WCAG 2.2 compliance */
  .enhanced-text-spacing .overlay__content * {
    letter-spacing: var(--text-spacing-letter-2x) !important;
    word-spacing: var(--text-spacing-word-enhanced) !important;
    line-height: var(--text-spacing-line-1-5x) !important;
  }

  .enhanced-text-spacing .overlay__content p,
  .enhanced-text-spacing .overlay__content .feedback {
    margin-bottom: var(--text-spacing-paragraph-2x) !important;
  }

  .enhanced-text-spacing .overlay__content .streaming-links {
    gap: calc(var(--space-md) * 1.5) !important;
  }

  /* Maintain functionality with enhanced text spacing */
  .enhanced-text-spacing .overlay__content .music-button,
  .enhanced-text-spacing .overlay__content .next-button {
    padding: calc(var(--space-lg) * 1.2) calc(var(--space-xl) * 1.2);
  }

  /* ======================================
   * PRINT STYLES - Using Root Variables
   * ====================================== */

  @media print {
    .overlay__content {
      border: var(--border-width-thin) solid var(--print-border);
      box-shadow: none;
      max-height: none !important;
      background: var(--print-bg);
      color: var(--print-text);
    }

    .music-button,
    .next-button,
    .overlay__close-button {
      border: var(--border-width-thin) solid var(--print-border);
      background: var(--print-bg) !important;
      color: var(--print-text) !important;
    }

    .audio-player {
      display: none;
    }
  }
</style>

<script type="module" is:inline>
  /**
   * FeedbackOverlay with Working Focus Trap
   * Implements robust keyboard navigation and accessibility features.
   * Uses existing utility functions for code deduplication.
   */

  // Translation strings for client-side use
  const translations = {
    audioFailed: `${t("game.feedback.audio.failed")}`,
    audioPaused: `${t("game.feedback.audio.paused")}`,
    nextRoundStarting: `${t("game.feedback.next.starting")}`,
  };

  // Focus trap state management
  let focusableElements = [];
  let isTrappingFocus = false;
  let currentFocusIndex = 0;

  /**
   * Initialize feedback overlay functionality
   * Try to reuse existing utilities to avoid code duplication
   */
  async function initializeOverlay() {
    try {
      // Try to import utility if available for code reuse
      const { initializeFeedbackOverlayOptimized } = await import(
        "/src/utils/overlays/feedbackOverlay.js"
      );
      initializeFeedbackOverlayOptimized();
    } catch (error) {
      console.warn("Using fallback overlay initialization:", error?.message || "Unknown error");
      setupBasicOverlay();
    }
  }

  /**
   * Set up basic overlay functionality
   * Reuses established patterns from other overlays
   */
  function setupBasicOverlay() {
    const overlay = document.getElementById("overlay");
    const closeButton = document.getElementById("close-overlay-button");
    const backdrop = document.getElementById("overlay-backdrop");

    // Event listeners - consistent with other overlay components
    if (closeButton) {
      closeButton.addEventListener("click", closeOverlay);
    }
    if (backdrop) {
      backdrop.addEventListener("click", closeOverlay);
    }

    // Observe overlay visibility changes - reused pattern
    if (overlay) {
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (mutation.type === "attributes" && mutation.attributeName === "class") {
            const isVisible = !overlay.classList.contains("hidden");

            if (isVisible && !isTrappingFocus) {
              activateFocusTrap();
            } else if (!isVisible && isTrappingFocus) {
              deactivateFocusTrap();
            }
          }
        });
      });

      observer.observe(overlay, {
        attributes: true,
        attributeFilter: ["class"],
      });
    }
  }

  /**
   * Get all focusable elements in the overlay
   * Reuses standard focusable element selectors
   */
  function getFocusableElements() {
    const overlay = document.getElementById("overlay");
    if (!overlay) {
      return [];
    }

    // Standard focusable selectors - consistent across components
    const selectors = [
      "button:not([disabled])",
      "input:not([disabled])",
      "select:not([disabled])",
      "textarea:not([disabled])",
      "audio[controls]",
      "video[controls]",
      '[tabindex]:not([tabindex="-1"])',
      "a[href]",
    ].join(", ");

    return Array.from(overlay.querySelectorAll(selectors)).filter((el) => {
      const style = getComputedStyle(el);
      return style.display !== "none" && style.visibility !== "hidden";
    });
  }

  /**
   * Activate focus trap - consistent with other modals
   */
  function activateFocusTrap() {
    if (isTrappingFocus) {
      return;
    }

    focusableElements = getFocusableElements();
    isTrappingFocus = true;
    currentFocusIndex = 0;

    // Focus first element - prioritize close button for accessibility
    const firstElement = document.getElementById("close-overlay-button") || focusableElements[0];
    if (firstElement) {
      setTimeout(() => {
        firstElement.focus();
        announceToScreenReader(
          "Feedback overlay opened. Use Escape to close, Space for audio, Enter for next round."
        );
      }, 100);
    }

    // Add keyboard listener
    document.addEventListener("keydown", handleKeyboardNavigation);
  }

  /**
   * Deactivate focus trap - consistent cleanup pattern
   */
  function deactivateFocusTrap() {
    if (!isTrappingFocus) {
      return;
    }

    isTrappingFocus = false;
    focusableElements = [];
    currentFocusIndex = 0;

    document.removeEventListener("keydown", handleKeyboardNavigation);
  }

  /**
   * Handle keyboard navigation - enhanced version with consistent patterns
   */
  function handleKeyboardNavigation(event) {
    if (!isTrappingFocus) {
      return;
    }

    switch (event.key) {
      case "Escape": {
        event.preventDefault();
        announceToScreenReader("Closing overlay");
        closeOverlay();
        break;
      }

      case "Tab": {
        event.preventDefault();
        if (event.shiftKey) {
          focusPrevious();
        } else {
          focusNext();
        }
        break;
      }

      case " ": {
        event.preventDefault();
        handleAudioToggle();
        break;
      }

      case "Enter": {
        const focused = document.activeElement;
        if (focused && focused.tagName !== "BUTTON") {
          event.preventDefault();
          handleNextRound();
        }
        break;
      }

      case "ArrowDown":
      case "ArrowRight": {
        event.preventDefault();
        focusNext();
        break;
      }

      case "ArrowUp":
      case "ArrowLeft": {
        event.preventDefault();
        focusPrevious();
        break;
      }
    }
  }

  /**
   * Focus next element - optimized navigation
   */
  function focusNext() {
    if (focusableElements.length === 0) {
      return;
    }
    currentFocusIndex = (currentFocusIndex + 1) % focusableElements.length;
    focusableElements[currentFocusIndex].focus();
  }

  /**
   * Focus previous element - optimized navigation
   */
  function focusPrevious() {
    if (focusableElements.length === 0) {
      return;
    }
    currentFocusIndex =
      currentFocusIndex === 0 ? focusableElements.length - 1 : currentFocusIndex - 1;
    focusableElements[currentFocusIndex].focus();
  }

  /**
   * Handle audio playback toggle - enhanced with better feedback
   */
  function handleAudioToggle() {
    const audio = document.getElementById("audio-preview");
    if (!audio) {
      return;
    }

    if (audio.paused) {
      audio
        .play()
        .then(() => announceToScreenReader("Audio playing"))
        .catch(() => announceToScreenReader(translations.audioFailed));
    } else {
      audio.pause();
      announceToScreenReader(translations.audioPaused);
    }
  }

  /**
   * Handle next round action - consistent with other game components
   */
  function handleNextRound() {
    const nextButton = document.getElementById("next-round-button");
    if (nextButton && !nextButton.disabled) {
      announceToScreenReader(translations.nextRoundStarting);
      nextButton.click();
    }
  }

  /**
   * Close the overlay - consistent pattern
   */
  function closeOverlay() {
    const overlay = document.getElementById("overlay");
    if (overlay) {
      overlay.classList.add("hidden");
      deactivateFocusTrap();
    }
  }

  /**
   * Announce message to screen readers - reused utility pattern
   */
  function announceToScreenReader(message) {
    const announcer = document.getElementById("feedback-status-announcer");
    if (announcer) {
      announcer.textContent = message;
      setTimeout(() => {
        announcer.textContent = "";
      }, 3000);
    }
  }

  // Initialize when DOM is ready - consistent initialization pattern
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeOverlay, { once: true });
  } else {
    initializeOverlay();
  }
</script>
