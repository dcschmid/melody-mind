---
import { Icon } from "astro-icon/components";
---

<div id="overlay" class="overlay hidden">
  <div class="overlay-content">
    <p id="feedback" class="feedback"></p>

    <!-- Dynamische Anzeige: Cover oder Audio Player -->
    <div class="media-section">
      <img id="overlay-cover" src="" alt="Album Cover" class="albumCover" />
      <audio id="audio-preview" class="audioPlayer" controls>
        <source id="audio-preview-source" src="" type="audio/mpeg" />
        Your browser does not support the audio element.
      </audio>
    </div>

    <div class="music-links">
      <a id="spotify-link" class="music-button" href="#" target="_blank">
        <Icon name="spotify" width={36} height={36} />
      </a>
      <a id="deezer-link" class="music-button" href="#" target="_blank">
        <Icon name="deezer" width={36} height={36} />
      </a>
    </div>

    <p id="overlay-artist" class="overlay-artist">Artist Name</p>
    <p id="overlay-album" class="overlay-album">Album Name</p>
    <p id="overlay-year" class="overlay-year">Album Year</p>

    <p id="overlay-funfact" class="fun-fact">Fun Fact</p>

    <div class="centerButton">
      <button id="next-round-button" class="button">Nächste Runde</button>
    </div>
  </div>
</div>

<style lang="scss">
  .overlay {
    position: fixed;
    z-index: 1000;
    inset: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: var(--padding-large);
    background: rgba(0, 0, 0, 0.9);
    backdrop-filter: blur(12px);
    transition: opacity var(--transition-speed) ease-in-out;
  }

  .overlay.hidden {
    opacity: 0;
    visibility: hidden;
  }

  .overlay-content {
    width: 100%;
    max-width: 768px;
    padding: var(--padding-large);
    max-height: 95vh;
    overflow-y: auto;
    text-align: center;
    background-color: var(--background-color);
    border-radius: var(--border-radius);
    box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.3);
    color: var(--text-color);
    transition: transform var(--transition-speed) ease-in-out;
    transform: scale(0.98);

    .feedback {
      margin: 1rem 0;
      padding: 1.5rem 2rem;
      border-radius: var(--border-radius);
      font-size: 1.25rem;
      font-weight: 600;
      text-align: center;
      opacity: 0;
      transition:
        opacity 0.4s ease,
        transform 0.4s ease;
    }

    .feedback.show {
      opacity: 1;
      transform: scale(1);
    }

    .feedback.correct {
      background-color: #4caf50;
      color: #fff;
      box-shadow: 0 0 10px rgba(0, 255, 0, 0.6);
      border: 2px solid #388e3c;
      animation: correctAnimation 1s ease;
    }

    .feedback.incorrect {
      background-color: #f44336;
      color: #fff;
      box-shadow: 0 0 10px rgba(255, 0, 0, 0.6);
      border: 2px solid #d32f2f;
      animation: incorrectAnimation 1s ease;
    }

    @keyframes correctAnimation {
      0% {
        transform: scale(0.8);
      }
      100% {
        transform: scale(1);
      }
    }

    @keyframes incorrectAnimation {
      0% {
        transform: scale(0.8);
      }
      100% {
        transform: scale(1);
      }
    }

    /* Optional glow effect */
    .feedback.correct {
      box-shadow: 0 0 20px rgba(0, 255, 0, 0.5);
    }

    .feedback.incorrect {
      box-shadow: 0 0 20px rgba(255, 0, 0, 0.5);
    }

    .media-section {
      display: flex;
      flex-direction: column;
      align-items: center;
      margin-bottom: var(--padding-medium);
    }

    .albumCover {
      max-width: 250px;
      width: 100%;
      height: auto;
      margin-bottom: var(--padding-small);
      border-radius: var(--border-radius);
      box-shadow: var(--box-shadow);
      transition:
        transform var(--transition-speed),
        box-shadow var(--transition-speed);
    }

    .audioPlayer {
      width: 100%;
      max-width: 250px;
      margin-top: var(--padding-small);
      border: none;
      box-shadow: var(--box-shadow);
    }

    .audioPlayer.hidden {
      display: none;
    }

    .music-links {
      display: flex;
      justify-content: center;
      gap: var(--padding-small);
      margin-bottom: var(--padding-medium);
    }

    .music-button {
      display: inline-block;
      padding: var(--padding-small);
      background-color: var(--highlight-color);
      color: var(--text-color);
      border-radius: var(--border-radius);
      text-decoration: none;
      font-weight: 600;
      box-shadow: var(--box-shadow);
      transition:
        background-color var(--transition-speed),
        transform 0.2s;
    }

    .music-button:hover {
      background-color: var(--button-hover-color);
      transform: scale(1.05);
    }

    .overlay-artist,
    .overlay-album,
    .overlay-year {
      font-size: 1.25rem;
      color: var(--text-color);
      margin: var(--padding-small) 0;
    }

    .overlay-artist {
      font-weight: bold;
      font-size: 1.5rem;
      color: var(--highlight-color);
    }

    .overlay-album {
      font-weight: 600;
    }

    .overlay-year {
      font-size: 1.1rem;
      font-style: italic;
      color: var(--text-color);
    }

    .fun-fact {
      font-size: 1.125rem;
      color: var(--text-color);
      margin-top: var(--padding-medium);
      opacity: 0.9;
    }

    .centerButton .button {
      padding: var(--padding-small) var(--padding-medium);
      font-size: var(--button-font-size);
      background-color: var(--highlight-color);
      color: var(--text-color);
      border: none;
      border-radius: var(--border-radius);
      cursor: pointer;
      transition:
        background-color var(--transition-speed),
        transform 0.2s;
      box-shadow: var(--box-shadow);
    }

    .centerButton .button:hover {
      background-color: var(--button-hover-color);
      transform: scale(1.05);
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const overlay = document.getElementById("overlay") as HTMLDivElement;
    const overlayContent = document.querySelector(
      ".overlay-content",
    ) as HTMLDivElement;

    // Funktion um sicherzustellen, dass der Overlay-Inhalt nach dem Öffnen gescrollt wird
    function scrollToTop() {
      if (overlayContent) {
        setTimeout(() => {
          overlayContent.scrollTop = 0; // Scrollt den Inhalt nach dem Rendering auf den Anfang
        }, 100); // Geringe Verzögerung, um sicherzustellen, dass das Overlay gerendert ist
      }
    }

    // Überwache das Overlay und scrolle den Inhalt nach oben, wenn es sichtbar wird
    const observer = new MutationObserver((mutations) => {
      mutations.forEach(() => {
        if (!overlay.classList.contains("hidden")) {
          scrollToTop(); // Scrollt nach oben, wenn das Overlay sichtbar ist
        }
      });
    });

    // Beobachte Änderungen an der Sichtbarkeit des Overlays
    observer.observe(overlay, {
      attributes: true,
      attributeFilter: ["class"],
    });

    // Optional: Scrollen mit den Pfeiltasten
    document.addEventListener("keydown", (event) => {
      if (!overlay.classList.contains("hidden")) {
        if (event.key === "ArrowDown") {
          overlayContent.scrollBy({ top: 100, behavior: "smooth" });
        } else if (event.key === "ArrowUp") {
          overlayContent.scrollBy({ top: -100, behavior: "smooth" });
        }
      }
    });
  });
</script>
