---
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import ShareOverlay from "./ShareOverlay.astro";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

interface Props {
  title?: string;
  motivationText?: string;
  id: string;
  "data-score"?: string;
  "data-category"?: string;
  "data-difficulty"?: string;
}

const {
  title = t("game.end.title"),
  motivationText = t("game.end.motivation"),
  id,
  "data-score": initialScore = "0",
  "data-category": category = "",
  "data-difficulty": difficulty = "",
} = Astro.props;
---

<div
  id={id}
  class="popup hidden"
  role="dialog"
  aria-labelledby="popup-title"
  aria-modal="true"
  data-score={initialScore}
  data-category={category}
  data-difficulty={difficulty}
>
  <div class="popupContent">
    <h2 id="popup-title" class="title">{title}</h2>
    <p class="motivationText">{motivationText}</p>

    <div class="scoreSection">
      <span class="scoreLabel">{t("game.end.score")}</span>
      <span id="popup-score" class="scoreValue">0</span>
    </div>

    <ShareOverlay />

    <div class="buttonWrapper">
      <button
        id="restart-button"
        class="restartButton"
        aria-label={t("game.end.newgame")}
      >
        {t("game.end.newgame")}
      </button>
    </div>
  </div>
</div>

<script>
  import { shareScore } from "../../utils/share/shareUtils";

  // Event-Listener fÃ¼r Share-Buttons
  document.querySelectorAll("[data-share]").forEach((button) => {
    button.addEventListener("click", (e) => {
      const platform = (e.currentTarget as HTMLElement).dataset.share;
      const popup = document.querySelector("#endgame-popup");

      if (platform && popup) {
        const score = parseInt(popup.getAttribute("data-score") || "0");
        const category = popup.getAttribute("data-category") || "";
        const difficulty = popup.getAttribute("data-difficulty") || "";

        shareScore(platform, {
          score,
          category,
          difficulty,
        });
      }
    });
  });
</script>

<style lang="scss">
  .popup {
    position: fixed;
    z-index: var(--layer-above);
    inset: 0;

    display: flex;
    align-items: center;
    justify-content: center;

    padding: var(--padding-medium);

    background-color: rgb(31 14 22 / 90%);
    backdrop-filter: blur(8px);

    &.hidden {
      pointer-events: none;
      will-change: opacity, visibility;
      visibility: hidden;
      opacity: 0;
    }

    @media (prefers-reduced-motion: no-preference) {
      transition: opacity var(--transition-speed) ease-in-out;
    }
  }

  .popupContent {
    width: 100%;
    max-width: min(400px, 90vw);
    padding: var(--padding-large);

    text-align: center;

    background-color: var(--secondary-color);
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);

    &:focus {
      outline: var(--focus-outline-width) solid var(--focus-outline-color);
      outline-offset: var(--focus-outline-offset);
    }

    @media (prefers-reduced-motion: no-preference) {
      will-change: transform, opacity;
      animation: pop-in var(--transition-speed) ease-out;
    }

    @media (width <= 768px) {
      padding: var(--padding-medium);
    }
  }

  @keyframes pop-in {
    from {
      transform: scale(0.95);
      opacity: 0;
    }

    to {
      transform: scale(1);
      opacity: 1;
    }
  }

  .title {
    margin-bottom: var(--padding-medium);

    font-family: var(--font-family);
    font-size: var(--header-font-size);
    font-weight: 700;
    line-height: var(--line-height-body);
    color: var(--highlight-color);
  }

  .motivationText {
    margin-bottom: var(--padding-medium);

    font-family: var(--font-family);
    font-size: var(--body-font-size);
    font-style: italic;
    line-height: var(--line-height-body);
    color: var(--text-color);
  }

  .scoreSection {
    margin: var(--padding-medium) 0;
  }

  .scoreLabel {
    margin-right: var(--padding-small);
    font-family: var(--font-family);
    font-size: var(--body-font-size);
    color: var(--text-color);
  }

  .scoreValue {
    font-family: var(--font-family);
    font-size: calc(var(--body-font-size) * 1.25);
    font-weight: 700;
    color: var(--highlight-color);
  }

  .buttonWrapper {
    margin-top: var(--padding-medium);
  }

  .restartButton {
    cursor: pointer;

    min-width: var(--min-touch-target);
    min-height: var(--min-touch-target);
    padding: var(--padding-medium) var(--padding-large);

    font-family: var(--font-family);
    font-size: var(--button-font-size);
    font-weight: 600;
    color: var(--button-text-color);

    background-color: var(--highlight-color);
    border: none;
    border-radius: var(--border-radius);

    &:hover {
      background-color: var(--button-hover-color);
    }

    &:focus-visible {
      outline: var(--focus-outline-width) solid var(--focus-outline-color);
      outline-offset: var(--focus-outline-offset);
    }

    @media (prefers-reduced-motion: no-preference) {
      transition: background-color var(--transition-speed) ease;
    }
  }

  // High Contrast Mode Support
  @media (forced-colors: active) {
    .popupContent {
      border: 2px solid CanvasText;
    }

    .restartButton {
      border: 2px solid ButtonText;
    }
  }

  // Print Styles
  @media print {
    .popup {
      position: static;
      padding: 0;
      background: none;
    }

    .popupContent {
      border: 1px solid #000;
      box-shadow: none;
    }

    .restartButton {
      display: none;
    }
  }
</style>
