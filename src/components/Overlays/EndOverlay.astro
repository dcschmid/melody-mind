---
/**
 * EndOverlay Component
 *
 * A modal overlay that displays end-game results with score visualization, motivational text,
 * and achievement feedback. Implements WCAG AAA accessibility standards and optimized performance.
 */
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import { Icon } from "astro-icon/components";
import ShareOverlay from "./ShareOverlay.astro";
import Headline from "@components/Headline.astro";
import Paragraph from "@components/Paragraph.astro";

const lang = String(getLangFromUrl(Astro.url));
const t = useTranslations(lang);

interface Props {
  title?: string;
  id: string;
  "data-score"?: string;
  "data-category"?: string;
  "data-categoryName"?: string;
  "data-difficulty"?: string;
  "data-mode"?: string;
}

const {
  title = t("game.end.title"),
  id,
  "data-score": initialScore = "0",
  "data-category": category = "",
  "data-categoryName": categoryName = "",
  "data-difficulty": difficulty = "",
  "data-mode": gameMode = "normal",
} = Astro.props;

// Construct the restart URL based on game data
const constructRestartUrl = () => {
  if (!category || !difficulty) {
    return `/${lang}/gamehome`; // Fallback to game home if data is missing
  }

  const baseUrl = `/${lang}`;
  const modePrefix = gameMode === "chronology" ? "chronology-" : "game-";

  return `${baseUrl}/${modePrefix}${category}/${difficulty}`;
};

const restartUrl = constructRestartUrl();

// Prepare translations for client-side access
const clientTranslations = {
  "game.end.defaultMotivation": t("game.end.defaultMotivation"),
  "game.end.announcement.gameOver": t("game.end.announcement.gameOver", {
    score: 0,
    level: "level",
  }),
  "game.end.level.genius": t("game.end.level.genius"),
  "game.end.level.pro": t("game.end.level.pro"),
  "game.end.level.enthusiast": t("game.end.level.enthusiast"),
  "game.end.level.lover": t("game.end.level.lover"),
  "game.end.level.explorer": t("game.end.level.explorer"),
  "game.end.motivation.genius": t("game.end.motivation.genius"),
  "game.end.motivation.pro": t("game.end.motivation.pro"),
  "game.end.motivation.enthusiast": t("game.end.motivation.enthusiast"),
  "game.end.motivation.lover": t("game.end.motivation.lover"),
  "game.end.motivation.explorer": t("game.end.motivation.explorer"),
  // Add fallback for simplified levels too
  "game.end.motivation.excellent": t("game.end.motivation.genius"),
  "game.end.motivation.good": t("game.end.motivation.pro"),
  "game.end.motivation.average": t("game.end.motivation.enthusiast"),
  "game.end.motivation.beginner": t("game.end.motivation.explorer"),
  "game.end.guest.title": t("game.end.guest.title"),
  "game.end.guest.description": t("game.end.guest.description"),
  "game.end.guest.alternative": t("game.end.guest.alternative"),
};
---

<div
  {id}
  class="popup fixed top-0 right-0 bottom-0 left-0 z-[var(--z-modal)] hidden items-center justify-center bg-[var(--backdrop-overlay-dark)] p-6 transition-opacity duration-300"
  role="dialog"
  aria-labelledby="end-overlay-title"
  aria-describedby="popup-description"
  aria-modal="true"
  data-score={initialScore}
  data-category={category}
  data-categoryName={categoryName}
  data-difficulty={difficulty}
  data-mode={gameMode}
  data-translations={JSON.stringify(clientTranslations)}
>
  <!-- Overlay backdrop for click-to-close functionality -->
  <div
    id="overlay-backdrop"
    class="absolute top-0 right-0 bottom-0 left-0 z-[var(--z-backdrop)]"
    aria-hidden="true"
  >
  </div>

  <div
    class="relative z-50 max-h-[90vh] w-full max-w-5xl overflow-y-auto rounded-3xl border-2 border-slate-600/50 bg-gradient-to-br from-slate-800 to-slate-900 p-8 shadow-2xl backdrop-blur-sm transition-all duration-300"
    tabindex="-1"
    role="document"
  >
    <!-- Achievement badge with trophy icon -->
    <div
      class="mx-auto mb-8 flex h-20 w-20 items-center justify-center rounded-full border-4 border-yellow-300 bg-gradient-to-br from-yellow-400 to-yellow-600 text-black shadow-2xl"
      role="img"
      aria-label={t("game.end.achievementBadge")}
    >
      <Icon name="trophy" width={48} height={48} aria-hidden="true" class="drop-shadow-lg" />
    </div>

    <div id="end-overlay-title">
      <Headline
        level="h2"
        textSize="xl"
        textAlign="center"
        className="mb-8 text-center text-3xl leading-tight font-bold tracking-wide text-purple-300 drop-shadow-lg"
        {title}
      />
    </div>

    <!-- Hidden description for screen readers -->
    <Paragraph className="sr-only">
      {t("game.end.screenReaderDescription")}
    </Paragraph>

    <!-- Status announcer for screen readers with enhanced timeout management -->
    <div
      id="achievement-announcement"
      aria-live="polite"
      aria-atomic="true"
      class="sr-only"
      role="status"
    >
    </div>

    <!-- Progress Visualization with improved ARIA and timeout indicators -->
    <div
      class="relative mb-8 h-4 w-full overflow-hidden rounded-full border border-slate-600/50 bg-slate-700/50"
      role="progressbar"
      aria-valuemin="0"
      aria-valuemax="100"
      aria-valuenow="0"
      aria-label={t("game.end.scoreProgress")}
      aria-describedby="progress-description"
    >
      <div
        id="score-bar"
        class="relative h-full w-full origin-left scale-x-0 rounded-full bg-gradient-to-r from-purple-500 to-blue-500 transition-transform duration-1000"
      >
      </div>
    </div>

    <!-- Hidden progress description for screen readers -->
    <div id="progress-description" class="sr-only">
      {t("game.end.progressDescription")}
    </div>

    <!-- Dynamic motivation text -->
    <div
      id="motivation-text"
      class="mx-auto mb-8 rounded-xl border border-slate-600/30 bg-slate-700/30 p-4 text-center text-lg leading-relaxed text-gray-300"
    >
      {t("game.end.defaultMotivation")}
    </div>

    <div
      class="mb-8 flex flex-col items-center gap-4 rounded-2xl border-2 border-slate-600/50 bg-gradient-to-br from-slate-700/50 to-slate-800/50 p-8 shadow-xl"
    >
      <span class="text-sm font-medium tracking-wider text-gray-400 uppercase"
        >{t("game.end.finalScore")}</span
      >
      <span
        id="popup-score"
        class="text-5xl leading-none font-bold tracking-wide text-white drop-shadow-lg">0</span
      >
    </div>

    <!-- Difficulty Badge -->
    <div
      class="mx-auto mb-8 flex items-center justify-center gap-3 rounded-xl border-2 border-blue-500/50 bg-gradient-to-r from-blue-600/20 to-purple-600/20 px-6 py-3 text-base font-semibold text-blue-200 shadow-lg"
      role="img"
      aria-label={t("game.end.difficultyLevel")}
    >
      <Icon name="difficulty" width={24} height={24} aria-hidden="true" class="text-blue-300" />
      <span id="difficulty-display" aria-describedby="difficulty-description" class="capitalize"
        >{difficulty}</span
      >
    </div>

    <!-- Hidden difficulty description for screen readers -->
    <div id="difficulty-description" class="sr-only">
      {t("game.end.difficultyDescription")}
    </div>

    <!-- Share Section with comprehensive sharing options -->
    <div
      class="mb-8 rounded-2xl border-t-2 border-b-2 border-slate-600/30 bg-gradient-to-br from-slate-700/30 to-slate-800/30 px-8 py-8 shadow-inner"
      role="region"
      aria-labelledby="share-section-heading"
    >
      <Headline
        level="h3"
        textSize="lg"
        textAlign="center"
        className="mb-6 text-center text-xl font-semibold text-white"
        title={t("game.end.shareSection")}
      />
      <div class="rounded-xl border border-slate-600/50 bg-slate-800/50 p-6 shadow-lg">
        <ShareOverlay
          gameData={{
            score: parseInt(initialScore, 10),
            category: category,
            difficulty: difficulty,
            mode: gameMode,
          }}
          shareGroupLabel={t("game.end.shareResults")}
          showFallback={true}
          showTitle={false}
        />
      </div>
    </div>

    <div class="flex flex-wrap justify-center gap-4">
      <a
        href={`/${lang}/gamehome`}
        class="flex cursor-pointer items-center gap-3 rounded-xl border-2 border-slate-600 bg-slate-700/50 px-6 py-4 text-base font-medium text-white no-underline shadow-lg transition-all duration-300 hover:-translate-y-1 hover:border-slate-500 hover:bg-slate-600 hover:shadow-xl focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-500"
        aria-label={t("game.end.homeDescription")}
        aria-describedby="home-button-description"
      >
        <Icon name="home" width={20} height={20} aria-hidden="true" />
        {t("game.end.home")}
      </a>

      <a
        href={restartUrl}
        id="restart-button"
        class="flex cursor-pointer items-center gap-3 rounded-xl border-2 border-purple-600 bg-gradient-to-r from-purple-600 to-purple-700 px-6 py-4 text-base font-medium text-white no-underline shadow-lg transition-all duration-300 hover:-translate-y-1 hover:border-purple-500 hover:from-purple-700 hover:to-purple-800 hover:shadow-xl focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-purple-500"
        aria-label={t("game.end.restartSameGameDescription")}
        aria-describedby="restart-button-description"
      >
        <Icon name="reset" width={20} height={20} aria-hidden="true" />
        {t("game.end.restartSameGame")}
      </a>

      <!-- Hidden button descriptions for screen readers -->
      <div id="home-button-description" class="sr-only">
        {t("game.end.homeButtonHelp")}
      </div>
      <div id="restart-button-description" class="sr-only">
        {t("game.end.restartSameGameHelp")}
      </div>
    </div>
  </div>
</div>

<script>
  /**
   * EndOverlay Component Script (plain script)
   *
   * The inline script here must not use ES module features (imports or import.meta)
   * because it can be injected into pages as a classic script. The richer overlay
   * module (`/src/utils/endOverlay`) should be loaded by the bundler/runtime as a module;
   * it registers a global `window.showEndOverlay` and auto-initializes itself when present.
   *
   * This script provides safe, non-module behavior:
   * - No `import` or `import.meta` usage
   * - Updates the DOM-based popup immediately (accessible fallback)
   * - Observes data-attribute changes and updates the display
   * - Attempts to call the global richer overlay if available (non-blocking)
   */

  // Function to update the display with current data attributes
  // Split helpers to keep updateDisplay small
  function parseTranslations(sourceEl: HTMLElement | null): Record<string, string> | null {
    if (!sourceEl) {
      return null;
    }
    try {
      const attr = sourceEl.getAttribute("data-translations");
      if (!attr) {
        return null;
      }
      return JSON.parse(attr) as Record<string, string>;
    } catch {
      return null;
    }
  }

  function resolveTier(scoreNum: number): string {
    /** @type {any} */
    const w: unknown = window;
    try {
      const resolver = (w as { __resolveAchievement?: (n: number) => { id: string } })
        .__resolveAchievement as ((n: number) => { id: string }) | undefined;
      if (typeof resolver === "function") {
        const tier = resolver(scoreNum);
        if (tier && typeof tier.id === "string") {
          return tier.id;
        }
      }
    } catch {
      /* ignore */
    }
    if (scoreNum >= 800) {
      return "genius";
    }
    if (scoreNum >= 600) {
      return "pro";
    }
    if (scoreNum >= 400) {
      return "enthusiast";
    }
    if (scoreNum >= 200) {
      return "lover";
    }
    return "explorer";
  }

  function computeMotivation(tierId: string, translations: Record<string, string> | null): string {
    const tierMap: Record<string, [string, string]> = {
      genius: ["game.end.motivation.genius", "Extraordinary! 💫 You're a true music genius! 🎶"],
      pro: [
        "game.end.motivation.pro",
        "Impressive! 👍 As a genuine music enthusiast, you really know your stuff!",
      ],
      enthusiast: [
        "game.end.motivation.enthusiast",
        "Well done! 👏 You've shown solid music knowledge!",
      ],
      lover: ["game.end.motivation.lover", "Good effort! 🙏 Keep playing to improve your score!"],
      explorer: [
        "game.end.defaultMotivation",
        "Thanks for playing! 🎵 Every game is a chance to learn!",
      ],
    };
    const tuple = Object.prototype.hasOwnProperty.call(tierMap, tierId)
      ? tierMap[tierId]
      : tierMap.explorer;
    const key = tuple[0];
    const fallback = tuple[1];
    if (translations && Object.prototype.hasOwnProperty.call(translations, key)) {
      return translations[key];
    }
    return fallback;
  }

  function oneTimeAssertive(
    popup: HTMLElement,
    tierId: string,
    translations: Record<string, string> | null,
    score: string
  ): void {
    try {
      if (popup.dataset.finalAnnounced) {
        return;
      }
      const levelKeyMap: Record<string, string> = {
        genius: "game.end.level.genius",
        pro: "game.end.level.pro",
        enthusiast: "game.end.level.enthusiast",
        lover: "game.end.level.lover",
        explorer: "game.end.level.explorer",
      };
      const levelKey = levelKeyMap[tierId] || levelKeyMap.explorer;
      let levelLabel = tierId;
      if (translations && Object.prototype.hasOwnProperty.call(translations, levelKey)) {
        levelLabel = String(translations[levelKey]);
      }
      const assertiveMsg = `Game over. ${levelLabel}. Score ${score}.`;
      const announcer: unknown = (window as unknown as Record<string, unknown>).announceAssertive;
      if (typeof announcer === "function") {
        try {
          (announcer as (m: string) => void)(assertiveMsg);
        } catch {
          /* silent */
        }
      } else {
        announceStatus(assertiveMsg);
      }
      popup.dataset.finalAnnounced = "1";
    } catch {
      /* silent */
    }
  }

  function updateDisplay(): void {
    const popup = document.getElementById("endgame-popup");
    if (!popup) {
      return;
    }
    const score = popup.dataset.score || "0";
    const scoreElement = document.getElementById("popup-score");
    if (scoreElement) {
      scoreElement.textContent = score;
    }
    const motivationElement = document.getElementById("motivation-text");
    if (motivationElement) {
      const scoreNum = parseInt(score, 10);
      const translations = parseTranslations(popup);
      const tierId = resolveTier(scoreNum);
      const motivationText = computeMotivation(tierId, translations);
      motivationElement.textContent = motivationText;
      oneTimeAssertive(popup, tierId, translations, score);
    }
    try {
      const w = window as unknown as { __mmDebug?: (ns: string, ...a: unknown[]) => void };
      if (w.__mmDebug) {
        w.__mmDebug("endOverlay-inline", "Game display updated", {
          score,
          mode: popup.dataset.mode,
        });
      } else if (typeof console !== "undefined" && console.warn) {
        console.warn("[endOverlay-inline] Game display updated", {
          score,
          mode: popup.dataset.mode,
        });
      }
    } catch {
      /* silent */
    }
  }

  // Announce helper using global region or local fallback; avoids duplicate announcements
  function announceStatus(message: string): void {
    try {
      if (!message) {
        return;
      }
      const region =
        document.getElementById("app-live-region") ||
        document.getElementById("achievement-announcement");
      if (!region) {
        return;
      }
      const previous = region.textContent;
      if (previous === message) {
        return; // avoid SR spam
      }
      region.textContent = "";
      // force reflow via shared helper if present
      try {
        if (typeof window !== "undefined") {
          const w = window as unknown as { mmForceReflow?: (el: HTMLElement) => void };
          if (typeof w.mmForceReflow === "function") {
            w.mmForceReflow(region);
          } else {
            // eslint-disable-next-line @typescript-eslint/no-unused-expressions
            region.offsetHeight; // fallback direct access
          }
        }
      } catch {
        /* silent */
      }
      region.textContent = message;
    } catch {
      /* silent */
    }
  }

  // Store element that had focus before opening to restore on close
  let previousActiveElement: HTMLElement | null = null;

  // Helper retained for potential programmatic opening; may be invoked by richer module when present.
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  function openEndOverlay(): void {
    const popup = document.getElementById("endgame-popup");
    if (!popup) {
      return;
    }
    previousActiveElement =
      document.activeElement instanceof HTMLElement ? document.activeElement : null;
    popup.classList.remove("hidden");
    popup.setAttribute("aria-hidden", "false");
    // Focus first focusable inside dialog
    const focusable = popup.querySelector(
      'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
    );
    if (focusable instanceof HTMLElement) {
      focusable.focus();
    }
  }

  function closeEndOverlay(): void {
    const popup = document.getElementById("endgame-popup");
    if (!popup) {
      return;
    }
    popup.classList.add("hidden");
    popup.setAttribute("aria-hidden", "true");
    if (
      previousActiveElement &&
      typeof (previousActiveElement as HTMLElement).focus === "function"
    ) {
      (previousActiveElement as HTMLElement).focus();
    }
  }

  function trapFocus(e: KeyboardEvent): void {
    const popup = document.getElementById("endgame-popup");
    if (!popup || popup.classList.contains("hidden")) {
      return;
    }
    if (e.key !== "Tab") {
      return;
    }
    const focusable = popup.querySelectorAll<HTMLElement>(
      'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
    );
    if (!focusable.length) {
      return;
    }
    const first = focusable[0];
    const last = focusable[focusable.length - 1];
    if (e.shiftKey && document.activeElement === first) {
      e.preventDefault();
      last.focus();
    } else if (!e.shiftKey && document.activeElement === last) {
      e.preventDefault();
      first.focus();
    }
  }

  document.addEventListener("keydown", function (e: KeyboardEvent) {
    if (e.key === "Escape") {
      closeEndOverlay();
    }
    trapFocus(e);
  });

  // Enhance updateDisplay: announce achievement/motivation changes once per score change
  const originalUpdateDisplay = updateDisplay;
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore: reassignment for enhancement in legacy inline script context
  updateDisplay = function (): void {
    const popup = document.getElementById("endgame-popup");
    const oldScore = popup ? popup.getAttribute("data-prev-score") : null;
    originalUpdateDisplay();
    if (popup) {
      const newScore = popup.getAttribute("data-score");
      if (newScore !== oldScore) {
        popup.setAttribute("data-prev-score", newScore || "0");
        const motivationEl = document.getElementById("motivation-text");
        if (motivationEl) {
          announceStatus(motivationEl.textContent || "");
        }
      }
    }
  };
</script>
