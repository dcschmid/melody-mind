---
/**
 * EndOverlay Component
 *
 * A modal overlay that displays end-game results with score visualization, motivational text,
 * and achievement feedback. Implements WCAG AAA accessibility standards and optimized performance.
 *
 * Features:
 * - Score visualization with animated progress bar
 * - Dynamic motivational text based on score and language
 * - Sharing capabilities for social media
 * - Full keyboard navigation with focus trap
 * - Screen reader announcements for game results
 * - Optimized animations with reduced motion support
 * - Comprehensive error handling and recovery
 * - Advanced timeout management for accessibility
 * - Responsive design with mobile-first approach
 * - Uses SCSS with global CSS variables for all styling
 *
 * Accessibility:
 * - WCAG AAA compliant with proper ARIA attributes
 * - Focus trap implementation for keyboard navigation
 * - Screen reader announcements for game results
 * - High contrast mode support with forced-colors
 * - Reduced motion preferences respected
 * - Proper color contrast ratios (7:1 for text)
 * - Enhanced touch target support (44x44px minimum)
 * - Comprehensive timeout management
 * - Advanced error handling with recovery
 * - Text spacing meeting WCAG AAA requirements
 * - Comprehensive ARIA labeling and descriptions
 *
 * @component
 * @example
 * ```astro
 * <EndOverlay id="end-overlay" data-score="85" data-category="rock" data-difficulty="hard" />
 * ```
 */
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import { Icon } from "astro-icon/components";

const lang = String(getLangFromUrl(Astro.url));
const t = useTranslations(lang);

interface Props {
  title?: string;
  id: string;
  "data-score"?: string;
  "data-category"?: string;
  "data-difficulty"?: string;
}

const {
  title = t("game.end.title"),
  id,
  "data-score": initialScore = "0",
  "data-category": category = "",
  "data-difficulty": difficulty = "",
} = Astro.props;

// Prepare translations for client-side access
const clientTranslations = {
  "game.end.defaultMotivation": t("game.end.defaultMotivation"),
  "game.end.announcement.gameOver": t("game.end.announcement.gameOver", {
    score: 0,
    level: "level",
  }),
  "game.end.level.genius": t("game.end.level.genius"),
  "game.end.level.pro": t("game.end.level.pro"),
  "game.end.level.enthusiast": t("game.end.level.enthusiast"),
  "game.end.level.lover": t("game.end.level.lover"),
  "game.end.level.explorer": t("game.end.level.explorer"),
  "game.end.motivation.genius": t("game.end.motivation.genius"),
  "game.end.motivation.pro": t("game.end.motivation.pro"),
  "game.end.motivation.enthusiast": t("game.end.motivation.enthusiast"),
  "game.end.motivation.lover": t("game.end.motivation.lover"),
  "game.end.motivation.explorer": t("game.end.motivation.explorer"),
};
---

<div
  {id}
  class="popup hidden"
  role="dialog"
  aria-labelledby="popup-title"
  aria-describedby="popup-description"
  aria-modal="true"
  data-score={initialScore}
  data-category={category}
  data-difficulty={difficulty}
  data-translations={JSON.stringify(clientTranslations)}
>
  <!-- Overlay backdrop for click-to-close functionality -->
  <div id="overlay-backdrop" class="popup__backdrop" aria-hidden="true"></div>

  <div class="popup__content" tabindex="-1" role="document">
    <!-- Achievement badge with trophy icon -->
    <div class="achievement-badge" role="img" aria-label={t("game.end.achievementBadge")}>
      <Icon name="trophy" width={42} height={42} aria-hidden="true" />
    </div>

    <h2 id="popup-title" class="popup__title">
      {title}
    </h2>

    <!-- Hidden description for screen readers -->
    <p id="popup-description" class="sr-only">
      {t("game.end.screenReaderDescription")}
    </p>

    <!-- Status announcer for screen readers with enhanced timeout management -->
    <div
      id="achievement-announcement"
      aria-live="polite"
      aria-atomic="true"
      class="sr-only"
      role="status"
    >
    </div>

    <!-- Progress Visualization with improved ARIA and timeout indicators -->
    <div
      class="achievement-progress"
      role="progressbar"
      aria-valuemin="0"
      aria-valuemax="100"
      aria-valuenow="0"
      aria-label={t("game.end.scoreProgress")}
      aria-describedby="progress-description"
    >
      <div id="score-bar" class="achievement-progress__bar"></div>
    </div>

    <!-- Hidden progress description for screen readers -->
    <div id="progress-description" class="sr-only">
      {t("game.end.progressDescription")}
    </div>

    <!-- Dynamic motivation text -->
    <p id="motivation-text" class="motivation-text" aria-live="polite">
      {t("game.end.defaultMotivation")}
    </p>

    <div class="score-section">
      <span class="score-section__label">{t("game.end.finalScore")}</span>
      <span id="popup-score" class="score-section__value">0</span>
    </div>

    <!-- Difficulty Badge -->
    <div class="difficulty-badge" role="img" aria-label={t("game.end.difficultyLevel")}>
      <Icon name="difficulty" width={20} height={20} aria-hidden="true" />
      <span id="difficulty-display" aria-describedby="difficulty-description">{difficulty}</span>
    </div>

    <!-- Hidden difficulty description for screen readers -->
    <div id="difficulty-description" class="sr-only">
      {t("game.end.difficultyDescription")}
    </div>

    <!-- Achievement Section -->
    <div
      id="achievements-section"
      class="achievements-section"
      role="region"
      aria-labelledby="achievements-title"
    >
      <h3 id="achievements-title" class="achievements-section__title">
        {t("achievements.unlocked")}
      </h3>
      <div id="unlocked-achievements" class="achievements-section__container" role="list">
        <!-- Achievements will be populated by JavaScript -->
      </div>
    </div>

    <!-- Share Section -->
    <div class="share-section" role="region" aria-labelledby="share-label">
      <div id="share-label" class="sr-only">
        {t("game.end.shareSection")}
      </div>
      <button
        type="button"
        class="share-btn"
        aria-label={t("game.end.shareResults")}
        aria-describedby="share-description"
        data-share="general"
      >
        <Icon name="share" width={20} height={20} aria-hidden="true" />
        {t("game.end.share")}
      </button>
      <!-- Hidden share description for screen readers -->
      <div id="share-description" class="sr-only">
        {t("game.end.shareDescription")}
      </div>
    </div>

    <div class="button-wrapper">
      <a
        href="/"
        class="popup__btn popup__btn--secondary"
        aria-label={t("game.end.homeDescription")}
        aria-describedby="home-button-description"
      >
        <Icon name="home" width={20} height={20} aria-hidden="true" />
        {t("game.end.home")}
      </a>

      <button
        id="restart-button"
        class="popup__btn popup__btn--primary"
        aria-label={t("game.end.newgameDescription")}
        aria-describedby="restart-button-description"
      >
        <Icon name="restart" width={20} height={20} aria-hidden="true" />
        {t("game.end.newgame")}
      </button>

      <!-- Hidden button descriptions for screen readers -->
      <div id="home-button-description" class="sr-only">
        {t("game.end.homeButtonHelp")}
      </div>
      <div id="restart-button-description" class="sr-only">
        {t("game.end.restartButtonHelp")}
      </div>
    </div>
  </div>
</div>

<style lang="scss">
  /* =================================================
   * END OVERLAY - SCSS IMPLEMENTATION
   * Modern SCSS with global.css variables
   * WCAG AAA 2.2 Compliant Design
   * ================================================= */

  // SCSS Variables for component-specific values
  $overlay-z-index: var(--z-modal);
  $backdrop-z-index: var(--z-backdrop);
  $content-z-index: var(--z-modal-content);
  $achievement-badge-size: var(--achievement-badge-size);
  $modal-max-width: var(--modal-content-max-width);
  $modal-max-height: var(--modal-content-max-height);
  $modal-padding: var(--modal-padding);

  // Mixins for responsive design
  @mixin mobile {
    @media (max-width: var(--breakpoint-sm)) {
      @content;
    }
  }

  @mixin tablet {
    @media (min-width: var(--breakpoint-sm)) and (max-width: var(--breakpoint-lg)) {
      @content;
    }
  }

  @mixin desktop {
    @media (min-width: var(--breakpoint-lg)) {
      @content;
    }
  }

  @mixin reduced-motion {
    @media (prefers-reduced-motion: reduce) {
      @content;
    }
  }

  @mixin high-contrast {
    @media (prefers-contrast: high) {
      @content;
    }
  }

  @mixin forced-colors {
    @media (forced-colors: active) {
      @content;
    }
  }

  // Base popup container
  .popup {
    position: fixed;
    inset: 0;
    z-index: $overlay-z-index;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: $modal-padding;
    background-color: var(--backdrop-overlay-dark);
    backdrop-filter: blur(var(--backdrop-blur));
    -webkit-backdrop-filter: blur(var(--backdrop-blur));
    transition: opacity var(--transition-normal);

    &.hidden {
      pointer-events: none;
      visibility: hidden;
      opacity: 0;

      .popup__content {
        transform: translateY(var(--space-lg)) scale(0.98);
        opacity: 0;
      }
    }

    // Backdrop for click-to-close
    &__backdrop {
      position: absolute;
      inset: 0;
      z-index: $backdrop-z-index;
    }

    // Main popup content
    &__content {
      position: relative;
      width: 100%;
      max-width: $modal-max-width;
      max-height: $modal-max-height;
      overflow-y: auto;
      background: linear-gradient(135deg, var(--bg-secondary) 0%, var(--bg-tertiary) 100%);
      border: var(--border-width-thin) solid var(--border-primary);
      border-radius: var(--radius-xl);
      padding: var(--space-2xl);
      box-shadow: var(--shadow-xl);
      transform: translateY(0) scale(1);
      transition:
        transform var(--transition-normal),
        opacity var(--transition-normal);
      z-index: $content-z-index;

      // Enhanced focus styles
      &:focus-visible {
        outline: var(--focus-enhanced-outline-dark);
        outline-offset: var(--space-xs);
      }

      // Scrollbar styling
      &::-webkit-scrollbar {
        width: var(--scrollbar-thin);
        height: var(--scrollbar-thin);
      }

      &::-webkit-scrollbar-track {
        background: var(--scrollbar-track-bg);
        border-radius: var(--scrollbar-track-radius);
      }

      &::-webkit-scrollbar-thumb {
        background: var(--scrollbar-thumb-bg);
        border-radius: var(--scrollbar-thumb-radius);

        &:hover {
          background: var(--scrollbar-thumb-hover);
        }
      }
    }

    // Title with enhanced gradient text
    &__title {
      font-size: var(--text-3xl);
      font-weight: var(--font-bold);
      text-align: center;
      margin-bottom: var(--space-lg);
      word-spacing: var(--word-spacing-enhanced);

      // Enhanced gradient with better contrast for WCAG AAA
      background: linear-gradient(
        135deg,
        var(--color-primary-300) 0%,
        var(--color-secondary-300) 100%
      );
      background-clip: text;
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      color: var(--color-primary-300);
      line-height: var(--leading-enhanced);
      letter-spacing: var(--letter-spacing-enhanced);
      text-shadow: 0 0 1px rgba(0, 0, 0, 0.5);

      @include mobile {
        font-size: var(--text-2xl);
      }
    }

    // Button styles
    &__btn {
      display: flex;
      align-items: center;
      gap: var(--space-sm);
      padding: var(--space-md) var(--space-xl);
      border-radius: var(--radius-lg);
      font-size: var(--text-base);
      font-weight: var(--font-medium);
      cursor: pointer;
      transition: all var(--transition-normal);
      text-decoration: none;
      border: none;
      min-height: var(--touch-target-enhanced);
      min-width: var(--touch-target-enhanced);
      line-height: var(--leading-enhanced);
      letter-spacing: var(--letter-spacing-enhanced);
      padding-top: max(var(--space-md), 12px);
      padding-bottom: max(var(--space-md), 12px);
      padding-left: max(var(--space-xl), 16px);
      padding-right: max(var(--space-xl), 16px);

      &:hover {
        transform: translateY(var(--animation-y-offset-small));
      }

      &:focus-visible {
        outline: var(--focus-outline);
        outline-offset: var(--focus-ring-offset);
      }

      &--primary {
        background: linear-gradient(
          135deg,
          var(--color-primary-600) 0%,
          var(--color-primary-700) 100%
        );
        color: var(--color-white);

        &:hover {
          background: linear-gradient(
            135deg,
            var(--color-primary-700) 0%,
            var(--color-primary-800) 100%
          );
        }
      }

      &--secondary {
        background-color: transparent;
        color: var(--text-primary);
        border: var(--border-width-thin) solid var(--border-primary);

        &:hover {
          background-color: var(--bg-tertiary);
          border-color: var(--border-secondary);
        }
      }

      @include mobile {
        width: 100%;
        justify-content: center;
      }
    }
  }

  // Achievement badge with trophy
  .achievement-badge {
    display: flex;
    align-items: center;
    justify-content: center;
    width: $achievement-badge-size;
    height: $achievement-badge-size;
    margin: 0 auto var(--space-lg);
    background: linear-gradient(135deg, var(--color-warning-400) 0%, var(--color-warning-500) 100%);
    border-radius: var(--radius-full);
    color: var(--color-black);
    animation: pulse-glow var(--animation-pulse-duration) infinite;
  }

  // Progress bar container
  .achievement-progress {
    width: 100%;
    height: var(--space-lg);
    background-color: var(--bg-tertiary);
    border: var(--border-width-thin) solid var(--border-primary);
    border-radius: var(--radius-lg);
    margin-bottom: var(--space-xl);
    overflow: hidden;
    position: relative;

    &__bar {
      height: 100%;
      width: 100%;
      background: linear-gradient(
        90deg,
        var(--color-primary-500) 0%,
        var(--color-secondary-500) 50%,
        var(--color-primary-600) 100%
      );
      border-radius: var(--radius-lg);
      position: relative;
      transform: scaleX(0);
      transform-origin: left center;
      transition: transform var(--transition-slow);
      will-change: transform;

      &::after {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(
          90deg,
          transparent 0%,
          rgba(255, 255, 255, 0.2) 50%,
          transparent 100%
        );
        animation: shimmer var(--animation-shimmer-duration) infinite;
      }
    }
  }

  // Motivation text
  .motivation-text {
    font-size: var(--text-base);
    line-height: var(--leading-enhanced);
    letter-spacing: var(--letter-spacing-enhanced);
    word-spacing: var(--word-spacing-enhanced);
    text-align: center;
    color: var(--text-secondary);
    margin-bottom: var(--space-xl);
    max-width: var(--motivation-text-max-width);
    margin-left: auto;
    margin-right: auto;
    text-spacing: var(--text-spacing-enhanced);
  }

  // Score section
  .score-section {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--space-sm);
    padding: var(--space-lg);
    background-color: var(--bg-tertiary);
    border: var(--border-width-thin) solid var(--border-primary);
    border-radius: var(--radius-lg);
    margin-bottom: var(--space-lg);

    &__label {
      font-size: var(--text-sm);
      font-weight: var(--font-medium);
      color: var(--text-secondary);
      text-transform: uppercase;
      letter-spacing: var(--letter-spacing-enhanced);
    }

    &__value {
      font-size: var(--text-4xl);
      font-weight: var(--font-bold);
      color: var(--text-primary);

      // Enhanced gradient text
      background: linear-gradient(
        135deg,
        var(--color-primary-300) 0%,
        var(--color-secondary-300) 100%
      );
      background-clip: text;
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      color: var(--color-primary-300);
      line-height: var(--leading-enhanced);
      letter-spacing: var(--letter-spacing-enhanced);
      text-shadow: 0 0 1px rgba(0, 0, 0, 0.5);

      @include mobile {
        font-size: var(--text-3xl);
      }
    }
  }

  // Difficulty badge
  .difficulty-badge {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-sm);
    padding: var(--space-sm) var(--space-lg);
    background-color: var(--bg-tertiary);
    border: var(--border-width-thin) solid var(--border-primary);
    border-radius: var(--radius-lg);
    margin: 0 auto var(--space-lg);
    color: var(--text-secondary);
    font-size: var(--text-sm);
    font-weight: var(--font-medium);
  }

  // Achievements section
  .achievements-section {
    margin-bottom: var(--space-xl);

    &__title {
      font-size: var(--text-lg);
      font-weight: var(--font-semibold);
      color: var(--text-primary);
      text-align: center;
      margin-bottom: var(--space-lg);
    }

    &__container {
      display: flex;
      flex-wrap: wrap;
      gap: var(--space-md);
      justify-content: center;
    }
  }

  .achievement-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    max-width: var(--achievement-item-max-width);
    padding: var(--space-lg);
    background-color: var(--bg-tertiary);
    border: var(--border-width-thin) solid var(--border-primary);
    border-radius: var(--radius-lg);
    transition: transform var(--transition-normal);

    &:hover {
      transform: translateY(calc(-1 * var(--space-micro)));
    }
  }

  // Share section
  .share-section {
    display: flex;
    justify-content: center;
    margin-bottom: var(--space-xl);
  }

  .share-btn {
    display: flex;
    align-items: center;
    gap: var(--space-sm);
    padding: var(--space-md) var(--space-xl);
    border-radius: var(--radius-lg);
    font-size: var(--text-base);
    font-weight: var(--font-medium);
    cursor: pointer;
    transition: all var(--transition-normal);
    text-decoration: none;
    border: none;
    min-height: var(--touch-target-enhanced);
    min-width: var(--touch-target-enhanced);
    line-height: var(--leading-enhanced);
    letter-spacing: var(--letter-spacing-enhanced);
    padding-top: max(var(--space-md), 12px);
    padding-bottom: max(var(--space-md), 12px);
    padding-left: max(var(--space-xl), 16px);
    padding-right: max(var(--space-xl), 16px);
    background: linear-gradient(
      135deg,
      var(--color-secondary-600) 0%,
      var(--color-secondary-700) 100%
    );
    color: var(--color-white);

    &:hover {
      background: linear-gradient(
        135deg,
        var(--color-secondary-700) 0%,
        var(--color-secondary-800) 100%
      );
      transform: translateY(var(--animation-y-offset-small));
    }

    &:focus-visible {
      outline: var(--focus-outline);
      outline-offset: var(--focus-ring-offset);
    }
  }

  // Button wrapper
  .button-wrapper {
    display: flex;
    gap: var(--space-md);
    justify-content: center;
    flex-wrap: wrap;

    @include mobile {
      flex-direction: column;
    }
  }

  // Screen reader only content
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  // =================================================
  // ANIMATIONS
  // =================================================

  @keyframes pulse-glow {
    0% {
      transform: scale(var(--animation-scale-start));
      box-shadow: 0 0 0 0 rgba(251, 191, 36, var(--animation-opacity-start));
    }
    70% {
      transform: scale(var(--animation-scale-end));
      box-shadow: 0 0 0 var(--glow-distance) rgba(251, 191, 36, var(--animation-opacity-end));
    }
    100% {
      transform: scale(var(--animation-scale-start));
      box-shadow: 0 0 0 0 rgba(251, 191, 36, var(--animation-opacity-end));
    }
  }

  @keyframes shimmer {
    0% {
      transform: translateX(-100%);
    }
    100% {
      transform: translateX(100%);
    }
  }

  @keyframes fade-in-up {
    from {
      transform: translateY(var(--animation-y-offset)) scale(var(--animation-scale-hover));
      opacity: 0;
    }
    to {
      transform: translateY(0) scale(var(--animation-scale-end));
      opacity: 1;
    }
  }

  .popup:not(.hidden) .popup__content {
    animation: fade-in-up var(--transition-slow) ease-out;
  }

  // =================================================
  // RESPONSIVE DESIGN
  // =================================================

  @include mobile {
    .popup {
      padding: var(--space-md);
    }

    .popup__content {
      padding: var(--space-xl);
      max-width: 100%;
    }
  }

  // =================================================
  // ACCESSIBILITY ENHANCEMENTS
  // =================================================

  // High contrast mode support
  @include forced-colors {
    .popup__content {
      border: var(--border-width-enhanced) solid CanvasText;
      background: Canvas;
    }

    .achievement-badge {
      border: var(--border-width-thick) solid ButtonText;
    }

    .achievement-progress {
      border: var(--border-width-thin) solid CanvasText;
    }

    .achievement-progress__bar {
      background: Highlight;
    }

    .score-section {
      border: var(--border-width-thick) solid CanvasText;
    }

    .popup__btn {
      border: var(--border-width-thick) solid ButtonText;
      background-color: ButtonFace;
      color: ButtonText;
      forced-color-adjust: none;
    }

    .popup__title,
    .score-section__value {
      background: none !important;
      -webkit-text-fill-color: CanvasText !important;
      color: CanvasText !important;
      text-shadow: none;
    }
  }

  // Reduced motion preferences
  @include reduced-motion {
    .popup__content,
    .achievement-badge,
    .achievement-progress__bar,
    .popup__btn,
    .share-btn,
    .achievement-item {
      animation: none !important;
      transition: none !important;
      transform: none !important;
    }

    .popup.hidden,
    .popup:not(.hidden) {
      transition: opacity 0.01ms !important;
    }

    .achievement-progress__bar::after {
      animation: none !important;
    }

    .achievement-badge {
      outline: 3px solid var(--color-warning-400);
      outline-offset: 2px;
    }
  }

  // Enhanced motion sensitivity support
  @include reduced-motion {
    @include high-contrast {
      .popup__content {
        border-width: var(--border-width-enhanced);
        box-shadow: 0 0 0 2px var(--color-primary-400);
      }
    }
  }

  // Print styles
  @media print {
    .popup__content {
      border: var(--print-border);
      box-shadow: none !important;
      background: var(--print-bg) !important;
      color: var(--print-text) !important;
    }

    .popup__btn {
      border: var(--print-border);
      background: none !important;
      color: var(--print-text) !important;
    }

    .achievement-badge {
      border: var(--print-border);
      background: none !important;
      color: var(--print-text) !important;
    }

    .popup__title,
    .score-section__value {
      -webkit-text-fill-color: var(--print-text);
      background: none !important;
      color: var(--print-text) !important;
    }
  }
</style>

<script type="module">
  /**
   * EndOverlay Component Script
   *
   * Modern ES6+ implementation with async/await, arrow functions, and destructuring.
   * Imports and initializes the EndOverlay utilities for client-side functionality.
   * This follows the project's guideline of extracting complex scripts to external TypeScript files.
   */
  import setupEndOverlay from "/src/utils/endOverlay";

  // Initialize the end overlay functionality with modern async/await
  // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
  const initializeOverlay = async () => {
    try {
      await setupEndOverlay();
    } catch (error) {
      console.error("Failed to initialize EndOverlay:", error);
    }
  };

  // Start initialization
  initializeOverlay();
</script>
