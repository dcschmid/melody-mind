---
/**
 * EndOverlay Component
 *
 * A modal overlay that displays end-game results with score visualization, motivational text,
 * and achievement feedback. Implements WCAG AAA accessibility standards and optimized performance.
 *
 */
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import { Icon } from "astro-icon/components";
import ShareOverlay from "./ShareOverlay.astro";
import AuthForm from "@components/auth/AuthForm.astro";
import Headline from "@components/Headline.astro";
import Paragraph from "@components/Paragraph.astro";

const lang = String(getLangFromUrl(Astro.url));
const t = useTranslations(lang);

interface Props {
  title?: string;
  id: string;
  "data-score"?: string;
  "data-category"?: string;
  "data-categoryName"?: string;
  "data-difficulty"?: string;
  "data-mode"?: string;
}

const {
  title = t("game.end.title"),
  id,
  "data-score": initialScore = "0",
  "data-category": category = "",
  "data-categoryName": categoryName = "",
  "data-difficulty": difficulty = "",
  "data-mode": gameMode = "normal",
} = Astro.props;

// Construct the restart URL based on game data
const constructRestartUrl = () => {
  if (!category || !difficulty) {
    return `/${lang}/gamehome`; // Fallback to game home if data is missing
  }

  const baseUrl = `/${lang}`;
  const modePrefix = gameMode === "chronology" ? "chronology-" : "game-";

  return `${baseUrl}/${modePrefix}${category}/${difficulty}`;
};

const restartUrl = constructRestartUrl();

// Prepare translations for client-side access
const clientTranslations = {
  "game.end.defaultMotivation": t("game.end.defaultMotivation"),
  "game.end.announcement.gameOver": t("game.end.announcement.gameOver", {
    score: 0,
    level: "level",
  }),
  "game.end.level.genius": t("game.end.level.genius"),
  "game.end.level.pro": t("game.end.level.pro"),
  "game.end.level.enthusiast": t("game.end.level.enthusiast"),
  "game.end.level.lover": t("game.end.level.lover"),
  "game.end.level.explorer": t("game.end.level.explorer"),
  "game.end.motivation.genius": t("game.end.motivation.genius"),
  "game.end.motivation.pro": t("game.end.motivation.pro"),
  "game.end.motivation.enthusiast": t("game.end.motivation.enthusiast"),
  "game.end.motivation.lover": t("game.end.motivation.lover"),
  "game.end.motivation.explorer": t("game.end.motivation.explorer"),
  "game.end.guest.title": t("game.end.guest.title"),
  "game.end.guest.description": t("game.end.guest.description"),
  "game.end.guest.alternative": t("game.end.guest.alternative"),
};
---

<div
  {id}
  class="popup hidden"
  role="dialog"
  aria-labelledby="popup-title"
  aria-describedby="popup-description"
  aria-modal="true"
  data-score={initialScore}
  data-category={category}
  data-categoryName={categoryName}
  data-difficulty={difficulty}
  data-mode={gameMode}
  data-translations={JSON.stringify(clientTranslations)}
>
  <!-- Overlay backdrop for click-to-close functionality -->
  <div id="overlay-backdrop" class="popup__backdrop" aria-hidden="true"></div>

  <div class="popup__content" tabindex="-1" role="document">
    <!-- Achievement badge with trophy icon -->
    <div class="achievement-badge" role="img" aria-label={t("game.end.achievementBadge")}>
      <Icon name="trophy" width={42} height={42} aria-hidden="true" />
    </div>

    <Headline level="h2" size="xl" textAlign="center" id="popup-title" className="popup__title">
      {title}
    </Headline>

    <!-- Hidden description for screen readers -->
    <Paragraph id="popup-description" className="sr-only">
      {t("game.end.screenReaderDescription")}
    </Paragraph>

    <!-- Status announcer for screen readers with enhanced timeout management -->
    <div
      id="achievement-announcement"
      aria-live="polite"
      aria-atomic="true"
      class="sr-only"
      role="status"
    >
    </div>

    <!-- Progress Visualization with improved ARIA and timeout indicators -->
    <div
      class="achievement-progress"
      role="progressbar"
      aria-valuemin="0"
      aria-valuemax="100"
      aria-valuenow="0"
      aria-label={t("game.end.scoreProgress")}
      aria-describedby="progress-description"
    >
      <div id="score-bar" class="achievement-progress__bar"></div>
    </div>

    <!-- Hidden progress description for screen readers -->
    <div id="progress-description" class="sr-only">
      {t("game.end.progressDescription")}
    </div>

    <!-- Dynamic motivation text -->
    <Paragraph id="motivation-text" className="motivation-text" aria-live="polite">
      {t("game.end.defaultMotivation")}
    </Paragraph>

    <div class="score-section">
      <span class="score-section__label">{t("game.end.finalScore")}</span>
      <span id="popup-score" class="score-section__value">0</span>
    </div>

    <!-- Difficulty Badge -->
    <div class="difficulty-badge" role="img" aria-label={t("game.end.difficultyLevel")}>
      <Icon name="difficulty" width={20} height={20} aria-hidden="true" />
      <span id="difficulty-display" aria-describedby="difficulty-description">{difficulty}</span>
    </div>

    <!-- Hidden difficulty description for screen readers -->
    <div id="difficulty-description" class="sr-only">
      {t("game.end.difficultyDescription")}
    </div>

    <!-- Achievement Section -->
    <div
      id="achievements-section"
      class="achievements-section"
      role="region"
      aria-labelledby="achievements-title"
    >
      <Headline
        level="h3"
        size="lg"
        id="achievements-title"
        textAlign="center"
        className="achievements-section__title"
      >
        {t("achievements.unlocked")}
      </Headline>
      <div id="unlocked-achievements" class="achievements-section__container" role="list">
        <!-- Achievements will be populated by JavaScript -->
      </div>
    </div>

    <!-- Share Section with comprehensive sharing options -->
    <div class="share-section" role="region" aria-labelledby="share-section-heading">
      <Headline
        level="h3"
        size="lg"
        textAlign="center"
        id="share-section-heading"
        className="share-section__title"
      >
        {t("game.end.shareSection")}
      </Headline>
      <ShareOverlay
        gameData={{
          score: parseInt(initialScore, 10),
          category: category,
          difficulty: difficulty,
          mode: gameMode,
        }}
        shareGroupLabel={t("game.end.shareResults")}
        showFallback={true}
        showTitle={false}
      />
    </div>

    <!-- Guest Login Section - Only shown for non-authenticated users -->
    <div
      id="guest-login-section"
      class="guest-login-section"
      style="display: none;"
      aria-live="polite"
    >
      <div class="guest-login-content">
        <div class="guest-login-header">
          <Icon name="user-plus" width={24} height={24} aria-hidden="true" />
          <Headline level="h3" size="lg" textAlign="center" className="guest-login-title"
            >{t("game.end.guest.title")}</Headline
          >
        </div>
        <Paragraph className="guest-login-description" textSize="lg" align="center"
          >{t("game.end.guest.description")}</Paragraph
        >
        <div class="guest-login-form">
          <AuthForm initialMode="login" />
        </div>
        <div class="guest-login-alternative">
          <Paragraph textSize="lg" align="center" className="guest-login-alternative-text"
            >{t("game.end.guest.alternative")}</Paragraph
          >
        </div>
      </div>
    </div>

    <div class="button-wrapper">
      <a
        href={`/${lang}/gamehome`}
        class="popup__btn popup__btn--secondary"
        aria-label={t("game.end.homeDescription")}
        aria-describedby="home-button-description"
      >
        <Icon name="home" width={20} height={20} aria-hidden="true" />
        {t("game.end.home")}
      </a>

      <a
        href={restartUrl}
        id="restart-button"
        class="popup__btn popup__btn--primary"
        aria-label={t("game.end.restartSameGameDescription")}
        aria-describedby="restart-button-description"
      >
        <Icon name="restart" width={20} height={20} aria-hidden="true" />
        {t("game.end.restartSameGame")}
      </a>

      <!-- Hidden button descriptions for screen readers -->
      <div id="home-button-description" class="sr-only">
        {t("game.end.homeButtonHelp")}
      </div>
      <div id="restart-button-description" class="sr-only">
        {t("game.end.restartSameGameHelp")}
      </div>
    </div>
  </div>
</div>

<style lang="scss" is:global>
  /* =================================================
   * END OVERLAY - SCSS IMPLEMENTATION
   * Modern SCSS with global.css variables
   * WCAG AAA 2.2 Compliant Design
   * ================================================= */

  // SCSS Variables for component-specific values
  $overlay-z-index: var(--z-modal);
  $backdrop-z-index: var(--z-backdrop);
  $content-z-index: var(--z-modal-content);
  $achievement-badge-size: var(--achievement-badge-size);
  $modal-max-width: var(--modal-content-max-width);
  $modal-max-height: var(--modal-content-max-height);
  $modal-padding: var(--modal-padding);

  // Entfernte Mixins und ersetze Media Queries durch direkte Werte

  .popup {
    position: fixed;
    inset: 0;
    z-index: $overlay-z-index;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: var(--space-lg);
    background-color: var(--backdrop-overlay-dark);
    transition: opacity var(--transition-normal);

    &.hidden {
      pointer-events: none;
      visibility: hidden;
      opacity: 0;

      .popup__content {
        opacity: 0;
      }
    }

    &__backdrop {
      position: absolute;
      inset: 0;
      z-index: $backdrop-z-index;
    }

    &__content {
      position: relative;
      width: 100%;
      max-width: $modal-max-width;
      max-height: $modal-max-height;
      overflow-y: auto;
      background: var(--bg-secondary);
      border: var(--border-width-thin) solid var(--border-primary);
      border-radius: var(--radius-xl);
      padding: var(--space-2xl);
      box-shadow: var(--shadow-xl);
      z-index: $content-z-index;
      transition: opacity var(--transition-normal);
      &:focus-visible {
        outline: var(--focus-enhanced-outline-dark);
        outline-offset: var(--space-xs);
      }

      &::-webkit-scrollbar {
        width: var(--scrollbar-thin);
        height: var(--scrollbar-thin);
      }

      &::-webkit-scrollbar-track {
        background: var(--scrollbar-track-bg);
        border-radius: var(--scrollbar-track-radius);
      }

      &::-webkit-scrollbar-thumb {
        background: var(--scrollbar-thumb-bg);
        border-radius: var(--scrollbar-thumb-radius);
        &:hover {
          background: var(--scrollbar-thumb-hover);
        }
      }
    }

    &__title {
      font-size: var(--text-xl);
      font-weight: var(--font-bold);
      text-align: center;
      margin-bottom: var(--space-lg);
      word-spacing: var(--word-spacing-enhanced);
      color: var(--color-primary-300);
      line-height: var(--leading-enhanced);
      letter-spacing: var(--letter-spacing-enhanced);
      text-shadow: 0 0 1px rgba(0, 0, 0, 0.5);
    }

    &__btn {
      display: flex;
      align-items: center;
      gap: var(--space-sm);
      padding: var(--space-md) var(--space-xl);
      border-radius: var(--radius-lg);
      font-size: var(--text-base);
      font-weight: var(--font-medium);
      cursor: pointer;
      transition:
        background var(--transition-normal),
        box-shadow var(--transition-normal);
      text-decoration: none;
      border: none;
      min-height: var(--touch-target-enhanced);
      min-width: var(--touch-target-enhanced);
      line-height: var(--leading-enhanced);
      letter-spacing: var(--letter-spacing-enhanced);

      &:hover {
        background: var(--color-primary-700);
      }

      &:focus-visible {
        outline: var(--focus-outline);
        outline-offset: var(--focus-ring-offset);
      }

      &--primary {
        background: var(--color-primary-600);
        color: var(--color-white);

        &:hover {
          background: var(--color-primary-700);
        }
      }

      &--secondary {
        background-color: transparent;
        color: var(--text-primary);
        border: var(--border-width-thin) solid var(--border-primary);

        &:hover {
          background-color: var(--bg-tertiary);
          border-color: var(--border-secondary);
        }
      }
    }
  }

  // Achievement badge
  .achievement-badge {
    display: flex;
    align-items: center;
    justify-content: center;
    width: $achievement-badge-size;
    height: $achievement-badge-size;
    margin: 0 auto var(--space-lg);
    background: var(--color-warning-400);
    border-radius: var(--radius-full);
    color: var(--color-black);
  }

  // Progress bar container
  .achievement-progress {
    width: 100%;
    height: var(--space-lg);
    background-color: var(--bg-tertiary);
    border: var(--border-width-thin) solid var(--border-primary);
    border-radius: var(--radius-lg);
    margin-bottom: var(--space-xl);
    overflow: hidden;
    position: relative;

    &__bar {
      height: 100%;
      width: 100%;
      background: var(--color-primary-500);
      border-radius: var(--radius-lg);
      position: relative;
      transform: scaleX(0);
      transform-origin: left center;
      transition: transform var(--transition-slow);
    }
  }

  // Motivation text
  .motivation-text {
    font-size: var(--text-lg);
    line-height: var(--leading-enhanced);
    letter-spacing: var(--letter-spacing-enhanced);
    word-spacing: var(--word-spacing-enhanced);
    text-align: center;
    color: var(--text-secondary);
    margin-bottom: var(--space-xl);
    max-width: var(--motivation-text-max-width);
    margin-left: auto;
    margin-right: auto;
  }

  // Score section
  .score-section {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--space-sm);
    padding: var(--space-lg);
    background-color: var(--bg-tertiary);
    border: var(--border-width-thin) solid var(--border-primary);
    border-radius: var(--radius-lg);
    margin-bottom: var(--space-lg);

    &__label {
      font-size: var(--text-sm);
      font-weight: var(--font-medium);
      color: var(--text-secondary);
      text-transform: uppercase;
      letter-spacing: var(--letter-spacing-enhanced);
    }

    &__value {
      font-size: var(--text-4xl);
      font-weight: var(--font-bold);
      color: var(--text-primary);
      line-height: var(--leading-enhanced);
      letter-spacing: var(--letter-spacing-enhanced);
      text-shadow: 0 0 1px rgba(0, 0, 0, 0.5);
    }
  }

  // Difficulty badge
  .difficulty-badge {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-sm);
    padding: var(--space-sm) var(--space-lg);
    background-color: var(--bg-tertiary);
    border: var(--border-width-thin) solid var(--border-primary);
    border-radius: var(--radius-lg);
    margin: 0 auto var(--space-lg);
    color: var(--text-secondary);
    font-size: var(--text-sm);
    font-weight: var(--font-medium);
  }

  // Achievements section
  .achievements-section {
    margin-bottom: var(--space-xl);

    &__title {
      font-size: var(--text-lg);
      font-weight: var(--font-semibold);
      color: var(--text-primary);
      text-align: center;
      margin-bottom: var(--space-lg);
    }

    &__container {
      display: flex;
      flex-wrap: wrap;
      gap: var(--space-md);
      justify-content: center;
    }
  }

  .achievement-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    max-width: var(--achievement-item-max-width);
    padding: var(--space-lg);
    background-color: var(--bg-tertiary);
    border: var(--border-width-thin) solid var(--border-primary);
    border-radius: var(--radius-lg);
    transition: box-shadow var(--transition-normal);
    text-align: center;

    &__icon {
      font-size: var(--text-xl);
      margin-bottom: var(--space-sm);

      img {
        width: var(--space-2xl);
        height: var(--space-2xl);
        border-radius: var(--radius-md);
      }
    }

    &__content {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: var(--space-xs);
    }

    &__name {
      font-size: var(--text-base);
      font-weight: var(--font-semibold);
      color: var(--text-primary);
      margin: 0;
    }

    &__description {
      font-size: var(--text-sm);
      color: var(--text-secondary);
      margin: 0;
      line-height: var(--leading-relaxed);
    }
  }

  // Share section
  .share-section {
    margin-bottom: var(--space-xl);
    padding: var(--space-lg) 0;
    border-top: var(--border-width-thin) solid var(--border-subtle);
    border-bottom: var(--border-width-thin) solid var(--border-subtle);

    &__title {
      margin-bottom: var(--space-lg);
      font-size: var(--text-lg);
      font-weight: var(--font-semibold);
      color: var(--text-primary);
      text-align: center;
    }
  }

  .share-btn {
    display: flex;
    align-items: center;
    gap: var(--space-sm);
    padding: var(--space-md) var(--space-xl);
    border-radius: var(--radius-lg);
    font-size: var(--text-base);
    font-weight: var(--font-medium);
    cursor: pointer;
    transition:
      background var(--transition-normal),
      box-shadow var(--transition-normal);
    text-decoration: none;
    border: none;
    min-height: var(--touch-target-enhanced);
    min-width: var(--touch-target-enhanced);
    line-height: var(--leading-enhanced);
    letter-spacing: var(--letter-spacing-enhanced);
    background: var(--color-secondary-600);
    color: var(--color-white);

    &:hover {
      background: var(--color-secondary-700);
    }

    &:focus-visible {
      outline: var(--focus-outline);
      outline-offset: var(--focus-ring-offset);
    }
  }

  .button-wrapper {
    display: flex;
    gap: var(--space-md);
    justify-content: center;
    flex-wrap: wrap;
  }

  // =================================================
  // GUEST LOGIN SECTION
  // =================================================

  .guest-login-section {
    margin-bottom: var(--space-xl);
    padding: var(--space-lg);
    background: var(--bg-secondary);
    border: var(--border-width-thin) solid var(--border-subtle);
    border-radius: var(--radius-lg);

    .guest-login-content {
      text-align: center;
      max-width: 400px;
      margin: 0 auto;
    }

    .guest-login-header {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: var(--space-md);
      margin-bottom: var(--space-md);

      svg {
        color: var(--color-primary-500);
      }
    }

    .guest-login-title {
      font-size: var(--text-lg);
      font-weight: var(--font-semibold);
      color: var(--text-primary);
      margin: 0;
    }

    .guest-login-description {
      font-size: var(--text-base);
      color: var(--text-secondary);
      line-height: var(--leading-relaxed);
      margin-bottom: var(--space-lg);
    }

    .guest-login-form {
      margin-bottom: var(--space-lg);
    }

    .guest-login-alternative {
      padding-top: var(--space-md);
      border-top: var(--border-width-thin) solid var(--border-subtle);

      .guest-login-alternative-text {
        font-size: var(--text-sm);
        color: var(--text-tertiary);
        margin: 0;
        line-height: var(--leading-relaxed);
      }
    }

    @media (max-width: 48em) {
      padding: var(--space-md);

      .guest-login-content {
        max-width: 100%;
      }
    }
  }
</style>

<script type="module">
  /**
   * EndOverlay Component Script
   *
   * Modern ES6+ implementation with async/await, arrow functions, and destructuring.
   * Imports and initializes the EndOverlay utilities for client-side functionality.
   * This follows the project's guideline of extracting complex scripts to external TypeScript files.
   */
  import setupEndOverlay from "/src/utils/endOverlay";

  // Initialize the end overlay functionality with modern async/await
  // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
  const initializeOverlay = async () => {
    try {
      await setupEndOverlay();
    } catch (error) {
      console.error("Failed to initialize EndOverlay:", error);
    }
  };

  // Start initialization
  initializeOverlay();
</script>
