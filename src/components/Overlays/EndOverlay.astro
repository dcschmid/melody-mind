---
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import ShareOverlay from "./ShareOverlay.astro";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

interface Props {
  title?: string;
  motivationText?: string;
  id: string;
  "data-score"?: string;
  "data-category"?: string;
  "data-difficulty"?: string;
}

const {
  title = t("game.end.title"),
  motivationText = t("game.end.motivation"),
  id,
  "data-score": initialScore = "0",
  "data-category": category = "",
  "data-difficulty": difficulty = "",
} = Astro.props;
---

<div
  id={id}
  class="popup hidden fixed inset-0 z-50 flex items-center justify-center p-6 bg-zinc-900/90 backdrop-blur-md"
  role="dialog"
  aria-labelledby="popup-title"
  aria-modal="true"
  data-score={initialScore}
  data-category={category}
  data-difficulty={difficulty}
>
  <div
    class="popupContent w-full max-w-md bg-zinc-800 border border-zinc-700 rounded-xl shadow-xl p-6 md:p-8 text-center focus:outline-2 focus:outline-sky-300 focus:outline-offset-2"
  >
    <h2 id="popup-title" class="title text-2xl font-bold text-sky-500 mb-6">
      {title}
    </h2>

    <p class="motivationText text-zinc-300 text-lg mb-6 italic">
      {motivationText}
    </p>

    <div class="scoreSection my-6">
      <span class="scoreLabel text-zinc-300 mr-2">{t("game.end.score")}</span>
      <span id="popup-score" class="scoreValue text-xl font-bold text-sky-400"
        >0</span
      >
    </div>

    <ShareOverlay />

    <div class="buttonWrapper mt-8">
      <button
        id="restart-button"
        class="restartButton min-w-[48px] min-h-[48px] py-3 px-6 bg-sky-500 hover:bg-sky-400 text-zinc-900 font-semibold rounded-lg transition-colors"
        aria-label={t("game.end.newgame")}
      >
        {t("game.end.newgame")}
      </button>
    </div>
  </div>
</div>

<style>
  /* JS Compatibility Classes */
  .popup.hidden {
    pointer-events: none;
    visibility: hidden;
    opacity: 0;
  }

  /* Pop-in Animation */
  @keyframes pop-in {
    from {
      transform: scale(0.95);
      opacity: 0;
    }

    to {
      transform: scale(1);
      opacity: 1;
    }
  }

  .popup:not(.hidden) .popupContent {
    animation: pop-in 0.3s ease-out;
  }

  /* High Contrast Support */
  @media (forced-colors: active) {
    .popupContent {
      border: 2px solid CanvasText;
    }

    .restartButton {
      border: 2px solid ButtonText;
    }
  }

  /* Reduced Motion Support */
  @media (prefers-reduced-motion: reduce) {
    .popup:not(.hidden) .popupContent {
      animation: none;
    }
  }

  /* Print Styles */
  @media print {
    .popup {
      position: static;
      padding: 0;
      background: none;
    }

    .popupContent {
      border: 1px solid #000;
      box-shadow: none;
    }

    .restartButton {
      display: none;
    }
  }
</style>

<script>
  import { shareScore } from "../../utils/share/shareUtils";

  // Event-Listener fÃ¼r Share-Buttons
  document.querySelectorAll("[data-share]").forEach((button) => {
    button.addEventListener("click", (e) => {
      const platform = (e.currentTarget as HTMLElement).dataset.share;
      const popup = document.querySelector("#endgame-popup");

      if (platform && popup) {
        const score = parseInt(popup.getAttribute("data-score") || "0");
        const category = popup.getAttribute("data-category") || "";
        const difficulty = popup.getAttribute("data-difficulty") || "";

        shareScore(platform, {
          score,
          category,
          difficulty,
        });
      }
    });
  });
</script>
