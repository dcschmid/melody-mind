---
/**
 * @component ShareOverlay
 * @description A reusable sharing component that provides multiple ways to share game results.
 * This component is optimized for WCAG AAA accessibility standards and high performance.
 *
 * Features:
 * - Native Web Share API integration (when supported)
 * - Platform-specific sharing (Twitter/X, WhatsApp, Email)
 * - Copy to clipboard functionality
 * - Full keyboard accessibility and screen reader support
 * - High contrast mode support
 * - Performance-optimized animations and event handling
 */
import { Icon } from "astro-icon/components";
import { getLangFromUrl, useTranslations } from "@utils/i18n";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<div class="mt-6 text-center">
  <h3 class="text-xl font-semibold text-zinc-50 mb-4">{t("share.title")}</h3>

  <!-- Status announcer for screen readers -->
  <div
    id="share-status-announcer"
    aria-live="polite"
    aria-atomic="true"
    class="sr-only"
  >
  </div>

  <div
    id="share-buttons-container"
    class="flex flex-wrap justify-center items-center gap-3 mt-4"
    role="group"
    aria-label={t("share.buttons.group.label")}
  >
    <!-- Native Web Share API Button (hidden by default, shown when supported) -->
    <button
      id="native-share-button"
      class="shareButton-native hidden min-w-[48px] min-h-[48px] flex items-center justify-center gap-2 px-4 py-3 bg-indigo-700 hover:bg-indigo-800 active:bg-indigo-900 text-white font-medium rounded-lg transform-gpu transition-transform duration-200 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-400"
      aria-label={t("share.native")}
      type="button"
    >
      <Icon
        name="share"
        width={24}
        height={24}
        class="w-6 h-6"
        aria-hidden="true"
      />
      <span class="text-base">{t("share.native.label")}</span>
    </button>

    <!-- Twitter/X Share -->
    <button
      class="shareButton-twitter min-w-[48px] min-h-[48px] flex items-center justify-center gap-2 px-4 py-3 bg-zinc-800 hover:bg-zinc-700 active:bg-zinc-900 text-white font-medium rounded-lg transform-gpu transition-transform duration-200 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-zinc-400"
      data-share="twitter"
      aria-label={t("share.twitter")}
      type="button"
    >
      <Icon
        name="twitter"
        width={24}
        height={24}
        class="w-6 h-6"
        aria-hidden="true"
      />
      <span class="text-base">X</span>
    </button>

    <!-- WhatsApp Share -->
    <button
      class="shareButton-whatsapp min-w-[48px] min-h-[48px] flex items-center justify-center gap-2 px-4 py-3 bg-green-700 hover:bg-green-800 active:bg-green-900 text-white font-medium rounded-lg transform-gpu transition-transform duration-200 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-green-400"
      data-share="whatsapp"
      aria-label={t("share.whatsapp")}
      type="button"
    >
      <Icon
        name="whatsapp"
        width={24}
        height={24}
        class="w-6 h-6"
        aria-hidden="true"
      />
      <span class="text-base">WhatsApp</span>
    </button>

    <!-- Email Share -->
    <button
      class="shareButton-email min-w-[48px] min-h-[48px] flex items-center justify-center gap-2 px-4 py-3 bg-amber-700 hover:bg-amber-800 active:bg-amber-900 text-white font-medium rounded-lg transform-gpu transition-transform duration-200 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-amber-400"
      data-share="email"
      aria-label={t("share.email")}
      type="button"
    >
      <Icon
        name="mail"
        width={24}
        height={24}
        class="w-6 h-6"
        aria-hidden="true"
      />
      <span class="text-base">{t("share.email.label")}</span>
    </button>
  </div>

  <!-- Copy to Clipboard Button -->
  <div class="mt-4">
    <button
      id="copy-share-button"
      class="shareButton-copy inline-flex items-center justify-center gap-2 px-4 py-2 border-2 border-sky-500 hover:border-sky-400 text-sky-400 hover:text-sky-300 font-medium rounded-lg transform-gpu transition-transform duration-200 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-sky-400 min-w-[48px] min-h-[44px]"
      aria-label={t("share.copy")}
      type="button"
    >
      <Icon
        name="clipboard"
        width={20}
        height={20}
        class="w-5 h-5"
        aria-hidden="true"
      />
      <span class="text-base" id="copy-button-text"
        >{t("share.copy.label")}</span
      >
    </button>
  </div>
</div>

<style>
  /* GPU-accelerated hover effect with fallback for older browsers */
  [class^="shareButton-"]:hover {
    transform: translateY(-2px);
    box-shadow:
      0 4px 6px -1px rgb(0 0 0 / 0.1),
      0 2px 4px -2px rgb(0 0 0 / 0.1);
  }

  /* Improved a11y focus styles with high contrast */
  [class^="shareButton-"]:focus-visible {
    outline: 3px solid currentColor;
    outline-offset: 3px;
  }

  /* High Contrast Mode support */
  @media (forced-colors: active) {
    [class^="shareButton-"] {
      border: 2px solid ButtonText;
      background-color: ButtonFace;
      color: ButtonText;
      forced-color-adjust: none;
    }

    [class^="shareButton-"]:focus-visible {
      outline: 3px solid Highlight;
    }

    /* Ensure icon visibility in high contrast mode */
    [class^="shareButton-"] svg {
      fill: ButtonText;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    [class^="shareButton-"] {
      transition: none !important;
    }

    [class^="shareButton-"]:hover {
      transform: none !important;
      box-shadow: none !important;
    }
  }

  /* Screen reader only class - hides content visually but keeps it available to screen readers */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }
</style>

<script>
  /**
   * ShareOverlay Component Script
   *
   * Manages sharing game results via multiple methods while ensuring
   * high performance and full accessibility compliance (WCAG AAA).
   *
   * @module ShareOverlay
   */
  import { shareScore } from "../../utils/share/shareUtils";
  import type { ShareData } from "../../utils/share/shareUtils";

  /**
   * Store Element References
   * Cached DOM references to improve performance and prevent repeated DOM queries
   */
  interface ElementRefs {
    nativeShareButton: HTMLButtonElement | null;
    copyButton: HTMLButtonElement | null;
    copyButtonText: HTMLElement | null;
    statusAnnouncer: HTMLElement | null;
    shareButtons: NodeListOf<HTMLButtonElement> | null;
  }

  const elements: ElementRefs = {
    nativeShareButton: null,
    copyButton: null,
    copyButtonText: null,
    statusAnnouncer: null,
    shareButtons: null,
  };

  /**
   * Constants for UI interactions
   */
  const UI_CONSTANTS = {
    COPY_SUCCESS_DURATION: 2000, // How long to show the success message in ms
    COPY_ORIGINAL_TEXT: "", // Will be populated on initialization
    ANIMATION_DURATION: 200, // Match to CSS transition duration
  };

  /**
   * Initialize the sharing functionality
   * Sets up all sharing buttons and their respective interactions
   */
  function initializeSharing(): void {
    // Cache DOM elements for better performance
    cacheElements();

    if (!elements.statusAnnouncer || !elements.copyButton) {
      console.warn("ShareOverlay: Required elements not found");
      return;
    }

    // Store original copy button text
    UI_CONSTANTS.COPY_ORIGINAL_TEXT =
      elements.copyButtonText?.textContent || "";

    // Set up individual sharing methods
    initializeNativeSharing();
    initializeClipboardCopy();
    initializePlatformSharing();

    // Set up cleanup for potential memory leaks
    setupCleanupHandlers();
  }

  /**
   * Cache DOM elements to improve performance by avoiding repeated queries
   */
  function cacheElements(): void {
    elements.nativeShareButton = document.getElementById(
      "native-share-button",
    ) as HTMLButtonElement;
    elements.copyButton = document.getElementById(
      "copy-share-button",
    ) as HTMLButtonElement;
    elements.copyButtonText = document.getElementById("copy-button-text");
    elements.statusAnnouncer = document.getElementById(
      "share-status-announcer",
    );
    elements.shareButtons =
      document.querySelectorAll<HTMLButtonElement>("[data-share]");
  }

  /**
   * Initialize native Web Share API button if supported by the browser
   * This provides the most integrated sharing experience on supporting platforms
   */
  function initializeNativeSharing(): void {
    const nativeShareSupported = "share" in navigator;

    if (!nativeShareSupported || !elements.nativeShareButton) {
      return;
    }

    // Show the native share button
    elements.nativeShareButton.classList.remove("hidden");
    elements.nativeShareButton.classList.add("flex");

    // Set up click handler for native sharing
    elements.nativeShareButton.addEventListener("click", async (event) => {
      const button = event.currentTarget as HTMLButtonElement;

      // Prevent multiple clicks
      if (button.hasAttribute("disabled")) return;

      // Disable during operation to prevent multiple shares
      button.setAttribute("disabled", "disabled");

      try {
        const gameData = getGameDataFromPopup();
        if (!gameData) {
          announceToScreenReader("Unable to share. Game data not found.");
          return;
        }

        const shareText = await generateShareTextFromUtils(gameData);
        await navigator.share({
          title: "Melody Mind Music Quiz",
          text: shareText.split("\n\n").slice(0, -1).join("\n\n"),
          url: window.location.href,
        });

        // Announce success to screen readers
        announceToScreenReader("Successfully shared your score.");
      } catch (err) {
        if (err instanceof Error && err.name !== "AbortError") {
          console.warn("Error using Web Share API:", err);
          announceToScreenReader("Sharing failed. Please try another method.");
        }
      } finally {
        // Re-enable button after operation completes
        button.removeAttribute("disabled");
      }
    });
  }

  /**
   * Initialize platform-specific sharing buttons (Twitter, WhatsApp, Email)
   */
  function initializePlatformSharing(): void {
    if (!elements.shareButtons || !elements.shareButtons.length) {
      return;
    }

    // Use event delegation for better performance
    document.addEventListener("click", (event) => {
      const target = event.target as HTMLElement;
      const button = target.closest("[data-share]") as HTMLButtonElement;

      if (!button) return;

      // Prevent default to avoid any potential form submissions
      event.preventDefault();

      // Get platform from data attribute
      const platform = button.getAttribute("data-share");
      if (!platform) return;

      // Get game data and share
      const gameData = getGameDataFromPopup();
      if (!gameData) {
        announceToScreenReader("Unable to share. Game data not found.");
        return;
      }

      // Use the sharing utility
      try {
        shareScore(platform, gameData);
        announceToScreenReader(`Opened ${platform} sharing.`);
      } catch (err) {
        console.warn(`Error sharing to ${platform}:`, err);
        announceToScreenReader(`Failed to share to ${platform}.`);
      }
    });
  }

  /**
   * Initialize copy-to-clipboard functionality with accessibility announcements
   */
  function initializeClipboardCopy(): void {
    if (!elements.copyButton || !elements.copyButtonText) {
      return;
    }

    const originalCopyText = UI_CONSTANTS.COPY_ORIGINAL_TEXT;
    if (!originalCopyText) return;

    elements.copyButton.addEventListener("click", async (event) => {
      const button = event.currentTarget as HTMLButtonElement;

      // Prevent multiple clicks
      if (button.hasAttribute("disabled")) return;

      // Disable during operation
      button.setAttribute("disabled", "disabled");

      try {
        const gameData = getGameDataFromPopup();
        if (!gameData) {
          announceToScreenReader("Unable to copy. Game data not found.");
          return;
        }

        // Generate share text directly from the utils
        const shareText = await generateShareTextFromUtils(gameData);
        const shareUrl = window.location.href;
        const fullText = `${shareText}\n\n${shareUrl}`;

        await navigator.clipboard.writeText(fullText);

        // Show success state
        if (elements.copyButtonText) {
          elements.copyButtonText.textContent = "✓ Copied!";
        }
        button.classList.add(
          "bg-emerald-100",
          "text-emerald-800",
          "border-emerald-300",
        );

        // Announce success to screen readers
        announceToScreenReader("Score copied to clipboard successfully!");

        // Reset after delay
        setTimeout(() => {
          if (elements.copyButtonText) {
            elements.copyButtonText.textContent = originalCopyText;
          }
          button.classList.remove(
            "bg-emerald-100",
            "text-emerald-800",
            "border-emerald-300",
          );
          // Re-enable button after reset
          button.removeAttribute("disabled");
        }, UI_CONSTANTS.COPY_SUCCESS_DURATION);
      } catch (err) {
        console.warn("Error copying text:", err);

        if (elements.copyButtonText) {
          elements.copyButtonText.textContent = "Copy failed";
        }

        // Announce failure to screen readers
        announceToScreenReader("Failed to copy score to clipboard.");

        // Reset after shorter delay
        setTimeout(() => {
          if (elements.copyButtonText) {
            elements.copyButtonText.textContent = originalCopyText;
          }
          // Re-enable button
          button.removeAttribute("disabled");
        }, UI_CONSTANTS.COPY_SUCCESS_DURATION / 2);
      }
    });
  }

  /**
   * Announce messages to screen readers using the status announcer
   *
   * @param {string} message - The message to announce
   */
  function announceToScreenReader(message: string): void {
    if (!elements.statusAnnouncer) return;

    // Set the message
    elements.statusAnnouncer.textContent = message;

    // Clear after screen readers have had time to read it
    setTimeout(() => {
      if (elements.statusAnnouncer) {
        elements.statusAnnouncer.textContent = "";
      }
    }, 5000);
  }

  /**
   * Extract game data from the popup element
   *
   * @returns {ShareData|null} The game data or null if not available
   */
  function getGameDataFromPopup(): ShareData | null {
    const popup = document.querySelector("#endgame-popup");
    if (!popup) return null;

    return {
      score: parseInt(popup.getAttribute("data-score") || "0"),
      category: popup.getAttribute("data-category") || "",
      difficulty: popup.getAttribute("data-difficulty") || "",
    };
  }

  /**
   * Generate share text using the utility function
   * This creates a mock sharing to get the generated text without actually sharing
   *
   * @param {ShareData} data - The game data
   * @returns {Promise<string>} The generated share text
   */
  async function generateShareTextFromUtils(data: ShareData): Promise<string> {
    // Create a temporary element to capture the text
    const originalConsoleWarn = console.warn;
    let shareText = "";

    // Temporarily override window.open to capture the share text
    const originalWindowOpen = window.open;
    window.open = function (url) {
      if (!url) return null as any;
      const textMatch = decodeURIComponent(url.toString()).match(
        /text=([^&]+)/,
      );
      if (textMatch && textMatch[1]) {
        shareText = textMatch[1].replace(/\+/g, " ");
      }
      return null as any;
    };

    // Temporarily silence console warnings
    console.warn = () => {};

    // Use the utility function to generate the share text
    await shareScore("twitter", data);

    // Restore original functions
    window.open = originalWindowOpen;
    console.warn = originalConsoleWarn;

    return shareText;
  }

  /**
   * Set up cleanup handlers to prevent memory leaks when the component is unmounted
   */
  function setupCleanupHandlers(): void {
    // Define the cleanup function
    const cleanup = () => {
      // Remove event listeners
      if (elements.nativeShareButton) {
        elements.nativeShareButton.removeEventListener("click", () => {});
      }
      if (elements.copyButton) {
        elements.copyButton.removeEventListener("click", () => {});
      }

      // Clear any references
      Object.keys(elements).forEach((key) => {
        (elements as any)[key] = null;
      });
    };

    // Attach to Astro's lifecycle events
    document.addEventListener("astro:before-swap", cleanup);
    document.addEventListener("astro:after-swap", cleanup);
  }

  // Initialize sharing features when the DOM is ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeSharing);
  } else {
    initializeSharing();
  }
</script>
