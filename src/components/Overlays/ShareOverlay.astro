---
/**
 * @component ShareOverlay
 * @description A reusable sharing component that provides multiple ways to share game results.
 * This component is optimized for WCAG AAA accessibility standards and high performance.
 *
 * Features:
 * - Native Web Share API integration (when supported)
 * - Platform-specific sharing (Twitter/X, WhatsApp, Email)
 * - Copy to clipboard functionality with fallback options
 * - Full keyboard accessibility and screen reader support
 * - High contrast mode support
 * - Performance-optimized animations and event handling
 * - Enhanced error recovery and user guidance
 * - Fallback content when game data is unavailable
 */
import { Icon } from "astro-icon/components";
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import type { ShareData } from "@utils/share/shareUtils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

/**
 * Component Props Interface
 * Defines expected props for better type safety and documentation
 */
export interface Props {
  /** Game data to share - if not provided, component will attempt to extract from DOM */
  gameData?: ShareData;
  /** Custom aria-label for the share buttons group */
  shareGroupLabel?: string;
  /** Whether to show fallback content when no game data is available */
  showFallback?: boolean;
}

const {
  gameData,
  shareGroupLabel = t("share.buttons.group.label"),
  showFallback = true,
} = Astro.props;
---

<div class="share-overlay" data-game-data={gameData ? JSON.stringify(gameData) : ""}>
  <h3 class="share-overlay__title">{t("share.title")}</h3>

  <!-- Status announcer for screen readers -->
  <div id="share-status-announcer" aria-live="polite" aria-atomic="true" class="sr-only"></div>

  <div
    id="share-buttons-container"
    class="share-overlay__buttons-container"
    role="group"
    aria-label={shareGroupLabel}
  >
    <!-- Native Web Share API Button (hidden by default, shown when supported) -->
    <button
      id="native-share-button"
      class="share-overlay__button share-overlay__button--native share-overlay__button--hidden"
      aria-label={t("share.native")}
      type="button"
    >
      <Icon name="share" width={24} height={24} class="share-overlay__icon" aria-hidden="true" />
      <span class="share-overlay__button-text">{t("share.native.label")}</span>
    </button>

    <!-- Twitter/X Share -->
    <button
      class="share-overlay__button share-overlay__button--twitter"
      data-share="twitter"
      aria-label={t("share.twitter")}
      type="button"
    >
      <Icon name="twitter" width={24} height={24} class="share-overlay__icon" aria-hidden="true" />
      <span class="share-overlay__button-text">X</span>
    </button>

    <!-- WhatsApp Share -->
    <button
      class="share-overlay__button share-overlay__button--whatsapp"
      data-share="whatsapp"
      aria-label={t("share.whatsapp")}
      type="button"
    >
      <Icon name="whatsapp" width={24} height={24} class="share-overlay__icon" aria-hidden="true" />
      <span class="share-overlay__button-text">WhatsApp</span>
    </button>

    <!-- Email Share -->
    <button
      class="share-overlay__button share-overlay__button--email"
      data-share="email"
      aria-label={t("share.email")}
      type="button"
    >
      <Icon name="mail" width={24} height={24} class="share-overlay__icon" aria-hidden="true" />
      <span class="share-overlay__button-text">{t("share.email.label")}</span>
    </button>
  </div>

  <!-- Copy to Clipboard Button -->
  <div class="share-overlay__clipboard-section">
    <button
      id="copy-share-button"
      class="share-overlay__clipboard-button"
      aria-label={t("share.copy")}
      type="button"
    >
      <Icon
        name="clipboard"
        width={20}
        height={20}
        class="share-overlay__clipboard-icon"
        aria-hidden="true"
      />
      <span class="share-overlay__clipboard-text" id="copy-button-text"
        >{t("share.copy.label")}</span
      >
    </button>
  </div>

  <!-- Fallback Content when Game Data is Unavailable -->
  {
    showFallback && (
      <div id="share-fallback-content" class="share-overlay__fallback" style="display: none;">
        <div class="share-overlay__fallback-message">
          <Icon
            name="alert-circle"
            width={24}
            height={24}
            class="share-overlay__fallback-icon"
            aria-hidden="true"
          />
          <p class="share-overlay__fallback-text">{t("share.fallback.message")}</p>
        </div>
        <div class="share-overlay__fallback-actions">
          <button
            id="retry-share-button"
            class="share-overlay__fallback-button"
            type="button"
            aria-label={t("share.fallback.retry.label")}
          >
            <Icon
              name="refresh"
              width={16}
              height={16}
              class="share-overlay__fallback-button-icon"
              aria-hidden="true"
            />
            {t("share.fallback.retry.text")}
          </button>
          <button
            id="manual-copy-button"
            class="share-overlay__fallback-button share-overlay__fallback-button--secondary"
            type="button"
            aria-label={t("share.fallback.manual.label")}
          >
            <Icon
              name="clipboard"
              width={16}
              height={16}
              class="share-overlay__fallback-button-icon"
              aria-hidden="true"
            />
            {t("share.fallback.manual.text")}
          </button>
        </div>
      </div>
    )
  }
</div>

<style>
  /* ======================================
   * SHARED UTILITY CLASSES (DRY OPTIMIZATION)
   * ====================================== */

  /* Shared icon styles to reduce repetition */
  .share-overlay__icon,
  .share-overlay__clipboard-icon,
  .share-overlay__fallback-icon,
  .share-overlay__fallback-button-icon {
    flex-shrink: 0;
  }

  /* Shared button transition styles */
  .share-overlay__button,
  .share-overlay__clipboard-button,
  .share-overlay__fallback-button {
    transition:
      transform var(--transition-fast),
      background-color var(--transition-fast),
      border-color var(--transition-fast);
  }

  /* ======================================
   * SHARE OVERLAY COMPONENT STYLES
   * WCAG AAA COMPLIANT WITH CSS VARIABLES
   * ====================================== */

  .share-overlay {
    margin-top: var(--space-xl);
    text-align: center;
  }

  .share-overlay__title {
    margin-bottom: var(--space-lg);
    font-size: var(--text-xl);
    font-weight: var(--font-semibold);
    color: var(--text-primary);
  }

  .share-overlay__buttons-container {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    justify-content: center;
    gap: var(--space-md);
    margin-top: var(--space-lg);
  }

  /* ======================================
   * BASE BUTTON STYLES
   * ====================================== */

  .share-overlay__button {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-sm);
    min-height: var(--min-touch-size);
    min-width: var(--min-touch-size);
    padding: var(--space-md) var(--space-lg);
    border: none;
    border-radius: var(--radius-lg);
    font-size: var(--text-base);
    font-weight: var(--font-medium);
    color: var(--text-primary);
    background: var(--bg-tertiary);
    cursor: pointer;
    /* Using shared transition styles for better maintainability */
    transform: translateZ(0); /* GPU acceleration */
  }

  .share-overlay__button:hover {
    transform: translateY(var(--animation-y-offset-small));
    box-shadow: var(--shadow-lg);
  }

  .share-overlay__button:active {
    transform: translateY(0);
  }

  .share-overlay__button:focus-visible {
    outline: var(--focus-outline);
    outline-offset: var(--focus-ring-offset);
  }

  .share-overlay__button:disabled {
    opacity: var(--opacity-disabled);
    cursor: not-allowed;
    transform: none;
  }

  /* ======================================
   * BUTTON VARIANTS
   * ====================================== */

  /* Native Share Button */
  .share-overlay__button--native {
    background: var(--interactive-primary);
    color: var(--btn-primary-text);
  }

  .share-overlay__button--native:hover:not(:disabled) {
    background: var(--interactive-primary-hover);
  }

  .share-overlay__button--native:active:not(:disabled) {
    background: var(--interactive-primary-active);
  }

  .share-overlay__button--hidden {
    display: none;
  }

  .share-overlay__button--native.share-overlay__button--visible {
    display: flex;
  }

  /* Twitter/X Button */
  .share-overlay__button--twitter {
    background: var(--color-neutral-800);
    color: var(--text-primary);
  }

  .share-overlay__button--twitter:hover:not(:disabled) {
    background: var(--color-neutral-700);
  }

  .share-overlay__button--twitter:active:not(:disabled) {
    background: var(--color-neutral-900);
  }

  /* WhatsApp Button */
  .share-overlay__button--whatsapp {
    background: var(--color-success-600);
    color: var(--text-primary);
  }

  .share-overlay__button--whatsapp:hover:not(:disabled) {
    background: var(--color-success-500);
  }

  .share-overlay__button--whatsapp:active:not(:disabled) {
    background: var(--color-success-700);
  }

  /* Email Button */
  .share-overlay__button--email {
    background: var(--color-warning-600);
    color: var(--text-primary);
  }

  .share-overlay__button--email:hover:not(:disabled) {
    background: var(--color-warning-500);
  }

  .share-overlay__button--email:active:not(:disabled) {
    background: var(--color-warning-700);
  }

  /* ======================================
   * CLIPBOARD SECTION
   * ====================================== */

  .share-overlay__clipboard-section {
    margin-top: var(--space-lg);
  }

  .share-overlay__clipboard-button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-sm);
    min-height: var(--min-touch-size);
    min-width: var(--min-touch-size);
    padding: var(--space-md) var(--space-lg);
    border: var(--border-width-thick) solid var(--color-info-500);
    border-radius: var(--radius-lg);
    background: transparent;
    font-size: var(--text-base);
    font-weight: var(--font-medium);
    color: var(--color-info-400);
    cursor: pointer;
    /* Using shared transition defined in utility classes */
  }

  .share-overlay__clipboard-button:hover:not(:disabled) {
    border-color: var(--color-info-400);
    color: var(--color-info-300);
    transform: translateY(var(--animation-y-offset-small));
  }

  .share-overlay__clipboard-button:active:not(:disabled) {
    transform: translateY(0);
  }

  .share-overlay__clipboard-button:focus-visible {
    outline: var(--focus-outline);
    outline-offset: var(--focus-ring-offset);
  }

  .share-overlay__clipboard-button:disabled {
    opacity: var(--opacity-disabled);
    cursor: not-allowed;
    transform: none;
  }

  /* Success state for clipboard button */
  .share-overlay__clipboard-button--success {
    background: var(--color-success-900);
    border-color: var(--color-success-400);
    color: var(--color-success-100); /* Enhanced contrast for AAA compliance */
  }

  /* Error state for clipboard button */
  .share-overlay__clipboard-button--error {
    background: var(--color-error-900);
    border-color: var(--color-error-400);
    color: var(--color-error-100); /* Enhanced contrast for AAA compliance */
  }

  /* ======================================
   * FALLBACK CONTENT STYLES
   * ====================================== */

  .share-overlay__fallback {
    margin-top: var(--space-lg);
    padding: var(--space-lg);
    border: var(--border-width-default) solid var(--color-warning-600);
    border-radius: var(--radius-lg);
    background: var(--color-warning-950);
    text-align: center;
  }

  .share-overlay__fallback-message {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--space-md);
    margin-bottom: var(--space-lg);
  }

  .share-overlay__fallback-icon {
    color: var(--color-warning-400);
    width: var(--space-xl); /* Using CSS variable instead of hardcoded 24px */
    height: var(--space-xl);
    flex-shrink: 0;
  }

  .share-overlay__fallback-text {
    color: var(--color-warning-100); /* Enhanced contrast for AAA compliance */
    font-size: var(--text-base);
    margin: 0;
    line-height: 1.5;
  }

  .share-overlay__fallback-actions {
    display: flex;
    flex-wrap: wrap;
    gap: var(--space-md);
    justify-content: center;
    align-items: center;
  }

  .share-overlay__fallback-button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-sm);
    min-height: var(--min-touch-size);
    padding: var(--space-sm) var(--space-md);
    border: var(--border-width-default) solid var(--interactive-primary);
    border-radius: var(--radius-md);
    background: var(--interactive-primary);
    color: var(--btn-primary-text);
    font-size: var(--text-sm);
    font-weight: var(--font-medium);
    cursor: pointer;
    transition:
      transform var(--transition-fast),
      background-color var(--transition-fast),
      border-color var(--transition-fast);
  }

  .share-overlay__fallback-button:hover:not(:disabled) {
    background: var(--interactive-primary-hover);
    border-color: var(--interactive-primary-hover);
    transform: translateY(var(--animation-y-offset-small));
  }

  .share-overlay__fallback-button:active:not(:disabled) {
    background: var(--interactive-primary-active);
    border-color: var(--interactive-primary-active);
    transform: translateY(0);
  }

  .share-overlay__fallback-button:focus-visible {
    outline: var(--focus-outline);
    outline-offset: var(--focus-ring-offset);
  }

  .share-overlay__fallback-button:disabled {
    opacity: var(--opacity-disabled);
    cursor: not-allowed;
    transform: none;
  }

  .share-overlay__fallback-button--secondary {
    background: transparent;
    color: var(--color-warning-200); /* Enhanced contrast */
    border-color: var(--color-warning-500);
  }

  .share-overlay__fallback-button--secondary:hover:not(:disabled) {
    background: var(--color-warning-900);
    border-color: var(--color-warning-400);
    color: var(--color-warning-100);
  }

  .share-overlay__fallback-button--secondary:active:not(:disabled) {
    background: var(--color-warning-800);
  }

  .share-overlay__fallback-button-icon {
    width: var(--space-md); /* Using CSS variable instead of hardcoded 16px */
    height: var(--space-md);
    flex-shrink: 0;
  }

  /* ======================================
   * ICON STYLES - OPTIMIZED WITH CSS VARIABLES
   * ====================================== */

  .share-overlay__icon,
  .share-overlay__clipboard-icon {
    width: var(--space-xl); /* 32px equivalent using existing variables */
    height: var(--space-xl);
    flex-shrink: 0;
  }

  .share-overlay__clipboard-icon {
    width: var(--space-lg); /* 24px equivalent using existing variables */
    height: var(--space-lg);
  }

  /* ======================================
   * TEXT STYLES
   * ====================================== */

  .share-overlay__button-text,
  .share-overlay__clipboard-text {
    font-size: var(--text-base);
    white-space: nowrap;
  }

  /* ======================================
   * ACCESSIBILITY ENHANCEMENTS
   * ====================================== */

  /* Screen reader only content */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }

  /* High contrast mode support */
  @media (forced-colors: active) {
    .share-overlay__button,
    .share-overlay__clipboard-button {
      border: var(--border-width-thick) solid ButtonText;
      background-color: ButtonFace;
      color: ButtonText;
      forced-color-adjust: none;
    }

    .share-overlay__button:focus-visible,
    .share-overlay__clipboard-button:focus-visible {
      outline: var(--border-width-enhanced) solid Highlight;
    }

    .share-overlay__icon,
    .share-overlay__clipboard-icon {
      fill: ButtonText;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .share-overlay__button,
    .share-overlay__clipboard-button {
      transition: none;
    }

    .share-overlay__button:hover,
    .share-overlay__clipboard-button:hover {
      transform: none;
    }
  }

  /* ======================================
   * RESPONSIVE DESIGN - OPTIMIZED WITH CSS VARIABLES
   * ====================================== */

  @media (max-width: calc(var(--breakpoint-sm) - var(--breakpoint-offset))) {
    .share-overlay__buttons-container {
      gap: var(--space-sm);
    }

    .share-overlay__button,
    .share-overlay__clipboard-button {
      padding: var(--space-sm) var(--space-md);
      font-size: var(--text-sm);
    }

    .share-overlay__button-text,
    .share-overlay__clipboard-text {
      font-size: var(--text-sm);
    }
  }

  /* ======================================
   * PERFORMANCE OPTIMIZATIONS
   * ====================================== */

  /* Enable GPU acceleration for better performance */
  .share-overlay__button,
  .share-overlay__clipboard-button {
    will-change: transform;
    backface-visibility: hidden;
    perspective: 1000px;
  }

  /* Optimize repaints during animations */
  .share-overlay__button:hover,
  .share-overlay__clipboard-button:hover {
    will-change: transform, box-shadow;
  }

  /* Remove will-change after animations complete */
  .share-overlay__button:not(:hover):not(:focus),
  .share-overlay__clipboard-button:not(:hover):not(:focus) {
    will-change: auto;
  }

  /* Optimize icon rendering */
  .share-overlay__icon,
  .share-overlay__clipboard-icon {
    will-change: auto;
    image-rendering: -webkit-optimize-contrast;
    image-rendering: crisp-edges;
  }

  /* Container queries for responsive optimization */
  @container (min-width: var(--container-query-lg)) {
    .share-overlay__buttons-container {
      gap: var(--space-lg);
    }
  }
</style>

<script
  is:inline
  define:vars={{
    // Share accessibility translations
    shareAccessibilityDataUnavailable: t("share.accessibility.data_unavailable"),
    shareAccessibilityRetrying: t("share.accessibility.retrying"),
    shareAccessibilityDataFound: t("share.accessibility.data_found"),
    shareAccessibilityDataStillUnavailable: t("share.accessibility.data_still_unavailable"),
    shareAccessibilityRetryFailed: t("share.accessibility.retry_failed"),
    shareAccessibilityLinkCopiedFallback: t("share.accessibility.link_copied_fallback"),
    shareAccessibilityCopyFailedManual: t("share.accessibility.copy_failed_manual"),
    shareAccessibilityScoreShared: t("share.accessibility.score_shared"),
    shareAccessibilitySharingCancelled: t("share.accessibility.sharing_cancelled"),
    shareAccessibilityPlatformShareFailed: t("share.accessibility.platform_share_failed"),
    shareAccessibilityTryAlternativeMethods: t("share.accessibility.try_alternative_methods"),
    shareAccessibilityScoreCopied: t("share.accessibility.score_copied"),
    shareAccessibilityNativeShareFailed: t("share.accessibility.native_share_failed"),
    shareAccessibilityTryPlatformButtons: t("share.accessibility.try_platform_buttons"),
    shareAccessibilityPlatformOpened: t("share.accessibility.platform_opened"),
  }}
>
  /**
   * ShareOverlay Component Script (TypeScript Optimized)
   * Manages sharing game results with DRY principles and CSS variables optimization
   */

  // Remove unused variable
  // shareAccessibilityLinkCopied was removed as it's not used in the optimized version

  // Error types constants
  const ShareErrorType = {
    NO_DATA: "NO_DATA",
    CLIPBOARD_FAILED: "CLIPBOARD_FAILED",
    NATIVE_SHARE_FAILED: "NATIVE_SHARE_FAILED",
    PLATFORM_SHARE_FAILED: "PLATFORM_SHARE_FAILED",
    NETWORK_ERROR: "NETWORK_ERROR",
    PERMISSION_DENIED: "PERMISSION_DENIED",
  };

  // Store Element References - cached DOM references for performance
  const elements = {
    nativeShareButton: null,
    copyButton: null,
    copyButtonText: null,
    statusAnnouncer: null,
    shareButtons: null,
    fallbackContent: null,
    retryButton: null,
    manualCopyButton: null,
  };

  // Constants for UI interactions
  const UI_CONSTANTS = {
    COPY_SUCCESS_DURATION: 2000,
    COPY_ORIGINAL_TEXT: "",
    ANIMATION_DURATION: 200,
  };

  // Initialize the sharing functionality
  function initializeSharing() {
    cacheElements();

    if (!elements.statusAnnouncer || !elements.copyButton) {
      console.warn("ShareOverlay: Required elements not found");
      return;
    }

    UI_CONSTANTS.COPY_ORIGINAL_TEXT = elements.copyButtonText?.textContent || "";

    initializeNativeSharing();
    initializeClipboardCopy();
    initializePlatformSharing();
    initializeFallbackHandlers();
    setupCleanupHandlers();
    validateGameDataAvailability();
  }

  // Validate game data availability
  function validateGameDataAvailability() {
    const gameData = getGameDataFromProps() || getGameDataFromPopup();

    if (!gameData || !isValidShareData(gameData)) {
      showFallbackContent();
    }
  }

  // Get game data from component props
  function getGameDataFromProps() {
    const overlay = document.querySelector(".share-overlay");
    if (!overlay) {
      return null;
    }

    const propsData = overlay.getAttribute("data-game-data");
    if (!propsData) {
      return null;
    }

    try {
      return JSON.parse(propsData);
    } catch {
      return null;
    }
  }

  // Validate share data
  function isValidShareData(data) {
    if (!data || typeof data !== "object") {
      return false;
    }

    let isValid = true;

    if (typeof data.score !== "number" || data.score < 0) {
      isValid = false;
    }
    if (!data.category || typeof data.category !== "string" || data.category.trim().length === 0) {
      isValid = false;
    }
    if (
      !data.difficulty ||
      typeof data.difficulty !== "string" ||
      data.difficulty.trim().length === 0
    ) {
      isValid = false;
    }

    const validDifficulties = ["easy", "medium", "hard"];
    if (data.difficulty && !validDifficulties.includes(data.difficulty)) {
      isValid = false;
    }

    return isValid;
  }

  // Show fallback content
  function showFallbackContent() {
    if (!elements.fallbackContent) {
      return;
    }

    const shareContainer = document.getElementById("share-buttons-container");
    const clipboardSection = document.querySelector(".share-overlay__clipboard-section");

    if (shareContainer) {
      shareContainer.style.display = "none";
    }
    if (clipboardSection) {
      clipboardSection.style.display = "none";
    }

    elements.fallbackContent.style.display = "block";
    announceToScreenReader(shareAccessibilityDataUnavailable);
  }

  // Hide fallback content
  function hideFallbackContent() {
    if (!elements.fallbackContent) {
      return;
    }

    const shareContainer = document.getElementById("share-buttons-container");
    const clipboardSection = document.querySelector(".share-overlay__clipboard-section");

    if (shareContainer) {
      shareContainer.style.display = "flex";
    }
    if (clipboardSection) {
      clipboardSection.style.display = "block";
    }

    elements.fallbackContent.style.display = "none";
  }

  // Initialize fallback handlers
  function initializeFallbackHandlers() {
    if (elements.retryButton) {
      elements.retryButton.addEventListener("click", handleRetryAction);
    }

    if (elements.manualCopyButton) {
      elements.manualCopyButton.addEventListener("click", handleManualCopyAction);
    }
  }

  // Handle retry action
  async function handleRetryAction() {
    if (!elements.retryButton) {
      return;
    }

    elements.retryButton.disabled = true;
    announceToScreenReader(shareAccessibilityRetrying);

    try {
      await new Promise((resolve) => setTimeout(resolve, 500));

      const gameData = getGameDataFromProps() || getGameDataFromPopup();

      if (gameData && isValidShareData(gameData)) {
        hideFallbackContent();
        announceToScreenReader(shareAccessibilityDataFound);
      } else {
        announceToScreenReader(shareAccessibilityDataStillUnavailable);
      }
    } catch (error) {
      console.warn("Error during retry:", error);
      announceToScreenReader(shareAccessibilityRetryFailed);
    } finally {
      elements.retryButton.disabled = false;
    }
  }

  // Handle manual copy action
  async function handleManualCopyAction() {
    if (!elements.manualCopyButton) {
      return;
    }

    elements.manualCopyButton.disabled = true;

    try {
      const fallbackText = `Check out this music quiz game! ${window.location.href}`;
      await copyTextFallback(fallbackText);
      announceToScreenReader(shareAccessibilityLinkCopiedFallback);

      // Update button text temporarily
      const originalText = elements.manualCopyButton.textContent;
      elements.manualCopyButton.textContent = "✓ Copied!";
      setTimeout(() => {
        if (elements.manualCopyButton && originalText) {
          elements.manualCopyButton.textContent = originalText;
        }
      }, 2000);
    } catch (error) {
      console.warn("Manual copy failed:", error);
      announceToScreenReader(shareAccessibilityCopyFailedManual);
    } finally {
      elements.manualCopyButton.disabled = false;
    }
  }

  // Fallback copy method
  async function copyTextFallback(text) {
    if (navigator.clipboard && window.isSecureContext) {
      try {
        await navigator.clipboard.writeText(text);
        return;
      } catch (error) {
        console.warn("Clipboard API failed, using fallback:", error);
      }
    }

    const textarea = document.createElement("textarea");
    textarea.value = text;
    textarea.style.position = "fixed";
    textarea.style.left = "-999999px";
    textarea.style.top = "-999999px";

    document.body.appendChild(textarea);
    textarea.focus();
    textarea.select();

    try {
      const successful = document.execCommand("copy");
      if (!successful) {
        throw new Error("execCommand copy failed");
      }
    } finally {
      document.body.removeChild(textarea);
    }
  }

  // Cache DOM elements
  function cacheElements() {
    elements.nativeShareButton = document.getElementById("native-share-button");
    elements.copyButton = document.getElementById("copy-share-button");
    elements.copyButtonText = document.getElementById("copy-button-text");
    elements.statusAnnouncer = document.getElementById("share-status-announcer");
    elements.shareButtons = document.querySelectorAll("[data-share]");
    elements.fallbackContent = document.getElementById("share-fallback-content");
    elements.retryButton = document.getElementById("retry-share-button");
    elements.manualCopyButton = document.getElementById("manual-copy-button");
  }

  // Initialize native sharing
  function initializeNativeSharing() {
    const nativeShareSupported = "share" in navigator;

    if (!nativeShareSupported || !elements.nativeShareButton) {
      return;
    }

    elements.nativeShareButton.classList.remove("share-overlay__button--hidden");
    elements.nativeShareButton.classList.add("share-overlay__button--visible");

    elements.nativeShareButton.addEventListener("click", async (event) => {
      const button = event.currentTarget;

      if (button.hasAttribute("disabled")) {
        return;
      }

      button.setAttribute("disabled", "disabled");

      try {
        const gameData = getGameDataFromProps() || getGameDataFromPopup();
        if (!gameData || !isValidShareData(gameData)) {
          await handleNativeShareError(ShareErrorType.NO_DATA, button);
          return;
        }

        const shareText = generateSimpleShareText(gameData);
        const shareData = {
          title: "Melody Mind Music Quiz",
          text: shareText,
          url: window.location.href,
        };

        if (navigator.canShare && !navigator.canShare(shareData)) {
          throw new Error("Share data not supported by this device");
        }

        await navigator.share(shareData);
        announceToScreenReader(shareAccessibilityScoreShared);
      } catch (err) {
        if (err.name === "AbortError") {
          announceToScreenReader(shareAccessibilitySharingCancelled);
        } else if (err.name === "NotAllowedError") {
          await handleNativeShareError(ShareErrorType.PERMISSION_DENIED, button, err);
        } else {
          await handleNativeShareError(ShareErrorType.NATIVE_SHARE_FAILED, button, err);
        }
      } finally {
        button.removeAttribute("disabled");
      }
    });
  }

  // Handle native share errors
  async function handleNativeShareError(errorType, button, error) {
    console.warn(`Native share error (${errorType}):`, error);

    const errorMessage = getErrorMessage(errorType);
    const recoveryMessage = getRecoveryMessage(errorType);

    announceToScreenReader(
      shareAccessibilityNativeShareFailed
        .replace("{errorMessage}", errorMessage)
        .replace("{recoveryMessage}", recoveryMessage)
    );

    if (errorType === ShareErrorType.NO_DATA) {
      setTimeout(() => {
        showFallbackContent();
      }, 1000);
    } else if (
      errorType === ShareErrorType.PERMISSION_DENIED ||
      errorType === ShareErrorType.NATIVE_SHARE_FAILED
    ) {
      announceToScreenReader(shareAccessibilityTryPlatformButtons);

      if (elements.copyButton) {
        elements.copyButton.style.border = "2px solid var(--color-warning-400)";
        setTimeout(() => {
          if (elements.copyButton) {
            elements.copyButton.style.border = "";
          }
        }, 3000);
      }
    }
  }

  // Initialize platform sharing
  function initializePlatformSharing() {
    if (!elements.shareButtons || !elements.shareButtons.length) {
      return;
    }

    document.addEventListener("click", async (event) => {
      const target = event.target;
      const button = target.closest("[data-share]");

      if (!button) {
        return;
      }

      event.preventDefault();

      if (button.hasAttribute("disabled")) {
        return;
      }

      const platform = button.getAttribute("data-share");
      if (!platform) {
        return;
      }

      button.setAttribute("disabled", "disabled");

      try {
        const gameData = getGameDataFromProps() || getGameDataFromPopup();
        if (!gameData || !isValidShareData(gameData)) {
          await handlePlatformShareError(ShareErrorType.NO_DATA, platform, button);
          return;
        }

        const shareText = generateSimpleShareText(gameData);
        const shareUrl = createShareUrl(platform, shareText);

        if (shareUrl) {
          window.open(shareUrl, "_blank", "width=600,height=400");
          announceToScreenReader(shareAccessibilityPlatformOpened.replace("{platform}", platform));
        } else {
          throw new Error(`Unsupported platform: ${platform}`);
        }
      } catch (err) {
        await handlePlatformShareError(ShareErrorType.PLATFORM_SHARE_FAILED, platform, button, err);
      } finally {
        setTimeout(() => {
          button.removeAttribute("disabled");
        }, 1000);
      }
    });
  }

  // Create platform-specific share URLs
  function createShareUrl(platform, text) {
    const encodedText = encodeURIComponent(text);
    const encodedUrl = encodeURIComponent(window.location.href);

    switch (platform) {
      case "twitter":
        return `https://twitter.com/intent/tweet?text=${encodedText}&url=${encodedUrl}`;
      case "whatsapp":
        return `https://wa.me/?text=${encodedText}%20${encodedUrl}`;
      case "email":
        return `mailto:?subject=My Melody Mind Score&body=${encodedText}%0A%0A${encodedUrl}`;
      default:
        return null;
    }
  }

  // Generate simple share text
  function generateSimpleShareText(data) {
    const { score, category, difficulty } = data;
    return `I scored ${score} points in ${category} on ${difficulty} difficulty! 🎵 Can you beat my score?`;
  }

  // Handle platform share errors
  async function handlePlatformShareError(errorType, platform, button, error) {
    console.warn(`Platform share error for ${platform} (${errorType}):`, error);

    const errorMessage = getErrorMessage(errorType);
    const recoveryMessage = getRecoveryMessage(errorType);

    announceToScreenReader(
      shareAccessibilityPlatformShareFailed
        .replace("{platform}", platform)
        .replace("{errorMessage}", errorMessage)
        .replace("{recoveryMessage}", recoveryMessage)
    );

    if (errorType === ShareErrorType.NO_DATA) {
      setTimeout(() => {
        showFallbackContent();
      }, 1000);
    } else {
      announceToScreenReader(shareAccessibilityTryAlternativeMethods);
    }

    if (elements.copyButton) {
      const originalBorder = elements.copyButton.style.border;
      elements.copyButton.style.border = "2px solid var(--color-info-400)";
      setTimeout(() => {
        if (elements.copyButton) {
          elements.copyButton.style.border = originalBorder;
        }
      }, 3000);
    }
  }

  // Initialize clipboard copy
  function initializeClipboardCopy() {
    if (!elements.copyButton || !elements.copyButtonText) {
      return;
    }

    const originalCopyText = UI_CONSTANTS.COPY_ORIGINAL_TEXT;
    if (!originalCopyText) {
      return;
    }

    elements.copyButton.addEventListener("click", async (event) => {
      const button = event.currentTarget;

      if (button.hasAttribute("disabled")) {
        return;
      }

      button.setAttribute("disabled", "disabled");

      try {
        const gameData = getGameDataFromProps() || getGameDataFromPopup();
        if (!gameData || !isValidShareData(gameData)) {
          await handleClipboardError(ShareErrorType.NO_DATA, button, originalCopyText);
          return;
        }

        const shareText = generateSimpleShareText(gameData);
        const shareUrl = window.location.href;
        const fullText = `${shareText}\n\n${shareUrl}`;

        if (navigator.clipboard && navigator.clipboard.writeText) {
          try {
            await navigator.clipboard.writeText(fullText);
          } catch (clipboardError) {
            console.warn("Modern clipboard failed, trying fallback:", clipboardError);
            await copyTextFallback(fullText);
          }
        } else {
          await copyTextFallback(fullText);
        }

        if (elements.copyButtonText) {
          elements.copyButtonText.textContent = "✓ Copied!";
        }
        button.classList.add("share-overlay__clipboard-button--success");

        announceToScreenReader(shareAccessibilityScoreCopied);

        setTimeout(() => {
          if (elements.copyButtonText) {
            elements.copyButtonText.textContent = originalCopyText;
          }
          button.classList.remove("share-overlay__clipboard-button--success");
          button.removeAttribute("disabled");
        }, UI_CONSTANTS.COPY_SUCCESS_DURATION);
      } catch (err) {
        await handleClipboardError(ShareErrorType.CLIPBOARD_FAILED, button, originalCopyText, err);
      }
    });
  }

  // Handle clipboard errors
  async function handleClipboardError(errorType, button, originalText, error) {
    console.warn(`Clipboard error (${errorType}):`, error);

    if (elements.copyButtonText) {
      elements.copyButtonText.textContent = getErrorMessage(errorType);
    }
    button.classList.add("share-overlay__clipboard-button--error");

    const errorMessage = getErrorMessage(errorType);
    const recoveryMessage = getRecoveryMessage(errorType);
    announceToScreenReader(
      shareAccessibilityNativeShareFailed
        .replace("{errorMessage}", errorMessage)
        .replace("{recoveryMessage}", recoveryMessage)
    );

    if (errorType === ShareErrorType.NO_DATA) {
      setTimeout(() => {
        showFallbackContent();
      }, 1000);
    }

    setTimeout(() => {
      if (elements.copyButtonText) {
        elements.copyButtonText.textContent = originalText;
      }
      button.classList.remove("share-overlay__clipboard-button--error");
      button.removeAttribute("disabled");
    }, UI_CONSTANTS.COPY_SUCCESS_DURATION / 2);
  }

  // Get user-friendly error messages
  function getErrorMessage(errorType) {
    switch (errorType) {
      case ShareErrorType.NO_DATA:
        return "No game data";
      case ShareErrorType.CLIPBOARD_FAILED:
        return "Copy failed";
      case ShareErrorType.PERMISSION_DENIED:
        return "Permission denied";
      default:
        return "Error occurred";
    }
  }

  // Get recovery guidance messages
  function getRecoveryMessage(errorType) {
    switch (errorType) {
      case ShareErrorType.NO_DATA:
        return "Please retry or refresh the page";
      case ShareErrorType.CLIPBOARD_FAILED:
        return "Try manual copy or use share buttons";
      case ShareErrorType.PERMISSION_DENIED:
        return "Check browser permissions or use manual copy";
      default:
        return "Please try again or use alternative sharing methods";
    }
  }

  // Announce messages to screen readers
  function announceToScreenReader(message) {
    if (!elements.statusAnnouncer) {
      return;
    }

    elements.statusAnnouncer.textContent = message;

    setTimeout(() => {
      if (elements.statusAnnouncer) {
        elements.statusAnnouncer.textContent = "";
      }
    }, 5000);
  }

  // Extract game data from popup element
  function getGameDataFromPopup() {
    const popup = document.querySelector("#endgame-popup");
    if (!popup) {
      return null;
    }

    try {
      const scoreAttr = popup.getAttribute("data-score");
      const categoryAttr = popup.getAttribute("data-category");
      const difficultyAttr = popup.getAttribute("data-difficulty");

      if (!scoreAttr || !categoryAttr || !difficultyAttr) {
        console.warn("ShareOverlay: Missing required data attributes on popup element");
        return null;
      }

      const score = parseInt(scoreAttr, 10);

      if (isNaN(score) || score < 0) {
        console.warn("ShareOverlay: Invalid score value:", scoreAttr);
        return null;
      }

      if (categoryAttr.trim().length === 0 || difficultyAttr.trim().length === 0) {
        console.warn("ShareOverlay: Empty category or difficulty values");
        return null;
      }

      const gameData = {
        score,
        category: categoryAttr.trim(),
        difficulty: difficultyAttr.trim(),
      };

      if (!isValidShareData(gameData)) {
        console.warn("ShareOverlay: Game data failed validation:", gameData);
        return null;
      }

      return gameData;
    } catch (error) {
      console.warn("ShareOverlay: Error extracting game data from popup:", error);
      return null;
    }
  }

  // Setup cleanup handlers
  function setupCleanupHandlers() {
    const eventHandlers = new Map();

    const cleanup = () => {
      eventHandlers.forEach((handlers, element) => {
        handlers.forEach(({ event, handler }) => {
          element.removeEventListener(event, handler);
        });
      });
      eventHandlers.clear();

      Object.keys(elements).forEach((key) => {
        elements[key] = null;
      });
    };

    document.addEventListener("astro:before-swap", cleanup);
    document.addEventListener("astro:after-swap", cleanup);
    window.addEventListener("beforeunload", cleanup);
  }

  // Initialize sharing features when DOM is ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeSharing);
  } else {
    initializeSharing();
  }
</script>
