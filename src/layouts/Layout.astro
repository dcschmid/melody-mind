---
/**
 * @component Layout
 * @description The main layout component used throughout the MelodyMind application.
 * This layout implements WCAG AAA accessibility standards and performance optimizations
 * including reduced motion support, proper document structure, optimized resource loading,
 * and mobile-friendly viewport configurations.
 *
 * Features:
 * - Complete semantic document structure with proper landmarks
 * - Optimized font loading strategy with preload directives
 * - High contrast mode compatibility for better visual accessibility
 * - Reduced motion support for vestibular disorders
 * - Screen reader announcements for preference changes
 * - Proper focus indicators for keyboard navigation
 * - Print-specific styles for better document printing
 * - Touch-friendly targets (minimum 44x44px)
 * - View Transitions for smooth page navigation
 *
 * @implements {WCAG AAA compliance}
 *
 * @prop {string} title - Page title
 * @prop {string} [description] - Page meta description
 * @prop {string} [keywords] - Page meta keywords
 * @prop {string} [image] - Social sharing image URL
 * @prop {"website"|"article"|"music"|"game"} [type="website"] - Page content type
 * @prop {Date} [publishDate] - Content publish date for SEO
 * @prop {Date} [modifiedDate] - Content modification date for SEO
 * @prop {boolean} [showHeader=true] - Whether to show the header navigation
 * @prop {boolean} [showHeaderIcons=true] - Whether to show icons in the header
 * @prop {boolean} [showCoins=false] - Whether to show the coin counter
 *
 * @example
 * <Layout
 *   title="Music Quiz"
 *   description="Test your music knowledge"
 *   type="game"
 *   showCoins={true}
 * >
 *   <YourPageContent />
 * </Layout>
 */
import { When } from "@astropub/flow";
import { ViewTransitions } from "astro:transitions";

// Import fonts with display=swap for better performance
import "@fontsource/source-sans-pro/400.css";
import "@fontsource/source-sans-pro/700.css";
import "@fontsource/source-sans-pro/900.css";

import ShowCoins from "@components/Shared/ShowCoins.astro";
import Navigation from "@components/Header/Navigation.astro";
import SEO from "@components/SEO.astro";
import SkipLink from "@components/Shared/SkipLink.astro";
import Footer from "@components/Footer.astro";
import { getLangFromUrl } from "@utils/i18n";
import "../styles/global.css";
import "../styles/wcag-aaa.css";

interface Props {
  /**
   * The page title
   */
  title: string;

  /**
   * Page meta description for SEO
   */
  description?: string;

  /**
   * Page meta keywords for SEO
   */
  keywords?: string;

  /**
   * Social sharing image URL
   */
  image?: string;

  /**
   * Page content type for SEO
   * @default "website"
   */
  type?: "website" | "article" | "music" | "game";

  /**
   * Content publish date for SEO
   */
  publishDate?: Date;

  /**
   * Content modification date for SEO
   */
  modifiedDate?: Date;

  /**
   * Whether to show the header navigation
   * @default true
   */
  showHeader?: boolean;

  /**
   * Whether to show icons in the header
   * @default true
   */
  showHeaderIcons?: boolean;

  /**
   * Whether to show the coin counter
   * @default false
   */
  showCoins?: boolean;

  /**
   * Music-specific OpenGraph meta tags
   */
  ogMusic?: {
    creator?: string;
    album?: string;
    musician?: string;
  };
}

const {
  title,
  description,
  keywords,
  image,
  type = "website",
  publishDate,
  modifiedDate,
  showHeader = true,
  showHeaderIcons = true,
  showCoins = false,
  ogMusic,
} = Astro.props;

const lang = getLangFromUrl(Astro.url);

// Preloaded critical resources for performance
const preloadedResources = [
  { href: "https://cdn.usefathom.com", crossorigin: "", as: "script" },
  { href: "/styles/global.css", as: "style" },
];

// Font preloading for critical fonts
const fontPreloads = [
  {
    href: "/fonts/source-sans-pro-latin-400-normal.woff2",
    as: "font",
    type: "font/woff2",
    crossorigin: "anonymous",
  },
  {
    href: "/fonts/source-sans-pro-latin-700-normal.woff2",
    as: "font",
    type: "font/woff2",
    crossorigin: "anonymous",
  },
];

// DNS prefetch for external domains
const dnsPrefetch = [{ href: "https://cdn.usefathom.com" }];
---

<!doctype html>
<html lang={String(lang)} class="m-0 box-border h-full scroll-smooth" dir="ltr">
  <head>
    <!-- Character set and viewport configuration for mobile optimization -->
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
    <title>{title}</title>
    {description && <meta name="description" content={description} />}

    <!-- View Transitions API for smooth page navigation -->
    <ViewTransitions fallback="swap" />

    <!-- Color scheme and theme color for browser UI -->
    <meta name="color-scheme" content="dark light" />
    <meta name="theme-color" content="#18181b" media="(prefers-color-scheme: dark)" />
    <meta name="theme-color" content="#f4f4f5" media="(prefers-color-scheme: light)" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

    <!-- Resource hints for performance -->
    {dnsPrefetch.map((resource) => <link rel="dns-prefetch" href={resource.href} />)}

    {
      preloadedResources.map((resource) => (
        <link rel="preconnect" href={resource.href} crossorigin={resource.crossorigin} />
      ))
    }

    <!-- Font preloading for critical fonts -->
    {
      fontPreloads.map((font) => (
        <link
          rel="preload"
          href={font.href}
          as={font.as}
          type={font.type}
          crossorigin={font.crossorigin}
        />
      ))
    }

    <!-- Structured data and SEO -->
    <link rel="sitemap" href="/sitemap-index.xml" />
    <meta name="google-site-verification" content="ImN0-TS4_aAOFIXaGxvsGSmqsgHxI94WARi8bW7fm9M" />
    <SEO {title} {description} {keywords} {image} {type} {publishDate} {modifiedDate} {ogMusic} />

    <!-- Critical CSS inline for performance -->
    <style is:inline>
      /* Improved focus styles for keyboard navigation - WCAG AAA */
      :focus-visible {
        outline: 3px solid #9333ea; /* Purple 600 */
        outline-offset: 3px;
      }

      /* Print styles for better document printing */
      @media print {
        body {
          background-color: white;
          color: black;
        }

        .no-print {
          display: none !important;
        }

        main {
          width: 100%;
          padding: 0;
          margin: 0;
        }

        a::after {
          content: " (" attr(href) ")";
          font-size: 0.9em;
        }
      }
    </style>

    <!-- Analytics with performance and privacy optimizations -->
    <script
      src="https://cdn.usefathom.com/script.js"
      data-site="RKHOWTTO"
      data-spa="auto"
      data-auto="false"
      defer
      is:inline></script>
  </head>
  <body
    class="mx-auto flex min-h-screen w-full max-w-6xl flex-col bg-zinc-900 p-3 text-lg leading-8 tracking-wide text-wrap text-zinc-50 antialiased motion-safe:scroll-smooth md:p-6"
    data-theme="dark"
  >
    <!-- Skip link for keyboard navigation -->
    <SkipLink />

    <!-- Conditional header/navigation based on page type -->
    <When test={showHeader && !showCoins}>
      <header role="banner" class="w-full">
        <Navigation {showHeaderIcons} />
      </header>
    </When>

    <When test={showCoins}>
      <div class="absolute top-4 right-4 z-40 min-h-[44px] min-w-[44px] sm:top-6 sm:right-6">
        <ShowCoins />
      </div>
    </When>

    <!-- Main content area -->
    <main
      id="main-content"
      class="mx-auto max-w-full flex-grow px-0 py-6 text-lg leading-8 text-pretty"
      tabindex="-1"
      role="main"
    >
      <slot />
    </main>

    <!-- Footer area -->
    <Footer />

    <!-- Deferred script execution for performance -->
    <script>
      /**
       * Extend Window interface to include Fathom analytics
       */
      declare global {
        interface Window {
          fathom?: {
            trackPageview: (opts?: object) => void;
            [key: string]: unknown;
          };
        }
      }

      /**
       * Check if reduced motion is preferred and add appropriate class
       */
      const setReducedMotionClass = (): void => {
        if (window.matchMedia("(prefers-reduced-motion: reduce)").matches) {
          document.documentElement.classList.add("motion-reduce");
          // Announce to screen readers that reduced motion is active
          const statusElement =
            document.getElementById("a11y-status") || document.createElement("div");
          if (!document.getElementById("a11y-status")) {
            statusElement.id = "a11y-status";
            statusElement.setAttribute("aria-live", "polite");
            statusElement.className = "sr-only";
            document.body.appendChild(statusElement);
          }
          statusElement.textContent = "Reduced motion mode enabled";
        } else {
          document.documentElement.classList.remove("motion-reduce");
        }
      };

      /**
       * Handle theme switching between light/dark modes
       */
      const updateThemePreference = (): void => {
        // Wir setzen immer das dunkle Theme, unabhÃ¤ngig von den Systemeinstellungen
        document.body.dataset.theme = "dark";
        document.documentElement.classList.add("dark");
        document.documentElement.classList.remove("light");
      };

      // Register document-level events
      document.addEventListener("DOMContentLoaded", () => {
        // Initial setup when DOM is loaded
        setReducedMotionClass();
        updateThemePreference();

        // Initialize analytics
        if (typeof window.fathom === "object" && window.fathom?.trackPageview) {
          window.fathom.trackPageview({
            url: window.location.href,
          });
        }
      });

      // Listen for reduced motion preference changes
      window
        .matchMedia("(prefers-reduced-motion: reduce)")
        .addEventListener("change", setReducedMotionClass);

      // Handle page visibility for better performance
      document.addEventListener("visibilitychange", () => {
        if (document.visibilityState === "visible") {
          // Re-render animations or update time-sensitive UI
        }
      });
    </script>

    <!-- WCAG AAA Enhancements Script with efficient loading -->
    <script src="/scripts/wcag-aaa-enhancements.js" defer></script>
  </body>
</html>
