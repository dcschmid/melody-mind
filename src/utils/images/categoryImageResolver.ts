/**
 * Category Image Resolver
 *
 * Resolves a category slug to a dynamically imported image asset that was
 * generated by the optimization script (see `scripts/optimize-category-images.cjs`).
 *
 * Contract:
 *  - Input: slug (already normalized: lowercase, kebab-case)
 *  - Output: Promise<CategoryImageResolution>
 *  - Fallback: returns null if asset not found (caller must handle placeholder)
 */

export interface CategoryImageResolution {
  /** ESM image module (default export is the hashed build URL when imported by Astro) */
  module: unknown;
  /** Canonical relative import path attempted */
  path: string;
}

/**
 * Dynamically import the canonical webp for a slug.
 * NOTE: Vite needs a reasonably static pattern; we enumerate common patterns.
 */
export async function resolveCategoryImage(slug: string): Promise<CategoryImageResolution | null> {
  if (!slug) {
    return null;
  }
  const safeSlug = slug.toLowerCase().replace(/[^a-z0-9-]+/g, "-").replace(/-{2,}/g, "-").replace(/^-|-$/g, "");

  // Primary pattern produced by the optimization script
  const candidate = `../assets/category/${safeSlug}/${safeSlug}.webp`;
  try {
    const mod = await import(/* @vite-ignore */ candidate);
    return { module: mod, path: candidate };
  } catch {
    return null;
  }
}
