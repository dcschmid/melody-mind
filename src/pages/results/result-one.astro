---
import { Icon } from "astro-icon/components";
import Layout from "../../layouts/Layout.astro";
import Button from "../../components/Button.astro";
---

<Layout title="Result Runde 1">
  <div slot="left-headercol"></div>

  <div class="introText">
    <div class="headline">Runde 1 / 3 â€“ Ergebnisse</div>
    <div class="subline">Sortieren Sie nach dem Erscheinungsjahr!</div>
  </div>

  <div class="results" id="results-container"></div>

  <div class="points">
    <Icon name="coin" width={48} height={48} />
    <span class="point"></span>

    <div class="finishButton">
      <Button id="finishedButton" url="#" />
    </div>
  </div>
</Layout>

<style>
  .introText {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--spacing-2);
    margin-bottom: var(--spacing-spacing-md);
  }

  .headline {
    color: var(--colour-text-secondary);
    leading-trim: both;
    text-edge: cap;
    font-size: 14px;
    font-style: normal;
    font-weight: 700;
    line-height: 120%;
  }

  .subline {
    color: var(--colour-text-primary);
    leading-trim: both;
    text-edge: cap;
    font-size: 16px;
    font-style: normal;
    font-weight: 400;
    line-height: 150%;
  }

  .results {
    display: flex;
    flex-wrap: wrap;
    padding: var(--spacing-1) var(--spacing-spacing-xl) var(--spacing-15) var(--spacing-spacing-xl);
    align-items: center;
    justify-content: center;
    gap: var(--spacing-spacing-xl);
  }

  .finishButton {
    margin-left: var(--spacing-spacing-md);
  }

  .points {
    padding: 24px 20px 23px 112px;
    display: flex;
    justify-content: flex-end;
    align-items: center;
    font-size: 40px;
    font-style: normal;
    font-weight: 900;
    line-height: normal;
    letter-spacing: 2px;
    color: var(--colour-text-primary);
    leading-trim: both;
    text-edge: cap;
  }

  .point {
    display: block;
    margin-left: var(--spacing-spacing-s);
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    updateCurrentPoints();
    populateResults();
    setupFinishButton();
  });

  /**
   * Sets up the event listener for the "Finished" button click event.
   * When the button is clicked, it calls the `handleFinishedButtonClick` function.
   */
  function setupFinishButton() {
    // Get the element with the ID "finishedButton"
    const finishedButton = document.getElementById("finishedButton");

    // Add a click event listener to the "Finished" button
    // When the button is clicked, call the `handleFinishedButtonClick` function
    finishedButton?.addEventListener("click", handleFinishedButtonClick);
  }

  /**
   * Handles the click event of the "Finished" button.
   */
  function handleFinishedButtonClick() {
    window.location.href = "/trivia/trivia-one";
  }

  /**
   * Updates the text content of the element with the class "point" to the
   * current points stored in localStorage. If no points are stored, it
   * defaults to "0".
   */
  function updateCurrentPoints() {
    // Select the element with the class "point"
    const pointSpan = document.querySelector(".point");

    // Set the text content to the current points stored in localStorage, or "0" if no points are stored
    pointSpan!.textContent = localStorage.getItem("PointsRound1") || "0";
  }

  /**
   * Populates the results container with the result items from round 1.
   */
  function populateResults() {
    // Get the results container element
    const resultsContainer = document.getElementById("results-container");

    // If the results container element does not exist, exit the function
    if (!resultsContainer) return;

    // Get the results from round 1 from localStorage
    const resultsRound1 = JSON.parse(localStorage.getItem("ResultsRound1") || "[]");

    // Create a document fragment to improve performance when adding multiple elements to the DOM
    const fragment = document.createDocumentFragment();

    // Iterate over the results and create a result item for each one
    resultsRound1.forEach((result: any, index: any) => {
      const resultItem = createResultItem(result, index);
      fragment.appendChild(resultItem);
    });

    // Append the result items to the results container
    resultsContainer.appendChild(fragment);
  }

  /**
   * Creates a result item element for the given result and index.
   *
   * @param {any} result - The result object.
   * @param {any} index - The index of the result.
   * @return {HTMLDivElement} The created result item element.
   */
  function createResultItem(result: any, index: any) {
    // Create a new div element for the result item
    const resultItem = document.createElement("div");

    // Add the "result-item" class to the element
    resultItem.classList.add("result-item");

    // Set the innerHTML of the element to display the result details
    resultItem.innerHTML = `
      <div class="resultItem">
        <div class="resultPlace ${result.isWrong ? "resultError" : ""}">${index + 1}.</div>
        <img class="resultCover" src="${result.coverSrc}" alt="${result.band} - ${result.album}" width="126" height="126" />
        <div class="resultBand">${result.band}</div>
        <div class="resultAlbum">${result.album}</div>
        <div class="resultData">${result.date}</div>
      </div>
    `;

    // Return the created result item element
    return resultItem;
  }
</script>
