---
import Layout from "@layouts/Layout.astro"; // Layout component
import categories from "@json/categories.json"; // JSON file containing categories data
import ShowCoins from "@components/Shared/ShowCoins.astro";
import { Icon } from "astro-icon/components";

/**
 * Get the user object from the Astro context
 */
const user = Astro.locals.user;

/**
 * If the user is not logged in, redirect them to the login page.
 */
if (!user) {
  /**
   * Redirect the user to the login page.
   */
  return Astro.redirect("/");
}

/**
 * Destructure `category` and `round` from `Astro.params`
 */
const { category } = Astro.params;

const currentCategoryData = categories.find((cat) => cat.slug === category);
---

<Layout title=`${currentCategoryData?.headline}` showHeaderIcons={false}>
  <div slot="left-headercol">
    <ShowCoins />
  </div>

  <div id="overlay" class="overlay hidden">
    <div class="overlay-content">
      <p id="feedback" class="feedback"></p>
      <img id="overlay-cover" src="" alt="Album Cover" class="albumCover" />
      <h3 id="overlay-album">Album Name</h3>
      <p id="overlay-funfact" class="fun-fact">Fun Fact</p>
      <button id="next-round-button" class="button">Nächste Runde</button>
    </div>
  </div>

  <!-- Normales Popup, wenn das Spiel beendet ist -->
  <div id="endgame-popup" class="popup hidden">
    <div class="popup-content">
      <h2>Spiel beendet!</h2>
      <p>Erreichte Punkte: <span id="popup-score"></span></p>
      <button id="restart-button" class="button">Neues Spiel</button>
    </div>
  </div>

  <!-- Spezielles Popup für die goldene Schallplatte -->
  <div id="golden-lp-popup" class="popup hidden">
    <div class="popup-content">
      <h2>Herzlichen Glückwunsch!</h2>
      <Icon name="golden-lp" class="icon" width={100} height={100} />
      <p>
        Du hast die goldene <span class="goldenText">Pop-Rock</span> Schallplatte
        gewonnen!
      </p>
      <p>Erreichte Punkte: <span id="golden-lp-score"></span></p>
      <button id="restart-button-lp" class="button">Neues Spiel</button>
    </div>
  </div>

  <div class="gameHeadline">
    {currentCategoryData?.headline} - Runde <span class="round"></span>
  </div>
  <div
    id="question-container"
    data-categoryName={currentCategoryData?.headline}
    data-genre={category}
    data-userID={user.id}
  >
    <div id="question"></div>
    <div id="options"></div>
  </div>
</Layout>

<style is:global lang="scss">
  .gameHeadline {
    text-align: center;
    font-size: 1.5rem;
    font-weight: 900;
    margin-top: 1rem;
    color: var(--primary-color);
  }

  #question-container {
    max-width: 480px;
    margin: 0 auto;
    padding: var(--spacing-md);
    text-align: center;
  }

  #question {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 1rem;
  }

  #options {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-s);
  }

  .button,
  .optionButton {
    margin-top: 1rem;
    font-size: 1rem;
    line-height: 1.5;
    cursor: pointer;

    display: inline-flex;
    align-items: center;
    justify-content: center;

    padding: var(--spacing-s) var(--spacing-md);

    color: var(--text-color);
    text-decoration: none;

    background: var(--accent-color-1);
    border-radius: var(--radius-circle);

    transition: background-color 0.3s ease;

    &:hover,
    &:focus-visible {
      background-color: var(--accent-color-2);
      outline: 2px solid var(--text-color);
    }
  }

  .feedback {
    font-size: 1rem;
    color: var(--accent-color-3);
    text-align: center;
  }

  .overlay {
    position: fixed;
    inset: 0;
    background: rgba(0, 0, 0, 0.9);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }

  .hidden {
    display: none;
  }

  .overlay-content {
    background: rgba(0, 0, 0, 1);
    text-align: center;
    max-width: 480px;
    margin: 1rem;
  }

  .fun-fact {
    hyphens: auto;
  }

  .albumCover {
    max-width: 200px;
    height: auto;
    display: flex;
    align-self: center;
    margin: 0 auto 0.25rem;
    border: 1px solid var(--colour-disabled);
    border-radius: var(--radius-rounded);
  }

  .popup {
    position: fixed;
    inset: 0;
    background-color: rgba(31, 14, 22, 0.9);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    color: var(--text-color);
  }

  .popup.hidden {
    display: none;
  }

  .popup-content {
    font-size: 1.25rem;
    background-color: var(--background-color);
    padding: 30px;
    border-radius: 10px;
    text-align: center;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }

  .golden-lp-image {
    width: 100px;
    margin-top: 20px;
  }

  .goldenText {
    color: var(--primary-color);
  }
</style>

<script>
  import { getRandomQuestion } from "@utils/game/getRandomQuestion";
  import { getUserAndCategoryPoints } from "@utils/game/getUserAndCategoryPoints";

  document.addEventListener("DOMContentLoaded", async function () {
    // Get the element that shows the current score
    const scoreElement = document.querySelector(
      ".coinsCount",
    ) as HTMLParagraphElement;

    const roundElement = document.querySelector(
      ".round",
    ) as HTMLParagraphElement;

    // Get the element that shows the feedback after a question
    const feedbackElement = document.getElementById(
      "feedback",
    ) as HTMLParagraphElement;

    // Get the element that shows the question
    const questionElement = document.getElementById(
      "question",
    ) as HTMLParagraphElement;

    // Get the element that shows the options
    const optionsContainer = document.getElementById(
      "options",
    ) as HTMLDivElement;

    // Get the element that shows the question container
    const questionContainer = document.getElementById(
      "question-container",
    ) as HTMLDivElement;

    // Get the category from the question container
    const category = questionContainer.getAttribute("data-genre");
    const userId = questionContainer.getAttribute("data-userID");
    const categoryName = questionContainer.getAttribute("data-categoryName");

    // Initialize the score and the round index
    let score = 0;
    let correctAnswers = 0;
    let roundIndex = 0;

    // How many rounds there are
    const totalRounds = 5;

    roundElement.textContent = `${roundIndex + 1}/${totalRounds}`;

    // Import the albums data for the current category
    const albumsPromise = import(`../../json/genres/${category}.json`);
    // Get the albums data
    const albums: any = (await albumsPromise).default;

    const { totalUserPoints, currentCategoryPointsValue } =
      await getUserAndCategoryPoints(userId ?? "", categoryName ?? "");

    /**
     * Loads a question and its options into the DOM.
     */
    function loadQuestion(question: any, album: any) {
      // Set the question text
      questionElement.textContent = question.question;

      // Clear the options container
      optionsContainer.innerHTML = "";

      // Add the image to the options container if the question is an image question
      if (question.type === "image") {
        const imageElement = document.createElement("img");
        imageElement.src = question.image;
        imageElement.alt = "Frage Bild";
        imageElement.className = "albumCover";
        optionsContainer.appendChild(imageElement);

        // Add a button for each option
        question.options.forEach(function (option: any) {
          const button = document.createElement("button");
          button.textContent = option;
          button.className = "optionButton";
          button.onclick = function () {
            handleAnswer(option, question.correctAnswer, question, album);
          };
          optionsContainer.appendChild(button);
        });
      }

      // Add the audio player if the question is an audio question
      // The audio player element is created with controls and a source element
      // The source element is given the URL of the audio and the type of the audio
      // The button for each option is created and appended to the options container
      // The button is given the text of the option and the correct answer
      // The button is given an event listener to handle the answer
      if (question.type === "audio") {
        const audioElement = document.createElement("audio");
        audioElement.controls = true;
        const sourceElement = document.createElement("source");
        sourceElement.src = question.audio;
        sourceElement.type = "audio/mpeg";
        audioElement.appendChild(sourceElement);
        optionsContainer.appendChild(audioElement);

        question.options.forEach(function (option: any) {
          const button = document.createElement("button");
          button.textContent = option;
          button.className = "optionButton";
          button.onclick = function () {
            /**
             * Handles the answer of the question
             * @param option The option of the question
             * @param correctAnswer The correct answer of the question
             * @param question The question object
             * @param album The album object
             */
            handleAnswer(option, question.correctAnswer, question, album);
          };
          optionsContainer.appendChild(button);
        });
      }

      if (question.type === "multiple-choice") {
        question.options.forEach(function (option: any) {
          const button = document.createElement("button");
          button.textContent = option;
          button.className = "optionButton";
          button.onclick = function () {
            handleAnswer(option, question.correctAnswer, question, album);
          };
          optionsContainer.appendChild(button);
        });
      } else if (question.type === "true-false") {
        const trueButton = document.createElement("button");
        trueButton.textContent = "Wahr";
        trueButton.className = "optionButton";
        trueButton.onclick = function () {
          handleAnswer(true, question.correctAnswer, question, album);
        };

        const falseButton = document.createElement("button");
        falseButton.textContent = "Falsch";
        falseButton.className = "optionButton";
        falseButton.onclick = function () {
          handleAnswer(false, question.correctAnswer, question, album);
        };

        optionsContainer.appendChild(trueButton);
        optionsContainer.appendChild(falseButton);
      }
    }

    function handleAnswer(
      option: boolean,
      correctAnswer: any,
      currentQuestion: any,
      album?: any,
    ) {
      if (option === correctAnswer) {
        correctAnswers++;
        score += 100;
        feedbackElement.textContent = "Richtig! 100 Punkte";
      } else {
        feedbackElement.textContent = `Falsch! Die richtige Antwort war: ${correctAnswer}`;
        feedbackElement.style.color = "red";
      }

      scoreElement.textContent = `${score}`;

      // Funfact und weitere Informationen im Overlay anzeigen
      const overlayCover = document.getElementById(
        "overlay-cover",
      ) as HTMLImageElement;
      overlayCover.src = album.coverSrc || "";
      document.getElementById("overlay-album")!.textContent =
        album.artist + " - " + album.album || "";
      document.getElementById("overlay-funfact")!.textContent =
        currentQuestion.funFact || "";

      document.getElementById("overlay")!.classList.remove("hidden");

      document.getElementById("next-round-button")!.onclick = function () {
        document.getElementById("overlay")!.classList.add("hidden");
        if (roundIndex < totalRounds - 1) {
          roundIndex++;
          roundElement.textContent = `${roundIndex + 1}/${totalRounds}`;

          const newQuestion = getRandomQuestion(albums);
          loadQuestion(newQuestion.randomQuestion, newQuestion.randomAlbum);
          feedbackElement.textContent = ""; // Feedback zurücksetzen
        } else {
          endGame();
        }
      };
    }

    // Funktion für das Spielende
    function endGame() {
      if (correctAnswers === totalRounds) {
        // Alle Fragen richtig beantwortet - Goldene LP Popup anzeigen
        showGoldenLpPopup();
      } else {
        // Normales Spielende Popup anzeigen
        showEndgamePopup();
      }
    }

    function showEndgamePopup() {
      document.getElementById("popup-genre")!.textContent =
        categoryName || "Unbekanntes Genre";
      document.getElementById("popup-score")!.textContent = score.toString();

      const endgamePopup = document.getElementById("endgame-popup");
      endgamePopup!.classList.remove("hidden");

      document.getElementById("restart-button")!.onclick = function () {
        restartGame();
      };
    }

    function showGoldenLpPopup() {
      document.getElementById("golden-lp-score")!.textContent =
        score.toString();

      const goldenLpPopup = document.getElementById("golden-lp-popup");
      goldenLpPopup!.classList.remove("hidden");

      document.getElementById("restart-button-lp")!.onclick = function () {
        restartGame();
      };
    }

    function restartGame() {
      // Setze die Werte zurück und starte ein neues Spiel oder leite zur Startseite weiter
      score = 0;
      correctAnswers = 0;
      roundIndex = 0;
      window.location.href = "/gamehome";
    }

    async function saveScoreToDB() {
      await fetch(`/api/saveTotalUserPointsAndHighscore`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          userId,
          totalUserPoints: totalUserPoints + score,
          category: categoryName,
          categoryPoints: currentCategoryPointsValue + score,
        }),
      });
    }

    // Initiale Frage laden
    const initialQuestion = getRandomQuestion(albums);
    loadQuestion(initialQuestion.randomQuestion, initialQuestion.randomAlbum);
  });
</script>
