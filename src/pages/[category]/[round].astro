---
// Import necessary components and utilities

import Layout from "@layouts/Layout.astro"; // Layout component
import StartOverlay from "@components/Overlays/StartOverlay.astro"; // Start Overlay component
import TimeupsOverlay from "@components/Overlays/TimeupsOverlay.astro"; // Timeups Overlay component
import IntroText from "@components/Shared/IntroText.astro"; // IntroText component
import Timer from "@components/Round/Timer.astro"; // Timer component
import CoverFlow from "@components/Round/CoverFlow.astro"; // CoverFlow component
import categories from "@json/categories.json"; // JSON file containing categories data
import Joker from "@components/Round/Joker.astro"; // Joker component
import ShowCoins from "@components/Shared/ShowCoins.astro"; // ShowCoins component
import { fetchRoundUIData } from "@utils/share/fetchRoundUIData"; // Function to fetch round UI data
import { getAlbumsSortedBySpecificFieldAndCatgory } from "@utils/round/sortAlbums";
import type { Album } from '@utils/interfaces/albumInterface';

/**
 * Get the user object from the Astro context
 */
const user = Astro.locals.user;

/**
 * If the user is not logged in, redirect them to the login page.
 */
if (!user) {
	/**
	 * Redirect the user to the login page.
	 */
	return Astro.redirect("/");
}

/**
 * Destructure `category` and `round` from `Astro.params`
 */
const { category, round } = Astro.params;

/**
 * Import the JSON file containing the albums data for the current category
 * and destructure it into an array of Album objects
 */
const albumsPromise = import(`../../json/genres/${category}.json`);
const albums: Album[] = (await albumsPromise).default;

/**
 * Fetch round UI data using the `fetchRoundUIData` function
 */
const uiData = await fetchRoundUIData(round as string);

/**
 * Find the current category based on the `category` parameter
 */
const currentCategoryData = categories.find((cat) => cat.slug === category);

/**
 * Shuffle the `albums` array and get the first four albums
 *
 * @param {string} sortBy - The field to sort the albums by. Can be one of "dataYear", "dataSales", or "dataLength".
 * @param {string} order - The order of the sorting (asc/desc).
 * @param {Album[]} albums - The albums to sort and shuffle.
 * @return {Album[]} A list of shuffled albums with the first four albums being the solution.
 */
const solutionData = await getAlbumsSortedBySpecificFieldAndCatgory(uiData?.sortData, uiData?.sortOrder, albums);

/**
 * Get the joker text, data, and cover URL from the first album
 *
 * The joker text, data, and cover URL are used to display the joker
 * information on the page. The data is determined by the current round
 * (round one shows the year, round two shows the sales, and round three
 * shows the length).
 */
const jokerText = solutionData.randomAlbums?.[0].jokerText;

/**
 * Get the joker data based on the current round
 *
 * @param {string} round - The current round (round-one, round-two, or round-three)
 * @returns {string | null} The joker data, or null if the round is invalid
 */
const getJokerData = (round: string): string | null => {
  switch (round) {
    case "round-one":
      return solutionData.randomAlbums?.[0].dataYear;
    case "round-two":
      return solutionData.randomAlbums?.[0].dataSales;
    case "round-three":
      return solutionData.randomAlbums?.[0].dataLength;
    default:
      return null;
  }
};

const jokerData = getJokerData(round as string);

const jokerCoverUrl = solutionData.randomAlbums?.[0].coverSrc;
---

<Layout title=`${currentCategoryData?.headline} - ${uiData?.headline}` ` showUserLink={false}>
  <div slot="left-headercol">
    <ShowCoins />
  </div>

  <StartOverlay headline={uiData?.headline} whiteText={uiData?.startOverlayText} />

  <TimeupsOverlay />

  <IntroText headline={uiData?.headline} subline={uiData?.introSubline} whiteText={uiData?.sortToText} />

  <CoverFlow
    randomizedCoverflowData={solutionData.randomAlbums}
    upText={uiData?.upToLabel}
    downText={uiData?.downToLabel}
    dataCategory={category}
    dataSolution={solutionData.solutionArray}
    dataRound={round}
  />

  <div class="timerSection">
    <Joker jokerCoverUrl={jokerCoverUrl} jokerText={jokerText} jokerData={jokerData} />

    <Timer minutes="01" seconds="30" />
  </div>
</Layout>

<style>
  .timerSection {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: var(--spacing-spacing-xxl);
  }
</style>

<script>
  /**
   * This function handles the end round click event
   * It initializes the overlay and cover elements,
   * and handles the end round click event
   */
  import { handleEndRoundClick } from "@utils/round/handleEndRoundClick";
  /**
   * This function initializes the cover elements
   */
  import { initializeCovers } from "@utils/round/initializeCovers";
  /**
   * This function initializes the overlay with the initial time remaining and timer interval
   */
  import { initializeOverlay } from "@utils/round/initializeOverlay";
  import { showJoker } from "@utils/round/showJoker";

  // Set the initial time remaining and timer interval
  /**
   * This variable stores the initial time remaining in seconds
   */
  let timeRemaining = 90;
  /**
   * This variable stores the initial timer interval in milliseconds
   */
  let timerInterval: number | 0 = 0;

  /**
   * Get the category value from the data attribute of the coverFlowRoot element
   */
  // Select the coverFlowRoot element and typecast it to HTMLElement
  const categoryDataElement = document.querySelector(".coverFlowRoot") as HTMLElement;
  // Get the value of the data-category attribute from the coverFlowRoot element
  const categoryValue = categoryDataElement.getAttribute("data-category")!;
  // Get the value of the data-round attribute from the coverFlowRoot element
  const dataRound = categoryDataElement.getAttribute("data-round")!;
  // Get the value of the data-solution attribute from the coverFlowRoot element
  const solutionAttribute = categoryDataElement.getAttribute("data-solution");
  // If the solution attribute exists, parse it as a JSON array, otherwise assign an empty array
  const solutionArray = solutionAttribute ? JSON.parse(solutionAttribute) : [];

  /**
   * Add an event listener to the window load event
   * This function is called when the page has finished loading
   * It initializes the round game, resets the local storage,
   * and handles the end round click event
   */
  window.addEventListener("load", function () {
    // Initialize the overlay and cover elements
    initializeOverlay(timerInterval, timeRemaining); // Initialize the overlay with the initial time remaining and timer interval
    initializeCovers(); // Initialize the cover elements
    showJoker(); // Call the showJoker function

    // Handle the end round click event
    handleEndRoundClick(
      solutionArray, // Solution for the current round
      `/${categoryValue}/result/${dataRound}`, // URL for the results page
      `${categoryValue}-AllCorrect-${dataRound}`, // Key for the local storage item that stores the correct answers
      `${categoryValue}-Points-${dataRound}`, // Key for the local storage item that stores the points earned in this round
      `${categoryValue}-Results-${dataRound}` // Key for the local storage item that stores the results for this round
    );
  });
</script>
