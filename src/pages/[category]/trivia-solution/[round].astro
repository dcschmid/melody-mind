---
import { Icon } from "astro-icon/components";

import Layout from "@layouts/Layout.astro";
import Button from "@components/Shared/Button.astro";
import TriviaFinishOverlay from "@components/Trivia/TriviaFinishOverlay.astro";
import categories from "@json/categories.json";
import ShowCoins from "@components/Shared/ShowCoins.astro";
import { fetchRoundUIData } from "@utils/share/fetchRoundUIData";

/**
 * Get the user object from the Astro context
 * @type {import("@astro/core/types").User}
 */
const user = Astro.locals.user;

/**
 * If the user is not logged in, redirect them to the login page.
 */
if (!user) {
	/**
	 * Redirect the user to the login page.
	 */
	return Astro.redirect("/");
}

/**
 * Get the route parameters for the current page
 * @type {import("@astro/core/types").PageParameters}
 */
const { category, round } = Astro.params;

/**
 * Fetch the UI data for the current round
 * @type {Promise<import("@utils/share/fetchRoundUIData").RoundData>}
 */
const uiData = await fetchRoundUIData(round as string);

/**
 * Find the category object in the categories array that matches the category parameter
 * @type {import("@json/categories.json").Category | undefined}
 */
const currentCategory = categories.find((cat) => cat.slug === category);

/**
 * Set the button text and URL based on the round
 * @type {string}
 */
const centerButtonText = round === "round-one" || round === "round-two" ? "nächste Runde" : "Spiel beenden";

/**
 * Set the button URL based on the round
 * @type {string}
 */
const centerButtonUrl =
  round === "round-one"
    ? `/${currentCategory?.slug}/round-two`
    : round === "round-two"
      ? `/${currentCategory?.slug}/round-three`
      : `#`;

/**
 * Set the button ID based on the round
 * @type {string}
 */
const centerButtonID = round === "round-three" ? "openOverlay" : "";
---

<Layout title=`${currentCategory?.headline} - ${uiData?.headline} - Trivia Lösung` showUserLink={false}>
  <div slot="left-headercol">
    <ShowCoins />
  </div>

  <TriviaFinishOverlay title={currentCategory?.headline} url={currentCategory?.videoPage ? currentCategory?.videoPage : "/gamehome"} />

  <div class="solution" data-user-id={user.id} data-category={category} data-round={round?.replace("#", "")}>
    <div class="cover">
      <img class="picture" src="" width={240} height={240} alt="" />
      <Icon class="shareIcon" name="share" width={48} height={48} />
    </div>
    <div class="solutionHeadline"></div>
    <div class="answer"></div>
  </div>

  <div class="centerButton">
    <Button id={centerButtonID} buttonText={centerButtonText} url={centerButtonUrl} />
  </div>
</Layout>

<style>
  .solution {
    display: flex;
    padding: var(--spacing-spacing-s) var(--spacing-spacing-s) var(--spacing-spacing-md) var(--spacing-spacing-s);
    flex-direction: column;
    gap: var(--spacing-spacing-md);
    border-radius: var(--radius-radius-rounded);
    background: var(--colour-BG-secondary);
  }

  .cover {
    margin: 0 auto;
    position: relative;
  }

  .shareIcon {
    position: absolute;
    bottom: -15px;
    right: -25px;
    color: var(--colour-text-primary);
  }

  .solutionHeadline {
    color: var(--colour-text-primary);
    font-size: 18px;
    font-style: normal;
    font-weight: 700;
    line-height: 120%;
  }

  .answer {
    color: var(--colour-text-primary);
    font-size: 14px;
    font-style: normal;
    font-weight: 400;
    line-height: 150%;
  }

  .centerButton {
    display: flex;
    justify-content: center;
    margin-top: var(--spacing-spacing-xl);
  }
</style>

<script>
  /**
   * This script is responsible for displaying the final score of a round,
   * adding confetti, and clearing the local storage after the last round.
   */

  /**
   * Import the necessary modules for the script.
   */
  import JSConfetti from "js-confetti";
  import { clearLocalStorageAfterLastRound } from "@utils/clearLocalStorageAfterLastRound";

  /**
   * Create a new instance of JSConfetti.
   */
  const jsConfetti = new JSConfetti();

  /**
   * Get the necessary DOM elements.
   */
  const triviaElement = document.querySelector(".solution") as HTMLElement;

  /**
   * Get the user ID from the data attribute.
   */
  const userId = triviaElement.getAttribute("data-user-id");

  /**
   * Fetch the total user points from the API.
   */
  const response = await fetch(`/api/getTotalUserPoints`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ userId }),
  });

  /**
   * Parse the response as JSON.
   */
  const userPoints = await response.json();

  /**
   * Get the necessary DOM elements.
   */
  const overlayFinish = document.getElementById("overlayFinish") as HTMLElement; // Get the overlay finish element.
  const openOverlay = document.getElementById("openOverlay") as HTMLElement; // Get the open overlay element.

  /**
   * Get the current and user points from local storage.
   */
  const currentPoints = parseInt(localStorage.getItem("currentPoints") || "0", 10);

  /**
   * Calculate the final score.
   */
  const calcfinalScore = currentPoints * 2;
  /**
   * Update the user points in the database.
   */

  await fetch(`/api/saveTotalUserPoints`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ userId, userPoints: userPoints + calcfinalScore }),
  });

  const categoryValue = triviaElement.getAttribute("data-category");
  const roundValue = triviaElement.getAttribute("data-round");

  /**
   * Get the trivia data from local storage.
   */
  const triviaData = JSON.parse(localStorage.getItem(`${categoryValue}-triviaData-${roundValue}`) ?? "[]");

  /**
   * Update the headline and answer elements with the trivia data.
   */
  const headlineElement = document.querySelector(".solutionHeadline") as HTMLElement;
  headlineElement.textContent = triviaData.triviaAlbum;

  const answerElement = document.querySelector(".answer") as HTMLElement;
  answerElement.textContent = triviaData.triviaAnswer;

  const currentPointsDiv = document.querySelector(".overlayFinish .points") as HTMLElement;
  currentPointsDiv.textContent = `+ ${currentPoints as unknown as string} Pt`;

  const totalPointsDiv = document.querySelector(".overlayFinish .totalPoints") as HTMLElement;
  totalPointsDiv.textContent = `${userPoints + calcfinalScore}`;

  /**
   * Update the picture element with the trivia image.
   */
  const pictureElement = document.querySelector(".picture") as HTMLImageElement;
  pictureElement.src = triviaData.triviaImage;

  /**
   * Add a click event listener to the open overlay element.
   */
  openOverlay.addEventListener("click", function (_event: Event): void {
    // Show the overlay finish element.
    overlayFinish.style.visibility = "visible";

    // Add confetti.
    jsConfetti.addConfetti().then(() => jsConfetti.clearCanvas());

    // Clear the local storage after the last round if the round value is "round-three".
    if (roundValue === "round-three") clearLocalStorageAfterLastRound(categoryValue as string);
  });
</script>
