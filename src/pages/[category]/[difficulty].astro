---
import Layout from "@layouts/Layout.astro"; // Layout component
import categories from "@json/categories.json"; // JSON file containing categories data
import ShowCoins from "@components/Shared/ShowCoins.astro";
import { Icon } from "astro-icon/components";
import { getTitleBasedOnDifficulty } from "@utils/getTitleBasedOnDifficulty";
import GameHeadline from "@components/Game/GameHeadline.astro";
import FeedbackOverlay from "@components/Overlays/FeedbackOverlay.astro";
import EndOverlay from "@components/Overlays/EndOverlay.astro";

/**
 * Get the user object from the Astro context
 */
const user = Astro.locals.user;

/**
 * If the user is not logged in, redirect them to the login page.
 */
if (!user) {
  /**
   * Redirect the user to the login page.
   */
  return Astro.redirect("/");
}

/**
 * Destructure `category` and `round` from `Astro.params`
 */
const { category, difficulty } = Astro.params;

const currentCategoryData = categories.find((cat) => cat.slug === category);

const playerTitle = getTitleBasedOnDifficulty(difficulty || "easy");
---

<Layout title={`${currentCategoryData?.headline}`} showHeaderIcons={false}>
  <div slot="left-headercol">
    <ShowCoins />
  </div>

  <FeedbackOverlay />

  <EndOverlay />

  <!-- Goldenes LP Popup -->
  <div id="golden-lp-popup" class="popup hidden">
    <div class="popup-content">
      <h2>Herzlichen Glückwunsch!</h2>
      <Icon name="golden-lp" class="icon" width={100} height={100} />
      <p>
        Du hast die goldene <span class="goldenText">Pop-Rock</span> Schallplatte
        gewonnen und außerdem hast du den Titel <span class="goldenText"
          >{playerTitle}</span
        > erhalten!
      </p>
      <p>Erreichte Punkte: <span id="golden-lp-score"></span></p>
      <div class="centerButton">
        <button id="restart-button-lp" class="button">Neues Spiel</button>
      </div>
    </div>
  </div>

  <!-- Spielüberschrift und Fragenbereich -->
  <GameHeadline headline={currentCategoryData?.headline} />

  <div id="loading-spinner" class="spinner hidden"></div>

  <div
    id="question-container"
    data-categoryName={currentCategoryData?.headline}
    data-genre={category}
    data-userID={user.id}
    date-difficulty={difficulty}
  >
    <div id="question"></div>
    <div id="options"></div>
  </div>

  <div class="joker-container">
    <button id="joker-button" class="button">50:50 Joker</button>
    <p id="joker-count" class="joker-count">Joker: 0 verbleibend</p>
  </div>
</Layout>

<style is:global lang="scss">
  #question-container {
    max-width: 480px;
    margin: 0 auto;
    padding: var(--padding-medium);

    text-align: center;

    opacity: 1;
    background-color: var(--secondary-color);
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);

    transition: opacity 0.5s ease;
  }

  #question-container.hidden {
    opacity: 0;
  }

  #question {
    margin-bottom: var(--padding-large);
    font-size: 1.25rem;
    font-weight: 600;
  }

  #options {
    display: flex;
    flex-direction: column;
    gap: var(--padding-medium);
  }

  .feedback {
    margin-top: var(--padding-small);
    margin-bottom: var(--padding-medium);

    font-size: 1.25rem;
    color: var(--text-color);
    text-align: center;
  }

  /* Overlay */
  .overlay {
    position: fixed;
    z-index: 1000;
    inset: 0;

    display: flex;
    align-items: center;
    justify-content: center;

    padding: var(--padding-small);

    background: rgb(0 0 0 / 85%);
  }

  .overlay.hidden {
    display: none;
  }

  .overlay-content {
    overflow-y: auto;

    width: 100%;
    max-width: 480px;
    max-height: 90vh;
    padding: var(--padding-large);

    color: var(--text-color);
    text-align: center;

    background-color: var(--background-color);
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);

    transition: all 0.3s ease;
  }

  .albumCover {
    max-width: 100%;
    height: auto;
    margin: 0 auto var(--padding-small);

    border: 2px solid var(--text-color);
    border-radius: var(--border-radius);
  }

  .overlay-album {
    margin-bottom: var(--padding-small);
    font-size: 1.5rem;
    font-weight: bold;
    color: var(--highlight-color);
  }

  .overlay-year {
    margin-bottom: var(--padding-small);
    font-size: 1rem;
    color: var(--text-color);
  }

  .music-links {
    display: flex;
    gap: var(--padding-small);
    justify-content: center;
    margin-bottom: var(--padding-small);
  }

  .music-links a {
    display: flex;
    align-items: center;
    justify-content: center;

    width: 50px;
    height: 50px;
    padding: var(--padding-small);

    background-color: var(--highlight-color);
    border-radius: 50%;

    transition: background-color 0.3s ease;
  }

  .music-links a:hover {
    background-color: var(--button-hover-color);
  }

  .fun-fact {
    margin-top: var(--padding-small);

    font-size: 1.125rem;
    font-weight: 400;
    hyphens: auto;
    color: var(--text-color);
  }

  /* Popup */
  .popup {
    position: fixed;
    z-index: 1000;
    inset: 0;

    display: flex;
    align-items: center;
    justify-content: center;

    padding: var(--padding-medium);

    color: var(--text-color);

    background-color: rgb(31 14 22 / 90%);
  }

  .popup.hidden {
    display: none;
  }

  .popup-content {
    width: 100%;
    max-width: 480px;
    padding: var(--padding-large);

    font-size: 1.25rem;
    text-align: center;

    background-color: var(--button-text-color);
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
  }

  .goldenText {
    font-weight: 700;
    color: var(--text-color);
  }

  .centerButton {
    display: flex;
    justify-content: center;
    margin-top: var(--padding-large);
  }

  .centerButton .button {
    cursor: pointer;

    padding: var(--padding-small) var(--padding-medium);

    font-size: var(--button-font-size);

    background-color: var(--highlight-color);
    border: none;
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);

    transition:
      background-color 0.3s ease,
      transform 0.2s ease;
  }

  .centerButton .button:hover {
    transform: scale(1.05);
    background-color: var(--button-hover-color);
  }

  .joker-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin: var(--padding-small) 0;
  }

  .joker-count {
    margin-top: var(--padding-small);
    font-size: 1.2rem;
    color: var(--highlight-color);
  }

  .button {
    cursor: pointer;

    height: auto;
    padding: var(--padding-small) var(--padding-large);

    font-size: 1.125rem;

    opacity: 1;
    background-color: var(--highlight-color);
    border: none;
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);

    transition:
      background-color 0.3s ease,
      opacity 1s ease,
      height 1ys ease;
  }

  .button:hover {
    transform: scale(1.05);
    background-color: var(--button-hover-color);
  }

  .button.hidden {
    overflow: hidden;

    height: 0;
    margin: 0;
    padding: 0;

    opacity: 0;
  }

  .button.correct {
    background-color: green;
    animation: pulseCorrect 0.5s ease-out;
  }

  .button.wrong {
    background-color: red;
    animation: shake 0.5s ease-out;
  }

  @keyframes pulseCorrect {
    0% {
      transform: scale(1);
    }

    50% {
      transform: scale(1.1);
    }

    100% {
      transform: scale(1);
    }
  }

  @keyframes shake {
    0% {
      transform: translateX(0);
    }

    25% {
      transform: translateX(-5px);
    }

    50% {
      transform: translateX(5px);
    }

    75% {
      transform: translateX(-5px);
    }

    100% {
      transform: translateX(0);
    }
  }

  .spinner {
    width: 120px;
    height: 120px;
    margin: 0 auto;

    border: 10px solid #f3f3f3;
    border-top: 10px solid var(--highlight-color);
    border-radius: 50%;

    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }

    100% {
      transform: rotate(360deg);
    }
  }

  .spinner.hidden {
    display: none;
  }
</style>

<script>
  import { getRandomQuestion } from "@utils/game/getRandomQuestion";
  import { getUserAndCategoryPoints } from "@utils/game/getUserAndCategoryPoints";
  import { updateMusicLink } from "@utils/game/updateMusicLink";

  document.addEventListener("DOMContentLoaded", async function () {
    // Get the element that shows the current score
    const scoreElement = document.querySelector(
      ".coinsCount",
    ) as HTMLParagraphElement;

    const roundElement = document.querySelector(
      ".round",
    ) as HTMLParagraphElement;

    // Get the element that shows the feedback after a question
    const feedbackElement = document.getElementById(
      "feedback",
    ) as HTMLParagraphElement;

    // Get the element that shows the question
    const questionElement = document.getElementById(
      "question",
    ) as HTMLParagraphElement;

    // Get the element that shows the options
    const optionsContainer = document.getElementById(
      "options",
    ) as HTMLDivElement;

    // Get the element that shows the question container
    const questionContainer = document.getElementById(
      "question-container",
    ) as HTMLDivElement;

    // Get the category from the question container
    const category = questionContainer.getAttribute("data-genre");
    const userId = questionContainer.getAttribute("data-userID");
    const categoryName = questionContainer.getAttribute("data-categoryName");
    const difficulty = questionContainer.getAttribute("date-difficulty");
    // Get the anchor tags
    const spotifyLink = document.querySelector(
      "#overlay .music-links .spotifyUrl",
    ) as HTMLAnchorElement;
    const appleMusicLink = document.querySelector(
      "#overlay .music-links .appleMusicUrl",
    ) as HTMLAnchorElement;
    const deezerLink = document.querySelector(
      "#overlay .music-links .deezerUrl",
    ) as HTMLAnchorElement;

    // Initialize the score and the round index
    let score = 0;
    let correctAnswers = 0;
    let roundIndex = 0;

    // How many rounds there are
    const totalRounds =
      difficulty === "hard" ? 20 : difficulty === "medium" ? 15 : 10;

    roundElement.textContent = `${roundIndex + 1}/${totalRounds}`;

    // Import the albums data for the current category
    const albumsPromise = import(`../../json/genres/${category}.json`);
    // Get the albums data
    const albums: any = (await albumsPromise).default;

    const { totalUserPoints, currentCategoryPointsValue } =
      await getUserAndCategoryPoints(userId ?? "", categoryName ?? "");

    let currentQuestion: null = null;
    let jokerUsedCount = 0;
    let maxJokers = 0;

    let startTime: number;

    if (difficulty === "easy") {
      maxJokers = 3;
    } else if (difficulty === "medium") {
      maxJokers = 5;
    } else if (difficulty === "hard") {
      maxJokers = 7;
    }
    const jokerButton = document.getElementById(
      "joker-button",
    ) as HTMLButtonElement;

    // Zeige die Anzahl der verfügbaren Joker im Interface an
    const jokerCounterElement = document.getElementById(
      "joker-count",
    ) as HTMLElement;
    jokerCounterElement.textContent = `Joker: ${maxJokers} verbleibend`;

    let jokerUsed = false; // Der Joker kann nur einmal pro Runde verwendet werden

    // Funktion für den 50:50 Joker
    function use5050Joker(question: any) {
      const correctAnswer = question.correctAnswer;
      const options = Array.from(document.querySelectorAll("#options button"));

      if (jokerUsed) return; // Verhindern, dass der Joker mehrmals verwendet wird

      if (jokerUsedCount >= maxJokers) {
        jokerButton.disabled = true;
      }

      // Finde die falschen Antworten
      const incorrectOptions = options.filter(
        (option) => option.textContent !== correctAnswer,
      );

      const optionsToRemove = incorrectOptions
        .sort(() => Math.random() - 0.5)
        .slice(0, 2);

      optionsToRemove.forEach((option) => {
        option.classList.add("hidden");

        option.addEventListener("transitionend", function () {
          option.remove();
        });
      });

      jokerUsed = true; // Joker wurde verwendet

      // Joker wurde verwendet, erhöhe den Joker-Count
      jokerUsedCount++;
      jokerCounterElement.textContent = `Joker: ${maxJokers - jokerUsedCount} verbleibend`;
    }

    if (jokerButton) {
      jokerButton.addEventListener("click", function () {
        const currentQuestion = getCurrentQuestion(); // Aktuelle Frage holen
        use5050Joker(currentQuestion); // Joker aktivieren
      });
    }

    /**
     * Loads a question and its options into the DOM.
     */
    function loadQuestion(question: any, album: any) {
      startTime = Date.now(); // Setze die Startzeit, wenn die Frage geladen wird

      const questionContainer = document.getElementById(
        "question-container",
      ) as HTMLDivElement;

      // Fade-Out der aktuellen Frage
      questionContainer.classList.add("hidden");

      const spinner = document.getElementById(
        "loading-spinner",
      ) as HTMLDivElement;
      spinner.classList.remove("hidden");

      currentQuestion = question;

      setTimeout(() => {
        // Set the question text
        questionElement.textContent = question.question;

        // Clear the options container
        optionsContainer.innerHTML = "";

        question.options.forEach(function (option: any) {
          const button = document.createElement("button");
          button.textContent = option;
          button.className = "button";
          button.onclick = function () {
            handleAnswer(option, question.correctAnswer, question, album);
          };
          optionsContainer.appendChild(button);
        });

        spinner.classList.add("hidden");

        // Fade-In der neuen Frage
        questionContainer.classList.remove("hidden");
      }, 500);

      jokerUsed = false;
    }

    function handleAnswer(
      option: boolean,
      correctAnswer: any,
      currentQuestion: any,
      album?: any,
    ) {
      const endTime = Date.now(); // Zeit, wenn die Antwort gegeben wird
      const timeTaken = (endTime - startTime) / 1000; // Zeit in Sekunden
      let totalPoints = 0;

      let bonusPoints = 0;
      if (option === correctAnswer) {
        if (timeTaken <= 10) {
          bonusPoints = 50; // Maximaler Bonus für superschnelle Antworten
        } else if (timeTaken <= 15) {
          bonusPoints = 25; // Mittlerer Bonus für schnelle Antworten
        }

        totalPoints = 50 + bonusPoints; // Grundpunkte plus Bonus
        feedbackElement.classList.add("correct");

        feedbackElement.textContent = `Richtig! 50 Punkte + ${bonusPoints} Bonuspunkte`;
      } else {
        feedbackElement.classList.add("incorrect");
        feedbackElement.textContent = `Falsch! Die richtige Antwort war: ${correctAnswer}`;
      }

      feedbackElement.classList.add("show");

      setTimeout(
        () => feedbackElement.classList.remove("show", "correct", "incorrect"),
        3000,
      );

      // Aktualisiere die Gesamtpunktzahl
      score += totalPoints;

      updateScoreDisplay(score);

      // Funfact und weitere Informationen im Overlay anzeigen
      const overlayCover = document.getElementById(
        "overlay-cover",
      ) as HTMLImageElement;
      overlayCover.src = album.coverSrc || "";
      document.getElementById("overlay-artist")!.textContent =
        album.artist || "";
      document.getElementById("overlay-album")!.textContent = album.album || "";
      document.getElementById("overlay-funfact")!.textContent =
        currentQuestion.trivia || "";
      document.getElementById("overlay-year")!.textContent = album.year || "";

      updateMusicLink(spotifyLink, album.spotifyUrl);
      updateMusicLink(appleMusicLink, album.appleMusicUrl);
      updateMusicLink(deezerLink, album.deezerUrl);

      document.getElementById("overlay")!.classList.remove("hidden");

      document.getElementById("next-round-button")!.onclick = function () {
        document.getElementById("overlay")!.classList.add("hidden");
        if (roundIndex < totalRounds - 1) {
          roundIndex++;
          roundElement.textContent = `${roundIndex + 1}/${totalRounds}`;

          const newQuestion = getRandomQuestion(albums, difficulty || "easy");
          loadQuestion(newQuestion.randomQuestion, newQuestion.randomAlbum);
          feedbackElement.textContent = ""; // Feedback zurücksetzen
        } else {
          endGame();
        }
      };
    }

    // Funktion für das Spielende
    function endGame() {
      if (correctAnswers === totalRounds) {
        saveGoldenLP(userId || "", categoryName || "");
        saveScoreToDB();
        // Alle Fragen richtig beantwortet - Goldene LP Popup anzeigen
        showGoldenLpPopup();
      } else {
        saveScoreToDB();
        // Normales Spielende Popup anzeigen
        showEndgamePopup();
      }
    }

    function showEndgamePopup() {
      document.getElementById("popup-score")!.textContent = score.toString();

      const endgamePopup = document.getElementById("endgame-popup");
      endgamePopup!.classList.remove("hidden");

      document.getElementById("restart-button")!.onclick = function () {
        restartGame();
      };
    }

    function showGoldenLpPopup() {
      document.getElementById("golden-lp-score")!.textContent =
        score.toString();

      const goldenLpPopup = document.getElementById("golden-lp-popup");
      goldenLpPopup!.classList.remove("hidden");

      document.getElementById("restart-button-lp")!.onclick = function () {
        restartGame();
      };
    }

    function updateScoreDisplay(score: number) {
      scoreElement.textContent = score as unknown as string;

      // Bonus Animation
      scoreElement.classList.add("bonus");
      setTimeout(() => {
        scoreElement.classList.remove("bonus");
      }, 500);
    }

    function restartGame() {
      score = 0;
      correctAnswers = 0;
      roundIndex = 0;
      window.location.href = "/gamehome";
    }

    async function saveScoreToDB() {
      await fetch(`/api/saveTotalUserPointsAndHighscore`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          userId,
          totalUserPoints: totalUserPoints + score,
          category: categoryName,
          categoryPoints: currentCategoryPointsValue + score,
        }),
      });
    }

    async function saveGoldenLP(userId: string, genre: string) {
      await fetch(`/api/saveUserGoldenLP`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ userId, genre, difficulty }),
      });
    }

    function getCurrentQuestion() {
      return currentQuestion;
    }

    const initialQuestion = getRandomQuestion(albums, difficulty || "easy");
    loadQuestion(initialQuestion.randomQuestion, initialQuestion.randomAlbum);
  });
</script>
