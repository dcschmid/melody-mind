---
import Layout from "@layouts/Layout.astro"; // Layout component
import categories from "@json/categories.json"; // JSON file containing categories data
import ShowCoins from "@components/Shared/ShowCoins.astro";
import { Icon } from "astro-icon/components";
import { getTitleBasedOnDifficulty } from "@utils/getTitleBasedOnDifficulty";

/**
 * Get the user object from the Astro context
 */
const user = Astro.locals.user;

/**
 * If the user is not logged in, redirect them to the login page.
 */
if (!user) {
  /**
   * Redirect the user to the login page.
   */
  return Astro.redirect("/");
}

/**
 * Destructure `category` and `round` from `Astro.params`
 */
const { category, difficulty } = Astro.params;

const currentCategoryData = categories.find((cat) => cat.slug === category);

const playerTitle = getTitleBasedOnDifficulty(difficulty);
---

<Layout title={`${currentCategoryData?.headline}`} showHeaderIcons={false}>
  <div slot="left-headercol">
    <ShowCoins />
  </div>

  <!-- Overlay für Feedback und nächste Runde -->
  <div id="overlay" class="overlay hidden">
    <div class="overlay-content">
      <p id="feedback" class="feedback"></p>
      <img id="overlay-cover" src="" alt="Album Cover" class="albumCover" />
      <h3 id="overlay-album">Album Name</h3>
      <p id="overlay-funfact" class="fun-fact">Fun Fact</p>
      <div class="centerButton">
        <button id="next-round-button" class="button">Nächste Runde</button>
      </div>
    </div>
  </div>

  <!-- Spiel beendet Popup -->
  <div id="endgame-popup" class="popup hidden">
    <div class="popup-content">
      <h2>Spiel beendet!</h2>
      <p>Erreichte Punkte: <span id="popup-score"></span></p>
      <div class="centerButton">
        <button id="restart-button" class="button">Neues Spiel</button>
      </div>
    </div>
  </div>

  <!-- Goldenes LP Popup -->
  <div id="golden-lp-popup" class="popup hidden">
    <div class="popup-content">
      <h2>Herzlichen Glückwunsch!</h2>
      <Icon name="golden-lp" class="icon" width={100} height={100} />
      <p>
        Du hast die goldene <span class="goldenText">Pop-Rock</span> Schallplatte
        gewonnen und außerdem hast du den Titel <span class="goldenText"
          >{playerTitle}</span
        > erhalten!
      </p>
      <p>Erreichte Punkte: <span id="golden-lp-score"></span></p>
      <div class="centerButton">
        <button id="restart-button-lp" class="button">Neues Spiel</button>
      </div>
    </div>
  </div>

  <!-- Spielüberschrift und Fragenbereich -->
  <div class="gameHeadline">
    {currentCategoryData?.headline} - Runde <span class="round"></span>
  </div>
  <div
    id="question-container"
    data-categoryName={currentCategoryData?.headline}
    data-genre={category}
    data-userID={user.id}
    date-difficulty={difficulty}
  >
    <div id="question"></div>
    <div id="options"></div>
  </div>
</Layout>

<style is:global lang="scss">
  .gameHeadline {
    padding-bottom: var(--padding-small);

    font-size: 1.75rem;
    font-weight: 900;
    color: var(--text-color);
    text-align: center;
  }

  #question-container {
    max-width: 600px;
    margin: 0 auto;
    padding: var(--padding-medium);

    text-align: center;

    background-color: var(--secondary-color);
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
  }

  #question {
    margin-bottom: var(--padding-large);
    font-size: 1.25rem;
    font-weight: 600;
  }

  #options {
    display: flex;
    flex-direction: column;
    gap: var(--padding-small);
  }

  .feedback {
    margin-top: var(--padding-small);
    margin-bottom: var(--padding-medium);

    font-size: 1.25rem;
    color: var(--text-color);
    text-align: center;
  }

  /* Overlay */
  .overlay {
    position: fixed;
    z-index: 1000;
    inset: 0;

    display: flex;
    align-items: center;
    justify-content: center;

    padding: var(--padding-small);

    background: rgb(0 0 0 / 85%);
  }

  .overlay.hidden {
    display: none;
  }

  .overlay-content {
    width: 100%;
    max-width: 500px;
    padding: var(--padding-medium);

    text-align: center;

    background-color: var(--background-color);
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
  }

  .albumCover {
    max-width: 200px;
    margin: 0 auto var(--padding-small);
    border: 2px solid var(--text-color);
    border-radius: var(--border-radius);
  }

  .fun-fact {
    font-size: 1rem;
    hyphens: auto;
    color: var(--text-color);
  }

  /* Popup */
  .popup {
    position: fixed;
    z-index: 1000;
    inset: 0;

    display: flex;
    align-items: center;
    justify-content: center;

    padding: var(--padding-medium);

    color: var(--text-color);

    background-color: rgb(31 14 22 / 90%);
  }

  .popup.hidden {
    display: none;
  }

  .popup-content {
    width: 100%;
    max-width: 480px;
    padding: var(--padding-large);

    font-size: 1.25rem;
    text-align: center;

    background-color: var(--button-text-color);
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
  }

  .goldenText {
    font-weight: 700;
    color: var(--text-color);
  }

  .centerButton {
    display: flex;
    justify-content: center;
  }
</style>

<script>
  import { getRandomQuestion } from "@utils/game/getRandomQuestion";
  import { getUserAndCategoryPoints } from "@utils/game/getUserAndCategoryPoints";

  document.addEventListener("DOMContentLoaded", async function () {
    // Get the element that shows the current score
    const scoreElement = document.querySelector(
      ".coinsCount",
    ) as HTMLParagraphElement;

    const roundElement = document.querySelector(
      ".round",
    ) as HTMLParagraphElement;

    // Get the element that shows the feedback after a question
    const feedbackElement = document.getElementById(
      "feedback",
    ) as HTMLParagraphElement;

    // Get the element that shows the question
    const questionElement = document.getElementById(
      "question",
    ) as HTMLParagraphElement;

    // Get the element that shows the options
    const optionsContainer = document.getElementById(
      "options",
    ) as HTMLDivElement;

    // Get the element that shows the question container
    const questionContainer = document.getElementById(
      "question-container",
    ) as HTMLDivElement;

    // Get the category from the question container
    const category = questionContainer.getAttribute("data-genre");
    const userId = questionContainer.getAttribute("data-userID");
    const categoryName = questionContainer.getAttribute("data-categoryName");
    const difficulty = questionContainer.getAttribute("date-difficulty");

    // Initialize the score and the round index
    let score = 0;
    let correctAnswers = 0;
    let roundIndex = 0;

    // How many rounds there are
    const totalRounds = 10;

    roundElement.textContent = `${roundIndex + 1}/${totalRounds}`;

    // Import the albums data for the current category
    const albumsPromise = import(`../../json/genres/${category}.json`);
    // Get the albums data
    const albums: any = (await albumsPromise).default;

    const { totalUserPoints, currentCategoryPointsValue } =
      await getUserAndCategoryPoints(userId ?? "", categoryName ?? "");

    /**
     * Loads a question and its options into the DOM.
     */
    function loadQuestion(question: any, album: any) {
      // Set the question text
      questionElement.textContent = question.question;

      // Clear the options container
      optionsContainer.innerHTML = "";

      question.options.forEach(function (option: any) {
        const button = document.createElement("button");
        button.textContent = option;
        button.className = "button";
        button.onclick = function () {
          handleAnswer(option, question.correctAnswer, question, album);
        };
        optionsContainer.appendChild(button);
      });
    }

    function handleAnswer(
      option: boolean,
      correctAnswer: any,
      currentQuestion: any,
      album?: any,
    ) {
      if (option === correctAnswer) {
        correctAnswers++;
        score += 50;
        feedbackElement.textContent = "Richtig! 50 Punkte";
      } else {
        feedbackElement.textContent = `Leider Falsch! Die richtige Antwort war: ${correctAnswer}`;
      }

      scoreElement.textContent = `${score}`;

      // Funfact und weitere Informationen im Overlay anzeigen
      const overlayCover = document.getElementById(
        "overlay-cover",
      ) as HTMLImageElement;
      overlayCover.src = album.coverSrc || "";
      document.getElementById("overlay-album")!.textContent =
        album.artist + " - " + album.album || "";
      document.getElementById("overlay-funfact")!.textContent =
        currentQuestion.trivia || "";

      document.getElementById("overlay")!.classList.remove("hidden");

      document.getElementById("next-round-button")!.onclick = function () {
        document.getElementById("overlay")!.classList.add("hidden");
        if (roundIndex < totalRounds - 1) {
          roundIndex++;
          roundElement.textContent = `${roundIndex + 1}/${totalRounds}`;

          const newQuestion = getRandomQuestion(albums, difficulty || "easy");
          loadQuestion(newQuestion.randomQuestion, newQuestion.randomAlbum);
          feedbackElement.textContent = ""; // Feedback zurücksetzen
        } else {
          endGame();
        }
      };
    }

    // Funktion für das Spielende
    function endGame() {
      if (correctAnswers === totalRounds) {
        saveGoldenLP(userId || "", categoryName || "");
        saveScoreToDB();
        // Alle Fragen richtig beantwortet - Goldene LP Popup anzeigen
        showGoldenLpPopup();
      } else {
        saveScoreToDB();
        // Normales Spielende Popup anzeigen
        showEndgamePopup();
      }
    }

    function showEndgamePopup() {
      document.getElementById("popup-score")!.textContent = score.toString();

      const endgamePopup = document.getElementById("endgame-popup");
      endgamePopup!.classList.remove("hidden");

      document.getElementById("restart-button")!.onclick = function () {
        restartGame();
      };
    }

    function showGoldenLpPopup() {
      document.getElementById("golden-lp-score")!.textContent =
        score.toString();

      const goldenLpPopup = document.getElementById("golden-lp-popup");
      goldenLpPopup!.classList.remove("hidden");

      document.getElementById("restart-button-lp")!.onclick = function () {
        restartGame();
      };
    }

    function restartGame() {
      // Setze die Werte zurück und starte ein neues Spiel oder leite zur Startseite weiter
      score = 0;
      correctAnswers = 0;
      roundIndex = 0;
      window.location.href = "/gamehome";
    }

    async function saveScoreToDB() {
      await fetch(`/api/saveTotalUserPointsAndHighscore`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          userId,
          totalUserPoints: totalUserPoints + score,
          category: categoryName,
          categoryPoints: currentCategoryPointsValue + score,
        }),
      });
    }

    async function saveGoldenLP(userId: string, genre: string) {
      await fetch(`/api/saveUserGoldenLP`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ userId, genre, difficulty }),
      });
    }

    // Initiale Frage laden
    const initialQuestion = getRandomQuestion(albums, difficulty || "easy");
    loadQuestion(initialQuestion.randomQuestion, initialQuestion.randomAlbum);
  });
</script>
