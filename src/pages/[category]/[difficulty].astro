---
import Layout from "@layouts/Layout.astro"; // Layout component
import categories from "@json/categories.json"; // JSON file containing categories data
import ShowCoins from "@components/Shared/ShowCoins.astro";
import { getTitleBasedOnDifficulty } from "@utils/getTitleBasedOnDifficulty";
import GameHeadline from "@components/Game/GameHeadline.astro";
import FeedbackOverlay from "@components/Overlays/FeedbackOverlay.astro";
import EndOverlay from "@components/Overlays/EndOverlay.astro";
import GoldenLPOverlay from "@components/Overlays/GoldenLPOverlay.astro";
import LoadingSpinner from "@components/Game/LoadingSpinner.astro";
import Joker from "@components/Game/Joker.astro";

/**
 * Get the user object from the Astro context
 */
const user = Astro.locals.user;

/**
 * If the user is not logged in, redirect them to the login page.
 */
if (!user) {
  /**
   * Redirect the user to the login page.
   */
  return Astro.redirect("/");
}

/**
 * Destructure `category` and `round` from `Astro.params`
 */
const { category, difficulty } = Astro.params;

const currentCategoryData = categories.find((cat) => cat.slug === category);

const playerTitle = getTitleBasedOnDifficulty(difficulty || "easy");
---

<Layout title={`${currentCategoryData?.headline}`} showHeaderIcons={false}>
  <div slot="left-headercol">
    <ShowCoins />
  </div>

  <FeedbackOverlay />

  <EndOverlay />

  <GoldenLPOverlay
    playerTitle={playerTitle}
    category={currentCategoryData?.headline}
  />

  <GameHeadline headline={currentCategoryData?.headline} />

  <LoadingSpinner />

  <div
    id="question-container"
    data-categoryName={currentCategoryData?.headline}
    data-genre={category}
    data-userID={user.id}
    date-difficulty={difficulty}
  >
    <div id="question"></div>
    <div id="options"></div>
  </div>

  <Joker />
</Layout>

<style is:global lang="scss">
  #question-container {
    max-width: 480px;
    margin: 0 auto;
    padding: var(--padding-medium);

    text-align: center;

    opacity: 1;
    background-color: var(--secondary-color);
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);

    transition: opacity 0.5s ease;
  }

  #question-container.hidden {
    opacity: 0;
  }

  #question {
    margin-bottom: var(--padding-large);
    font-size: 1.25rem;
    font-weight: 600;
  }

  #options {
    display: flex;
    flex-direction: column;
    gap: var(--padding-medium);
  }

  .overlay.hidden {
    display: none;
  }

  .popup.hidden {
    display: none;
  }

  .centerButton {
    display: flex;
    justify-content: center;
    margin-top: var(--padding-large);
  }

  .centerButton .button {
    cursor: pointer;

    padding: var(--padding-small) var(--padding-medium);

    font-size: var(--button-font-size);

    background-color: var(--highlight-color);
    border: none;
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);

    transition:
      background-color 0.3s ease,
      transform 0.2s ease;
  }

  .centerButton .button:hover {
    transform: scale(1.05);
    background-color: var(--button-hover-color);
  }
</style>

<script>
  import { calculateBonusPoints } from "@utils/game/calculateBonusPoints";
  import { getRandomQuestion } from "@utils/game/getRandomQuestion";
  import { getUserAndCategoryPoints } from "@utils/game/getUserAndCategoryPoints";
  import { loadQuestion } from "@utils/game/loadQuestion";
  import { setupJokers } from "@utils/game/setupJokers";
  import { showFeedback } from "@utils/game/showFeedback";
  import { showOverlay } from "@utils/game/showOverlay";
  import { updateRoundProgress } from "@utils/game/updateRoundProgress";
  import { use5050Joker } from "@utils/game/use5050Joker";

  document.addEventListener("DOMContentLoaded", async function () {
    // Get the element that shows the current score
    const scoreElement = document.querySelector(
      ".coinsCount",
    ) as HTMLParagraphElement;

    const roundElement = document.querySelector(
      ".round",
    ) as HTMLParagraphElement;

    // Get the element that shows the feedback after a question
    const feedbackElement = document.getElementById(
      "feedback",
    ) as HTMLParagraphElement;

    // Get the element that shows the question
    const questionElement = document.getElementById(
      "question",
    ) as HTMLParagraphElement;

    // Get the element that shows the options
    const optionsContainer = document.getElementById(
      "options",
    ) as HTMLDivElement;

    // Get the element that shows the question container
    const questionContainer = document.getElementById(
      "question-container",
    ) as HTMLDivElement;

    const spinner = document.getElementById(
      "loading-spinner",
    ) as HTMLDivElement;

    // Get the category from the question container
    const category = questionContainer.getAttribute("data-genre");
    const userId = questionContainer.getAttribute("data-userID");
    const categoryName = questionContainer.getAttribute("data-categoryName");
    const difficulty = questionContainer.getAttribute("date-difficulty");

    // Initialize the score and the round index
    let score = 0;
    let correctAnswers = 0;
    let roundIndex = 0;

    // How many rounds there are
    const totalRounds =
      difficulty === "hard" ? 20 : difficulty === "medium" ? 15 : 10;

    updateRoundProgress(roundIndex, totalRounds, roundElement);

    // Import the albums data for the current category
    const albumsPromise = import(`../../json/genres/${category}.json`);
    // Get the albums data
    const albums: any = (await albumsPromise).default;

    const { totalUserPoints, currentCategoryPointsValue } =
      await getUserAndCategoryPoints(userId ?? "", categoryName ?? "");

    let currentQuestion: null = null;

    let startTime: number;

    const { maxJokers, jokerUsed } = setupJokers(difficulty);

    const jokerButton = document.getElementById(
      "joker-button",
    ) as HTMLButtonElement;

    // Zeige die Anzahl der verfügbaren Joker im Interface an
    const jokerCounterElement = document.getElementById(
      "joker-count",
    ) as HTMLElement;
    jokerCounterElement.textContent = `Joker: ${maxJokers} verbleibend`;

    if (jokerButton) {
      jokerButton.addEventListener("click", function () {
        const currentQuestion = getCurrentQuestion();
        const jokerUsedCount = use5050Joker(
          currentQuestion,
          jokerButton,
          maxJokers,
          jokerUsed,
        );
        jokerCounterElement.textContent = `Joker: ${maxJokers - jokerUsedCount} verbleibend`;
      });
    }

    function handleAnswer(
      option: boolean,
      correctAnswer: any,
      currentQuestion: any,
      album?: any,
    ) {
      let totalPoints = 0;

      const isCorrect = option === correctAnswer;
      const bonusPoints = calculateBonusPoints(startTime);

      if (isCorrect) {
        totalPoints = 50 + bonusPoints;
      }

      showFeedback(isCorrect, feedbackElement, correctAnswer, bonusPoints);

      // Aktualisiere die Gesamtpunktzahl
      score += totalPoints;

      updateScoreDisplay(score);

      showOverlay(currentQuestion, album);

      document.getElementById("next-round-button")!.onclick = function () {
        document.getElementById("overlay")!.classList.add("hidden");
        if (roundIndex < totalRounds - 1) {
          roundIndex++;
          updateRoundProgress(roundIndex, totalRounds, roundElement);

          const newQuestion = getRandomQuestion(albums, difficulty || "easy");
          currentQuestion = newQuestion.randomQuestion;

          loadQuestion(
            newQuestion.randomQuestion,
            newQuestion.randomAlbum,
            optionsContainer,
            spinner,
            questionElement,
            handleAnswer,
            feedbackElement,
          );
          feedbackElement.textContent = ""; // Feedback zurücksetzen
        } else {
          endGame();
        }
      };
    }

    // Funktion für das Spielende
    function endGame() {
      if (correctAnswers === totalRounds) {
        saveGoldenLP(userId || "", categoryName || "");
        saveScoreToDB();
        // Alle Fragen richtig beantwortet - Goldene LP Popup anzeigen
        showGoldenLpPopup();
      } else {
        saveScoreToDB();
        // Normales Spielende Popup anzeigen
        showEndgamePopup();
      }
    }

    function showEndgamePopup() {
      document.getElementById("popup-score")!.textContent = score.toString();

      const endgamePopup = document.getElementById("endgame-popup");
      endgamePopup!.classList.remove("hidden");

      document.getElementById("restart-button")!.onclick = function () {
        restartGame();
      };
    }

    function showGoldenLpPopup() {
      document.getElementById("golden-lp-score")!.textContent =
        score.toString();

      const goldenLpPopup = document.getElementById("golden-lp-popup");
      goldenLpPopup!.classList.remove("hidden");

      document.getElementById("restart-button-lp")!.onclick = function () {
        restartGame();
      };
    }

    function updateScoreDisplay(score: number) {
      scoreElement.textContent = score as unknown as string;

      // Bonus Animation
      scoreElement.classList.add("bonus");
      setTimeout(() => {
        scoreElement.classList.remove("bonus");
      }, 500);
    }

    function restartGame() {
      score = 0;
      correctAnswers = 0;
      roundIndex = 0;
      window.location.href = "/gamehome";
    }

    async function saveScoreToDB() {
      await fetch(`/api/saveTotalUserPointsAndHighscore`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          userId,
          totalUserPoints: totalUserPoints + score,
          category: categoryName,
          categoryPoints: currentCategoryPointsValue + score,
        }),
      });
    }

    async function saveGoldenLP(userId: string, genre: string) {
      await fetch(`/api/saveUserGoldenLP`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ userId, genre, difficulty }),
      });
    }

    function getCurrentQuestion() {
      return currentQuestion;
    }

    const initialQuestion = getRandomQuestion(albums, difficulty || "easy");
    loadQuestion(
      initialQuestion.randomQuestion,
      initialQuestion.randomAlbum,
      optionsContainer,
      spinner,
      questionElement,
      handleAnswer,
      feedbackElement,
    );

    currentQuestion = initialQuestion.randomQuestion;
  });
</script>
