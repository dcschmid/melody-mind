---
import Layout from "@layouts/Layout.astro"; // Layout component
import categories from "@json/categories.json"; // JSON file containing categories data
import ShowCoins from "@components/Shared/ShowCoins.astro";
import { getTitleBasedOnDifficulty } from "@utils/getTitleBasedOnDifficulty";
import GameHeadline from "@components/Game/GameHeadline.astro";
import FeedbackOverlay from "@components/Overlays/FeedbackOverlay.astro";
import EndOverlay from "@components/Overlays/EndOverlay.astro";
import GoldenLPOverlay from "@components/Overlays/GoldenLPOverlay.astro";
import LoadingSpinner from "@components/Game/LoadingSpinner.astro";
import Joker from "@components/Game/Joker.astro";
import ErrorMessage from "@components/Shared/ErrorMessage.astro";

/**
 * Get the user object from the Astro context
 */
const user = Astro.locals.user;

/**
 * If the user is not logged in, redirect them to the login page.
 */
if (!user) {
  /**
   * Redirect the user to the login page.
   */
  return Astro.redirect("/");
}

/**
 * Destructure `category` and `round` from `Astro.params`
 */
const { category, difficulty } = Astro.params;

const currentCategoryData = categories.find((cat) => cat.slug === category);

const playerTitle = getTitleBasedOnDifficulty(difficulty || "easy");
---

<Layout title={`${currentCategoryData?.headline}`} showHeaderIcons={false}>
  <div slot="left-headercol">
    <ShowCoins />
  </div>

  <FeedbackOverlay />

  <EndOverlay />

  <GoldenLPOverlay
    playerTitle={playerTitle}
    category={currentCategoryData?.headline || ""}
  />

  <GameHeadline headline={currentCategoryData?.headline} />

  <ErrorMessage />

  <LoadingSpinner />

  <div
    id="question-container"
    role="main"
    aria-label="Spielbereich"
    data-categoryName={currentCategoryData?.headline}
    data-genre={category}
    data-userID={user.id}
    date-difficulty={difficulty}
  >
    <div id="question" role="heading" aria-level="2"></div>
    <div id="options" role="radiogroup" aria-label="Antwortmöglichkeiten"></div>
  </div>

  <Joker />
</Layout>

<style is:global lang="scss">
  #question-container {
    max-width: 768px;
    margin: 0 auto;
    padding: var(--padding-medium);

    text-align: center;

    opacity: 1;
    background-color: var(--secondary-color);
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);

    transition: opacity 0.5s ease;
  }

  #question-container.hidden {
    opacity: 0;
  }

  #question {
    margin-bottom: var(--padding-large);
    font-size: 1.25rem;
    font-weight: 600;
  }

  #options {
    display: flex;
    flex-direction: column;
    gap: var(--padding-medium);
  }

  .overlay.hidden {
    display: none;
  }

  .popup.hidden {
    display: none;
  }

  .centerButton {
    display: flex;
    justify-content: center;
    margin-top: var(--padding-large);
  }

  .centerButton .button {
    cursor: pointer;

    padding: var(--padding-small) var(--padding-medium);

    font-size: var(--button-font-size);

    background-color: var(--highlight-color);
    border: none;
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);

    transition:
      background-color 0.3s ease,
      transform 0.2s ease;
  }

  .centerButton .button:hover {
    transform: scale(1.05);
    background-color: var(--button-hover-color);
  }
</style>

<script>
  import { stopAudio } from "@utils/audio/audioControls";
  import { ErrorHandler } from "@utils/error/errorHandler";
  import {
    handleEndGame,
    restartGame,
    showEndgamePopup,
    showGoldenLpPopup,
  } from "@utils/game/endGameUtils";
  import { getRandomQuestion } from "@utils/game/getRandomQuestion";
  import { getUserAndCategoryPoints } from "@utils/game/getUserAndCategoryPoints";
  import {
    createInitialJokerState,
    use5050Joker,
  } from "@utils/game/jokerUtils";
  import { initializeMediaElements } from "@utils/game/mediaUtils";
  import { QueueManager } from "@utils/queue/queueManager";
  import { loadQuestion } from "@utils/game/loadQuestionUtils";
  import { handleAnswer } from "@utils/game/handleAnswerUtils";

  const ROUNDS_PER_DIFFICULTY = {
    easy: 10,
    medium: 15,
    hard: 20,
  } as const;

  document.addEventListener("DOMContentLoaded", async function () {
    QueueManager.startProcessing();

    // DOM-Selektoren cachen
    const elements = {
      score: document.querySelector(".coinsCount") as HTMLParagraphElement,
      round: document.querySelector(".round") as HTMLParagraphElement,
      feedback: document.getElementById("feedback") as HTMLParagraphElement,
      question: document.getElementById("question") as HTMLParagraphElement,
      options: document.getElementById("options") as HTMLDivElement,
      container: document.getElementById("question-container") as HTMLDivElement,
      overlayCover: document.getElementById("overlay-cover") as HTMLImageElement,
      overlay: document.getElementById("overlay") as HTMLDivElement,
      jokerButton: document.getElementById("joker-button") as HTMLButtonElement,
      jokerCounter: document.getElementById("joker-count") as HTMLElement,
      nextRoundButton: document.getElementById("next-round-button") as HTMLButtonElement,
      restartButton: document.getElementById("restart-button") as HTMLButtonElement,
      restartButtonLp: document.getElementById("restart-button-lp") as HTMLButtonElement,
      loadingSpinner: document.getElementById("loading-spinner") as HTMLElement
    };

    // Kategorie-Informationen aus dem Container holen
    const category = elements.container.getAttribute("data-genre");
    const userId = elements.container.getAttribute("data-userID");
    const categoryName = elements.container.getAttribute("data-categoryName");
    const difficulty = elements.container.getAttribute("date-difficulty");

    let score = 0;
    let correctAnswers = 0;
    let roundIndex = 0;
    const totalRounds = ROUNDS_PER_DIFFICULTY[difficulty as keyof typeof ROUNDS_PER_DIFFICULTY] ?? ROUNDS_PER_DIFFICULTY.easy;
    elements.round.textContent = `${roundIndex + 1}/${totalRounds}`;

    // Albums laden und in einer Variable speichern
    let albums;
    try {
      const albumsPromise = import(`../../json/genres/${category}.json`);
      albums = (await albumsPromise).default;
      if (!albums?.length) {
        throw new Error(`Keine Alben für Kategorie ${category} gefunden`);
      }
    } catch (error) {
      ErrorHandler.handleApiError(error);
      return;
    }

    const { totalUserPoints, currentCategoryPointsValue } =
      await getUserAndCategoryPoints(userId ?? "", categoryName ?? "");

    let currentQuestion: null = null;

    const { maxJokers, jokerState } = createInitialJokerState(
      difficulty || "easy",
    );
    let currentJokerState = jokerState;

    elements.jokerCounter.textContent = `Joker: ${maxJokers} verbleibend`;

    // Joker-Logik anpassen
    function handleJokerClick() {
      const question = getCurrentQuestion();
      if (!question) return;

      currentJokerState = use5050Joker(question, currentJokerState, maxJokers, {
        updateButton: (disabled) => {
          elements.jokerButton.disabled = disabled;
        },
        updateCounter: (remaining) => {
          elements.jokerCounter.textContent = `Joker: ${remaining} verbleibend`;
        },
      });
    }

    if (elements.jokerButton) {
      elements.jokerButton.addEventListener("click", handleJokerClick);
    }

    const mediaElements = initializeMediaElements();
    if (!mediaElements) {
      console.error("Media-Elemente konnten nicht initialisiert werden");
      return;
    }

    // handleAnswer anpassen
    function handleAnswerWrapper(
      option: any,
      correctAnswer: any,
      currentQuestion: { trivia: string },
      album: { coverSrc: string; artist: string; album: string; year: string },
    ) {
      score = handleAnswer({
        option,
        correctAnswer,
        currentQuestion,
        album,
        elements: {
          feedbackElement: elements.feedback,
          scoreElement: elements.score,
          overlayCover: elements.overlayCover,
          overlay: elements.overlay,
          mediaElements,
        },
        state: {
          score,
          roundIndex,
          totalRounds,
          roundElement: elements.round,
        },
      });

      elements.nextRoundButton.onclick = function () {
        stopAudio();
        elements.overlay.classList.add("hidden");
        if (roundIndex < totalRounds - 1) {
          roundIndex++;
          elements.round.textContent = `${roundIndex + 1}/${totalRounds}`;

          const newQuestion = getRandomQuestion(
            albums,
            difficulty || "easy",
            totalRounds,
          );
          if (newQuestion) {
            loadNewQuestion(
              newQuestion.randomQuestion,
              newQuestion.randomAlbum,
            );
            elements.feedback.textContent = "";
          }
        } else {
          endGame();
        }
      };
    }

    function endGame() {
      const config = {
        userId: userId || "",
        categoryName: categoryName || "",
        difficulty: difficulty || "easy",
        totalRounds,
        correctAnswers,
        score,
        totalUserPoints,
        currentCategoryPointsValue,
      };

      const ui = {
        showGoldenLpPopup: () => showGoldenLpPopup(score),
        showEndgamePopup: () => showEndgamePopup(score),
      };

      handleEndGame(config, ui, {
        onError: (error) => {
          ErrorHandler.handleSaveError(error, "score", {
            userId: config.userId,
            totalUserPoints: config.totalUserPoints + config.score,
            category: config.categoryName,
            categoryPoints: config.currentCategoryPointsValue + config.score,
          });
        },
      });
    }

    // Event Listener für Restart-Buttons
    elements.restartButton?.addEventListener("click", restartGame);
    elements.restartButtonLp?.addEventListener("click", restartGame);

    function getCurrentQuestion() {
      return currentQuestion;
    }

    // loadNewQuestion anpassen
    function loadNewQuestion(question: any, album: any) {
      if (!question || !question.options) {
        console.error("Ungültige Frage oder keine Optionen vorhanden");
        return;
      }

      currentQuestion = question;

      loadQuestion({
        question,
        album,
        elements: {
          questionContainer: elements.container,
          spinner: elements.loadingSpinner,
          questionElement: elements.question,
          optionsContainer: elements.options,
        },
        handlers: {
          handleAnswer: handleAnswerWrapper,
        },
        jokerState: currentJokerState,
      });
    }

    // Initiale Frage laden
    const initialQuestion = getRandomQuestion(
      albums,
      difficulty || "easy",
      totalRounds,
    );
    if (initialQuestion?.randomQuestion && initialQuestion?.randomAlbum) {
      loadNewQuestion(
        initialQuestion.randomQuestion,
        initialQuestion.randomAlbum,
      );
    } else {
      console.error("Keine gültige initiale Frage gefunden");
    }

    window.addEventListener("beforeunload", (e) => {
      if (QueueManager.hasUnsavedData()) {
        e.preventDefault();
      }
    });

    // Cleanup-Funktion anpassen
    const cleanup = () => {
      stopAudio();
      QueueManager.stopProcessing();
      elements.jokerButton?.removeEventListener("click", handleJokerClick);
      elements.restartButton?.removeEventListener("click", restartGame);
      elements.restartButtonLp?.removeEventListener("click", restartGame);
    };

    window.addEventListener("unload", cleanup);
  });
</script>
