---
import Layout from "@layouts/Layout.astro";
import { getPlayerRank } from "@utils/highscore/getPlayerRank";
import {
  db,
  desc,
  eq,
  User,
  TotalHighscore,
  HighscorePerCategory,
} from "astro:db";
import type { SQLWrapper } from "drizzle-orm";

// Get the user object from the Astro context
const user = Astro.locals.user;

/**
 * If the user is not logged in, redirect them to the login page.
 */
if (!user) {
  /**
   * Redirect the user to the login page.
   */
  return Astro.redirect("/");
}

/**
 * Fetches the top 10 highest scores from the TotalHighscore table,
 * ordered by score in descending order. Also fetches the categories
 * that the user has played from the HighscorePerCategory table,
 * filtered by the user's ID.
 *
 * @returns {Promise<[Array<{TotalHighscore & {User: User}}>, Array<{category: string}>>>}
 * An array containing the top 10 highest scores and the categories the user has played.
 */
const [highscores, playedCategories] = await db.batch([
  // Fetch the top 10 highest scores from the TotalHighscore table
  // ordered by score in descending order.
  db
    .select()
    .from(TotalHighscore)
    // Join the TotalHighscore table with the User table on the userId column.
    .innerJoin(User, eq(TotalHighscore.userId, User.id))
    .orderBy(desc(TotalHighscore.score))
    .limit(10),
  // Fetch the categories that the user has played from the HighscorePerCategory table.
  // Filter the results by the user's ID.
  db
    .select()
    .from(HighscorePerCategory)
    .where(eq(HighscorePerCategory.userId, user!.id)),
]);

// Get an array of category names from the played categories.
const categoriesNamesArray = playedCategories.map(
  (category: { category: any }) => category.category,
);

// Create an object to store the scores for each category.
const scoresByCategory: Record<string, any> = {};

// Loop through each category and create a query to fetch the highscores for that category.
const categoryQueries = categoriesNamesArray.map(
  (category: string | SQLWrapper) => {
    return db
      .select()
      .from(HighscorePerCategory)
      .innerJoin(User, eq(HighscorePerCategory.userId, User.id))
      .where(eq(HighscorePerCategory.category, category))
      .orderBy(desc(HighscorePerCategory.score))
      .limit(10);
  },
);

// Batch the category queries together
/* @ts-ignore */
const categoryScores = await db.batch(categoryQueries);

// Loop through each category and store the scores in the scoresByCategory object.
for (let i = 0; i < categoriesNamesArray.length; i++) {
  scoresByCategory[categoriesNamesArray[i]] = categoryScores[i];
}

/**
 * An object that stores the rank of the current user in each category.
 * The key is the category name and the value is the rank of the user.
 * If the user is not in the top 10, the rank is stored in this object.
 * @type {Record<string, number | null>}
 */
const playerRanks: Record<string, number | null> = {};

/**
 * Loop through each category and get the rank of the current user in that category.
 * The `getPlayerRank` function is used to get the rank of the user.
 * If the user is not in the top 10, the rank is stored in the `playerRanks` object.
 */
for (const category of categoriesNamesArray) {
  const playerRank = await getPlayerRank(user!.id, category);
  if (playerRank && typeof playerRank === "number" && playerRank > 10) {
    /**
     * Store the rank of the user in the `playerRanks` object.
     * The key is the category name and the value is the rank of the user.
     */
    playerRanks[category] = playerRank;
  }
}
---

<Layout title="Highscores">
  <h1 class="highscoreTitle">Willkommen auf unserer Highscore-Seite!</h1>

  <section class="introSection" aria-label="Einführung">
    <p class="introText">
      Hier siehst du die besten Spieler in jeder Kategorie und die Top 10 aller
      Zeiten. Zeige deine Fähigkeiten und arbeite dich an die Spitze, um dir
      deinen Platz in den Ranglisten zu sichern. Ob du ein Spezialist in einer
      bestimmten Musikrichtung bist oder in allen Kategorien glänzen möchtest –
      deine Reise beginnt hier. Viel Erfolg und viel Spaß beim Spielen!
    </p>
  </section>

  <section class="highscoreSection" aria-labelledby="total-highscore">
    <h2 id="total-highscore" class="sectionTitle">Top 10 Gesamt</h2>
    <div
      class="tableWrapper"
      role="region"
      aria-label="Gesamte Top 10 Tabelle"
      tabindex="0"
    >
      <table class="highscoreTable">
        <caption class="visually-hidden">Top 10 Spieler aller Zeiten</caption>
        <thead>
          <tr>
            <th scope="col">Platz</th>
            <th scope="col">Name</th>
            <th scope="col">Punkte</th>
          </tr>
        </thead>
        <tbody>
          {
            highscores.map((score, index) => (
              <tr class={score.User.id === user?.id ? "currentUser" : ""}>
                <td>{index + 1}</td>
                <td>{score.User.username}</td>
                <td>{score.TotalHighscore.score}</td>
              </tr>
            ))
          }
        </tbody>
      </table>
    </div>
  </section>

  {
    Object.keys(scoresByCategory).map((category) => (
      <section class="categorySection" aria-labelledby={`category-${category}`}>
        <h2 id={`category-${category}`} class="categoryTitle">
          {category}
        </h2>
        <div
          class="tableWrapper"
          role="region"
          aria-label={`${category} Highscores`}
          tabindex="0"
        >
          <table class="highscoreTable">
            <caption class="visually-hidden">
              Top 10 Spieler in {category}
            </caption>
            <thead>
              <tr>
                <th scope="col">Platz</th>
                <th scope="col">Name</th>
                <th scope="col">Punkte</th>
              </tr>
            </thead>
            <tbody>
              {scoresByCategory[category].map((score: any, index: number) => (
                <tr class={score.User.id === user?.id ? "currentUser" : ""}>
                  <td>{index + 1}</td>
                  <td>{score.User.username}</td>
                  <td>{score.HighscorePerCategory.score}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
        {playerRanks[category] && (
          <div class="playerRank" role="status" aria-live="polite">
            Deine Platzierung: {playerRanks[category]}. Platz
          </div>
        )}
      </section>
    ))
  }
</Layout>

<style lang="scss">
  .visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    border: 0;
  }

  .highscorePage {
    max-width: var(--max-line-length);
    margin: 0 auto;
    padding: var(--padding-medium);
  }

  .highscoreTitle {
    font-family: var(--font-family);
    font-size: var(--header-font-size);
    font-weight: 700;
    line-height: var(--line-height-body);
    text-align: center;
    color: var(--highlight-color);
    margin-bottom: var(--padding-medium);
  }

  .introSection {
    margin-bottom: var(--padding-large);
  }

  .introText {
    max-width: 800px;
    margin: 0 auto;
    padding: var(--padding-large);
    font-family: var(--font-family);
    font-size: var(--body-font-size);
    line-height: var(--line-height-body);
    letter-spacing: var(--spacing-text);
    text-align: center;
    color: var(--text-color);
    background-color: var(--secondary-color);
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
  }

  .tableWrapper {
    overflow-x: auto;
    margin-bottom: var(--padding-large);

    &:focus {
      outline: var(--focus-outline-width) solid var(--focus-outline-color);
      outline-offset: var(--focus-outline-offset);
    }
  }

  .highscoreTable {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);

    th,
    td {
      padding: var(--padding-small) var(--padding-medium);
      text-align: left;
      border-bottom: 1px solid rgb(0 0 0 / 10%);
    }

    th {
      background-color: var(--text-color);
      color: var(--secondary-color);
      font-weight: 600;
      white-space: nowrap;
    }

    td {
      background-color: var(--secondary-color);
      color: var(--text-color);
    }

    .currentUser td {
      background-color: var(--highlight-color);
      color: var(--button-text-color);
      font-weight: 600;
    }
  }

  .sectionTitle,
  .categoryTitle {
    font-family: var(--font-family);
    font-size: calc(var(--header-font-size) * 0.8);
    font-weight: 600;
    text-align: center;
    color: var(--text-color);
    margin-bottom: var(--padding-medium);
  }

  .playerRank {
    text-align: center;
    margin-top: var(--padding-medium);
    padding: var(--padding-small);
    background-color: var(--highlight-color);
    color: var(--button-text-color);
    font-weight: 600;
    border-radius: var(--border-radius);
  }

  @media (max-width: 768px) {
    .highscorePage {
      padding: var(--padding-small);
    }

    .introText {
      padding: var(--padding-medium);
      font-size: calc(var(--body-font-size) * 0.9);
    }

    .highscoreTable {
      font-size: calc(var(--body-font-size) * 0.875);

      th,
      td {
        padding: calc(var(--padding-small) * 0.75);
      }
    }
  }

  @media (forced-colors: active) {
    .highscoreTable {
      border: 2px solid CanvasText;

      th,
      td {
        border: 1px solid CanvasText;
      }
    }

    .currentUser td {
      border: 2px solid Highlight;
    }
  }

  @media (prefers-reduced-motion: reduce) {
    * {
      transition: none !important;
    }
  }
</style>
