---
import Layout from "../layouts/Layout.astro";
import { Picture } from "astro:assets";
import { Icon } from "astro-icon/components";
---

<Layout title="User Profile" showHeader={false}>
  <div class="content">
    <div class="headerBG headerBGBrain">
      <div class="headerContent">
        <a href="/gamehome"><Icon name="cover-shuffle-logo" width={84} height={59.229} /></a>
        <div class="avatar">
          <Picture
            class="avatarImage"
            src="/user-profiles/mika.png"
            width={128}
            height={128}
            formats={["avif", "webp"]}
            alt=""
          />
          <Icon class="avatarFrame avatarFrameBrain" name="brain-frame" width={128} height={128} />
          <Icon class="avatarFrame avatarFrameRocket" name="rocket-frame" width={160} height={160} />
          <Icon class="avatarIcon avatarIconBrain" name="brain-thick" width={48} height={48} />
          <Icon class="avatarIcon avatarIconRocket" name="rocket-thick" width={48} height={48} />
        </div>
        <Icon name="trophy" width={48} height={48} />
      </div>
      <div class="nameContent">
        <div class="name">
          Hallo <span class="yellowName">Mika</span>! <Icon class="editIcon" name="edit" width={24} height={24} />
        </div>
        <div class="points">
          <Icon class="coin" name="coin" width={24} height={24} />
          <span class="pointsValue"></span>
        </div>
      </div>
    </div>
    <div class="frame">
      <div class="frameHeader">
        <div class="headline">Profil-Rahmen</div>
        <div class="frameButton changeFrameButton">wechseln</div>
      </div>
      <div class="frames">
        <div class="frameRoot newFrame">
          <div data-frame="brain" class="frameItem whiteBackground" id="brain">
            <Icon class="newIcon2" name="new-button" width={48} height={48} />
            <Icon name="brain" width={48} height={48} />
          </div>
          <div class="frameTitle">PopRock Brainiac</div>
        </div>
        <div class="frameRoot">
          <div data-frame="rocket" class="frameItem whiteBackground" id="rocket">
            <Icon name="rocket" width={48} height={48} />
          </div>
          <div class="frameTitle">BritPop Rocketeer</div>
        </div>
        <div class="frameRoot">
          <div data-frame="microphone" class="frameItem whiteBackground" id="microphone">
            <Icon name="microphone" width={48} height={48} />
          </div>
          <div class="frameTitle">HipHop Master</div>
        </div>
        <div class="frameRoot">
          <div class="frameItem"></div>
        </div>
        <div class="hideFrame frameRoot">
          <div class="frameItem"></div>
        </div>
      </div>
    </div>

    <div class="goldenlps">
      <div class="goldenlpsHeader">
        <div class="headline">Goldene Schallplatten</div>
      </div>
      <div class="lpsRoot">
        <div class="goldenlpsItem">
          <Icon name="silver-lp" width={80} height={80} />
        </div>
        <div class="goldenlpsItem">
          <Icon name="silver-lp" width={80} height={80} />
        </div>
        <div class="goldenlpsItem">
          <div class="lpGroup">
            <Icon name="golden-lp" width={80} height={80} />
            <Icon class="absIcon" name="rocket" width={48} height={48} />
          </div>
          <div class="lpText">Brit Pop</div>
          <div class="lpData">90er Jahre</div>
        </div>
        <div class="goldenlpsItem">
          <Icon name="silver-lp" width={80} height={80} />
        </div>
        <div class="goldenlpsItem">
          <Icon name="silver-lp" width={80} height={80} />
        </div>
        <div id="PopRock" class="goldenlpsItem">
          <div class="silverPopRock">
            <Icon name="silver-lp" width={80} height={80} />
          </div>
          <div class="goldPopRock">
            <div class="lpGroup">
              <Icon class="newIcon" name="new-button" width={48} height={48} />
              <Icon name="golden-lp" width={80} height={80} />
              <Icon class="absIcon" name="brain" width={48} height={48} />
            </div>
            <div class="lpText">PopRock</div>
            <div class="lpData">70er - heute</div>
          </div>
        </div>
        <div class="goldenlpsItem">
          <Icon name="silver-lp" width={80} height={80} />
        </div>
        <div class="goldenlpsItem">
          <Icon name="silver-lp" width={80} height={80} />
        </div>
        <div class="goldenlpsItem">
          <Icon name="silver-lp" width={80} height={80} />
        </div>
        <div class="goldenlpsItem">
          <Icon name="silver-lp" width={80} height={80} />
        </div>
        <div class="goldenlpsItem">
          <Icon name="silver-lp" width={80} height={80} />
        </div>
        <div class="goldenlpsItem">
          <Icon name="silver-lp" width={80} height={80} />
        </div>
        <div class="goldenlpsItem">
          <Icon name="silver-lp" width={80} height={80} />
        </div>
        <div class="goldenlpsItem">
          <Icon name="silver-lp" width={80} height={80} />
        </div>
        <div class="goldenlpsItem">
          <Icon name="silver-lp" width={80} height={80} />
        </div>
        <div class="goldenlpsItem">
          <div class="lpGroup">
            <Icon name="golden-lp" width={80} height={80} />
            <Icon class="absIcon" name="microphone" width={48} height={48} />
          </div>
          <div class="lpText">HipHop</div>
          <div class="lpData">90er Jahre</div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<style lang="scss">
  .content {
    margin: 0 var(--spacing-spacing-s) var(--spacing-spacing-xl);
  }

  .headerBG {
    padding: var(--spacing-spacing-s) var(--spacing-spacing-s);
    position: relative;
    background-repeat: no-repeat;
    background-position: 0 60%;
    background-size: cover;

    &::after {
      content: "";
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 50%; /* adjust the height to your liking */
      background: linear-gradient(to bottom, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0.7));
    }

    &::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 50%; /* adjust the height to your liking */
      background: linear-gradient(to top, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0.7));
    }
  }

  .headerBGBrain {
    background-image: url("/userbg/brain.png");
  }

  .headerBGRocket {
    background-image: url("/userbg/rocket.png");
  }

  .headerContent {
    display: flex;
    flex-direction: row;
    align-items: flex-start;
    justify-content: space-around;
    z-index: 1;
    position: relative;
  }

  .avatar {
    position: relative;
    width: 128px;
    height: 128px;
    margin-bottom: 1rem;
  }

  .avatarFrame {
    position: absolute;
    top: 0;
    left: 0;
  }

  .avatarFrameBrain {
    display: none;
  }

  .avatarFrameRocket {
    display: none;
    top: -15px;
    left: -15px;
  }

  .avatarIcon {
    position: absolute;
    bottom: -10px;
    right: -10px;
    color: #b89826;
  }

  .avatarIconBrain {
    display: none;
  }

  .avatarIconRocket {
    display: none;
  }

  .nameContent {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: var(--spacing-15);
    z-index: 1;
    position: relative;
  }

  .name {
    color: var(--colour-text-primary);
    font-size: 24px;
    font-style: normal;
    font-weight: 900;
    line-height: 120%;
    letter-spacing: 0.36px;
    display: inline-flex;
    align-items: center;
  }

  .yellowName {
    color: var(--colour-text-active);
    padding-left: 0.25rem;
  }

  .editIcon {
    padding-left: 0.5rem;
  }

  .points {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    font-size: 18px;
    font-style: normal;
    font-weight: 700;
    line-height: 120%;
  }

  .points .coin {
    margin-right: var(--spacing-spacing-xs);
  }

  .goldenlps,
  .frame {
    display: flex;
    margin: var(--spacing-spacing-s) 0;
    padding: var(--spacing-spacing-md) var(--spacing-spacing-s);
    flex-direction: column;
    align-items: flex-start;
    gap: var(--spacing-spacing-lg);
    align-self: stretch;
    border-radius: var(--radius-radius-rounded);
    background: var(--colour-BG-secondary);
  }

  .lpsRoot,
  .frames {
    display: flex;
    flex-direction: row;
    align-items: flex-start;
    gap: var(--spacing-spacing-s);
    flex-wrap: wrap;
  }

  .frameRoot {
    width: auto;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    gap: var(--spacing-spacing-s);
    width: 80px;
  }

  .frameItem {
    width: 60px;
    height: 60px;
    border-radius: var(--radius-radius-rounded);
    border: 1px dotted var(--colour-border-disabled);
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
  }

  .frameButton {
    border-radius: var(--radius-radius-full);
    background: var(--colour-BTN-primary);
    padding: var(--spacing-spacing-xxs) var(--spacing-15);
    color: var(--colour-text-BTN-primary);
    text-align: center;
    font-size: 16px;
    font-style: normal;
    font-weight: 400;
    line-height: 35.28px;
    cursor: pointer;
  }

  .frameHeader {
    width: 100%;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-between;
  }

  .frameTitle {
    color: var(--colour-text-secondary);
    font-size: 14px;
    font-style: normal;
    font-weight: 400;
    line-height: 150%;
  }

  .frameSelected {
    border: var(--pos-drei, 3px) solid var(--colour-brand-secondary, #ffe500) !important;
    width: 55px;
    height: 55px;

    + .frameTitle {
      color: var(--colour-brand-secondary, #ffe500) !important;
    }
  }

  .goldBackground {
    background: var(--colour-BTN-gold, #b89826);
    border: var(--pos-drei, 3px) solid var(--colour-brand-secondary, #ffe500);
    width: 54px;
    height: 54px;

    [data-icon] {
      color: var(--colour-text-primary);
    }

    + .frameTitle {
      color: var(--colour-text-primary);
    }
  }

  .whiteBackground {
    background: var(--colour-BTN-inverted-2);
    border: 0;

    [data-icon] {
      color: var(--colour-text-BTN-primary);
    }
  }

  .headline {
    color: var(--colour-text-primary);
    font-size: 18px;
    font-style: normal;
    font-weight: 700;
    line-height: 120%;
  }

  .goldenlpsItem {
    display: flex;
    flex-direction: column;
    height: 132px;
    width: 80px;
    align-items: center;
    align-self: stretch;
  }

  .lpGroup {
    display: flex;
    position: relative;
    margin-bottom: var(--spacing-spacing-xs);
  }

  .absIcon {
    position: absolute;
    bottom: -0.5rem;
    right: -0.5rem;
  }

  .lpText {
    color: var(--colour-text-primary);
    font-size: 14px;
    font-style: normal;
    font-weight: 400;
    line-height: 150%;
  }

  .lpData {
    color: var(--colour-text-secondary);
    font-size: 14px;
    font-style: normal;
    font-weight: 400;
    line-height: 150%;
  }

  .newIcon {
    position: absolute;
    top: -0.5rem;
    left: -0.5rem;
  }

  .newIcon2 {
    position: absolute;
    top: -1rem;
    left: -1rem;
  }

  .silverPopRock {
    display: block;
  }

  .goldPopRock {
    display: none;
  }

  .hideFrame {
    display: block;
  }

  .newFrame {
    display: none;
  }
</style>

<script>
  window.addEventListener("load", function () {
    initLocalStorage("userFrameSelected", "rocket");

    checkLocalStorageOnLoad();

    const wonPopRockBrain = localStorage.getItem("WonPopRockBrain") === "true";
    const wonBrainFrame = localStorage.getItem("WonBrainFrame") === "true";
    updateDisplay(wonPopRockBrain, wonBrainFrame);

    const userPoints = localStorage.getItem("userPoints") || "0";
    document!.querySelector(".pointsValue")!.textContent = userPoints + " Pt";

    selectFrameItem();

    changeFrame();
  });

  /**
   * Adds an event listener to the change frame button.
   * On click, it updates the user frame selected and user background in local storage,
   * and changes the displayed frame.
   */
  function changeFrame() {
    // Get the change frame button and header background elements
    const changeFrameButton = document.querySelector(".changeFrameButton");
    const headerBG = document.querySelector(".headerBG") as HTMLElement;

    // Add an event listener to the change frame button
    changeFrameButton!.addEventListener("click", () => {
      // Get the selected frame item and actual golden frame
      const selectedFrameItem = document.querySelector(".frameSelected");
      const actualGoldenFrame = document.querySelector(".goldBackground");

      // Get the frame value and avatar icon and frame elements
      const frameValue = selectedFrameItem!.getAttribute("data-frame");
      const IconRocket = document.querySelector(".avatarIconRocket") as HTMLElement;
      const FrameRocket = document.querySelector(".avatarFrameRocket") as HTMLElement;
      const IconBrain = document.querySelector(".avatarIconBrain") as HTMLElement;
      const FrameBrain = document.querySelector(".avatarFrameBrain") as HTMLElement;
      const frameNew = document.querySelector(".newIcon2") as HTMLElement;

      // Update the user frame selected and user background in local storage
      localStorage.setItem("userFrameSelected", frameValue as string);
      localStorage.setItem("userBackground", frameValue as string);

      // Update the displayed frame
      actualGoldenFrame!.classList.remove("goldBackground");
      actualGoldenFrame!.classList.add("whiteBackground");
      selectedFrameItem!.classList.remove("frameSelected");
      selectedFrameItem!.classList.remove("goldBackground");
      selectedFrameItem!.classList.remove("whiteBackground");
      selectedFrameItem!.classList.add("goldBackground");

      // If the selected frame is "rocket", update the displayed rocket frame and header background
      if (frameValue === "rocket") {
        headerBG.classList.replace("headerBGBrain", "headerBGRocket");
        IconBrain!.style.display = "none";
        FrameBrain!.style.display = "none";
        IconRocket!.style.display = "block";
        FrameRocket!.style.display = "block";
      }
      // If the selected frame is "brain", update the displayed brain frame and header background
      else if (frameValue === "brain") {
        headerBG.classList.replace("headerBGRocket", "headerBGBrain");
        IconRocket!.style.display = "none";
        FrameRocket!.style.display = "none";
        frameNew!.style.display = "none";
        IconBrain!.style.display = "block";
        FrameBrain!.style.display = "block";
      }
    });
  }

  /**
   * Selects a frame item when clicked and updates the appearance of all frame items.
   */
  function selectFrameItem() {
    // Get all frame items as an array
    const frameItems = Array.from(document.getElementsByClassName("frameItem")) as HTMLElement[];

    // For each frame item, add a click event listener
    frameItems.forEach((frameItem) => {
      frameItem.addEventListener("click", () => {
        // Remove the "frameSelected" class from all frame items
        frameItems.forEach((item) => item.classList.remove("frameSelected"));
        // Add the "frameSelected" class to the clicked frame item
        frameItem.classList.add("frameSelected");
      });
    });
  }

  /**
   * Initializes local storage with a key-value pair if the key does not already exist.
   * @param {string} key - The key to check in local storage.
   * @param {string} value - The value to set if the key does not exist.
   */
  function initLocalStorage(key: string, value: string) {
    // Check if the key does not exist in local storage
    if (!localStorage.getItem(key)) {
      // If the key does not exist, set the key-value pair in local storage
      localStorage.setItem(key, value);
    }
  }

  /**
   * Checks the local storage on load and updates the display accordingly.
   * Retrieves the user background and user frame selected from local storage.
   * Retrieves the header background element and the avatar icon and frame elements.
   * If the user background or user frame selected is "rocket", displays the rocket icon and frame and updates the header background.
   * If the user background or user frame selected is "brain", displays the brain icon and frame and adds the brain header background.
   */
  function checkLocalStorageOnLoad() {
    // Retrieve the user background and user frame selected from local storage
    const userFrameSelected = localStorage.getItem("userFrameSelected");

    // Retrieve the header background element and the avatar icon and frame elements
    const headerBG = document.querySelector(".headerBG") as HTMLElement;
    const avatarIconRocket = document.querySelector(".avatarIconRocket") as HTMLElement;
    const avatarFrameRocket = document.querySelector(".avatarFrameRocket") as HTMLElement;
    const avatarIconBrain = document.querySelector(".avatarIconBrain") as HTMLElement;
    const avatarFrameBrain = document.querySelector(".avatarFrameBrain") as HTMLElement;
    const frameNew = document.querySelector(".newIcon2") as HTMLElement;
    const frameBrain = document.getElementById("brain") as HTMLElement;
    const frameRocket = document.getElementById("rocket") as HTMLElement;

    // If the user background or user frame selected is "rocket", display the rocket icon and frame and update the header background
    if (userFrameSelected === "rocket") {
      headerBG.classList.replace("headerBGBrain", "headerBGRocket");
      avatarIconRocket!.style.display = "block";
      avatarFrameRocket!.style.display = "block";
      frameRocket!.classList.remove("whiteBackground");
      frameRocket!.classList.add("goldBackground");
    }

    // If the user background or user frame selected is "brain", display the brain icon and frame and add the brain header background
    if (userFrameSelected === "brain") {
      headerBG.classList.replace("headerBGRocket", "headerBGBrain");
      frameNew!.style.display = "none";
      avatarIconBrain!.style.display = "block";
      avatarFrameBrain!.style.display = "block";
      frameBrain!.classList.remove("whiteBackground");
      frameBrain!.classList.add("goldBackground");
    }
  }

  /**
   * Updates the display based on the wonPopRockBrain and wonBrainFrame parameters.
   * @param {boolean} wonPopRockBrain - Indicates if PopRock Brain has been won.
   * @param {boolean} wonBrainFrame - Indicates if Brain Frame has been won.
   */
  function updateDisplay(wonPopRockBrain: boolean, wonBrainFrame: boolean) {
    // Get the silverPopRock and goldPopRock elements
    const silverPopRock = document.querySelector(".silverPopRock") as HTMLElement;
    const goldPopRock = document.querySelector(".goldPopRock") as HTMLElement;

    // Get the newFrame and hideFrame elements
    const newFrame = document.querySelector(".newFrame") as HTMLElement;
    const hideFrame = document.querySelector(".hideFrame") as HTMLElement;

    // Update the display based on the wonPopRockBrain parameter
    if (wonPopRockBrain) {
      // If PopRock Brain has been won, hide silverPopRock and show goldPopRock
      silverPopRock!.style.display = "none";
      goldPopRock!.style.display = "block";
    } else {
      // Otherwise, show silverPopRock and hide goldPopRock
      silverPopRock!.style.display = "block";
      goldPopRock!.style.display = "none";
    }

    // Update the display based on the wonBrainFrame parameter
    if (wonBrainFrame) {
      // If Brain Frame has been won, show newFrame and hide hideFrame
      newFrame!.style.display = "flex";
      hideFrame!.style.display = "none";
    } else {
      // Otherwise, hide newFrame and show hideFrame
      newFrame!.style.display = "none";
      hideFrame!.style.display = "block";
    }
  }
</script>
