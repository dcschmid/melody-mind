---
import { Icon } from "astro-icon/components";
import { Picture } from "astro:assets";

import Layout from "../../layouts/Layout.astro";
import Button from "../../components/Button.astro";
import Blink182Cover from "../../assets/bandcover/blink182.jpeg";
import DavidBowieCover from "../../assets/bandcover/davidBowie.jpg";
import AvrilLavigneCover from "../../assets/bandcover/avrilLavigne.jpeg";
import RedHotChiliPeppersCover from "../../assets/bandcover/redHotChiliPeppers.jpg";
import Blink182MP3 from "../../assets/mp3s/blink182_cutted.mp3";
import DavidBowieMP3 from "../../assets/mp3s/davidBowie.mp3";
import AvrilLavigneMP3 from "../../assets/mp3s/avrilLavigne_cutted.mp3";
import RedHotChiliPeppersMP3 from "../../assets/mp3s/redHotChiliPeppers.mp3";
import OneJoker from "../../components/HeaderItems/OneJoker.astro";
---

<Layout title="Spielrunde 3">
  <OneJoker slot="left-headercol" />

  <div id="overlay" class="overlay">
    <div class="overlay-content">
      <div class="headline">Runde 3 / 3</div>
      <div class="subline">
        Klicken Sie auf das Albumcover und sortieren Sie die Alben mithilfe der Pfeile in die richtige Reihen-folge nach
        <span class="whiteText">Gesamtlänge: vorne das längste, hinten das kürzeste.</span>
      </div>
      <div class="centerButton">
        <Button id="gameButton" buttonText="spielen" url="#" />
      </div>
    </div>
  </div>

  <div id="overlay2" class="overlay2">
    <div class="overlay2-content">
      <Icon name="clock" width={200} height={200} />
      <div class="headline">00:00</div>
      <div class="subline">Zeit ist abgelaufen!</div>
      <div class="centerButton">
        <Button buttonText="weiter" url="/results/result-three-false" />
      </div>
    </div>
  </div>

  <div class="introText">
    <div class="headline">Runde 3 / 3</div>
    <div class="subline">Sortieren Sie nach <span class="whiteText">Gesamtlänge!</span></div>
  </div>

  <div class="smallText">Kürzeste</div>

  <div class="coverflow">
    <div class="cover">
      <Picture src={Blink182Cover} width={266} height={266} formats={["avif", "webp"]} alt="" />
      <audio id="audio-Blink182" src={Blink182MP3} preload="none"></audio>
      <div class="playButton" data-band="Blink182">
        <Icon name="play" width={20} height={20} />
      </div>
    </div>
    <div class="cover">
      <Picture src={DavidBowieCover} width={266} height={266} formats={["avif", "webp"]} alt="" />
      <audio id="audio-DavidBowie" src={DavidBowieMP3} preload="none"></audio>
      <div class="playButton" data-band="DavidBowie">
        <Icon name="play" width={20} height={20} />
      </div>
    </div>
    <div class="cover">
      <Picture src={AvrilLavigneCover} width={266} height={266} formats={["avif", "webp"]} alt="" />
      <audio id="audio-AvrilLavigne" src={AvrilLavigneMP3} preload="none"></audio>
      <div class="playButton" data-band="AvrilLavigne">
        <Icon name="play" width={20} height={20} />
      </div>
    </div>
    <div class="cover">
      <Picture src={RedHotChiliPeppersCover} width={266} height={266} formats={["avif", "webp"]} alt="" />
      <audio id="audio-RedHotChiliPeppers" src={RedHotChiliPeppersMP3} preload="none"></audio>
      <div class="playButton" data-band="RedHotChiliPeppers">
        <Icon name="play" width={20} height={20} />
      </div>
    </div>
    <div class="buttons">
      <div class="arrowButton" id="up">
        <Icon name="up-arrow" width={48} height={48} />
      </div>
      <div class="arrowButton" id="down">
        <Icon name="down-arrow" width={48} height={48} />
      </div>
    </div>

    <div class="hintText">Längste</div>
  </div>

  <div class="timer">
    <Icon name="clock" width={48} height={48} />
    <span id="minutes">02</span>:<span id="seconds">00</span>

    <div class="finishButton">
      <Button url="/results/result-three" />
    </div>
  </div>
</Layout>

<style>
  .overlay,
  .overlay2 {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.9);
    color: white;
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000; /* ensures overlay is on top */
    visibility: hidden;
  }

  .overlay-content,
  .overlay2-content {
    display: flex;
    width: 366px;
    flex-direction: column;
    align-items: center;
    gap: var(--spacing-3);
  }

  .introText {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--spacing-15);
    margin-bottom: var(--spacing-spacing-md);
  }

  .headline {
    color: var(--colour-text-primary);
    leading-trim: both;
    text-edge: cap;
    font-size: 24px;
    font-style: normal;
    font-weight: 900;
    line-height: 120%; /* 28.8px */
    letter-spacing: 0.36px;
  }

  .subline {
    color: var(--colour-text-secondary, #aeaeae);
    leading-trim: both;
    text-edge: cap;
    font-size: 16px;
    font-style: normal;
    font-weight: 400;
    line-height: 150%;
  }

  .whiteText {
    color: var(--colour-text-primary);
  }

  .smallText {
    color: var(--colour-text-BTN-inverted);
    text-align: center;
    font-size: 16px;
    font-style: normal;
    font-weight: 400;
    line-height: 35.28px;
  }

  .coverflow {
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: center;
    height: 400px;
    margin-bottom: var(--spacing-spacing-xl);
  }

  .cover {
    width: 114px;
    height: 114px;
    position: absolute;
  }

  .cover img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .cover.selected {
    border-radius: var(--radius-radius-rounded);
    border: 8px solid var(--colour-border-secondary);
    transform: rotate(6.6deg);
  }

  .cover:nth-child(1) {
    width: 114px;
    height: 114px;
  }

  .cover:nth-child(2) {
    width: 160px;
    height: 160px;
    top: 2.5rem;
  }

  .cover:nth-child(3) {
    width: 214px;
    height: 214px;
    top: 5rem;
  }

  .cover:nth-child(4) {
    width: 300px;
    height: 300px;
    top: 7.5rem;
  }

  .playButton {
    border-radius: 100%;
    background: var(--colour-BTN-primary);
    cursor: pointer;
    width: 25px;
    height: 25px;
    display: flex;
    justify-content: center;
    align-items: center;
    color: var(--colour-BTN-inverted);
    padding: 0.25rem;
    position: absolute;
    bottom: -0.75rem;
  }

  .buttons {
    display: inline-flex;
    align-items: center;
    gap: var(--spacing-spacing-xl);
    z-index: 3;
    bottom: 1rem;
    position: absolute;
  }

  .arrowButton {
    display: flex;
    padding: var(--spacing-1) var(--spacing-spacing-xs);
    justify-content: center;
    align-items: center;
    gap: var(--spacing-spacing-xxs);
    border-radius: var(--radius-radius-full);
    background: var(--colour-BTN-primary);
    cursor: pointer;
  }

  .arrowButton.disabled {
    background: var(--colour-BTN-disabled);
    pointer-events: none;
  }

  .hintText {
    position: absolute;
    bottom: -2rem;
    z-index: 4;
    border-radius: var(--radius-radius-full);
    background: var(--colour-BTN-inverted);
    display: flex;
    padding: var(--spacing-spacing-xxs) var(--spacing-spacing-md);
    justify-content: center;
    align-items: center;
    gap: var(--spacing-spacing-xxs);
    font-size: 16px;
    font-style: normal;
    font-weight: 400;
    line-height: 35.28px;
    color: var(--colour-text-BTN-inverted);
  }

  .centerButton {
    display: flex;
    justify-content: center;
    margin-top: var(--spacing-spacing-md);
  }

  .finishButton {
    margin-left: var(--spacing-spacing-md);
  }

  .timer {
    padding: 24px 20px 23px 112px;
    display: flex;
    justify-content: flex-end;
    align-items: center;
    font-size: 40px;
    font-style: normal;
    font-weight: 900;
    line-height: normal;
    letter-spacing: 2px;
    color: var(--colour-text-primary);
  }
</style>

<script>
  let timeRemaining = 120;
  let timerInterval: number | null = null;

  const minutesElement = document.getElementById("minutes")!;
  const secondsElement = document.getElementById("seconds")!;
  const overlay2 = document.getElementById("overlay2");

  function updateTime() {
    const minutes = Math.floor(timeRemaining / 60);
    const seconds = timeRemaining % 60;

    minutesElement.textContent = String(minutes).padStart(2, "0");
    secondsElement.textContent = String(seconds).padStart(2, "0");

    if (timeRemaining === 0) {
      clearInterval(timerInterval!);
      overlay2!.style.visibility = "visible";
    } else {
      timeRemaining--;
    }
  }

  function startTimer() {
    timerInterval = window.setInterval(updateTime, 1000);
  }

  window.addEventListener("load", function (_event: Event): void {
    const overlay = document.getElementById("overlay");
    const button = document.getElementById("gameButton");

    overlay!.style.visibility = "visible";
    overlay2!.style.visibility = "hidden";

    button!.addEventListener("click", (_event: MouseEvent) => {
      overlay!.style.visibility = "hidden";

      startTimer();
    });

    const playButtons = document.querySelectorAll<HTMLButtonElement>(".playButton");

    playButtons.forEach((button) => {
      button.addEventListener("click", (event: MouseEvent) => {
        const band = (event.currentTarget as HTMLButtonElement).getAttribute("data-band");
        const audioElement = document.getElementById(`audio-${band}`) as HTMLAudioElement | null;

        if (audioElement) {
          audioElement.play();
        }
      });
    });

    let selectedCover: any = null;
    const covers = document.querySelectorAll(".cover");
    const upButton = document.getElementById("up");
    const downButton = document.getElementById("down");

    const updateButtonState = () => {
      if (!selectedCover) return;
      const parent = selectedCover.parentElement;
      const index = Array.from(parent.children).indexOf(selectedCover);

      if (index === 0) {
        upButton!.classList.add("disabled");
      } else {
        upButton!.classList.remove("disabled");
      }

      if (index === parent.children.length - 3) {
        console.log(index, parent.children.length);
        downButton!.classList.add("disabled");
      } else {
        downButton!.classList.remove("disabled");
      }
    };

    covers.forEach((cover) => {
      cover.addEventListener("click", () => {
        if (selectedCover) {
          selectedCover.classList.remove("selected");
        }
        selectedCover = cover;
        selectedCover.classList.add("selected");
        updateButtonState();
      });
    });

    const moveSelection = (direction: any) => {
      if (!selectedCover) return;
      const parent = selectedCover.parentElement;
      const index = Array.from(parent.children).indexOf(selectedCover);
      const newIndex = index + direction;

      if (newIndex >= 0 && newIndex < parent.children.length) {
        if (direction === -1) {
          parent.insertBefore(selectedCover, parent.children[newIndex]);
        } else {
          parent.insertBefore(selectedCover, parent.children[newIndex].nextSibling);
        }
        updateButtonState();
      }
    };

    upButton!.addEventListener("click", () => moveSelection(-1));
    downButton!.addEventListener("click", () => moveSelection(1));
  });
</script>
