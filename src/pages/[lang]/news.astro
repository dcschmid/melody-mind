---
/**
 * Music News Page - SSR Rendered
 * Displays aggregated music news from RSS feeds
 */

import { error as logError } from "../../utils/logging/logger";
import Layout from "../../layouts/Layout.astro";
import { getNewsForLanguage } from "../../services/rssService.ts";
import { useTranslations } from "../../utils/i18n.ts";
import { extractKeywords, generateMetaDescription } from "../../utils/seo.ts";
import Headline from "../../components/Headline.astro";
import Paragraph from "../../components/Paragraph.astro";
import HeroSection from "../../components/HeroSection.astro";
import StructuredItemList from "../../components/StructuredItemList.astro";

export const prerender = false; // Enable SSR for this page

const { lang } = Astro.params;
const currentLang = lang || "en";
const t = useTranslations(currentLang);

// Fetch news data at build time
let newsData;
let error = null;

try {
  newsData = await getNewsForLanguage(currentLang);
} catch (e) {
  error = e instanceof Error ? e.message : "Failed to load news";
  logError("Error loading news", e);
  // Fallback empty data
  newsData = {
    items: [],
    lastUpdated: new Date().toISOString(),
    totalSources: 0,
    language: currentLang,
  };
}

const pageTitle = t("news.title");
const pageDescription = t("news.description");

// SEO optimization using existing architecture
// Generate rich content for SEO using existing utility functions
const enrichedContent = newsData?.items
  ? `${pageTitle} ${pageDescription} ${newsData.items
      .slice(0, 10)
      .map((item) => `${item.title} ${item.description}`)
      .join(" ")}`
  : `${pageTitle} ${pageDescription}`;

// Use existing SEO utilities
const optimizedDescription = generateMetaDescription(enrichedContent, 155);
const seoKeywords = extractKeywords(enrichedContent, 15, currentLang);

// Enhanced page metadata
const baseUrl = Astro.site?.toString() || "https://melody-mind.de";
const currentUrl = `${baseUrl}/${currentLang}/news`;
// Prepare last-updated label safely: translations may contain a '{date}' placeholder.
const rawLastUpdated = t("news.lastUpdated");
const lastUpdatedLabel =
  rawLastUpdated && rawLastUpdated.includes("{date}")
    ? rawLastUpdated
        .replace("{date}", "")
        .trim()
        .replace(/[:\s]+$/u, "")
    : rawLastUpdated || "";
const lastUpdatedDateString = newsData?.lastUpdated
  ? new Intl.DateTimeFormat(currentLang, { dateStyle: "medium", timeStyle: "short" }).format(
      new Date(newsData.lastUpdated)
    )
  : "";

const breadcrumbs = [
  { name: t("nav.home"), url: `${baseUrl}/${currentLang}` },
  { name: pageTitle, url: currentUrl },
];
/**
 * Versucht ein geeignetes Bild fÃ¼r ein Feed-Item zu extrahieren.
 * Reihenfolge: item.imageUrl -> enclosure.url -> media.url -> erstes <img> in content/description -> Fallback
 */
/**
 * Try to extract an image URL from an RSS feed item.
 * Checks common RSS fields and HTML attributes, and normalizes URLs.
 * @param {any} item
 * @returns {string}
 */
/** Normalize a possibly relative or protocol-relative URL to absolute. */
function makeAbsolute(url: any) {
  if (!url) {
    return url;
  }
  const u = String(url).trim();
  if (!u) {
    return u;
  }
  if (u.startsWith("//")) {
    return `https:${u}`;
  }
  if (u.startsWith("/")) {
    return `${baseUrl.replace(/\/$/, "")}${u}`;
  }
  if (/^https?:\/\//i.test(u)) {
    return u;
  }
  return u;
}

function tryMedia(m: any) {
  if (!m) {
    return null;
  }
  if (typeof m === "string") {
    return m;
  }
  if (m && m.url) {
    return m.url;
  }
  if (m && m["@url"]) {
    return m["@url"];
  }
  if (Array.isArray(m) && m.length) {
    return tryMedia(m[0]);
  }
  if (m && m["$"] && m["$"].url) {
    return m["$"].url;
  }
  return null;
}

function collectDirectImageCandidates(item: any) {
  const candidates: Array<any> = [];
  if (!item) {
    return candidates;
  }
  // imageUrl
  if (item.imageUrl) {
    candidates.push(item.imageUrl);
  }

  // itunes
  const itunesImg = item["itunes:image"];
  const pushItunes = (it: any) => {
    if (!it) {
      return;
    }
    if (typeof it === "string") {
      candidates.push(it);
      return;
    }
    if (it.href || it.url) {
      candidates.push(it.href || it.url);
    }
  };
  pushItunes(itunesImg);

  // enclosure
  const pushEnclosure = (enc: any) => {
    if (enc && enc.url) {
      candidates.push(enc.url);
    }
  };
  pushEnclosure(item.enclosure);

  // media
  const mediaThumb = tryMedia(
    item["media:thumbnail"] || item["media:thumbnailUrl"] || item.thumbnail
  );
  if (mediaThumb) {
    candidates.push(mediaThumb);
  }
  const mediaContent = tryMedia(item["media:content"] || item["media:contentUrl"] || item.media);
  if (mediaContent) {
    candidates.push(mediaContent);
  }

  // generic
  if (item.image) {
    candidates.push(item.image);
  }
  if (item.thumbnail) {
    candidates.push(item.thumbnail);
  }

  return candidates;
}

function collectFromHtml(item: any) {
  const candidates: Array<any> = [];
  const html = item.content || item.description || "";
  try {
    const dataSrcMatch = html.match(/<img[^>]+data-src=["']([^"']+)["']/i);
    if (dataSrcMatch && dataSrcMatch[1]) {
      candidates.push(dataSrcMatch[1]);
    }

    const srcsetMatch = html.match(/<img[^>]+srcset=["']([^"']+)["']/i);
    if (srcsetMatch && srcsetMatch[1]) {
      const first = srcsetMatch[1].split(",")[0].trim().split(" ")[0];
      if (first) {
        candidates.push(first);
      }
    }

    const srcMatch = html.match(/<img[^>]+src=["']([^"']+)["']/i);
    if (srcMatch && srcMatch[1]) {
      candidates.push(srcMatch[1]);
    }
  } catch {
    // ignore
  }

  return candidates;
}

function collectImageCandidates(item: any) {
  return [...collectDirectImageCandidates(item), ...collectFromHtml(item)];
}

function getImageForItem(item: any) {
  const fallback = `${baseUrl}/images/news-fallback.svg`;
  if (!item) {
    return fallback;
  }

  const candidates = collectImageCandidates(item);
  for (const c of candidates) {
    if (c) {
      const abs = makeAbsolute(c);
      if (abs) {
        return abs;
      }
    }
  }

  if (item.media && item.media.url) {
    return makeAbsolute(item.media.url);
  }

  return fallback;
}

// Precompute items with displayImage and localized date string
const items = (newsData?.items || []).map((it) => {
  const displayImage = getImageForItem(it);
  const displayDate = it?.pubDate ? new Date(it.pubDate) : null;
  const displayDateString = displayDate ? displayDate.toLocaleDateString(currentLang) : "";
  return {
    ...it,
    displayImage,
    displayDate,
    displayDateString,
  };
});

// Generate NewsArticle structured data using prepared items
const newsStructuredData = items.length
  ? {
      "@context": "https://schema.org",
      "@type": "CollectionPage",
      name: `${pageTitle} - MelodyMind`,
      description: optimizedDescription,
      url: currentUrl,
      inLanguage: currentLang,
      isPartOf: {
        "@type": "WebSite",
        name: "MelodyMind",
        url: baseUrl,
      },
      mainEntity: {
        "@type": "ItemList",
        numberOfItems: items.length,
        itemListElement: items.slice(0, 10).map((item, index) => ({
          "@type": "ListItem",
          position: index + 1,
          item: {
            "@type": "NewsArticle",
            headline: item.title,
            description: item.description,
            url: item.link,
            datePublished: item.pubDate,
            author: {
              "@type": "Organization",
              name: item.source,
            },
            publisher: {
              "@type": "Organization",
              name: "MelodyMind",
              url: baseUrl,
            },
            image: item.displayImage || `${baseUrl}/images/news-fallback.svg`,
            genre: "Music",
            about: "Music News",
          },
        })),
      },
    }
  : null;

// structuredDataExtra: include the fully built newsStructuredData when available
const structuredDataExtra = newsStructuredData
  ? [newsStructuredData]
  : [
      {
        "@type": "CollectionPage",
        name: `${pageTitle} - MelodyMind`,
        description: optimizedDescription,
        url: currentUrl,
        inLanguage: currentLang,
      },
    ];
---

<!-- OG image: news overview (policy override) -->
<Layout
  title={`${pageTitle} - MelodyMind`}
  description={optimizedDescription}
  keywords={seoKeywords}
  image="/homecategories/news.png"
  imageWidth={1200}
  imageHeight={630}
  type="website"
  publishDate={newsData?.lastUpdated ? new Date(newsData.lastUpdated) : new Date()}
  modifiedDate={new Date()}
  canonical={currentUrl}
  {breadcrumbs}
  {structuredDataExtra}
>
  <Fragment slot="head">
    <meta name="news_keywords" content={seoKeywords} />
    <meta property="article:section" content="Music News" />
    <meta property="article:tag" content="Music" />
    <meta property="article:tag" content="News" />
    <meta property="article:tag" content="Artists" />
    <meta property="article:tag" content="Entertainment" />
  </Fragment>
  <main class="min-h-screen bg-gray-900 py-8 text-white">
    <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
      <HeroSection
        title={pageTitle}
        subtitle={pageDescription}
        headingLevel="h1"
        id="news-heading"
        icon="ðŸ“°"
        spacing="md"
      >
        {
          newsData && (
            <Fragment slot="secondary">
              <div class="flex items-center gap-2 rounded-full border border-purple-500/30 bg-gray-800/50 px-4 py-2 backdrop-blur-sm">
                {lastUpdatedLabel && <span class="text-purple-300">{lastUpdatedLabel}:</span>}
                <time class="text-white" datetime={newsData.lastUpdated}>
                  {lastUpdatedDateString}
                </time>
              </div>
              <div class="flex items-center gap-2 rounded-full border border-purple-500/30 bg-gray-800/50 px-4 py-2 backdrop-blur-sm">
                <span class="text-purple-300">
                  {t("news.sourcesCount", { count: newsData.totalSources })}
                </span>
              </div>
            </Fragment>
          )
        }
      </HeroSection>

      {
        error && (
          <div
            class="mb-8 rounded-2xl border border-red-500/50 bg-red-900/50 p-6 backdrop-blur-sm"
            role="alert"
          >
            <Headline level="h2" textSize="2xl" className="text-red-300 mb-4">
              {t("errors.loadingError")}
            </Headline>
            <Paragraph className="text-red-200 mb-4">{error}</Paragraph>
            <button
              type="button"
              id="retry-button"
              class="rounded-xl bg-red-600 px-6 py-3 font-medium text-white transition-colors duration-300 hover:bg-red-700"
            >
              {t("common.retry")}
            </button>
          </div>
        )
      }

      {
        !error && newsData.items.length > 0 && (
          <section class="mb-16" aria-labelledby="news-list-title">
            <Headline level="h2" textSize="2xl" className="sr-only">
              {t("news.articlesList")}
            </Headline>
            <StructuredItemList
              containerId="news-list"
              listName={t("news.articlesList")}
              items={items as any[]}
              getName={(it: any) => it.title}
              getDescription={(it: any) => it.description}
              getUrl={(it: any) => it.link}
              itemType="NewsArticle"
              lang={currentLang}
              includeCreator={false}
              renderItem={({ item }) => (
                <article
                  class="news-card overflow-hidden rounded-2xl border border-gray-700 bg-gray-800 shadow-lg transition-all duration-300 hover:-translate-y-1 hover:shadow-xl"
                  aria-label={item.title}
                >
                  <div class="news-card__media" role="img" aria-label={item.title}>
                    <img
                      src={item.displayImage || "/images/news-fallback.svg"}
                      alt={item.title || t("news.articleImageAlt")}
                      loading="lazy"
                      decoding="async"
                      class="news-card__img"
                      onerror="this.onerror=null;this.src='/images/news-fallback.svg'"
                    />
                  </div>
                  <div class="p-6">
                    <header class="mb-4">
                      <div class="mb-3 flex items-center justify-between text-sm text-gray-400">
                        <span class="font-medium" itemprop="author">
                          {item.source}
                        </span>
                        <time
                          class="text-gray-500"
                          datetime={item.pubDate}
                          itemprop="datePublished"
                        >
                          {item.displayDateString}
                        </time>
                      </div>
                      <Headline level="h3" textSize="lg">
                        <a
                          href={item.link}
                          target="_blank"
                          rel="noopener noreferrer"
                          itemprop="url"
                          class="external-link"
                          data-external-label={item.source}
                        >
                          {item.title}
                        </a>
                      </Headline>
                      {item.description && (
                        <Paragraph textSize="lg" textAlign="left">
                          {item.description}
                        </Paragraph>
                      )}
                    </header>
                    <footer>
                      <a
                        href={item.link}
                        target="_blank"
                        rel="noopener noreferrer"
                        class="text-lf external-link inline-flex items-center gap-2 rounded-xl bg-purple-600 px-4 py-2 font-medium text-white transition-colors duration-300 hover:bg-purple-700"
                        aria-label={`${t("news.readMore")} - ${item.title}`}
                        data-external-label={item.source}
                      >
                        {t("news.readMore")}
                        <span class="text-lg" aria-hidden="true">
                          â†—
                        </span>
                      </a>
                    </footer>
                  </div>
                </article>
              )}
              class="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3"
              listItemClass="news-wrapper"
            />
          </section>
        )
      }

      {
        !error && newsData.items.length === 0 && (
          <section class="py-16 text-center" role="status">
            <Headline level="h2" textSize="2xl" className="text-white mb-4">
              {t("news.noNews")}
            </Headline>
            <Paragraph className="text-gray-300 mb-8">{t("news.noNewsDescription")}</Paragraph>
            <button
              type="button"
              id="refresh-button"
              class="rounded-xl bg-purple-600 px-6 py-3 font-medium text-white transition-colors duration-300 hover:bg-purple-700"
            >
              {t("news.refresh")}
            </button>
          </section>
        )
      }

      <!-- Footer Info -->
      <footer class="border-t border-gray-700 pt-12">
        <div class="grid grid-cols-1 gap-8 lg:grid-cols-2">
          <div class="rounded-2xl border border-gray-700 bg-gray-800/50 p-6 backdrop-blur-sm">
            <Headline level="h3" textSize="lg" className="mb-4 text-purple-300">
              {t("news.disclaimer.title")}
            </Headline>
            <Paragraph className="text-sm text-gray-300">
              {t("news.disclaimer.text")}
            </Paragraph>
          </div>

          <div class="rounded-2xl border border-gray-700 bg-gray-800/50 p-6 backdrop-blur-sm">
            <Paragraph className="mb-4 text-sm text-gray-300">
              {t("news.legal.attribution")}
            </Paragraph>
            <ul class="space-y-2">
              {
                newsData &&
                  newsData.items
                    .map((item) => item.source)
                    .filter((source, index, arr) => arr.indexOf(source) === index)
                    .map((source) => <li class="text-sm text-purple-300">{source}</li>)
              }
            </ul>
          </div>
        </div>
      </footer>
    </div>
  </main>
</Layout>

<script>
  // Handle button click events
  document.addEventListener("DOMContentLoaded", () => {
    // Retry button
    const retryButton = document.getElementById("retry-button");
    if (retryButton) {
      retryButton.addEventListener("click", () => {
        window.location.reload();
      });
    }

    // Refresh button
    const refreshButton = document.getElementById("refresh-button");
    if (refreshButton) {
      refreshButton.addEventListener("click", () => {
        window.location.reload();
      });
    }
  });
</script>

<style>
  .news-card__media {
    width: 100%;
    aspect-ratio: 16 / 9;
    background-color: var(--card-bg, #0f1720);
    display: block;
    overflow: hidden;
  }

  .news-card__img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
    transition: transform 200ms ease;
  }

  .news-card__img:focus,
  .news-card__img:hover {
    transform: scale(1.02);
  }

  @media (prefers-reduced-motion: reduce) {
    .news-card__img {
      transition: none;
    }
  }
</style>
