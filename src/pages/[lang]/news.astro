---
/**
 * Music News Page - SSR Rendered
 * Displays aggregated music news from RSS feeds
 */

import { error as logError } from "../../utils/logging/logger";
import Layout from "../../layouts/Layout.astro";
import { getNewsForLanguage } from "../../services/rssService.ts";
import { useTranslations } from "../../utils/i18n.ts";
import { buildBreadcrumbs } from "../../utils/seo.ts";
// buildSeoText is now wrapped by buildPageSeo for this page
import { buildPageSeo } from "../../utils/seo/buildPageSeo";
import { buildCollectionWithItemListSchema } from "../../utils/seo/collectionSchema";
import { mapItemsWithDisplayData } from "../../utils/rss/imageExtraction";
import { NEWS_FALLBACK_IMAGE } from "../../constants/assets";
import { formatLocalizedDate } from "../../utils/dates/format";
import Headline from "../../components/Headline.astro";
import Paragraph from "../../components/Paragraph.astro";
import HeroSection from "../../components/HeroSection.astro";

export const prerender = false; // Enable SSR for this page

const { lang } = Astro.params;
const currentLang = lang || "en";
const t = useTranslations(currentLang);

// Fetch news data at build time
let newsData;
let error = null;

try {
  newsData = await getNewsForLanguage(currentLang);
} catch (e) {
  error = e instanceof Error ? e.message : "Failed to load news";
  logError("Error loading news", e);
  // Fallback empty data
  newsData = {
    items: [],
    lastUpdated: new Date().toISOString(),
    totalSources: 0,
    language: currentLang,
  };
}

const pageTitle = t("news.title");
const pageDescription = t("news.description");

// Unified SEO text generation using buildSeoText utility
const enrichedParts = newsData?.items
  ? newsData.items.slice(0, 10).map((item) => `${item.title || ""} ${item.description || ""}`)
  : [];
const pageSeo = buildPageSeo({
  title: `${pageTitle} - MelodyMind`,
  description: pageDescription,
  enrichedParts,
  language: currentLang,
  keywordLimit: 15,
  maxDescription: 155,
  url: `${Astro.site?.toString() || "https://melody-mind.de"}/${currentLang}/news`,
  contentKind: "news",
  publishDate: newsData?.lastUpdated,
  modifiedDate: new Date().toISOString(),
});
const optimizedDescription = pageSeo.description;
const seoKeywords = pageSeo.keywords;

// Enhanced page metadata
const baseUrl = Astro.site?.toString() || "https://melody-mind.de";
const currentUrl = pageSeo.canonical;
// Prepare last-updated label safely: translations may contain a '{date}' placeholder.
const rawLastUpdated = t("news.lastUpdated");
const lastUpdatedLabel =
  rawLastUpdated && rawLastUpdated.includes("{date}")
    ? rawLastUpdated
        .replace("{date}", "")
        .trim()
        .replace(/[:\s]+$/u, "")
    : rawLastUpdated || "";
const lastUpdatedDateString = newsData?.lastUpdated
  ? formatLocalizedDate(currentLang, newsData.lastUpdated, {
      dateStyle: "medium",
      timeStyle: "short",
    })
  : "";

const breadcrumbs = buildBreadcrumbs([
  { name: t("nav.home"), url: `${baseUrl}/${currentLang}` },
  { name: pageTitle, url: currentUrl },
]);
/**
 * Versucht ein geeignetes Bild fÃ¼r ein Feed-Item zu extrahieren.
 * Reihenfolge: item.imageUrl -> enclosure.url -> media.url -> erstes <img> in content/description -> Fallback
 */
/**
 * Try to extract an image URL from an RSS feed item.
 * Checks common RSS fields and HTML attributes, and normalizes URLs.
 * @param {any} item
 * @returns {string}
 */
// Precompute items with displayImage and localized date string (using shared utility)
// Cast: newsData.items stammt aus rssService und erfÃ¼llt mindestens das lockere RssItem-Interface
const items = mapItemsWithDisplayData(newsData?.items as any, currentLang, {
  baseUrl,
  fallbackPath: NEWS_FALLBACK_IMAGE,
});

// Generate NewsArticle structured data using generic builder
const newsStructuredData = items.length
  ? buildCollectionWithItemListSchema({
      pageName: `${pageTitle} - MelodyMind`,
      description: optimizedDescription,
      url: currentUrl,
      inLanguage: currentLang,
      siteName: "MelodyMind",
      siteUrl: baseUrl,
      itemTypeDefault: "NewsArticle",
      items: items.map((item, idx) => ({
        position: idx + 1,
        url: item.link || currentUrl,
        name: item.title || pageTitle,
        description: item.description || pageDescription,
        image: item.displayImage || `${baseUrl}${NEWS_FALLBACK_IMAGE}`,
        datePublished: item.pubDate || newsData?.lastUpdated,
        authorName: item.source || "",
        publisherName: "MelodyMind",
        genre: "Music",
        about: "Music News",
      })),
      limit: 10,
    })
  : null;

const structuredDataExtra = newsStructuredData
  ? [newsStructuredData]
  : [
      buildCollectionWithItemListSchema({
        pageName: `${pageTitle} - MelodyMind`,
        description: optimizedDescription,
        url: currentUrl,
        inLanguage: currentLang,
        siteName: "MelodyMind",
        siteUrl: baseUrl,
        items: [],
      }),
    ];
---

<!-- OG image: news overview (policy override) -->
<Layout
  pageSeo={{
    ...pageSeo,
    structuredData: structuredDataExtra,
  }}
  {breadcrumbs}
>
  <Fragment slot="head">
    <meta name="news_keywords" content={seoKeywords} />
    <meta property="article:section" content="Music News" />
    <meta property="article:tag" content="Music" />
    <meta property="article:tag" content="News" />
    <meta property="article:tag" content="Artists" />
    <meta property="article:tag" content="Entertainment" />
  </Fragment>
  <main class="min-h-screen bg-gray-900 py-8 text-white">
    <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
      <HeroSection
        title={pageTitle}
        subtitle={pageDescription}
        headingLevel="h1"
        id="news-heading"
        icon="ðŸ“°"
      >
        {
          newsData && (
            <Fragment slot="secondary">
              <div class="flex items-center gap-2 rounded-full border border-purple-500/30 bg-gray-800/50 px-4 py-2 backdrop-blur-sm">
                {lastUpdatedLabel && <span class="text-purple-300">{lastUpdatedLabel}:</span>}
                <time class="text-white" datetime={newsData.lastUpdated}>
                  {lastUpdatedDateString}
                </time>
              </div>
              <div class="flex items-center gap-2 rounded-full border border-purple-500/30 bg-gray-800/50 px-4 py-2 backdrop-blur-sm">
                <span class="text-purple-300">
                  {t("news.sourcesCount", { count: newsData.totalSources })}
                </span>
              </div>
            </Fragment>
          )
        }
      </HeroSection>

      {
        error && (
          <div
            class="mb-8 rounded-2xl border border-red-500/50 bg-red-900/50 p-6 backdrop-blur-sm"
            role="alert"
          >
            <Headline level="h2" textSize="2xl" className="text-red-300 mb-4">
              {t("errors.loadingError")}
            </Headline>
            <Paragraph className="text-red-200 mb-4">{error}</Paragraph>
            <button
              type="button"
              id="retry-button"
              data-action="reload"
              class="rounded-xl bg-red-600 px-6 py-3 font-medium text-white transition-colors duration-300 hover:bg-red-700"
            >
              {t("common.retry")}
            </button>
          </div>
        )
      }

      {
        !error && newsData.items.length > 0 && (
          <section class="mb-16" aria-labelledby="news-list-title">
            <Headline level="h2" textSize="2xl" className="sr-only">
              {t("news.articlesList")}
            </Headline>

            <div
              class="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3"
              itemscope
              itemtype="https://schema.org/ItemList"
            >
              {items.map((item, index) => (
                <article
                  class="news-card overflow-hidden rounded-2xl border border-gray-700 bg-gray-800 shadow-lg transition-all duration-300 hover:-translate-y-1 hover:shadow-xl"
                  aria-labelledby={`news-title-${index}`}
                  itemscope
                  itemtype="https://schema.org/NewsArticle"
                  itemprop="itemListElement"
                >
                  {/* 16:9 image area */}
                  <div class="news-card__media" role="img" aria-label={item.title}>
                    <img
                      src={item.displayImage || "/images/news-fallback.svg"}
                      alt={item.title || t("news.articleImageAlt")}
                      loading="lazy"
                      decoding="async"
                      class="news-card__img"
                      data-fallback-src="/images/news-fallback.svg"
                    />
                  </div>

                  <div class="p-6">
                    <header class="mb-4">
                      <div class="mb-3 flex items-center justify-between text-sm text-gray-400">
                        <span class="font-medium" itemprop="author">
                          {item.source}
                        </span>
                        <time
                          class="text-gray-500"
                          datetime={item.pubDate}
                          itemprop="datePublished"
                        >
                          {item.displayDateString}
                        </time>
                      </div>

                      <Headline level="h3" textSize="lg">
                        <a
                          href={item.link}
                          target="_blank"
                          rel="noopener noreferrer"
                          itemprop="url"
                          class="external-link"
                          data-external-label={item.source}
                        >
                          {item.title}
                        </a>
                      </Headline>

                      {item.description && (
                        <Paragraph textSize="lg" textAlign="left">
                          {item.description}
                        </Paragraph>
                      )}
                    </header>

                    <footer>
                      <a
                        href={item.link}
                        target="_blank"
                        rel="noopener noreferrer"
                        class="text-lf external-link inline-flex items-center gap-2 rounded-xl bg-purple-600 px-4 py-2 font-medium text-white transition-colors duration-300 hover:bg-purple-700"
                        aria-label={`${t("news.readMore")} - ${item.title}`}
                        data-external-label={item.source}
                      >
                        {t("news.readMore")}
                        <span class="text-lg" aria-hidden="true">
                          â†—
                        </span>
                      </a>
                    </footer>
                  </div>
                </article>
              ))}
            </div>
          </section>
        )
      }

      {
        !error && newsData.items.length === 0 && (
          <section class="py-16 text-center" role="status">
            <Headline level="h2" textSize="2xl" className="text-white mb-4">
              {t("news.noNews")}
            </Headline>
            <Paragraph className="text-gray-300 mb-8">{t("news.noNewsDescription")}</Paragraph>
            <button
              type="button"
              id="refresh-button"
              data-action="reload"
              class="rounded-xl bg-purple-600 px-6 py-3 font-medium text-white transition-colors duration-300 hover:bg-purple-700"
            >
              {t("news.refresh")}
            </button>
          </section>
        )
      }

      <!-- Footer Info -->
      <footer class="border-t border-gray-700 pt-12">
        <div class="grid grid-cols-1 gap-8 lg:grid-cols-2">
          <div class="rounded-2xl border border-gray-700 bg-gray-800/50 p-6 backdrop-blur-sm">
            <Headline level="h3" textSize="lg" className="mb-4 text-purple-300">
              {t("news.disclaimer.title")}
            </Headline>
            <Paragraph className="text-sm text-gray-300">
              {t("news.disclaimer.text")}
            </Paragraph>
          </div>

          <div class="rounded-2xl border border-gray-700 bg-gray-800/50 p-6 backdrop-blur-sm">
            <Paragraph className="mb-4 text-sm text-gray-300">
              {t("news.legal.attribution")}
            </Paragraph>
            <ul class="space-y-2">
              {
                newsData &&
                  newsData.items
                    .map((item) => item.source)
                    .filter((source, index, arr) => arr.indexOf(source) === index)
                    .map((source) => <li class="text-sm text-purple-300">{source}</li>)
              }
            </ul>
          </div>
        </div>
      </footer>
    </div>
  </main>
</Layout>

<script>
  // Unified reload handler via event delegation (DRY improvement)
  document.addEventListener("DOMContentLoaded", () => {
    document.addEventListener("click", (ev) => {
      const target =
        ev.target instanceof Element ? ev.target.closest('[data-action="reload"]') : null;
      if (target) {
        window.location.reload();
      }
    });
    // Attach progressive enhancement image fallback handlers (removing inline onerror)
    const FALLBACK_ATTR = "data-fallback-src";
    const processed = new WeakSet();
    const attachHandler = (img: Element): void => {
      if (!(img instanceof HTMLImageElement) || processed.has(img)) {
        return;
      }
      processed.add(img);
      const fallback = img.getAttribute(FALLBACK_ATTR);
      if (!fallback) {
        return;
      }
      img.addEventListener("error", () => {
        if (img.dataset._failedOnce) {
          return; // prevent infinite loop
        }
        img.dataset._failedOnce = "1";
        img.src = fallback;
      });
    };
    document.querySelectorAll(`img[${FALLBACK_ATTR}]`).forEach((i) => attachHandler(i));
    const mo = new MutationObserver((muts) => {
      muts.forEach((m) => {
        if (m.type === "childList") {
          m.addedNodes.forEach((n) => {
            if (n instanceof HTMLElement) {
              if (n.matches?.(`img[${FALLBACK_ATTR}]`)) {
                attachHandler(n);
              }
              n.querySelectorAll?.(`img[${FALLBACK_ATTR}]`).forEach((i) => attachHandler(i));
            }
          });
        }
      });
    });
    mo.observe(document.body, { childList: true, subtree: true });
  });
</script>

<style>
  .news-card__media {
    width: 100%;
    aspect-ratio: 16 / 9;
    background-color: var(--card-bg, #0f1720);
    display: block;
    overflow: hidden;
  }

  .news-card__img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
    transition: transform 200ms ease;
  }

  .news-card__img:focus,
  .news-card__img:hover {
    transform: scale(1.02);
  }

  @media (prefers-reduced-motion: reduce) {
    .news-card__img {
      transition: none;
    }
  }
</style>
