---
/**
 * Music News Page - SSR Rendered
 * Displays aggregated music news from RSS feeds
 */

import Layout from "../../layouts/Layout.astro";
import { getNewsForLanguage } from "../../services/rssService.ts";
import { useTranslations } from "../../utils/i18n.ts";
import { extractKeywords, generateMetaDescription } from "../../utils/seo.ts";
import Headline from "../../components/Headline.astro";
import Paragraph from "../../components/Paragraph.astro";

export const prerender = false; // Enable SSR for this page

const { lang } = Astro.params;
const currentLang = lang || "en";
const t = useTranslations(currentLang);

// Fetch news data at build time
let newsData;
let error = null;

try {
  newsData = await getNewsForLanguage(currentLang);
} catch (e) {
  error = e instanceof Error ? e.message : "Failed to load news";
  console.error("Error loading news:", e);
  // Fallback empty data
  newsData = {
    items: [],
    lastUpdated: new Date().toISOString(),
    totalSources: 0,
    language: currentLang,
  };
}

const pageTitle = t("news.title");
const pageDescription = t("news.description");

// SEO optimization using existing architecture
// Generate rich content for SEO using existing utility functions
const enrichedContent = newsData?.items
  ? `${pageTitle} ${pageDescription} ${newsData.items
      .slice(0, 10)
      .map((item) => `${item.title} ${item.description}`)
      .join(" ")}`
  : `${pageTitle} ${pageDescription}`;

// Use existing SEO utilities
const optimizedDescription = generateMetaDescription(enrichedContent, 155);
const seoKeywords = extractKeywords(enrichedContent, 15, currentLang);

// Enhanced page metadata
const baseUrl = Astro.site?.toString() || "https://melody-mind.de";
const currentUrl = `${baseUrl}/${currentLang}/news`;

// Generate NewsArticle structured data using existing patterns
const newsStructuredData = newsData?.items?.length
  ? {
      "@context": "https://schema.org",
      "@type": "CollectionPage",
      name: `${pageTitle} - MelodyMind`,
      description: optimizedDescription,
      url: currentUrl,
      inLanguage: currentLang,
      isPartOf: {
        "@type": "WebSite",
        name: "MelodyMind",
        url: baseUrl,
      },
      mainEntity: {
        "@type": "ItemList",
        numberOfItems: newsData.items.length,
        itemListElement: newsData.items.slice(0, 10).map((item, index) => ({
          "@type": "ListItem",
          position: index + 1,
          item: {
            "@type": "NewsArticle",
            headline: item.title,
            description: item.description,
            url: item.link,
            datePublished: item.pubDate,
            author: {
              "@type": "Organization",
              name: item.source,
            },
            publisher: {
              "@type": "Organization",
              name: "MelodyMind",
              url: baseUrl,
            },
            image: item.imageUrl || `${baseUrl}/images/news-fallback.svg`,
            genre: "Music",
            about: "Music News",
          },
        })),
      },
    }
  : null;
---

<Layout
  title={`${pageTitle} - MelodyMind`}
  description={optimizedDescription}
  keywords={seoKeywords}
  image={newsData?.items?.[0]?.imageUrl || "/images/news-fallback.svg"}
  type="website"
  publishDate={newsData?.lastUpdated ? new Date(newsData.lastUpdated) : new Date()}
  modifiedDate={new Date()}
>
  <!-- Enhanced structured data for news -->
  <Fragment slot="head">
    <link rel="canonical" href={currentUrl} />

    {
      newsStructuredData && (
        <script
          is:inline
          type="application/ld+json"
          set:html={JSON.stringify(newsStructuredData)}
        />
      )
    }

    <!-- News-specific meta tags -->
    <meta name="news_keywords" content={seoKeywords} />
    <meta property="article:section" content="Music News" />
    <meta property="article:tag" content="Music" />
    <meta property="article:tag" content="News" />
    <meta property="article:tag" content="Artists" />
    <meta property="article:tag" content="Entertainment" />
  </Fragment>
  <main class="min-h-screen bg-gray-900 py-8 text-white">
    <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
      <!-- Hero Header Section like GameHome -->
      <header
        class="relative mb-16 overflow-hidden rounded-3xl border border-purple-500/30 bg-gradient-to-br from-purple-900 via-blue-800 to-gray-900 p-8 shadow-2xl sm:p-12 lg:p-16"
      >
        <!-- Decorative background elements -->
        <div class="pointer-events-none absolute inset-0 opacity-10" aria-hidden="true">
          <div class="absolute -top-8 -right-8 h-32 w-32 rounded-full bg-white"></div>
          <div class="absolute -bottom-8 -left-8 h-24 w-24 rounded-full bg-white"></div>
          <div class="absolute top-1/2 right-4 h-16 w-16 rounded-full bg-white"></div>
        </div>

        <div class="relative z-10 w-full text-center text-white">
          <Headline level="h1" textSize="3xl" textAlign="center">
            {pageTitle}
          </Headline>
          <div class="mx-auto my-8 h-1 w-12 rounded-full bg-blue-400"></div>
          <Paragraph textAlign="center" textSize="lg">
            {pageDescription}
          </Paragraph>

          {
            newsData && (
              <div class="flex flex-col items-center justify-center gap-4 text-sm sm:flex-row md:text-base">
                <div class="flex items-center gap-2 rounded-full border border-purple-500/30 bg-gray-800/50 px-4 py-2 backdrop-blur-sm">
                  <span class="text-purple-300">{t("news.lastUpdated")}:</span>
                  <time class="text-white" datetime={newsData.lastUpdated}>
                    {new Date(newsData.lastUpdated).toLocaleString(currentLang)}
                  </time>
                </div>
                <div class="flex items-center gap-2 rounded-full border border-purple-500/30 bg-gray-800/50 px-4 py-2 backdrop-blur-sm">
                  <span class="text-purple-300">
                    {t("news.sourcesCount", { count: newsData.totalSources })}
                  </span>
                </div>
              </div>
            )
          }
        </div>
      </header>

      {
        error && (
          <div
            class="mb-8 rounded-2xl border border-red-500/50 bg-red-900/50 p-6 backdrop-blur-sm"
            role="alert"
          >
            <Headline level="h2" textSize="2xl" className="text-red-300 mb-4">
              {t("errors.loadingError")}
            </Headline>
            <Paragraph className="text-red-200 mb-4">{error}</Paragraph>
            <button
              type="button"
              class="rounded-xl bg-red-600 px-6 py-3 font-medium text-white transition-colors duration-300 hover:bg-red-700"
              onclick="window.location.reload()"
            >
              {t("common.retry")}
            </button>
          </div>
        )
      }

      {
        !error && newsData.items.length > 0 && (
          <section class="mb-16" aria-labelledby="news-list-title">
            <Headline level="h2" textSize="2xl" className="sr-only">
              {t("news.articlesList")}
            </Headline>

            <div
              class="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3"
              itemscope
              itemtype="https://schema.org/ItemList"
            >
              {newsData.items.map((item, index) => (
                <article
                  class="overflow-hidden rounded-2xl border border-gray-700 bg-gray-800 shadow-lg transition-all duration-300 hover:-translate-y-1 hover:shadow-xl"
                  aria-labelledby={`news-title-${index}`}
                  itemscope
                  itemtype="https://schema.org/NewsArticle"
                  itemprop="itemListElement"
                >
                  <div class="p-6">
                    <header class="mb-4">
                      <div class="mb-3 flex items-center justify-between text-sm text-gray-400">
                        <span class="font-medium" itemprop="author">
                          {item.source}
                        </span>
                        <time
                          class="text-gray-500"
                          datetime={item.pubDate}
                          itemprop="datePublished"
                        >
                          {new Date(item.pubDate).toLocaleDateString(currentLang)}
                        </time>
                      </div>

                      <Headline level="h3" textSize="lg">
                        <a
                          href={item.link}
                          target="_blank"
                          rel="noopener noreferrer"
                          itemprop="url"
                        >
                          {item.title}
                        </a>
                      </Headline>

                      {item.description && (
                        <Paragraph textSize="lg" textAlign="left">
                          {item.description}
                        </Paragraph>
                      )}
                    </header>

                    <footer>
                      <a
                        href={item.link}
                        target="_blank"
                        rel="noopener noreferrer"
                        class="text-lf inline-flex items-center gap-2 rounded-xl bg-purple-600 px-4 py-2 font-medium text-white transition-colors duration-300 hover:bg-purple-700"
                        aria-label={`${t("news.readMore")} - ${item.title}`}
                      >
                        {t("news.readMore")}
                        <span class="text-lg" aria-hidden="true">
                          â†—
                        </span>
                      </a>
                    </footer>
                  </div>
                </article>
              ))}
            </div>
          </section>
        )
      }

      {
        !error && newsData.items.length === 0 && (
          <section class="py-16 text-center" role="status">
            <Headline level="h2" textSize="2xl" className="text-white mb-4">
              {t("news.noNews")}
            </Headline>
            <Paragraph className="text-gray-300 mb-8">{t("news.noNewsDescription")}</Paragraph>
            <button
              type="button"
              class="rounded-xl bg-purple-600 px-6 py-3 font-medium text-white transition-colors duration-300 hover:bg-purple-700"
              onclick="window.location.reload()"
            >
              {t("news.refresh")}
            </button>
          </section>
        )
      }

      <!-- Footer Info -->
      <footer class="border-t border-gray-700 pt-12">
        <div class="grid grid-cols-1 gap-8 lg:grid-cols-2">
          <div class="rounded-2xl border border-gray-700 bg-gray-800/50 p-6 backdrop-blur-sm">
            <Headline level="h3" textSize="lg" className="mb-4 text-purple-300">
              {t("news.disclaimer.title")}
            </Headline>
            <Paragraph className="text-sm text-gray-300">
              {t("news.disclaimer.text")}
            </Paragraph>
          </div>

          <div class="rounded-2xl border border-gray-700 bg-gray-800/50 p-6 backdrop-blur-sm">
            <Paragraph className="mb-4 text-sm text-gray-300">
              {t("news.legal.attribution")}
            </Paragraph>
            <ul class="space-y-2">
              {
                newsData &&
                  newsData.items
                    .map((item) => item.source)
                    .filter((source, index, arr) => arr.indexOf(source) === index)
                    .map((source) => <li class="text-sm text-purple-300">{source}</li>)
              }
            </ul>
          </div>
        </div>
      </footer>
    </div>
  </main>
</Layout>
