---
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import PlaylistItem from "@components/PlaylistItem.astro";
import Layout from "@layouts/Layout.astro";
import Headline from "@components/Headline.astro";
import Paragraph from "@components/Paragraph.astro";
import { extractKeywords, generateMetaDescription } from "@utils/seo";
import { Icon } from "astro-icon/components";

/**
 * Language and translation setup
 * Sets the current language based on URL and loads appropriate translations
 */
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

/**
 * Interface defining the structure of a music category
 */
interface Category {
  isPlayable: boolean;
  headline: string;
  categoryUrl?: string;
  imageUrl: string;
  introSubline: string;
  slug: string;
  text: string;
}

/**
 * Asynchronously loads category data with fallback mechanisms
 * First attempts to load using the alias path, then tries relative path if that fails
 * @returns {Promise<Category[]>} Array of category objects
 */
async function loadCategoriesForLanguage(
  language: string,
): Promise<Category[]> {
  try {
    // First try using the alias path
    return await import(`@json/${language}_categories.json`)
      .then((module) => module.default)
      .catch(async () => {
        // Fallback to relative path if alias fails
        console.info(
          `Attempting to load ${language}_categories.json using relative path`,
        );
        return await import(`../../json/${language}_categories.json`)
          .then((module) => module.default)
          .catch((err) => {
            console.error(`Failed to load ${language}_categories.json:`, err);
            return [];
          });
      });
  } catch (error) {
    console.error(`Error loading categories for ${language}:`, error);
    return [];
  }
}

// Load categories and ensure we have a valid array
const categoriesList = await loadCategoriesForLanguage(lang);
const categories = Array.isArray(categoriesList) ? categoriesList : [];

/**
 * Type guard that checks if an item is a valid playable category
 * @param item - The item to check
 * @returns Boolean indicating if item is a valid playable category
 */
function isPlayableCategory(
  item: any,
): item is Category & { categoryUrl: string } {
  return (
    item &&
    typeof item === "object" &&
    item.isPlayable === true &&
    typeof item.headline === "string" &&
    typeof item.imageUrl === "string" &&
    typeof item.introSubline === "string" &&
    typeof item.slug === "string" &&
    typeof item.text === "string" &&
    typeof item.categoryUrl === "string" &&
    Boolean(item.categoryUrl)
  );
}

// Filter categories by playability status
const playableCategories = categories.filter(isPlayableCategory);
const nonPlayableCategories = categories.filter(
  (item) => item && !item.isPlayable,
);

// Combined categories with playable ones first
const sortedCategories = [...playableCategories, ...nonPlayableCategories];

// Generate SEO content
const title = t("game.select");
const description = t("game.welcome");

// Enhanced SEO content using utility functions
const pageContent = `${title} ${description} ${sortedCategories.map((c) => `${c.headline} ${c.introSubline}`).join(" ")}`;

// Generate optimized meta description and keywords
const optimizedDescription = generateMetaDescription(pageContent);
const keywords = extractKeywords(pageContent) || t("meta.keywords");

// Additional structured data parameters for SEO
const pageType = "website";
const publishDate = new Date("2024-01-01");
const modifiedDate = new Date();

// Prepare fallback text for empty states
const emptyCategoriesHeadline =
  t("game.categories.empty.headline") || "No genres found";
const emptyCategoriesText =
  t("game.categories.empty.text") ||
  "Unfortunately, no categories were found. Please try again later.";
const noPlayableCategoriesHeadline =
  t("game.categories.no.playable.headline") || "No playable genres";
const noPlayableCategoriesText =
  t("game.categories.no.playable.text") ||
  "There are currently no playable categories. Please check back later.";
---

<Layout
  title={title}
  description={optimizedDescription}
  keywords={keywords}
  image={`/og-images/social-share-gamehome-${lang}.jpg`}
  type={pageType}
  publishDate={publishDate}
  modifiedDate={modifiedDate}
>
  <div class="w-full max-w-6xl mx-auto px-4 py-8" id="main-content">
    <!-- Hero section with improved contrast and accessibility -->
    <section
      class="relative rounded-2xl mb-12 p-8 bg-gradient-to-br from-purple-900 via-indigo-900 to-blue-900 shadow-xl overflow-hidden"
      aria-labelledby="welcome-heading"
    >
      <!-- Decorative background elements with aria-hidden -->
      <div class="absolute inset-0 opacity-10" aria-hidden="true">
        <div
          class="absolute -right-20 -top-24 w-64 h-64 rounded-full bg-indigo-500"
        >
        </div>
        <div
          class="absolute left-10 bottom-10 w-40 h-40 rounded-full bg-purple-500"
        >
        </div>
        <div
          class="absolute right-1/4 top-1/2 w-32 h-32 rounded-full bg-blue-500"
        >
        </div>
      </div>

      <div class="relative z-10 text-center">
        <Headline
          title={`${t("game.welcome")}`}
          level="h1"
          className="text-3xl md:text-4xl text-white font-bold mb-4"
        />
        <div class="h-1 w-24 bg-purple-400 rounded-full mx-auto mt-2 mb-6">
        </div>
        <Paragraph
          className="max-w-2xl mx-auto text-zinc-100 text-lg leading-relaxed"
        >
          {t("game.select")}
        </Paragraph>
      </div>
    </section>

    <section class="mt-12" aria-labelledby="playlist-heading">
      <Headline
        level="h2"
        title={t("game.genre.list")}
        className="text-2xl text-center font-bold mb-4"
      />

      <!-- Search input with improved accessibility and styling -->
      <div class="my-8 w-full max-w-2xl mx-auto relative">
        <div
          class="absolute inset-y-0 left-4 flex items-center pointer-events-none"
          aria-hidden="true"
        >
          <!-- Ersetze inline SVG mit Icon-Komponente -->
          <Icon name="search" class="h-5 w-5 text-zinc-300" />
        </div>
        <label for="filter-input" class="sr-only">
          {t("game.search.label")}
        </label>
        <input
          class="w-full py-4 pl-12 pr-5 border-2 border-zinc-500 rounded-xl bg-zinc-800 text-zinc-50 text-base leading-relaxed placeholder-zinc-300 focus:outline-none focus:border-purple-400 focus:ring-2 focus:ring-purple-400/50 focus:ring-opacity-50 shadow-lg transition-all duration-300"
          type="search"
          id="filter-input"
          placeholder={t("game.search.label")}
          aria-label={t("game.search.label")}
          aria-controls="playlist-grid"
          aria-describedby="search-description"
          autocomplete="off"
          spellcheck="false"
        />
        <span id="search-description" class="sr-only">
          {t("game.search.description")}
        </span>
      </div>

      <!-- Genre grid with improved card styling and animations -->
      <div
        id="playlist-grid"
        class="grid grid-cols-1 xs:grid-cols-2 md:grid-cols-3 lg:grid-cols-3 gap-6 md:gap-8 w-full max-w-5xl mx-auto my-8 min-h-[200px]"
        role="list"
        aria-label={t("game.genre.list")}
        aria-live="polite"
      >
        {
          categories && categories.length > 0 ? (
            playableCategories.length > 0 ? (
              categories.map(
                (item, index) =>
                  item.isPlayable && (
                    <li
                      class="h-full list-none animate-fadeIn"
                      style={{ animationDelay: `${index * 0.05}s` }}
                    >
                      <PlaylistItem
                        headline={item.headline}
                        subheadline={item.introSubline}
                        image={item.imageUrl}
                        imageAlt={t("game.genre.image") + " " + item.headline}
                        href={`/${lang}${item.categoryUrl}`}
                        isDisabled={!item.isPlayable}
                        aria-label={
                          item.headline + " " + t("game.genre.play.label")
                        }
                      />
                      <div
                        class="p-2 flex justify-center items-center bg-gradient-to-r from-purple-600 to-indigo-600 text-white font-medium text-sm rounded-b-lg opacity-0 group-hover:opacity-100 transition-opacity"
                        aria-hidden="true"
                      >
                        {t("category.play")} â†’
                      </div>
                    </li>
                  ),
              )
            ) : (
              <div class="col-span-full py-12 px-6 bg-gradient-to-br from-zinc-800 to-zinc-900 rounded-xl text-center shadow-md border border-zinc-700">
                <h3 class="text-xl font-bold text-zinc-50 mb-3">
                  {noPlayableCategoriesHeadline}
                </h3>
                <p class="text-zinc-200">{noPlayableCategoriesText}</p>
              </div>
            )
          ) : (
            <div class="col-span-full py-12 px-6 bg-gradient-to-br from-zinc-800 to-zinc-900 rounded-xl text-center shadow-md border border-zinc-700">
              <h3 class="text-xl font-bold text-zinc-50 mb-3">
                {emptyCategoriesHeadline}
              </h3>
              <p class="text-zinc-200">{emptyCategoriesText}</p>
            </div>
          )
        }
      </div>
    </section>
  </div>
</Layout>

<script>
  /**
   * Genre Filtering and Search System
   *
   * This module provides search functionality for the genre grid, allowing users
   * to dynamically filter available music genres as they type in the search field.
   * It includes performance optimizations such as debouncing and DOM element caching
   * to ensure a smooth user experience even with large lists.
   *
   */

  import { ui } from "../../i18n/ui";
  import { getLangFromUrl } from "@utils/i18n";

  // =========================================================================
  // CONFIGURATION AND SETUP
  // =========================================================================

  /**
   * Configuration constants that control the behavior of the filtering system
   */
  const CONFIG = {
    DEBOUNCE_DELAY: 250, // MS to wait before applying filter after typing
    ANIMATION_DURATION: 150, // MS for fade animations
    SELECTOR: {
      FILTER_INPUT: "#filter-input",
      GRID: "#playlist-grid",
      LIST_ITEM: "li",
      HEADLINE: ".headline",
      NO_RESULTS: ".no-results",
    },
    ATTRIBUTE: {
      DISABLED: "aria-disabled",
    },
  };

  /**
   * Load translations for the current language
   * @type {Object} Dictionary of translation keys and values
   */
  const currentLang = getLangFromUrl(new URL(window.location.href));
  const translations = {
    noResults: ui[currentLang]?.["game.no.results"] || "No results found",
    notAvailable: ui[currentLang]?.["game.not.available"] || "Not available",
  };

  /**
   * Cache for DOM elements to avoid repeated queries
   * @type {Object} Stores references to key DOM elements
   */
  const elements = {
    filterInput: document.querySelector(CONFIG.SELECTOR.FILTER_INPUT),
    grid: document.querySelector(CONFIG.SELECTOR.GRID),
    get items() {
      return (
        elements.grid?.querySelectorAll(`${CONFIG.SELECTOR.LIST_ITEM}`) || []
      );
    },
  };

  // =========================================================================
  // UTILITY FUNCTIONS
  // =========================================================================

  /**
   * Creates a debounced version of a function that delays execution
   * until after the specified wait time has elapsed since the last call
   *
   * @param {Function} func - The function to debounce
   * @param {number} wait - Time in milliseconds to delay execution
   * @return {Function} A debounced version of the input function
   */
  function debounce(func: (...args: unknown[]) => void, wait: number) {
    let timeout: ReturnType<typeof setTimeout> | undefined;
    return function (this: unknown, ...args: unknown[]) {
      clearTimeout(timeout);
      timeout = setTimeout(() => func.apply(this, args), wait);
    };
  }

  /**
   * In-memory cache for genre item text content to improve search performance
   * @type {WeakMap<Element, string>} Maps DOM elements to their searchable text
   */
  const textContentCache = new WeakMap();

  // =========================================================================
  // CORE FUNCTIONALITY
  // =========================================================================

  /**
   * Initializes the genre filtering system
   * Sets up event listeners and prepares the UI
   */
  function initGenreFilter() {
    if (!elements.filterInput || !elements.grid) {
      console.warn("Filter elements not found. Genre filtering disabled.");
      return;
    }

    // Setup event listeners with debounced filtering
    const debouncedFilter = debounce(filterGenres, CONFIG.DEBOUNCE_DELAY);

    elements.filterInput.addEventListener("input", debouncedFilter);

    // Set up disabled items with proper attributes
    document
      .querySelectorAll(`[${CONFIG.ATTRIBUTE.DISABLED}="true"]`)
      .forEach((item) => {
        item.setAttribute("data-unavailable-text", translations.notAvailable);
      });
  }

  /**
   * Filters the genre items based on the search query
   * Shows/hides items according to the match and updates the UI accordingly
   */
  function filterGenres() {
    if (!elements.filterInput || !elements.grid) return;

    const query = (elements.filterInput as HTMLInputElement).value
      .toLowerCase()
      .trim();
    let hasResults = false;

    // Filter each genre item based on the query
    elements.items.forEach((item) => {
      // Use cached text content or retrieve and cache it
      let itemText = textContentCache.get(item);
      if (!itemText) {
        itemText =
          item
            .querySelector(CONFIG.SELECTOR.HEADLINE)
            ?.textContent?.toLowerCase() || "";
        textContentCache.set(item, itemText);
      }

      // Check if item text contains the query
      const isVisible = itemText.includes(query);
      (item as HTMLElement).style.display = isVisible ? "" : "none";

      if (isVisible) hasResults = true;
    });

    // Update the UI with a "no results" message if needed
    updateNoResultsMessage(hasResults);
  }

  /**
   * Updates the UI to show or hide a "no results" message
   * when the search query returns no matches
   *
   * @param {boolean} hasResults - Whether any genres match the current query
   */
  function updateNoResultsMessage(hasResults: boolean) {
    if (!elements.grid) return;

    let noResultsMessage = elements.grid.querySelector(
      CONFIG.SELECTOR.NO_RESULTS,
    );

    if (!hasResults) {
      // Create and display "no results" message if it doesn't exist
      if (!noResultsMessage) {
        noResultsMessage = document.createElement("p");
        noResultsMessage.className =
          "col-span-full py-8 px-6 bg-zinc-700 rounded-lg text-zinc-50 text-center font-medium no-results";
        noResultsMessage.setAttribute("role", "status");
        noResultsMessage.textContent = translations.noResults;
        elements.grid.appendChild(noResultsMessage);
      }
    } else {
      // Remove the "no results" message if results are found
      noResultsMessage?.remove();
    }
  }

  // Initialize the genre filter when the DOM is ready
  document.addEventListener("DOMContentLoaded", initGenreFilter);

  // Immediate initialization as a fallback for when the script loads after DOM content
  if (document.readyState !== "loading") {
    initGenreFilter();
  }
</script>

<style>
  /* Improved contrast for disabled items */
  [aria-disabled="true"] {
    cursor: not-allowed;
    position: relative;
    opacity: 0.9;
    background-color: var(--secondary-color);
  }

  [aria-disabled="true"]::after {
    content: attr(data-unavailable-text);
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    padding: 1em 1.5em;
    border-radius: 0.5rem;
    font-size: 1rem;
    font-weight: 600;
    color: #fff;
    background: rgba(0, 0, 0, 0.9);
  }

  /* High Contrast Mode Support */
  @media (forced-colors: active) {
    #playlist-grid a {
      border: 2px solid ButtonText;
    }

    input {
      border: 2px solid ButtonText;
    }
  }

  /* Print Styles */
  @media print {
    #filter-input {
      display: none;
    }

    #playlist-grid {
      gap: 1rem;
    }

    #playlist-grid a {
      break-inside: avoid;
      page-break-inside: avoid;
    }
  }

  /* 16:9 Aspect ratio for Genre cards */
  #playlist-grid a {
    display: block;
  }

  #playlist-grid a article > div:first-child {
    aspect-ratio: 16/9;
  }

  /* Improved animations with reduced motion support */
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fadeIn {
    animation: fadeIn 0.5s ease-out forwards;
    opacity: 0;
  }

  /* Focus styles for better keyboard navigation */
  :focus-visible {
    outline: 3px solid #a855f7 !important;
    outline-offset: 3px !important;
  }

  /* Respect reduced motion preferences */
  @media (prefers-reduced-motion: reduce) {
    .animate-fadeIn,
    a,
    button,
    input,
    * {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
      scroll-behavior: auto !important;
    }
  }
</style>
