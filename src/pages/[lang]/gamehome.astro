---
import { error as logError } from "../../utils/logging/logger";
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import PlaylistItem from "@components/PlaylistItem.astro";
import Layout from "@layouts/Layout.astro";
import Headline from "@components/Headline.astro";
import Paragraph from "@components/Paragraph.astro";
import { extractKeywords, generateMetaDescription } from "@utils/seo";

import EmptyState from "@components/EmptyState.astro";
import LoadingState from "@components/LoadingState.astro";
import BackToTop from "@components/Shared/BackToTop.astro";
import { loadCategoriesForLanguage } from "../../utils/category/categoryLoadingUtils";
import type { Category } from "../../utils/category/categoryLoadingUtils";

/**
 * Static path generation for internationalization
 * Required for Astro dynamic routes to work properly
 */
export async function getStaticPaths(): Promise<{ params: { lang: string } }[]> {
  const supportedLanguages = [
    "de",
    "en",
    "es",
    "fr",
    "it",
    "pt",
    "da",
    "nl",
    "sv",
    "fi",
    "cn",
    "ru",
    "jp",
    "uk",
  ] as const;

  return supportedLanguages.map((lang) => ({
    params: { lang },
  }));
}

/**
 * Enable static site generation for this page
 */
export const prerender = true;

/**
 * Language and translation setup
 * Sets the current language based on URL and loads appropriate translations
 */
const lang = String(getLangFromUrl(Astro.url));
const t = useTranslations(String(lang));

/**
 * Generates WebApplication schema for the game home page
 */
function generateGameApplicationSchema(
  title: string,
  description: string,
  currentUrl: string,
  lang: string
) {
  return {
    "@context": "https://schema.org",
    "@type": "WebApplication",
    name: `MelodyMind - ${title}`,
    description: description,
    url: currentUrl,
    applicationCategory: "GameApplication",
    applicationSubCategory: "MusicTrivia",
    operatingSystem: "Web Browser",
    genre: "Music Trivia",
    inLanguage: lang,
    creator: {
      "@type": "Organization",
      name: "MelodyMind Team",
    },
    datePublished: "2024-01-01",
    dateModified: new Date().toISOString(),
    isAccessibleForFree: true,
  };
}

/**
 * Generates ItemList schema for game categories
 */
function generateCategoryListSchema(baseUrl: string, lang: string, playableCategories: Category[]) {
  return {
    "@context": "https://schema.org",
    "@type": "ItemList",
    name: "Music Game Categories",
    description: "Available music trivia categories in MelodyMind",
    numberOfItems: playableCategories.length,
    itemListElement: playableCategories.slice(0, 10).map((category, index) => ({
      "@type": "ListItem",
      position: index + 1,
      item: {
        "@type": "Game",
        name: category.headline,
        description: category.introSubline,
        url: `${baseUrl}/${lang}${category.categoryUrl}`,
        genre: "Music Trivia",
        applicationCategory: "Game",
      },
    })),
  };
}

/**
 * Generates client-side translations with fallbacks
 */
function generateClientTranslations(t: (_key: string) => string) {
  return {
    search: {
      placeholder: t("game.search.label"),
      showingAll: t("game.search.showing.all"),
      resultsFound: t("game.search.results"),
      noResults: t("game.search.no.results"),
      clear: t("game.search.clear"),
    },
    accessibility: {
      skipToContent: t("accessibility.skip.to.content"),
      searchLabel: t("game.search.label"),
    },
  };
}

// Define the category structure for the gamehome page
interface GameCategory {
  categoryUrl: string;
  headline: string;
  imageUrl: string;
  introSubline: string;
  isPlayable: boolean;
  slug: string;
  text: string;
  spotifyPlaylist: string;
  deezerPlaylist: string;
  appleMusicPlaylist: string;
  knowledgeUrl: string;
  categoryType: string;
}

// Load categories and ensure we have a valid array
let categories: GameCategory[] = [];

try {
  const result = await loadCategoriesForLanguage({
    language: lang,
    fallbackLanguage: "en",
    useAliasPath: true,
  });
  // Map loaded categories to GameCategory interface
  categories = result.categories.map((cat) => ({
    categoryUrl: cat.categoryUrl || "",
    headline: cat.headline,
    imageUrl: cat.imageUrl || "",
    introSubline: cat.introSubline || "",
    isPlayable: cat.isPlayable || false,
    slug: cat.slug,
    text: cat.text || "",
    spotifyPlaylist: "", // Not available in Category interface
    deezerPlaylist: "", // Not available in Category interface
    appleMusicPlaylist: "", // Not available in Category interface
    knowledgeUrl: "", // Not available in Category interface
    categoryType: cat.categoryType || "other",
  }));
} catch (error) {
  console.error(`Error loading categories for ${lang}:`, error);
  try {
    // Load English fallback using centralized loader to avoid dynamic runtime imports
    const fallbackResult = await loadCategoriesForLanguage({
      language: "en",
      fallbackLanguage: "en",
    });
    // Ensure compatibility: map fallback categories if necessary
    categories = fallbackResult.success
      ? fallbackResult.categories.map((cat) => ({
          categoryUrl: cat.categoryUrl || "",
          headline: cat.headline,
          imageUrl: cat.imageUrl || "",
          introSubline: cat.introSubline || "",
          isPlayable: cat.isPlayable || false,
          slug: cat.slug,
          text: cat.text || "",
          spotifyPlaylist: (cat as any).spotifyPlaylist || "",
          deezerPlaylist: (cat as any).deezerPlaylist || "",
          appleMusicPlaylist: (cat as any).appleMusicPlaylist || "",
          knowledgeUrl: (cat as any).knowledgeUrl || "",
          categoryType: cat.categoryType || "other",
        }))
      : [];
  } catch (fallbackError) {
    logError("Failed to load fallback categories", fallbackError);
    categories = [];
  }
}

// Filter categories by playability status and sort alphabetically by image name
const playableCategories = categories
  .filter((item: any) => item && item.isPlayable)
  .sort((a, b) => {
    // Extract filename from imageUrl for sorting
    const getImageName = (url: string) => {
      const filename = url.split("/").pop() || "";
      return filename.replace(/\.[^/.]+$/, ""); // Remove file extension
    };
    return getImageName(a.imageUrl).localeCompare(getImageName(b.imageUrl));
  });

const nonPlayableCategories = categories
  .filter((item: any) => item && !item.isPlayable)
  .sort((a, b) => {
    // Extract filename from imageUrl for sorting
    const getImageName = (url: string) => {
      const filename = url.split("/").pop() || "";
      return filename.replace(/\.[^/.]+$/, ""); // Remove file extension
    };
    return getImageName(a.imageUrl).localeCompare(getImageName(b.imageUrl));
  });

// Combined categories with playable ones first, sorted alphabetically by image name
const sortedCategories = [...playableCategories, ...nonPlayableCategories];

// Enhanced SEO content generation for better search visibility
const title = t("game.select");
const description = t("game.welcome");

// Create rich SEO content combining category information
const enrichedContent = `${title} ${description} ${t("game.genre.selection.description")} ${sortedCategories.map((c) => `${c.headline} ${c.introSubline} ${c.text || ""}`).join(" ")}`;

// Generate optimized meta description and keywords using enhanced content
const optimizedDescription = generateMetaDescription(enrichedContent, 158); // Leave room for ellipsis
const seoKeywords = extractKeywords(enrichedContent, 12, lang) || t("meta.keywords");

// Create category-specific keywords for better targeting
const categoryNames = sortedCategories.map((c) => c.headline.toLowerCase()).join(", ");
const combinedKeywords = `${seoKeywords}, ${categoryNames}, ${t("meta.keywords")}`.substring(
  0,
  255
);

// Enhanced structured data for GameHub/CategoryList
const baseUrl = Astro.site?.toString() || "https://melody-mind.de";
const currentUrl = `${baseUrl}/${lang}/gamehome`;

// JSON-LD structured data for better search engine understanding
const gameApplicationSchema = generateGameApplicationSchema(
  title,
  optimizedDescription,
  currentUrl,
  lang
);
const categoryListSchema = generateCategoryListSchema(baseUrl, lang, playableCategories);
const breadcrumbs = [
  { name: t("nav.home"), url: `${baseUrl}/${lang}` },
  { name: t("game.categories.title"), url: currentUrl },
];
const structuredDataExtra = [gameApplicationSchema, categoryListSchema];

// Additional structured data parameters for enhanced SEO
const pageType = "website";
const publishDate = new Date("2024-01-01");
const modifiedDate = new Date();

// Prepare fallback text for empty states
const emptyCategoriesHeadline = t("game.categories.empty.headline");
const emptyCategoriesText = t("game.categories.empty.text");

// Client-side translations for enhanced interactivity
const clientTranslations = generateClientTranslations(t);
---

<!-- OG image: game overview -->
<Layout
  {title}
  description={optimizedDescription}
  keywords={combinedKeywords}
  image="/homecategories/game.png"
  imageWidth={1200}
  imageHeight={630}
  type={pageType}
  {publishDate}
  {modifiedDate}
  canonical={currentUrl}
  {breadcrumbs}
  {structuredDataExtra}
>
  <Fragment slot="head"></Fragment>

  <!-- Make translations available for JavaScript functionality -->
  <script is:inline define:vars={{ clientTranslations }}>
    window.gameHomeTranslations = clientTranslations;
  </script>

  <main
    id="main-content"
    class="style paint mx-auto flex min-h-screen w-full max-w-7xl flex-col p-4 contain-layout sm:p-3 md:p-6"
    role="main"
    aria-labelledby="welcome-heading"
  >
    <!-- Hero section with improved semantics and accessibility -->
    <header
      class="style paint relative mb-6 overflow-hidden rounded-xl border border-purple-600 bg-gradient-to-br from-purple-900 via-purple-700 to-blue-800 p-4 shadow-2xl contain-layout sm:mb-4 sm:p-3 md:mb-8 md:p-6"
      aria-labelledby="welcome-heading"
    >
      <!-- Decorative background elements with aria-hidden -->
      <div
        class="style paint pointer-events-none absolute inset-0 opacity-10 contain-layout"
        aria-hidden="true"
      >
        <div class="absolute -top-8 -right-8 h-24 w-24 rounded-full bg-white"></div>
        <div class="absolute -bottom-8 -left-8 h-48 w-48 rounded-full bg-white"></div>
        <div
          class="absolute top-1/2 -right-4 h-16 w-16 -translate-y-1/2 transform rounded-full bg-white"
        >
        </div>
      </div>

      <div class="style relative z-10 w-full text-center text-white contain-layout">
        <Headline level="h1" textSize="3xl" textAlign="center">
          {t("game.welcome")}
        </Headline>
        <div class="style paint mx-auto my-8 h-1 w-12 rounded-full bg-blue-400 contain-layout">
        </div>
        <Paragraph textSize="lg" textAlign="center">
          {t("game.select")}
        </Paragraph>

        <!-- Unified Search UI (matches Knowledge page) -->
        <section
          class="mx-auto mt-8 w-full max-w-5xl"
          role="search"
          aria-label={t("game.search.label")}
        >
          <label for="searchInput" class="sr-only">{t("game.search.label")}</label>
          <div class="relative">
            <div class="pointer-events-none absolute inset-y-0 left-0 z-10 flex items-center pl-6">
              <svg
                class="h-7 w-7 text-purple-400"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                aria-hidden="true"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
              </svg>
            </div>

            <input
              id="searchInput"
              type="search"
              class="block w-full rounded-3xl border-2 border-purple-500/40 bg-gray-800/90 py-5 pr-20 pl-16 text-xl font-medium text-white placeholder-gray-400 shadow-2xl backdrop-blur-md transition-all duration-300 hover:shadow-purple-500/20 focus:border-purple-400 focus:ring-4 focus:ring-purple-500/60 focus:outline-none"
              placeholder={t("game.search.placeholder") || t("game.search.label")}
              aria-controls="playlist-grid"
              autocomplete="off"
            />

            <button
              id="clear-search"
              class="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-6 text-gray-400 opacity-0 transition-colors duration-200 hover:text-purple-400"
              type="button"
              aria-label={t("game.search.clear") || "Clear search"}
            >
              <svg
                class="h-6 w-6"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                aria-hidden="true"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>

          <!-- Reset Button (same UX as Knowledge page) -->
          <div class="mt-6 text-center">
            <button
              id="reset-search"
              class="inline-flex items-center gap-3 rounded-xl bg-purple-600 px-6 py-3 font-semibold text-white shadow-lg transition-colors duration-200 hover:bg-purple-700 hover:shadow-purple-500/20"
              type="button"
              aria-controls="playlist-grid"
            >
              <svg
                class="h-5 w-5"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                aria-hidden="true"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M4 4v6h6M20 20v-6h-6"></path>
              </svg>
              <span>{t("game.search.reset.text") || "Reset Search"}</span>
            </button>
          </div>

          <!-- Search status for screen readers -->
          <div id="search-status" class="sr-only" aria-live="polite" role="status">
            {t("game.search.showing.all") || "Showing all categories"}
          </div>
        </section>

        <!-- Additional descriptive content for SEO -->
        <Paragraph className="sr-only">
          {t("game.genre.selection.description")}
        </Paragraph>
      </div>
    </header>

    <section class="style flex-grow contain-layout" aria-labelledby="playlist-heading">
      <!-- Enhanced genre grid with semantic markup -->
      <div class="style flex-grow contain-layout">
        <Headline level="h2" textSize="base" className="sr-only">
          {t("game.categories.title")}
        </Headline>

        {
          categories && categories.length > 0 ? (
            <>
              {/* Simple Grid - All Categories Sorted Alphabetically */}
              <div
                class="style paint mb-8 grid grid-cols-1 gap-4 contain-layout sm:mb-6 sm:gap-3 md:gap-6 lg:gap-8"
                style="grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));"
                role="list"
                aria-label={t("game.genre.list")}
                aria-live="polite"
                itemscope
                itemtype="https://schema.org/ItemList"
              >
                {sortedCategories.map((category) => (
                  <PlaylistItem
                    headline={category.headline}
                    subheadline={category.introSubline}
                    image={category.imageUrl}
                    imageAlt={`${category.headline} music category`}
                    href={category.categoryUrl ? `/${lang}${category.categoryUrl}` : "#"}
                    isDisabled={!category.isPlayable}
                  />
                ))}
              </div>
            </>
          ) : (
            <div
              class="style paint mb-8 grid grid-cols-1 gap-4 contain-layout sm:mb-6 sm:gap-3 md:gap-6 lg:gap-8"
              style="grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));"
              role="list"
              aria-label={t("game.genre.list")}
              aria-live="polite"
              itemscope
              itemtype="https://schema.org/ItemList"
            >
              <EmptyState
                icon="music-note"
                title={emptyCategoriesHeadline}
                description={emptyCategoriesText}
                className="col-span-full"
              />
            </div>
          )
        }
      </div>

      <!-- Loading state for better UX -->
      <LoadingState text={t("game.categories.loading")} className="hidden" visible={false} />
    </section>
  </main>

  <!-- Back to Top Component for improved UX and accessibility -->
  <BackToTop {lang} />

  <script>
    import { initGenericSearchAuto } from "../../utils/components/searchUtils";

    /* eslint-disable @typescript-eslint/explicit-function-return-type */
    function wire() {
      const instance = initGenericSearchAuto({
        inputId: "searchInput",
        clearButtonId: "clear-search",
        itemSelector: ".playlist-item",
      });

      try {
        window.__lastSearchInstance = instance;
      } catch {
        // ignore storing instance errors
      }

      try {
        const resetBtn = document.getElementById("reset-search");
        if (resetBtn) {
          resetBtn.addEventListener("click", () => {
            try {
              const inst = window.__lastSearchInstance;
              if (inst && typeof inst.clear === "function") {
                inst.clear();
              } else if (inst && typeof inst.performSearch === "function") {
                inst.performSearch("");
              }
              const input = document.getElementById("searchInput");
              if (input) {
                input.focus();
              }
            } catch {
              // ignore reset errors
            }
          });
        }
      } catch {
        // ignore listener wiring errors
      }
    }

    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", () => {
        (window.requestIdleCallback || ((cb) => setTimeout(cb, 1)))(wire);
      });
    } else {
      (window.requestIdleCallback || ((cb) => setTimeout(cb, 1)))(wire);
    }
  </script>
</Layout>
