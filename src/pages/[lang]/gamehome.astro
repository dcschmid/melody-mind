---
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import PlaylistItem from "@components/PlaylistItem.astro";
import Layout from "@layouts/Layout.astro";
import Headline from "@components/Headline.astro";
import Paragraph from "@components/Paragraph.astro";
import { extractKeywords, generateMetaDescription } from "@utils/seo";
import { Icon } from "astro-icon/components";
import EmptyState from "@components/EmptyState.astro";
import LoadingState from "@components/LoadingState.astro";
import BackToTop from "@components/Shared/BackToTop.astro";

/**
 * Static path generation for internationalization
 * Required for Astro dynamic routes to work properly
 */
export async function getStaticPaths(): Promise<{ params: { lang: string } }[]> {
  const supportedLanguages = ["de", "en", "es", "fr", "it", "pt", "da", "nl", "sv", "fi"] as const;

  return supportedLanguages.map((lang) => ({
    params: { lang },
  }));
}

/**
 * Language and translation setup
 * Sets the current language based on URL and loads appropriate translations
 */
const lang = String(getLangFromUrl(Astro.url));
const t = useTranslations(String(lang));

/**
 * Interface defining the structure of a music category
 */
interface Category {
  isPlayable: boolean;
  headline: string;
  categoryUrl?: string;
  imageUrl: string;
  introSubline: string;
  slug: string;
  text: string;
}

/**
 * Generates WebApplication schema for the game home page
 */
function generateGameApplicationSchema(title: string, description: string, currentUrl: string, lang: string) {
  return {
    "@context": "https://schema.org",
    "@type": "WebApplication",
    "name": `MelodyMind - ${title}`,
    "description": description,
    "url": currentUrl,
    "applicationCategory": "GameApplication",
    "applicationSubCategory": "MusicTrivia",
    "operatingSystem": "Web Browser",
    "genre": "Music Trivia",
    "inLanguage": lang,
    "creator": {
      "@type": "Organization",
      "name": "MelodyMind Team"
    },
    "datePublished": "2024-01-01",
    "dateModified": new Date().toISOString(),
    "isAccessibleForFree": true
  };
}

/**
 * Generates ItemList schema for game categories
 */
function generateCategoryListSchema(baseUrl: string, lang: string, playableCategories: Category[]) {
  return {
    "@context": "https://schema.org",
    "@type": "ItemList",
    "name": "Music Game Categories",
    "description": "Available music trivia categories in MelodyMind",
    "numberOfItems": playableCategories.length,
    "itemListElement": playableCategories.slice(0, 10).map((category, index) => ({
      "@type": "ListItem",
      "position": index + 1,
      "item": {
        "@type": "Game",
        "name": category.headline,
        "description": category.introSubline,
        "url": `${baseUrl}/${lang}${category.categoryUrl}`,
        "genre": "Music Trivia",
        "applicationCategory": "Game"
      }
    }))
  };
}

/**
 * Generates client-side translations with fallbacks
 */
function generateClientTranslations(t: (key: string) => string) {
  return {
    search: {
      placeholder: t("game.search.label") || "Search genres...",
      showingAll: t("game.search.showing.all") || "Showing all genres",
      resultsFound: t("game.search.results") || "genres found",
      noResults: t("game.search.no.results") || "No genres found matching your search",
      clear: t("game.search.clear") || "Clear search"
    },
    accessibility: {
      skipToContent: t("accessibility.skip.to.content") || "Skip to main content",
      searchLabel: t("game.search.label") || "Search music genres"
    }
  };
}

/**
 * Asynchronously loads category data with fallback mechanisms
 * First attempts to load using the alias path, then tries relative path if that fails
 * @returns {Promise<Category[]>} Array of category objects
 */
async function loadCategoriesForLanguage(language: string): Promise<Category[]> {
  try {
    // First try using the alias path
    return await import(`@json/${language}_categories.json`)
      .then((module) => module.default)
      .catch(async () => {
        // Fallback to relative path if alias fails
        console.warn(`Attempting to load ${language}_categories.json using relative path`);
        return await import(`../../json/${language}_categories.json`)
          .then((module) => module.default)
          .catch((_err) => {
            return [];
          });
      });
  } catch (error) {
    console.error(`Error loading categories for ${language}:`, error);
    return [];
  }
}

// Load categories and ensure we have a valid array
const categoriesList = await loadCategoriesForLanguage(lang);
const categories = Array.isArray(categoriesList) ? categoriesList : [];

/**
 * Type guard that checks if an item is a valid playable category
 * @param item - The item to check
 * @returns Boolean indicating if item is a valid playable category
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function isPlayableCategory(item: any): item is Category & { categoryUrl: string } {
  return (
    item &&
    typeof item === "object" &&
    item.isPlayable === true &&
    typeof item.headline === "string" &&
    typeof item.imageUrl === "string" &&
    typeof item.introSubline === "string" &&
    typeof item.slug === "string" &&
    typeof item.text === "string" &&
    typeof item.categoryUrl === "string" &&
    Boolean(item.categoryUrl)
  );
}

// Filter categories by playability status
const playableCategories = categories.filter(isPlayableCategory);
const nonPlayableCategories = categories.filter((item) => item && !item.isPlayable);

// Combined categories with playable ones first
const sortedCategories = [...playableCategories, ...nonPlayableCategories];

// Enhanced SEO content generation for better search visibility
const title = t("game.select");
const description = t("game.welcome");

// Create rich SEO content combining category information
const enrichedContent = `${title} ${description} ${t("game.genre.selection.description") || "Choose from multiple music genres including rock, pop, jazz, classical and more. Each category features carefully curated questions to test your musical knowledge."} ${sortedCategories.map((c) => `${c.headline} ${c.introSubline} ${c.text || ""}`).join(" ")}`;

// Generate optimized meta description and keywords using enhanced content
const optimizedDescription = generateMetaDescription(enrichedContent, 158); // Leave room for ellipsis
const seoKeywords = extractKeywords(enrichedContent, 12, lang) || t("meta.keywords");

// Create category-specific keywords for better targeting
const categoryNames = sortedCategories.map(c => c.headline.toLowerCase()).join(", ");
const combinedKeywords = `${seoKeywords}, ${categoryNames}, ${t("meta.keywords")}`.substring(0, 255);

// Enhanced structured data for GameHub/CategoryList
const baseUrl = Astro.site?.toString() || "https://melody-mind.de";
const currentUrl = `${baseUrl}/${lang}/gamehome`;

// JSON-LD structured data for better search engine understanding
const gameApplicationSchema = generateGameApplicationSchema(title, optimizedDescription, currentUrl, lang);

// ItemList schema for game categories
const categoryListSchema = generateCategoryListSchema(baseUrl, lang, playableCategories);

// Additional structured data parameters for enhanced SEO
const pageType = "website";
const publishDate = new Date("2024-01-01");
const modifiedDate = new Date();

// Prepare fallback text for empty states
const emptyCategoriesHeadline = t("game.categories.empty.headline") || "No genres found";
const emptyCategoriesText =
  t("game.categories.empty.text") ||
  "Unfortunately, no categories were found. Please try again later.";

// Client-side translations for enhanced interactivity
const clientTranslations = generateClientTranslations(t);
---

<Layout
  title={title}
  description={optimizedDescription}
  keywords={combinedKeywords}
  image={`/og-images/social-share-gamehome-${String(lang)}.jpg`}
  type={pageType}
  publishDate={publishDate}
  modifiedDate={modifiedDate}
>
  <!-- Enhanced structured data for SEO -->
  <Fragment slot="head">
    <script type="application/ld+json" set:html={JSON.stringify(gameApplicationSchema)} />
    <script type="application/ld+json" set:html={JSON.stringify(categoryListSchema)} />
    
    <!-- Additional SEO meta tags -->
    <meta name="robots" content="index, follow, max-image-preview:large" />
    <meta name="googlebot" content="index, follow" />
    <link rel="canonical" href={currentUrl} />
    
    <!-- Enhanced OpenGraph tags for social sharing -->
    <meta property="og:type" content="website" />
    <meta property="og:locale" content={`${lang}_${lang.toUpperCase()}`} />
    <meta property="article:section" content="Gaming" />
    <meta property="article:tag" content="Music Trivia" />
    <meta property="article:tag" content="Online Game" />
    <meta property="article:tag" content="Music Knowledge" />
  </Fragment>

  <!-- Make translations available for JavaScript functionality -->
  <script is:inline define:vars={{ clientTranslations }}>
    window.gameHomeTranslations = clientTranslations;
  </script>

  <main id="main-content" class="gamehome-container" role="main" aria-labelledby="welcome-heading">
    <!-- Hero section with improved semantics and accessibility -->
    <header class="gamehome-hero" aria-labelledby="welcome-heading">
      <!-- Decorative background elements with aria-hidden -->
      <div class="gamehome-hero__decoration" aria-hidden="true">
        <div class="gamehome-hero__decoration-item gamehome-hero__decoration-item--top-right"></div>
        <div class="gamehome-hero__decoration-item gamehome-hero__decoration-item--bottom-left">
        </div>
        <div class="gamehome-hero__decoration-item gamehome-hero__decoration-item--center-right">
        </div>
      </div>

      <div class="gamehome-hero__content">
        <Headline 
          title={`${t("game.welcome")}`} 
          level="h1" 
          className="gamehome-hero__title" 
          id="welcome-heading"
        />
        <div class="gamehome-hero__divider"></div>
        <Paragraph className="gamehome-hero__description" align="center">
          {t("game.select")}
        </Paragraph>
        <!-- Additional descriptive content for SEO -->
        <p class="gamehome-hero__seo-description sr-only">
          {t("game.genre.selection.description") || "Choose from multiple music genres including rock, pop, jazz, classical and more. Test your knowledge with challenging questions and compete with players worldwide."}
        </p>
      </div>
    </header>

    <section class="genre-selection" aria-labelledby="playlist-heading">
      <!-- Enhanced search input with better a11y and SEO -->
      <div class="search-container" role="search">
        <div class="search-container__wrapper">
          <div class="search-container__icon" aria-hidden="true">
            <Icon name="search" class="search-container__icon-element" />
          </div>
          <label for="filter-input" class="search-container__label sr-only">
            {t("game.search.label")}
          </label>
          <input
            class="search-container__input"
            type="search"
            id="filter-input"
            name="genre-search"
            placeholder={t("game.search.label")}
            aria-label={t("game.search.label")}
            aria-controls="playlist-grid"
            aria-describedby="search-description"
            spellcheck="false"
            autocomplete="off"
            enterkeyhint="search"
          />
          <button
            type="button"
            class="search-container__clear"
            aria-label={t("game.search.clear") || "Clear search"}
            hidden
          >
            <Icon name="x" aria-hidden="true" />
          </button>
          <span id="search-description" class="sr-only">
            {t("game.search.help") || "Type to filter music genres by name"}
          </span>
        </div>
        <div class="search-container__results-info" aria-live="polite" aria-atomic="true">
          <!-- Results information will be populated by JavaScript -->
        </div>
      </div>

      <!-- Enhanced genre grid with semantic markup -->
      <div class="genre-content">
        <Headline 
          title={t("game.categories.title") || "Music Categories"} 
          level="h2" 
          className="genre-content__title sr-only" 
          id="playlist-heading" 
        />
        
        <div
          id="playlist-grid"
          class="genre-grid"
          role="list"
          aria-label={t("game.genre.list") || "Music genre selection"}
          aria-live="polite"
          itemscope
          itemtype="https://schema.org/ItemList"
        >
          {
            categories && categories.length > 0 ? (
              sortedCategories.map((category, _index) => (
                <PlaylistItem 
                  headline={category.headline}
                  subheadline={category.introSubline}
                  image={category.imageUrl}
                  imageAlt={`${category.headline} music category`}
                  href={category.categoryUrl || '#'}
                  isDisabled={!category.isPlayable}
                />
              ))
            ) : (
              <EmptyState
                headline={emptyCategoriesHeadline}
                text={emptyCategoriesText}
                iconName="music-note"
                className="genre-grid__empty"
              />
            )
          }
        </div>
      </div>

      <!-- Loading state for better UX -->
      <LoadingState
        text={t("game.categories.loading") || "Loading music categories..."}
        className="loading-state"
        visible={false}
      />
    </section>
  </main>

  <!-- Back to Top Component for improved UX and accessibility -->
  <BackToTop lang={lang} />
</Layout>

<style>
  /* ======================================
   * CSS CUSTOM PROPERTIES FOR COMPONENT
   * Enhanced with global.css variables
   * ====================================== */

  :root {
    /* Component-specific dimensions using global scale */
    --gamehome-hero-decoration-sm: var(--space-2xl); /* 48px - Small decoration */
    --gamehome-hero-decoration-md: var(--space-3xl); /* 64px - Medium decoration */
    --gamehome-hero-decoration-lg: calc(var(--space-3xl) * 2); /* 128px - Large decoration */
    
    /* Layout constraints using design system */
    --gamehome-content-max-width: calc(var(--container-md) * 0.6); /* ~460px - Content max width */
    --gamehome-search-max-width: var(--container-sm); /* 640px - Search container max width */
    
    /* Visual effects using global tokens */
    --gamehome-hero-shadow: 0 2px 4px rgba(0, 0, 0, 0.3); /* Hero text shadow */
    --gamehome-divider-height: var(--border-width-thick); /* 2px - Divider height */
    
    /* Search input specific spacing */
    --gamehome-search-icon-offset: calc(var(--space-md) + var(--icon-size-md) + var(--space-md)); /* Icon + padding space */
  }

  /* ======================================
   * GAMEHOME CONTAINER LAYOUT
   * ====================================== */

  .gamehome-container {
    width: var(--width-full);
    max-width: var(--container-xl);
    margin: 0 auto;
    padding: var(--space-lg) var(--space-md);
    min-height: 100vh;
    display: flex;
    flex-direction: column;
  }

  @media (min-width: var(--breakpoint-md)) {
    .gamehome-container {
      padding: var(--space-xl) var(--space-lg);
    }
  }

  /* ======================================
   * HERO SECTION STYLING
   * ====================================== */

  .gamehome-hero {
    position: relative;
    margin-bottom: var(--space-2xl);
    overflow: hidden;
    border-radius: var(--radius-xl);
    background: linear-gradient(
      135deg,
      var(--color-primary-900) 0%,
      var(--color-primary-700) 50%,
      var(--color-secondary-800) 100%
    );
    padding: var(--space-xl);
    box-shadow: var(--shadow-xl);
    border: var(--border-width-thin) solid var(--border-primary);
  }

  .gamehome-hero__decoration {
    position: absolute;
    inset: 0;
    opacity: 0.1;
    pointer-events: none;
  }

  .gamehome-hero__decoration-item {
    position: absolute;
    border-radius: var(--radius-full);
    background: var(--color-white);
  }

  .gamehome-hero__decoration-item--top-right {
    top: calc(-1 * var(--space-xl));
    right: calc(-1 * var(--space-xl));
    width: var(--gamehome-hero-decoration-md);
    height: var(--gamehome-hero-decoration-md);
  }

  .gamehome-hero__decoration-item--bottom-left {
    bottom: calc(-1 * var(--space-2xl));
    left: calc(-1 * var(--space-2xl));
    width: var(--gamehome-hero-decoration-lg);
    height: var(--gamehome-hero-decoration-lg);
  }

  .gamehome-hero__decoration-item--center-right {
    top: var(--percentage-half);
    right: calc(-1 * var(--space-md));
    width: var(--gamehome-hero-decoration-sm);
    height: var(--gamehome-hero-decoration-sm);
    transform: translateY(-50%);
  }

  .gamehome-hero__content {
    position: relative;
    z-index: 1;
    text-align: center;
    color: var(--color-white);
  }

  .gamehome-hero__title {
    margin-bottom: var(--space-lg);
    color: var(--color-white);
    text-shadow: var(--gamehome-hero-shadow);
  }

  .gamehome-hero__divider {
    width: var(--icon-size-xl);
    height: var(--gamehome-divider-height);
    background: var(--color-secondary-400);
    margin: var(--space-lg) auto;
    border-radius: var(--radius-full);
  }

  .gamehome-hero__description {
    color: var(--color-neutral-100);
    font-size: var(--text-xl);
    line-height: var(--leading-relaxed);
    max-width: var(--gamehome-content-max-width);
    margin: 0 auto;
  }

  /* ======================================
   * SEARCH CONTAINER
   * ====================================== */

  .search-container {
    margin-bottom: var(--space-xl);
  }

  .search-container__wrapper {
    position: relative;
    max-width: var(--gamehome-search-max-width);
    margin: 0 auto;
  }

  .search-container__icon {
    position: absolute;
    left: var(--space-md);
    top: var(--percentage-half);
    transform: translateY(-50%);
    color: var(--text-tertiary);
    pointer-events: none;
    z-index: 1;
  }

  .search-container__icon-element {
    width: var(--icon-size-md);
    height: var(--icon-size-md);
  }

  .search-container__input {
    width: var(--width-full);
    padding: var(--space-md) var(--space-md) var(--space-md) var(--gamehome-search-icon-offset);
    border: var(--border-width-thin) solid var(--border-primary);
    border-radius: var(--radius-lg);
    background-color: var(--form-bg);
    color: var(--form-text);
    font-size: var(--text-lg);
    line-height: var(--leading-normal);
    transition: all var(--transition-normal);
    box-shadow: var(--shadow-sm);
  }

  .search-container__input:focus {
    outline: var(--focus-outline);
    outline-offset: var(--focus-ring-offset);
    border-color: var(--interactive-primary);
    box-shadow: var(--shadow-md);
  }

  .search-container__input::placeholder {
    color: var(--text-tertiary);
  }

  .search-container__clear {
    position: absolute;
    right: var(--space-md);
    top: var(--percentage-half);
    transform: translateY(-50%);
    padding: var(--space-xs);
    border: none;
    background: none;
    color: var(--text-secondary);
    cursor: pointer;
    border-radius: var(--radius-sm);
    transition: color var(--transition-fast);
  }

  .search-container__clear:hover {
    color: var(--text-primary);
  }

  .search-container__clear:focus {
    outline: var(--focus-outline);
    outline-offset: var(--focus-ring-offset);
  }

  .search-container__results-info {
    text-align: center;
    margin-top: var(--space-md);
    color: var(--text-secondary);
    font-size: var(--text-base);
  }

  /* ======================================
   * GENRE GRID STYLING
   * ====================================== */

  .genre-content {
    flex-grow: 1;
  }

  .genre-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(var(--grid-min-width-md), 1fr));
    gap: var(--space-lg);
    margin-bottom: var(--space-xl);
  }

  @media (min-width: var(--breakpoint-sm)) {
    .genre-grid {
      grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
      gap: var(--space-xl);
    }
  }

  /* ======================================
   * RESPONSIVE DESIGN ENHANCEMENTS
   * ====================================== */

  @media (min-width: var(--breakpoint-lg)) {
    .gamehome-hero {
      padding: var(--space-2xl) var(--space-xl);
    }

    .gamehome-hero__title {
      font-size: var(--text-4xl);
    }

    .gamehome-hero__description {
      font-size: var(--text-2xl);
    }
  }

  /* ======================================
   * ACCESSIBILITY ENHANCEMENTS
   * ====================================== */

  @media (prefers-reduced-motion: reduce) {
    .loading-state__spinner {
      animation: none;
      border: var(--border-width-thick) solid var(--interactive-primary);
    }

    .gamehome-hero {
      background: var(--color-primary-800);
    }
  }

  @media (prefers-contrast: high) {
    .search-container__input {
      border-width: var(--border-width-thick);
    }
  }
</style>

<!-- Enhanced client-side functionality for search and filtering -->
<script>
  interface GameTranslations {
    search: {
      placeholder: string;
      showingAll: string;
      resultsFound: string;
      noResults: string;
      clear: string;
    };
    accessibility: {
      skipToContent: string;
      searchLabel: string;
    };
  }

  declare global {
    interface Window {
      gameHomeTranslations: GameTranslations;
    }
  }

  /**
   * Enhanced search functionality using modern patterns
   * Implements progressive enhancement and accessibility best practices
   */
  class GameHomeSearch {
    private searchInput: HTMLInputElement | null;
    private clearButton: HTMLButtonElement | null;
    private gridContainer: HTMLElement | null;
    private resultsInfo: HTMLElement | null;
    private allItems: NodeListOf<Element>;
    private translations: GameTranslations;

    constructor() {
      // Initialize elements with error handling
      this.searchInput = document.getElementById("filter-input") as HTMLInputElement;
      this.clearButton = document.querySelector(".search-container__clear") as HTMLButtonElement;
      this.gridContainer = document.getElementById("playlist-grid");
      this.resultsInfo = document.querySelector(".search-container__results-info");
      this.allItems = document.querySelectorAll("#playlist-grid > *");
      this.translations = window.gameHomeTranslations || this.getDefaultTranslations();

      // Only initialize if required elements exist
      if (this.searchInput && this.gridContainer) {
        this.init();
      }
    }

    private getDefaultTranslations(): GameTranslations {
      return {
        search: {
          placeholder: "Search genres...",
          showingAll: "Showing all genres",
          resultsFound: "genres found",
          noResults: "No genres found matching your search",
          clear: "Clear search"
        },
        accessibility: {
          skipToContent: "Skip to main content",
          searchLabel: "Search music genres"
        }
      };
    }

    private init(): void {
      // Add event listeners with proper binding
      this.searchInput!.addEventListener("input", this.handleSearch.bind(this));
      this.searchInput!.addEventListener("keydown", this.handleKeydown.bind(this));
      
      if (this.clearButton) {
        this.clearButton.addEventListener("click", this.clearSearch.bind(this));
      }

      // Set initial results info
      this.updateResultsInfo(this.allItems.length, "");
    }

    private handleSearch(event: Event): void {
      const target = event.target as HTMLInputElement;
      const query = target.value.toLowerCase().trim();
      
      this.filterItems(query);
      this.updateClearButton(query);
    }

    private handleKeydown(event: KeyboardEvent): void {
      if (event.key === "Escape") {
        this.clearSearch();
      }
    }

    private filterItems(query: string): void {
      let visibleCount = 0;

      this.allItems.forEach((item) => {
        const textContent = item.textContent?.toLowerCase() || "";
        const isVisible = query === "" || textContent.includes(query);
        
        if (item instanceof HTMLElement) {
          item.style.display = isVisible ? "" : "none";
          item.setAttribute("aria-hidden", (!isVisible).toString());
        }

        if (isVisible) {
          visibleCount++;
        }
      });

      this.updateResultsInfo(visibleCount, query);
    }

    private updateResultsInfo(count: number, query: string): void {
      if (!this.resultsInfo) {
        return;
      }

      let message = "";
      if (query === "") {
        message = `${this.translations.search.showingAll} (${count})`;
      } else if (count === 0) {
        message = this.translations.search.noResults;
      } else {
        message = `${count} ${this.translations.search.resultsFound}`;
      }

      this.resultsInfo.textContent = message;
    }

    private updateClearButton(query: string): void {
      if (!this.clearButton) {
        return;
      }

      if (query.length > 0) {
        this.clearButton.removeAttribute("hidden");
      } else {
        this.clearButton.setAttribute("hidden", "");
      }
    }

    private clearSearch(): void {
      if (!this.searchInput) {
        return;
      }

      this.searchInput.value = "";
      this.filterItems("");
      this.updateClearButton("");
      this.searchInput.focus();
    }
  }

  // Initialize search functionality when DOM is ready using modern approach
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => new GameHomeSearch());
  } else {
    new GameHomeSearch();
  }
</script>
