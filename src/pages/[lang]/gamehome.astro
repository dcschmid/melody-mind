---
import { error as logError } from "../../utils/logging/logger";
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import PlaylistItem from "@components/PlaylistItem.astro";
import Layout from "@layouts/Layout.astro";
import Headline from "@components/Headline.astro";
import Paragraph from "@components/Paragraph.astro";
import HeroSection from "@components/HeroSection.astro";
import { buildPageSeo } from "@utils/seo/buildPageSeo";
import type { StructuredData } from "@utils/seo/buildPageSeo";
import SearchPanel from "@components/Search/SearchPanel.astro";
import { buildCategoryItemListSchema } from "@utils/seo/seoSchema";
import { derivePublishModified, normalizeDate } from "@utils/content/dateUtils";

import EmptyState from "@components/EmptyState.astro";
import LoadingState from "@components/LoadingState.astro";
import BackToTop from "@components/Shared/BackToTop.astro";
import { loadCategoriesForLanguage } from "../../utils/category/categoryLoader";

/**
 * Static path generation for internationalization
 * Required for Astro dynamic routes to work properly
 */
export async function getStaticPaths(): Promise<{ params: { lang: string } }[]> {
  const { buildLangStaticPaths } = await import("../../utils/i18n/staticPaths");
  return buildLangStaticPaths();
}

/**
 * Enable static site generation for this page
 */
export const prerender = true;

/**
 * Language and translation setup
 * Sets the current language based on URL and loads appropriate translations
 */
const lang = String(getLangFromUrl(Astro.url));
const t = useTranslations(String(lang));

/**
 * Generates WebApplication schema for the game home page
 */
function generateGameApplicationSchema(
  title: string,
  description: string,
  currentUrl: string,
  lang: string
) {
  return {
    "@context": "https://schema.org",
    "@type": "WebApplication",
    name: `MelodyMind - ${title}`,
    description: description,
    url: currentUrl,
    applicationCategory: "GameApplication",
    applicationSubCategory: "MusicTrivia",
    operatingSystem: "Web Browser",
    genre: "Music Trivia",
    inLanguage: lang,
    creator: {
      "@type": "Organization",
      name: "MelodyMind Team",
    },
    datePublished: "2024-01-01",
    dateModified: new Date().toISOString(),
    isAccessibleForFree: true,
  };
}

/**
 * Generates ItemList schema for game categories
 */

/**
 * Generates client-side translations with fallbacks
 */
function generateClientTranslations(t: (_key: string) => string) {
  return {
    search: {
      placeholder: t("game.search.label"),
      showingAll: t("game.search.showing.all"),
      resultsFound: t("game.search.results"),
      noResults: t("game.search.no.results"),
      clear: t("game.search.clear"),
    },
    accessibility: {
      skipToContent: t("accessibility.skip.to.content"),
      searchLabel: t("game.search.label"),
    },
  };
}

// Define the category structure for the gamehome page
interface GameCategory {
  categoryUrl: string;
  headline: string;
  imageUrl: string;
  introSubline: string;
  isPlayable: boolean;
  slug: string;
  text: string;
  spotifyPlaylist: string;
  deezerPlaylist: string;
  appleMusicPlaylist: string;
  knowledgeUrl: string;
  categoryType: string;
}

// Load categories and ensure we have a valid array
let categories: GameCategory[] = [];

try {
  const result = await loadCategoriesForLanguage({
    language: lang,
    fallbackLanguage: "en",
    useAliasPath: true,
  });
  // Map loaded categories to GameCategory interface
  categories = result.categories.map((cat) => ({
    categoryUrl: cat.categoryUrl || "",
    headline: cat.headline,
    imageUrl: cat.imageUrl || "",
    introSubline: cat.introSubline || "",
    isPlayable: cat.isPlayable || false,
    slug: cat.slug,
    text: cat.text || "",
    spotifyPlaylist: "", // Not available in Category interface
    deezerPlaylist: "", // Not available in Category interface
    appleMusicPlaylist: "", // Not available in Category interface
    knowledgeUrl: "", // Not available in Category interface
    categoryType: cat.categoryType || "other",
  }));
} catch (error) {
  console.error(`Error loading categories for ${lang}:`, error);
  try {
    // Load English fallback using centralized loader to avoid dynamic runtime imports
    const fallbackResult = await loadCategoriesForLanguage({
      language: "en",
      fallbackLanguage: "en",
    });
    // Ensure compatibility: map fallback categories if necessary
    categories = fallbackResult.success
      ? fallbackResult.categories.map((cat) => ({
          categoryUrl: cat.categoryUrl || "",
          headline: cat.headline,
          imageUrl: cat.imageUrl || "",
          introSubline: cat.introSubline || "",
          isPlayable: cat.isPlayable || false,
          slug: cat.slug,
          text: cat.text || "",
          spotifyPlaylist: (cat as any).spotifyPlaylist || "",
          deezerPlaylist: (cat as any).deezerPlaylist || "",
          appleMusicPlaylist: (cat as any).appleMusicPlaylist || "",
          knowledgeUrl: (cat as any).knowledgeUrl || "",
          categoryType: cat.categoryType || "other",
        }))
      : [];
  } catch (fallbackError) {
    logError("Failed to load fallback categories", fallbackError);
    categories = [];
  }
}

// Filter categories by playability status and sort alphabetically by image name
const playableCategories = categories
  .filter((item: any) => item && item.isPlayable)
  .sort((a, b) => {
    // Extract filename from imageUrl for sorting
    const getImageName = (url: string) => {
      const filename = url.split("/").pop() || "";
      return filename.replace(/\.[^/.]+$/, ""); // Remove file extension
    };
    return getImageName(a.imageUrl).localeCompare(getImageName(b.imageUrl));
  });

const nonPlayableCategories = categories
  .filter((item: any) => item && !item.isPlayable)
  .sort((a, b) => {
    // Extract filename from imageUrl for sorting
    const getImageName = (url: string) => {
      const filename = url.split("/").pop() || "";
      return filename.replace(/\.[^/.]+$/, ""); // Remove file extension
    };
    return getImageName(a.imageUrl).localeCompare(getImageName(b.imageUrl));
  });

// Combined categories with playable ones first, sorted alphabetically by image name
const sortedCategories = [...playableCategories, ...nonPlayableCategories];

// Enhanced SEO content generation for better search visibility
const title = t("game.select");
const description = t("game.welcome");
const enrichedContent = `${title} ${description} ${t("game.genre.selection.description")} ${sortedCategories
  .map((c) => `${c.headline} ${c.introSubline} ${c.text || ""}`)
  .join(" ")}`;
// Description & keywords now handled internally by buildPageSeo; we pass enrichedParts + fallbackKeywords.
const optimizedDescription = enrichedContent.slice(0, 155); // lightweight pre-trim; final sanitization in builder
const keywordArray: string[] = [];

// Enhanced structured data for GameHub/CategoryList
const baseUrl = Astro.site?.toString() || "https://melody-mind.de";
const currentUrl = `${baseUrl}/${lang}/gamehome`;

// JSON-LD structured data for better search engine understanding
const gameApplicationSchema = generateGameApplicationSchema(
  title,
  optimizedDescription,
  currentUrl,
  lang
);
const breadcrumbs = [
  { name: t("nav.home"), url: `${baseUrl}/${lang}` },
  { name: t("game.categories.title"), url: currentUrl },
];
// Add generic category ItemList schema using unified builder
const categoryItemListSchema = buildCategoryItemListSchema({
  categories: sortedCategories.map((c) => ({
    slug: c.slug,
    title: c.headline,
    description: c.introSubline,
    image: c.imageUrl,
  })),
  baseUrl,
  lang,
  name: "Game Categories",
  description: "All music trivia game categories",
  pathPrefix: "gamehome",
  limit: 60,
});
const structuredDataExtra: StructuredData[] = [
  gameApplicationSchema,
  categoryItemListSchema,
].filter(Boolean) as StructuredData[];

// Derive publish/modified dates (placeholder logic until category dates exist)
const earliestCatDate = normalizeDate("2024-01-01");
const pm = derivePublishModified(earliestCatDate, new Date());
const publishDate = pm.publishDate || new Date("2024-01-01");
const modifiedDate = pm.modifiedDate || new Date();

// Build unified pageSeo object
const pageSeo = buildPageSeo({
  title: title || "Game Categories",
  description: optimizedDescription,
  url: currentUrl,
  contentKind: "generic",
  breadcrumbs,
  publishDate,
  modifiedDate,
  enrichedParts: [title, description, ...sortedCategories.slice(0, 25).map((c) => c.headline)],
  fallbackKeywords: keywordArray, // empty â€“ builder derives keywords from enriched content
  keywordLimit: 28,
  maxDescription: 155,
  structuredData: structuredDataExtra,
  index: true,
  follow: true,
  autoSocialImage: false,
});

// Prepare fallback text for empty states
const emptyCategoriesHeadline = t("game.categories.empty.headline");
const emptyCategoriesText = t("game.categories.empty.text");

// Client-side translations for enhanced interactivity
const clientTranslations = generateClientTranslations(t);
---

<!-- OG image: game overview -->
<Layout {pageSeo} {breadcrumbs}>
  <Fragment slot="head"></Fragment>

  <!-- Make translations available for JavaScript functionality -->
  <script is:inline define:vars={{ clientTranslations }}>
    window.gameHomeTranslations = clientTranslations;
  </script>

  <main
    id="main-content"
    class="style paint mx-auto flex min-h-screen w-full max-w-7xl flex-col p-4 contain-layout sm:p-3 md:p-6"
    role="main"
    aria-labelledby="welcome-heading"
  >
    <!-- Unified HeroSection usage -->
    <HeroSection
      title={t("game.welcome")}
      subtitle={t("game.select")}
      headingLevel="h1"
      id="welcome-heading"
      icon="ðŸŽµ"
      spacing="md"
    >
      <SearchPanel
        slot="secondary"
        idBase="gamehome-search"
        label={t("game.search.label")}
        placeholder={t("game.search.placeholder") || t("game.search.label")}
        ariaControls="playlist-grid"
        size="lg"
      />
      <Paragraph className="sr-only">
        {t("game.genre.selection.description")}
      </Paragraph>
    </HeroSection>

    <section class="style flex-grow contain-layout" aria-labelledby="playlist-heading">
      <!-- Enhanced genre grid with semantic markup -->
      <div class="style flex-grow contain-layout">
        <Headline level="h2" textSize="base" className="sr-only">
          {t("game.categories.title")}
        </Headline>

        {
          categories && categories.length > 0 ? (
            <>
              {/* Simple Grid - All Categories Sorted Alphabetically */}
              <div
                class="style paint mb-8 grid grid-cols-1 gap-4 contain-layout sm:mb-6 sm:gap-3 md:gap-6 lg:gap-8"
                style="grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));"
                role="list"
                aria-label={t("game.genre.list")}
                aria-live="polite"
                itemscope
                itemtype="https://schema.org/ItemList"
              >
                {sortedCategories.map((category, index) => (
                  <div class="playlist-item" itemscope itemtype="https://schema.org/ListItem">
                    <meta itemprop="position" content={String(index + 1)} />
                    <div itemscope itemprop="item" itemtype="https://schema.org/DefinedTerm">
                      <meta itemprop="name" content={category.headline} />
                      <meta
                        itemprop="description"
                        content={category.introSubline || category.text || category.headline}
                      />
                      <meta itemprop="inLanguage" content={lang} />
                      <PlaylistItem
                        headline={category.headline}
                        subheadline={category.introSubline}
                        image={category.imageUrl}
                        imageAlt={`${category.headline} music category`}
                        href={category.categoryUrl ? `/${lang}${category.categoryUrl}` : "#"}
                        isDisabled={!category.isPlayable}
                      />
                    </div>
                  </div>
                ))}
              </div>
            </>
          ) : (
            <div
              class="style paint mb-8 grid grid-cols-1 gap-4 contain-layout sm:mb-6 sm:gap-3 md:gap-6 lg:gap-8"
              style="grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));"
              role="list"
              aria-label={t("game.genre.list")}
              aria-live="polite"
              itemscope
              itemtype="https://schema.org/ItemList"
            >
              <EmptyState
                icon="music-note"
                title={emptyCategoriesHeadline}
                description={emptyCategoriesText}
                className="col-span-full"
              />
            </div>
          )
        }
      </div>

      <!-- Loading state for better UX -->
      <LoadingState text={t("game.categories.loading")} className="hidden" visible={false} />
    </section>
  </main>

  <!-- Back to Top Component for improved UX and accessibility -->
  <BackToTop {lang} />

  <script>
    import { initSearchPanel } from "@components/Search/initSearchPanel";
    (function (): void {
      function start(): void {
        initSearchPanel({
          idBase: "gamehome-search",
          itemSelector: ".playlist-item",
          debounceMs: 150,
        });
      }
      if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", start);
      } else {
        start();
      }
    })();
  </script>
</Layout>
