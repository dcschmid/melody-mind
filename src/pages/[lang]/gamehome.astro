---
import { When } from "@astropub/flow";
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import PlaylistItem from "@components/PlaylistItem.astro";
import Layout from "@layouts/Layout.astro";
import IntroText from "@components/Shared/IntroText.astro";

// Language settings
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Load categories based on language
let categoriesList = [];
try {
  // Versuche erst mit Alias zu laden
  categoriesList = await import(`@json/${lang}_categories.json`)
    .then((module) => module.default)
    .catch(async () => {
      // Als Fallback versuche relativen Pfad
      console.log(
        `Versuche relativen Pfad für ${lang}_categories.json zu laden`,
      );
      return import(`../../json/${lang}_categories.json`)
        .then((module) => module.default)
        .catch((err) => {
          console.error(`Konnte ${lang}_categories.json nicht laden:`, err);
          return [];
        });
    });
} catch (error) {
  console.error(`Fehler beim Laden der Kategorien für ${lang}:`, error);
}

// Stelle sicher, dass categoriesList ein Array ist
if (!Array.isArray(categoriesList)) {
  console.warn(
    "Kategorien wurden nicht als Array geladen, verwende leeres Array",
  );
  categoriesList = [];
}

/**
 * Set a default username since we don't have login functionality
 */
const username = "Musikfan";

/** Define the interface for the Category type */
interface Category {
  isPlayable: boolean;
  headline: string;
  categoryUrl?: string;
  imageUrl: string;
  introSubline: string;
  slug: string;
  text: string;
}

/**
 * This function filters the categoriesList array to only include items that are playable.
 * It then randomly selects one of those items and returns it.
 */
const getSelectedPlayableItem = (): Category[] => {
  if (!Array.isArray(categoriesList)) return [];
  return categoriesList.filter(
    (item): item is Category & { categoryUrl: string } => {
      return (
        typeof item === "object" &&
        item !== null &&
        "isPlayable" in item &&
        "headline" in item &&
        "imageUrl" in item &&
        "introSubline" in item &&
        "slug" in item &&
        "text" in item &&
        "categoryUrl" in item &&
        item.isPlayable &&
        Boolean(item.categoryUrl)
      );
    },
  );
};

/**
 * This function filters the categoriesList array to only include items that are not playable.
 * It then shuffles the array and limits it to a maximum of 5 items.
 */
const getNonPlayableItems = () => {
  return categoriesList.filter((item: any) => !item.isPlayable);
};

const categories = [...getSelectedPlayableItem(), ...getNonPlayableItems()];

// Neue Übersetzungs-Keys für leere Kategorien
const emptyCategoriesHeadline = t("game.categories.empty.headline") || "Keine Genres gefunden";
const emptyCategoriesText = t("game.categories.empty.text") || "Es wurden leider keine Kategorien gefunden. Bitte versuche es später erneut.";
---

<Layout title={t("game.select")}>
  <!-- Main content area with improved contrast and spacing -->
  <main 
    class="w-full max-w-4xl mx-auto p-6 md:p-8 rounded-lg bg-zinc-800 shadow-xl"
    id="main-content"
  >
    <IntroText
      headline={`${t("game.welcome")} ${username}`}
      subline={t("game.select")}
      headingId="welcome-heading"
    />

    <!-- Genre selection section with better visibility -->
    <section 
      class="mt-8"
      aria-labelledby="playlist-heading"
    >
      <h2 id="playlist-heading" class="sr-only">{t("game.genre.list")}</h2>

      <!-- Search input with improved accessibility and contrast -->
      <div class="my-8 w-full">
        <label for="filter-input" class="sr-only">
          {t("game.search.label")}
        </label>
        <input
          class="w-full max-w-4xl py-4 px-5 border-2 border-zinc-600 rounded-lg
                 bg-zinc-700 text-zinc-50 text-base leading-relaxed placeholder-zinc-400
                 focus:outline-none focus:border-sky-400 focus:ring-2 focus:ring-sky-400 
                 focus:ring-opacity-50"
          type="search"
          id="filter-input"
          placeholder={t("game.search.label")}
          aria-label={t("game.search.label")}
          aria-controls="playlist-grid"
          aria-describedby="search-description"
          autocomplete="off"
          spellcheck="false"
        />
        <span id="search-description" class="sr-only">
          {t("game.search.description")}
        </span>
      </div>

      <!-- Genre grid with proper spacing and accessibility -->
      <div
        id="playlist-grid"
        class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 md:gap-8
               w-full max-w-5xl mx-auto my-8 min-h-[200px]"
        role="list"
        aria-label={t("game.genre.list")}
        aria-live="polite"
      >
        {categories && categories.length > 0 ? (
          categories.map((item) => (
            <li class="h-full list-none">
              {item.isPlayable && (
                <a
                  href={`/${lang}${item.categoryUrl}`}
                  class="block h-full overflow-hidden rounded-lg bg-zinc-700 
                         border-2 border-transparent transition-all duration-300
                         hover:-translate-y-1 hover:shadow-lg
                         focus:outline-none focus:border-sky-400 focus:ring-2 
                         focus:ring-sky-400 focus:ring-opacity-50"
                  aria-label={
                    item.headline + " " + t("game.genre.play.label")
                  }
                >
                  <PlaylistItem
                    headline={item.headline}
                    image={item.imageUrl}
                    imageAlt={t("game.genre.image") + " " + item.headline}
                  />
                </a>
              )}
            </li>
          ))
        ) : (
          <div class="col-span-full py-12 px-6 bg-zinc-700 rounded-lg text-center">
            <h3 class="text-xl font-bold text-zinc-50 mb-3">
              {emptyCategoriesHeadline}
            </h3>
            <p class="text-zinc-200">
              {emptyCategoriesText}
            </p>
          </div>
        )}
      </div>
    </section>
  </main>
</Layout>

<script>
  import { ui } from "../../i18n/ui";
  import { getLangFromUrl } from "@utils/i18n";

  const lang = getLangFromUrl(new URL(window.location.href));
  const translations = {
    noResults: ui[lang]?.["game.no.results"] || "No results found",
    notAvailable: ui[lang]?.["game.not.available"] || "Not available",
  };

  /**
   * Debounces a function to limit its execution rate.
   * @returns {Function} A debounced version of the input function
   */
  function debounce<T extends (...args: any[]) => void>(
    func: T,
    wait: number,
  ): (...args: Parameters<T>) => void {
    let timeout: ReturnType<typeof setTimeout>;
    return (...args: Parameters<T>) => {
      clearTimeout(timeout);
      timeout = setTimeout(() => func(...args), wait);
    };
  }

  const filterInput = document.getElementById(
    "filter-input",
  ) as HTMLInputElement;
  const playlistGrid = document.querySelector("#playlist-grid");

  /**
   * Debounced filter function
   */
  const debouncedFilter = debounce(filterPlaylists, 300);
  filterInput?.addEventListener("input", debouncedFilter);

  /**
   * Cache for better performance
   */
  const playlistItemsCache = new Map<HTMLElement, string>();

  /**
   * Filters the playlist items based on the search query and updates their visibility.
   */
  function filterPlaylists(_event: Event) {
    if (!filterInput || !playlistGrid) return;

    const query = filterInput.value.toLowerCase().trim();
    const playlistItems =
      document.querySelectorAll<HTMLElement>("#playlist-grid > li");
    let hasResults = false;

    playlistItems.forEach((item) => {
      let headlineText = playlistItemsCache.get(item);
      if (!headlineText) {
        headlineText =
          item.querySelector(".headline")?.textContent?.toLowerCase() ?? "";
        playlistItemsCache.set(item, headlineText);
      }

      const isVisible = headlineText.includes(query);
      item.style.display = isVisible ? "" : "none";
      if (isVisible) hasResults = true;
    });

    updateNoResultsMessage(hasResults);
  }

  /**
   * Updates the visibility of playlist items based on the search query and shows/hides
   * a "no results" message accordingly.
   */
  function updateNoResultsMessage(hasResults: boolean) {
    let noResultsMsg = playlistGrid?.querySelector(".no-results");
    if (!hasResults) {
      if (!noResultsMsg) {
        noResultsMsg = document.createElement("p");
        noResultsMsg.className = "col-span-full py-8 px-6 bg-zinc-700 rounded-lg text-zinc-50 text-center font-medium no-results";
        noResultsMsg.setAttribute("role", "status");
        noResultsMsg.textContent = translations.noResults;
        playlistGrid?.appendChild(noResultsMsg);
      }
    } else {
      noResultsMsg?.remove();
    }
  }

  // Set data-unavailable-text attribute for disabled items
  document.querySelectorAll('[aria-disabled="true"]').forEach((item) => {
    item.setAttribute("data-unavailable-text", translations.notAvailable);
  });
</script>

<style>
  /* High Contrast Mode Support */
  @media (forced-colors: active) {
    #playlist-grid a {
      border: 2px solid ButtonText;
    }
  }

  /* Print Styles */
  @media print {
    #filter-input {
      display: none;
    }

    #playlist-grid {
      gap: 1rem;
    }

    #playlist-grid a {
      break-inside: avoid;
      page-break-inside: avoid;
    }
  }

  /* Disabled Item Styling */
  [aria-disabled="true"] {
    cursor: not-allowed;
    opacity: 0.85;
    background-color: var(--secondary-color);
    position: relative;
  }

  [aria-disabled="true"]::after {
    content: attr(data-unavailable-text);
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    padding: 1em 1.5em;
    border-radius: 0.5rem;
    font-size: 1rem;
    font-weight: 600;
    color: #fff;
    background: rgba(0, 0, 0, 0.9);
  }
</style>
