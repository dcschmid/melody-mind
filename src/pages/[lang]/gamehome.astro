---
import { error as logError } from "../../utils/logging/logger";
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import PlaylistItem from "@components/PlaylistItem.astro";
import Layout from "@layouts/Layout.astro";
import Headline from "@components/Headline.astro";
import Paragraph from "@components/Paragraph.astro";
import { extractKeywords, generateMetaDescription } from "@utils/seo";
import CategoryFilter from "@components/CategoryFilter.astro";

import EmptyState from "@components/EmptyState.astro";
import LoadingState from "@components/LoadingState.astro";
import BackToTop from "@components/Shared/BackToTop.astro";
import { loadCategoriesForLanguage } from "../../utils/category/categoryLoadingUtils";
import type { Category } from "../../utils/category/categoryLoadingUtils";

/**
 * Static path generation for internationalization
 * Required for Astro dynamic routes to work properly
 */
export async function getStaticPaths(): Promise<{ params: { lang: string } }[]> {
  const supportedLanguages = [
    "de",
    "en",
    "es",
    "fr",
    "it",
    "pt",
    "da",
    "nl",
    "sv",
    "fi",
    "cn",
    "ru",
    "jp",
    "uk",
  ] as const;

  return supportedLanguages.map((lang) => ({
    params: { lang },
  }));
}

/**
 * Enable static site generation for this page
 */
export const prerender = true;

/**
 * Language and translation setup
 * Sets the current language based on URL and loads appropriate translations
 */
const lang = String(getLangFromUrl(Astro.url));
const t = useTranslations(String(lang));

/**
 * Generates WebApplication schema for the game home page
 */
function generateGameApplicationSchema(
  title: string,
  description: string,
  currentUrl: string,
  lang: string
) {
  return {
    "@context": "https://schema.org",
    "@type": "WebApplication",
    name: `MelodyMind - ${title}`,
    description: description,
    url: currentUrl,
    applicationCategory: "GameApplication",
    applicationSubCategory: "MusicTrivia",
    operatingSystem: "Web Browser",
    genre: "Music Trivia",
    inLanguage: lang,
    creator: {
      "@type": "Organization",
      name: "MelodyMind Team",
    },
    datePublished: "2024-01-01",
    dateModified: new Date().toISOString(),
    isAccessibleForFree: true,
  };
}

/**
 * Generates ItemList schema for game categories
 */
function generateCategoryListSchema(baseUrl: string, lang: string, playableCategories: Category[]) {
  return {
    "@context": "https://schema.org",
    "@type": "ItemList",
    name: "Music Game Categories",
    description: "Available music trivia categories in MelodyMind",
    numberOfItems: playableCategories.length,
    itemListElement: playableCategories.slice(0, 10).map((category, index) => ({
      "@type": "ListItem",
      position: index + 1,
      item: {
        "@type": "Game",
        name: category.headline,
        description: category.introSubline,
        url: `${baseUrl}/${lang}${category.categoryUrl}`,
        genre: "Music Trivia",
        applicationCategory: "Game",
      },
    })),
  };
}

/**
 * Generates client-side translations with fallbacks
 */
function generateClientTranslations(t: (_key: string) => string) {
  return {
    search: {
      placeholder: t("game.search.label"),
      showingAll: t("game.search.showing.all"),
      resultsFound: t("game.search.results"),
      noResults: t("game.search.no.results"),
      clear: t("game.search.clear"),
    },
    accessibility: {
      skipToContent: t("accessibility.skip.to.content"),
      searchLabel: t("game.search.label"),
    },
  };
}

// Define the category structure for the gamehome page
interface GameCategory {
  categoryUrl: string;
  headline: string;
  imageUrl: string;
  introSubline: string;
  isPlayable: boolean;
  slug: string;
  text: string;
  spotifyPlaylist: string;
  deezerPlaylist: string;
  appleMusicPlaylist: string;
  knowledgeUrl: string;
  categoryType: string;
}

// Load categories and ensure we have a valid array
let categories: GameCategory[] = [];

try {
  const result = await loadCategoriesForLanguage({
    language: lang,
    fallbackLanguage: "en",
    useAliasPath: true,
  });
  // Map loaded categories to GameCategory interface
  categories = result.categories.map((cat) => ({
    categoryUrl: cat.categoryUrl || "",
    headline: cat.headline,
    imageUrl: cat.imageUrl || "",
    introSubline: cat.introSubline || "",
    isPlayable: cat.isPlayable || false,
    slug: cat.slug,
    text: cat.text || "",
    spotifyPlaylist: "", // Not available in Category interface
    deezerPlaylist: "", // Not available in Category interface
    appleMusicPlaylist: "", // Not available in Category interface
    knowledgeUrl: "", // Not available in Category interface
    categoryType: cat.categoryType || "other",
  }));
} catch (error) {
  console.error(`Error loading categories for ${lang}:`, error);
  try {
    // Load English fallback using same pattern
    categories = await import(`@json/en_categories.json`)
      .then((module) => module.default)
      .catch(async () => {
        return await import(`../../json/en_categories.json`)
          .then((module) => module.default)
          .catch((_err) => {
            return [];
          });
      });
  } catch (fallbackError) {
    logError("Failed to load fallback categories", fallbackError);
    categories = [];
  }
}

// Filter categories by playability status
const playableCategories = categories.filter((item: any) => item && item.isPlayable);
const nonPlayableCategories = categories.filter((item: any) => item && !item.isPlayable);

// Sort categories by type and playability
const sortedPlayableCategories = sortCategoriesByType(playableCategories);
const sortedNonPlayableCategories = sortCategoriesByType(nonPlayableCategories);

// Helper function to sort categories by type
function sortCategoriesByType(categories: any[]) {
  return categories.sort((a, b) => {
    // Sort by type first
    if (a.type !== b.type) {
      return a.type.localeCompare(b.type);
    }
    // Then by headline
    return a.headline.localeCompare(b.headline);
  });
}

// Combined categories with playable ones first, sorted by type
const sortedCategories = [...sortedPlayableCategories, ...sortedNonPlayableCategories];

// Enhanced SEO content generation for better search visibility
const title = t("game.select");
const description = t("game.welcome");

// Create rich SEO content combining category information
const enrichedContent = `${title} ${description} ${t("game.genre.selection.description")} ${sortedCategories.map((c) => `${c.headline} ${c.introSubline} ${c.text || ""}`).join(" ")}`;

// Generate optimized meta description and keywords using enhanced content
const optimizedDescription = generateMetaDescription(enrichedContent, 158); // Leave room for ellipsis
const seoKeywords = extractKeywords(enrichedContent, 12, lang) || t("meta.keywords");

// Create category-specific keywords for better targeting
const categoryNames = sortedCategories.map((c) => c.headline.toLowerCase()).join(", ");
const combinedKeywords = `${seoKeywords}, ${categoryNames}, ${t("meta.keywords")}`.substring(
  0,
  255
);

// Enhanced structured data for GameHub/CategoryList
const baseUrl = Astro.site?.toString() || "https://melody-mind.de";
const currentUrl = `${baseUrl}/${lang}/gamehome`;

// JSON-LD structured data for better search engine understanding
const gameApplicationSchema = generateGameApplicationSchema(
  title,
  optimizedDescription,
  currentUrl,
  lang
);

// ItemList schema for game categories
const categoryListSchema = generateCategoryListSchema(baseUrl, lang, playableCategories);

// Additional structured data parameters for enhanced SEO
const pageType = "website";
const publishDate = new Date("2024-01-01");
const modifiedDate = new Date();

// Prepare fallback text for empty states
const emptyCategoriesHeadline = t("game.categories.empty.headline");
const emptyCategoriesText = t("game.categories.empty.text");

// Client-side translations for enhanced interactivity
const clientTranslations = generateClientTranslations(t);
---

<Layout
  {title}
  description={optimizedDescription}
  keywords={combinedKeywords}
  image={`/og-images/social-share-gamehome-${String(lang)}.jpg`}
  type={pageType}
  {publishDate}
  {modifiedDate}
>
  <!-- Enhanced structured data for SEO -->
  <Fragment slot="head">
    <script type="application/ld+json" set:html={JSON.stringify(gameApplicationSchema)} />
    <script type="application/ld+json" set:html={JSON.stringify(categoryListSchema)} />

    <!-- Additional SEO meta tags -->
    <meta name="robots" content="index, follow, max-image-preview:large" />
    <meta name="googlebot" content="index, follow" />
    <link rel="canonical" href={currentUrl} />

    <!-- Enhanced OpenGraph tags for social sharing -->
    <meta property="og:type" content="website" />
    <meta property="og:locale" content={`${lang}_${lang.toUpperCase()}`} />
    <meta property="article:section" content="Gaming" />
    <meta property="article:tag" content="Music Trivia" />
    <meta property="article:tag" content="Online Game" />
    <meta property="article:tag" content="Music Knowledge" />
  </Fragment>

  <!-- Make translations available for JavaScript functionality -->
  <script is:inline define:vars={{ clientTranslations }}>
    window.gameHomeTranslations = clientTranslations;
  </script>

  <main
    id="main-content"
    class="style paint mx-auto flex min-h-screen w-full max-w-7xl flex-col p-4 contain-layout sm:p-3 md:p-6"
    role="main"
    aria-labelledby="welcome-heading"
  >
    <!-- Hero section with improved semantics and accessibility -->
    <header
      class="style paint relative mb-6 overflow-hidden rounded-xl border border-purple-600 bg-gradient-to-br from-purple-900 via-purple-700 to-blue-800 p-4 shadow-2xl contain-layout sm:mb-4 sm:p-3 md:mb-8 md:p-6"
      aria-labelledby="welcome-heading"
    >
      <!-- Decorative background elements with aria-hidden -->
      <div
        class="style paint pointer-events-none absolute inset-0 opacity-10 contain-layout"
        aria-hidden="true"
      >
        <div class="absolute -top-8 -right-8 h-24 w-24 rounded-full bg-white"></div>
        <div class="absolute -bottom-8 -left-8 h-48 w-48 rounded-full bg-white"></div>
        <div
          class="absolute top-1/2 -right-4 h-16 w-16 -translate-y-1/2 transform rounded-full bg-white"
        >
        </div>
      </div>

      <div class="style relative z-10 w-full text-center text-white contain-layout">
        <Headline level="h1" textSize="3xl" textAlign="center">
          {t("game.welcome")}
        </Headline>
        <div class="style paint mx-auto my-8 h-1 w-12 rounded-full bg-blue-400 contain-layout">
        </div>
        <Paragraph textSize="lg" textAlign="center">
          {t("game.select")}
        </Paragraph>
        <!-- Additional descriptive content for SEO -->
        <Paragraph className="sr-only">
          {t("game.genre.selection.description")}
        </Paragraph>
      </div>
    </header>

    <section class="style flex-grow contain-layout" aria-labelledby="playlist-heading">
      <!-- Category Filter Dropdown -->
      <CategoryFilter
        categories={[
          { type: "decade", title: t("game.filter.decades") || "Decades", icon: "📅" },
          { type: "female", title: t("game.filter.female") || "Female Artists", icon: "👩‍🎤" },
          {
            type: "classic-rock",
            title: t("game.filter.classic-rock") || "Classic Rock & Hard Rock",
            icon: "🎸",
          },
          {
            type: "metal-classic",
            title: t("game.filter.metal-classic") || "Metal – Klassiker",
            icon: "⚡",
          },
          {
            type: "metal-modern",
            title: t("game.filter.metal-modern") || "Modern Metal",
            icon: "🔥",
          },
          {
            type: "metal-avantgarde",
            title: t("game.filter.metal-avantgarde") || "Avantgarde & Extreme Metal",
            icon: "🎭",
          },
          {
            type: "mainstream-pop",
            title: t("game.filter.mainstream-pop") || "Mainstream Pop",
            icon: "🎤",
          },
          {
            type: "indie-alternative",
            title: t("game.filter.indie-alternative") || "Indie & Alternative",
            icon: "🎶",
          },
          {
            type: "global-pop",
            title: t("game.filter.global-pop") || "Global Pop Scenes",
            icon: "🌏",
          },
          {
            type: "jazz-soul-funk",
            title: t("game.filter.jazz-soul-funk") || "Jazz, Soul & Funk",
            icon: "🎷",
          },
          {
            type: "hip-hop-rap",
            title: t("game.filter.hip-hop-rap") || "Hip Hop & Rap",
            icon: "🎤",
          },
          {
            type: "house-techno",
            title: t("game.filter.house-techno") || "House & Techno",
            icon: "🎛️",
          },
          { type: "club-sounds", title: t("game.filter.club-sounds") || "Club Sounds", icon: "🎚️" },
          {
            type: "breaks-experimental",
            title: t("game.filter.breaks-experimental") || "Breaks & Experimental",
            icon: "🌀",
          },
          { type: "latin-vibes", title: t("game.filter.latin-vibes") || "Latin Vibes", icon: "🎺" },
          {
            type: "caribbean-afro",
            title: t("game.filter.caribbean-afro") || "Caribbean & Afro",
            icon: "🌴",
          },
          {
            type: "folk-regional",
            title: t("game.filter.folk-regional") || "Folk & Regional",
            icon: "🪕",
          },
          {
            type: "classical-orchestral",
            title: t("game.filter.classical-orchestral") || "Classical & Orchestral",
            icon: "🎼",
          },
          {
            type: "countries-regional",
            title: t("game.filter.countries-regional") || "Countries & Regional",
            icon: "🌍",
          },
          {
            type: "emotional",
            title: t("game.filter.emotional") || "Emotional Genres",
            icon: "💫",
          },
          { type: "seasonal", title: t("game.filter.seasonal") || "Seasonal Genres", icon: "❄️" },
          {
            type: "situational",
            title: t("game.filter.situational") || "Situational & Activity-Based",
            icon: "🎉",
          },
          { type: "other", title: t("game.filter.other") || "Other Categories", icon: "📚" },
        ]}
        selectedValue="all"
      />

      <!-- Enhanced genre grid with semantic markup -->
      <div class="style flex-grow contain-layout">
        <Headline level="h2" textSize="base" className="sr-only">
          {t("game.categories.title")}
        </Headline>

        {
          categories && categories.length > 0 ? (
            <>
              {/* Dynamic Category Groups */}
              {(() => {
                const categoryGroups = [
                  { type: "decade", title: t("game.categories.decades") || "Decades", icon: "📅" },
                  {
                    type: "female",
                    title: t("game.categories.female") || "Female Artists",
                    icon: "👩‍🎤",
                  },
                  {
                    type: "classic-rock",
                    title: t("game.filter.classic-rock") || "Classic Rock & Hard Rock",
                    icon: "🎸",
                  },
                  {
                    type: "metal-classic",
                    title: t("game.filter.metal-classic") || "Metal – Classics",
                    icon: "⚡",
                  },
                  {
                    type: "metal-modern",
                    title: t("game.filter.metal-modern") || "Modern Metal",
                    icon: "🔥",
                  },
                  {
                    type: "metal-avantgarde",
                    title: t("game.filter.metal-avantgarde") || "Avantgarde & Extreme Metal",
                    icon: "🎭",
                  },
                  {
                    type: "mainstream-pop",
                    title: t("game.filter.mainstream-pop") || "Mainstream Pop",
                    icon: "🎤",
                  },
                  {
                    type: "indie-alternative",
                    title: t("game.filter.indie-alternative") || "Indie & Alternative",
                    icon: "🎶",
                  },
                  {
                    type: "global-pop",
                    title: t("game.filter.global-pop") || "Global Pop Scenes",
                    icon: "🌏",
                  },
                  {
                    type: "jazz-soul-funk",
                    title: t("game.filter.jazz-soul-funk") || "Jazz, Soul & Funk",
                    icon: "🎷",
                  },
                  {
                    type: "hip-hop-rap",
                    title: t("game.filter.hip-hop-rap") || "Hip Hop & Rap",
                    icon: "🎤",
                  },
                  {
                    type: "house-techno",
                    title: t("game.filter.house-techno") || "House & Techno",
                    icon: "🎛️",
                  },
                  {
                    type: "club-sounds",
                    title: t("game.filter.club-sounds") || "Club Sounds",
                    icon: "🎚️",
                  },
                  {
                    type: "breaks-experimental",
                    title: t("game.filter.breaks-experimental") || "Breaks & Experimental",
                    icon: "🌀",
                  },
                  {
                    type: "latin-vibes",
                    title: t("game.filter.latin-vibes") || "Latin Vibes",
                    icon: "🎺",
                  },
                  {
                    type: "caribbean-afro",
                    title: t("game.filter.caribbean-afro") || "Caribbean & Afro",
                    icon: "🌴",
                  },
                  {
                    type: "folk-regional",
                    title: t("game.filter.folk-regional") || "Folk & Regional",
                    icon: "🪕",
                  },
                  {
                    type: "classical-orchestral",
                    title: t("game.filter.classical-orchestral") || "Classical & Orchestral",
                    icon: "🎼",
                  },
                  {
                    type: "countries-regional",
                    title: t("game.filter.countries-regional") || "Countries & Regional",
                    icon: "🌍",
                  },
                  {
                    type: "emotional",
                    title: t("game.filter.emotional") || "Emotional Genres",
                    icon: "💫",
                  },
                  {
                    type: "seasonal",
                    title: t("game.filter.seasonal") || "Seasonal Genres",
                    icon: "❄️",
                  },
                  {
                    type: "situational",
                    title: t("game.filter.situational") || "Situational & Activity-Based",
                    icon: "🎉",
                  },
                  {
                    type: "other",
                    title: t("game.categories.other") || "Other Categories",
                    icon: "📚",
                  },
                ];

                return categoryGroups.map((group) => {
                  const groupCategories = sortedCategories.filter(
                    (cat) => cat.categoryType === group.type
                  );
                  if (groupCategories.length === 0) {
                    return null;
                  }

                  return (
                    <div class="mb-8" data-category-type={group.type}>
                      <h3 class="mb-6 rounded-lg border border-purple-500/30 bg-gray-800/20 bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text px-4 py-2 text-center text-2xl font-bold text-transparent text-white backdrop-blur-sm md:text-left md:text-3xl">
                        {group.icon || "🎵"} {group.title}
                      </h3>
                      <div
                        class="style paint mb-8 grid grid-cols-1 gap-4 contain-layout sm:mb-6 sm:gap-3 md:gap-6 lg:gap-8"
                        style="grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));"
                        role="list"
                        aria-label={t("game.genre.list")}
                        aria-live="polite"
                        itemscope
                        itemtype="https://schema.org/ItemList"
                      >
                        {groupCategories.map((category) => (
                          <PlaylistItem
                            headline={category.headline}
                            subheadline={category.introSubline}
                            image={category.imageUrl}
                            imageAlt={`${category.headline} music category`}
                            href={category.categoryUrl ? `/${lang}${category.categoryUrl}` : "#"}
                            isDisabled={!category.isPlayable}
                          />
                        ))}
                      </div>
                    </div>
                  );
                });
              })()}
            </>
          ) : (
            <div
              class="style paint mb-8 grid grid-cols-1 gap-4 contain-layout sm:mb-6 sm:gap-3 md:gap-6 lg:gap-8"
              style="grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));"
              role="list"
              aria-label={t("game.genre.list")}
              aria-live="polite"
              itemscope
              itemtype="https://schema.org/ItemList"
            >
              <EmptyState
                icon="music-note"
                title={emptyCategoriesHeadline}
                description={emptyCategoriesText}
                className="col-span-full"
              />
            </div>
          )
        }
      </div>

      <!-- Loading state for better UX -->
      <LoadingState text={t("game.categories.loading")} className="hidden" visible={false} />
    </section>
  </main>

  <!-- Back to Top Component for improved UX and accessibility -->
  <BackToTop {lang} />
</Layout>
