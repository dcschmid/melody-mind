---
/**
 * MelodyMind Homepage Component
 *
 * This component renders the main landing page of the MelodyMind app.
 * It implements WCAG AAA (7:1 contrast ratio) accessibility standards
 * and uses performance optimizations for fast loading and rendering.
 *
 * @author MelodyMind Team
 * @lastModified 2025-04-23
 */
import Layout from "@layouts/Layout.astro";
import { Image } from "astro:assets";
import { getLangFromUrl, useTranslations, getRelativeLocaleUrl } from "@utils/i18n";
import { extractKeywords, generateMetaDescription } from "@utils/seo";
import Headline from "@components/Headline.astro";
import Paragraph from "@components/Paragraph.astro";
import ButtonLink from "@components/ButtonLink.astro";

// Extract language from URL and set up translations
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(String(lang));

/**
 * Dynamic redirect based on browser language preference
 * Ensures users land on their preferred language version
 */
if (Astro.request.method === "GET" && !Astro.params.lang) {
  return Astro.redirect(getRelativeLocaleUrl(Astro.preferredLocale || "en", "/"));
}

// Basic page content setup
const title = t("login.welcome");
const description = t("login.description");

/**
 * Enhanced SEO content generation
 * Combines various text elements for better keyword density and relevance
 */
const pageContent = `${title} ${description} ${t("index.welcome.footnote")}`;

// Generate optimized meta description and keyword set
const optimizedDescription = generateMetaDescription(pageContent);
const keywords = extractKeywords(pageContent) || t("meta.keywords");

// Structured data parameters for enhanced SEO
const pageType = "website";
const publishDate = new Date("2024-01-01");
const modifiedDate = new Date();

/**
 * Define main logo image optimization parameters
 * This improves performance by loading appropriately sized images
 */
const imageWidth = 600;
const imageHeight = 600;
---

<Layout
  {title}
  description={optimizedDescription}
  {keywords}
  image={`/og-images/social-share-home-${String(lang)}.jpg`}
  type={pageType}
  {publishDate}
  {modifiedDate}
>
  <main id="main-content" class="main-content" tabindex="-1">
    <div class="content-container">
      <div class="content-wrapper">
        {/* Logo with comprehensive image optimization and accessibility */}
        <div class="logo-container" aria-hidden="true">
          <Image
            src="/melody-mind.png"
            width={imageWidth}
            height={imageHeight}
            alt="Melody Mind Logo - Music Quiz App Logo"
            loading="eager"
            class="logo-image"
            fetchpriority="high"
          />
        </div>

        {/* Semantic heading with proper hierarchy */}
        <Headline level="h1" {title} size="4xl" />

        {/* Description with enhanced contrast for AAA compliance */}
        <Paragraph align="center" textSize="2xl">
          {description}
        </Paragraph>

        {/* Accessible button container with increased touch targets */}
        <div class="button-container">
          <ButtonLink href={`/${String(lang)}/gamehome`} aria-label={t("index.start.game.label")}>
            <span>{t("index.continue")}</span>
          </ButtonLink>
        </div>

        {/* Footer text with improved contrast ratio */}
        <div class="footer-section">
          <Paragraph textSize="xl" ariaLive="polite">
            {t("index.welcome.footnote")}
          </Paragraph>
        </div>
      </div>
    </div>
  </main>
</Layout>

<style lang="scss">
  @use "sass:map";

  /* ======================================
   * SCSS VARIABLES & MIXINS
   * ====================================== */

  // Responsive breakpoints using hardcoded em values (CSS Custom Properties don't work in media queries)
  $breakpoints: (
    xs: 20em,    // 320px
    sm: 40em,    // 640px
    md: 48em,    // 768px
    lg: 64em,    // 1024px
    xl: 80em,    // 1280px
    2xl: 96em,   // 1536px
  );

  // Mixin for responsive media queries
  @mixin respond-to($breakpoint) {
    @if map.has-key($breakpoints, $breakpoint) {
      @media (min-width: map.get($breakpoints, $breakpoint)) {
        @content;
      }
    }
  }

  // Mixin for reduced motion support
  @mixin reduced-motion {
    @media (prefers-reduced-motion: reduce) {
      @content;
    }
  }

  // Mixin for high contrast mode
  @mixin high-contrast {
    @media (prefers-contrast: high) {
      @content;
    }
  }

  // Mixin for print styles
  @mixin print {
    @media print {
      @content;
    }
  }

  // Mixin for focus styles (WCAG AAA compliant)
  @mixin focus-visible {
    &:focus-visible {
      outline: var(--focus-enhanced-outline-dark);
      outline-offset: var(--focus-ring-offset);
      box-shadow: var(--focus-enhanced-shadow);
    }
  }

  // Mixin for smooth transitions
  @mixin smooth-transition($property: all, $duration: var(--transition-normal)) {
    transition: $property $duration;

    @include reduced-motion {
      transition: none;
    }
  }

  // Mixin for hover effects
  @mixin hover-effect($scale: var(--animation-scale-hover-subtle)) {
    @include smooth-transition(transform);

    &:hover {
      transform: scale($scale);
    }

    @include reduced-motion {
      &:hover {
        transform: none;
      }
    }
  }

  /* ======================================
   * MAIN LAYOUT
   * ====================================== */

  .main-content {
    display: flex;
    min-height: 100vh;
    align-items: center;
    justify-content: center;
    color: var(--text-primary);
    background-color: var(--bg-primary);

    // Enhanced focus management
    &:focus {
      outline: none;
    }
  }

  .content-container {
    margin: 0 auto;
    display: flex;
    width: var(--width-full);
    max-width: var(--container-lg);
    flex-direction: column;
    align-items: center;
    
    // Mobile Portrait - compact padding
    padding: var(--space-md) var(--space-sm);
    text-align: center;

    // Mobile Landscape and small tablets
    @include respond-to(xs) {
      padding: var(--space-lg) var(--space-md);
    }
    
    @include respond-to(sm) {
      padding: var(--space-xl) var(--space-lg);
    }

    // Responsive padding adjustments
    @include respond-to(md) {
      padding: var(--space-2xl) var(--space-lg);
    }

    @include respond-to(lg) {
      padding: var(--space-3xl) var(--space-xl);
    }

    // Container query support for smaller screens
    @container (max-width: 400px) {
      padding: var(--space-lg) var(--space-md);
    }
  }

  .content-wrapper {
    display: flex;
    width: var(--width-full);
    flex-direction: column;
    align-items: center;
    
    // Mobile Portrait - compact spacing
    gap: var(--space-md);
    
    @include respond-to(xs) {
      gap: var(--space-lg);
    }

    // Enhanced spacing for larger screens
    @include respond-to(md) {
      gap: var(--space-xl);
    }

    @include respond-to(lg) {
      gap: var(--space-2xl);
    }
  }

  /* ======================================
   * LOGO SECTION
   * ====================================== */

  .logo-container {
    position: relative;
    aspect-ratio: 1;
    width: var(--width-full);
    
    // Mobile Portrait - compact sizing and margin
    margin: 0 auto var(--space-lg);
    max-width: var(--container-xs);
    
    @include respond-to(xs) {
      margin: 0 auto var(--space-xl);
      max-width: var(--container-sm);
    }

    // Responsive sizing
    @include respond-to(sm) {
      margin: 0 auto var(--space-2xl);
      max-width: var(--container-md);
    }

    @include respond-to(md) {
      margin: 0 auto var(--space-3xl);
      max-width: 25rem; // 400px
    }

    @include respond-to(lg) {
      max-width: 30rem; // 480px
    }

    // Container query for very small screens
    @container (max-width: 320px) {
      max-width: 100%;
      margin-bottom: var(--space-md);
    }
  }

  .logo-image {
    height: auto;
    width: var(--width-full);
    border-radius: var(--radius-lg);

    @include hover-effect();

    // Enhanced accessibility for high contrast
    @include high-contrast {
      border: 2px solid var(--text-primary);
    }

    // Print optimization
    @include print {
      filter: grayscale(100%);
      max-width: 200px;
    }
  }

  /* ======================================
   * BUTTON SECTION
   * ====================================== */

  .button-container {
    display: flex;
    width: var(--width-full);
    flex-direction: column;
    align-items: center;
    
    // Mobile Portrait - compact spacing and margin
    margin: var(--space-md) auto 0;
    max-width: var(--container-xs);
    gap: var(--space-sm);
    
    @include respond-to(xs) {
      margin: var(--space-lg) auto 0;
      max-width: var(--container-sm);
      gap: var(--space-md);
    }

    // Responsive adjustments
    @include respond-to(sm) {
      max-width: var(--container-md);
      gap: var(--space-lg);
    }

    @include respond-to(md) {
      max-width: 28rem; // 448px
    }

    // Container query for small screens
    @container (max-width: 400px) {
      gap: var(--space-md);
    }

    // Enhanced touch targets for mobile
    @media (max-width: 47.9375em) {
      gap: var(--space-lg);

      a {
        min-height: var(--min-touch-size);
        min-width: var(--min-touch-size);
        display: flex;
        align-items: center;
        justify-content: center;
      }
    }
  }

  /* ======================================
   * FOOTER SECTION
   * ====================================== */

  .footer-section {
    max-width: var(--content-readable-width);
    
    // Mobile Portrait - compact margin
    margin-top: var(--space-lg);
    
    @include respond-to(xs) {
      margin-top: var(--space-xl);
    }
    
    @include respond-to(sm) {
      margin-top: var(--space-2xl);
    }

    // Responsive margin adjustments
    @include respond-to(md) {
      margin-top: var(--space-2xl);
    }

    @include respond-to(lg) {
      margin-top: var(--space-3xl);
    }

    // Container query for small screens
    @container (max-width: 500px) {
      margin-top: var(--space-xl);
    }
  }

  /* ======================================
   * ACCESSIBILITY ENHANCEMENTS
   * ====================================== */

  // Screen reader utilities
  .sr-only {
    position: absolute;
    width: var(--sr-only-width);
    height: var(--sr-only-height);
    padding: 0;
    margin: var(--sr-only-margin);
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
    clip-path: var(--sr-only-clip-path);
  }

  // Enhanced focus styles for all interactive elements
  a,
  button,
  [tabindex] {
    @include focus-visible;
  }

  // High contrast mode enhancements
  @include high-contrast {
    .main-content {
      background-color: var(--color-black);
      color: var(--color-white);
    }

    .logo-image {
      border: 3px solid var(--color-white);
    }
  }

  // Forced colors mode support
  @media (forced-colors: active) {
    .main-content {
      background-color: Canvas;
      color: CanvasText;
    }

    .logo-image {
      border: 2px solid CanvasText;
    }
  }

  /* ======================================
   * PERFORMANCE OPTIMIZATIONS
   * ====================================== */

  // Content visibility optimization
  .content-wrapper {
    content-visibility: auto;
    contain-intrinsic-size: 0 500px;
  }

  // Will-change hints for animations
  .logo-image {
    will-change: transform;

    @include reduced-motion {
      will-change: auto;
    }
  }

  /* ======================================
   * PRINT STYLES
   * ====================================== */

  @include print {
    .main-content {
      background: var(--print-bg);
      color: var(--print-text);
      min-height: auto;
      padding: var(--space-lg);
    }

    .content-container {
      max-width: none;
      padding: 0;
    }

    .button-container {
      display: none;
    }

    .footer-section {
      margin-top: var(--space-lg);
      font-size: var(--text-sm);
    }
  }

  /* ======================================
   * MOBILE PORTRAIT OPTIMIZATIONS
   * ====================================== */
   
  // Extra small screens - Portrait Mobile (below 320px)
  @media (max-width: 19.9375em) {
    .content-container {
      padding: var(--space-sm) var(--space-xs);
    }
    
    .content-wrapper {
      gap: var(--space-sm);
    }
    
    .logo-container {
      margin: 0 auto var(--space-md);
      max-width: calc(100% - var(--space-lg));
    }
    
    .button-container {
      margin: var(--space-sm) auto 0;
      gap: var(--space-xs);
    }
    
    .footer-section {
      margin-top: var(--space-md);
    }
    
    h1 {
      font-size: clamp(var(--text-lg), 4vw, var(--text-xl));
      line-height: var(--leading-snug);
    }
    
    p {
      font-size: clamp(var(--text-sm), 3vw, var(--text-base));
      line-height: var(--leading-normal);
    }
  }
  
  /* ======================================
   * ANIMATION CLASSES
   * ====================================== */

  .animate-on-view {
    opacity: 0;
    transform: translateY(var(--animation-y-offset));
    @include smooth-transition(opacity transform);

    &.animate-in {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* ======================================
   * RESPONSIVE TYPOGRAPHY
   * ====================================== */

  // Fluid typography for better responsive design
  h1 {
    // Mobile Portrait - smaller starting size
    font-size: clamp(var(--text-xl), 4vw, var(--text-3xl));
    line-height: var(--leading-tight);
    
    @include respond-to(xs) {
      font-size: clamp(var(--text-2xl), 5vw, var(--text-4xl));
    }

    @include respond-to(md) {
      font-size: clamp(var(--text-3xl), 4vw, var(--text-4xl));
    }
  }

  p {
    // Mobile Portrait - smaller starting size
    font-size: clamp(var(--text-base), 3vw, var(--text-lg));
    line-height: var(--leading-relaxed);
    
    @include respond-to(xs) {
      font-size: clamp(var(--text-lg), 3vw, var(--text-xl));
    }

    @include respond-to(md) {
      font-size: clamp(var(--text-xl), 2.5vw, var(--text-2xl));
    }
  }
</style>

<script>
  /**
   * Performance-optimized client-side enhancements
   * Uses modern ES6+ features and TypeScript for better type safety
   */

  // Type definitions for better type safety
  interface AnimationConfig {
    rootMargin: string;
    threshold: number;
  }

  interface IdleCallbackOptions {
    timeout?: number;
  }

  // Modern ES6+ class for animation management
  class AnimationManager {
    private observer: IntersectionObserver | null = null;
    private idleCallback: (callback: () => void, options?: IdleCallbackOptions) => number;

    constructor() {
      // Modern idle callback with fallback
      this.idleCallback =
        window.requestIdleCallback ||
        ((callback: () => void): number => window.setTimeout(callback, 50));
    }

    /**
     * Initialize intersection observer for animation elements
     */
    private initializeObserver(): void {
      const config: AnimationConfig = {
        rootMargin: "0px",
        threshold: 0.1,
      };

      this.observer = new IntersectionObserver((entries: IntersectionObserverEntry[]) => {
        entries.forEach((entry: IntersectionObserverEntry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("animate-in");
            this.observer?.unobserve(entry.target);
          }
        });
      }, config);
    }

    /**
     * Observe animatable elements
     */
    private observeElements(): void {
      const animatableElements = document.querySelectorAll(".animate-on-view");

      animatableElements.forEach((element: Element) => {
        this.observer?.observe(element);
      });
    }

    /**
     * Initialize animations with performance optimization
     */
    public initialize(): void {
      this.idleCallback(() => {
        this.initializeObserver();
        this.observeElements();
      });
    }

    /**
     * Cleanup observer on component unmount
     */
    public destroy(): void {
      if (this.observer) {
        this.observer.disconnect();
        this.observer = null;
      }
    }
  }

  // Modern event handling with arrow functions and optional chaining
  const initializePage = (): void => {
    const animationManager = new AnimationManager();

    // Initialize animations when DOM is ready
    if (document.readyState === "loading") {
      document.addEventListener(
        "DOMContentLoaded",
        () => {
          animationManager.initialize();
        },
        { passive: true }
      );
    } else {
      animationManager.initialize();
    }

    // Cleanup on page unload
    window.addEventListener(
      "beforeunload",
      () => {
        animationManager.destroy();
      },
      { passive: true }
    );
  };

  // Performance monitoring with modern APIs
  const monitorPerformance = (): void => {
    // Use Performance Observer for monitoring if available
    if ("PerformanceObserver" in window) {
      const observer = new PerformanceObserver((list) => {
        list.getEntries().forEach((entry) => {
          if (entry.entryType === "navigation") {
            const navEntry = entry as PerformanceNavigationTiming;
            console.log(`Page load time: ${navEntry.loadEventEnd - navEntry.loadEventStart}ms`);
          }
        });
      });

      observer.observe({ entryTypes: ["navigation"] });
    }
  };

  // Enhanced accessibility with modern event handling
  const enhanceAccessibility = (): void => {
    // Skip to main content functionality
    const skipLink = document.querySelector('[href="#main-content"]') as HTMLAnchorElement;

    if (skipLink) {
      skipLink.addEventListener("click", (event: Event) => {
        event.preventDefault();

        const mainContent = document.getElementById("main-content");
        mainContent?.focus();

        // Announce focus to screen readers
        mainContent?.setAttribute("aria-live", "polite");
      });
    }

    // Enhanced keyboard navigation
    document.addEventListener(
      "keydown",
      (event: KeyboardEvent) => {
        // Escape key handling
        if (event.key === "Escape") {
          const focusedElement = document.activeElement as HTMLElement;
          focusedElement?.blur();
        }
      },
      { passive: true }
    );
  };

  // Initialize all functionality
  initializePage();
  monitorPerformance();
  enhanceAccessibility();
</script>
