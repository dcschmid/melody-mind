---
/**
 * MelodyMind Homepage Component
 *
 * This component renders the main landing page of the MelodyMind app.
 * It implements WCAG AAA (7:1 contrast ratio) accessibility standards
 * and uses performance optimizations for fast loading and rendering.
 */
import Layout from "@layouts/Layout.astro";
import { Image } from "astro:assets";
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import { extractKeywords, generateMetaDescription } from "@utils/seo";
import SectionCard from "@components/home/SectionCard.astro";
import DailyChallengeCard from "@components/DailyChallengeCard.astro";
import Paragraph from "@components/Paragraph.astro";
import { loadCategoriesForLanguage } from "../../utils/category/categoryLoadingUtils";

// Extract language from URL and set up translations
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(String(lang));

/**
 * Dynamic redirect based on browser language preference
 * Ensures users land on their preferred language version
 */
if (Astro.request.method === "GET" && !Astro.params.lang) {
  // Inline locale redirect: avoid importing helper when it is not used elsewhere in the file
  return Astro.redirect(`/${Astro.preferredLocale || "en"}/`);
}

// Basic page content setup
const title = t("login.welcome");
const description = t("login.description");

/**
 * Enhanced SEO content generation
 * Combines various text elements for better keyword density and relevance
 */
const pageContent = `${title} ${description} ${t("index.welcome.footnote")}`;

// Generate optimized meta description and keyword set
const optimizedDescription = generateMetaDescription(pageContent);
const keywords = extractKeywords(pageContent) || t("meta.keywords");

// Structured data parameters for enhanced SEO
const pageType = "website";
const publishDate = new Date("2024-01-01");
const modifiedDate = new Date();

// Breadcrumbs (homepage)
const baseUrl = Astro.site?.toString().replace(/\/$/, "") || "https://melody-mind.de";
const currentUrl = `${baseUrl}/${String(lang)}/`;
const breadcrumbSchema = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  itemListElement: [{ "@type": "ListItem", position: 1, name: t("nav.home"), item: currentUrl }],
};

// Card definitions for homepage sections
const cards = [
  {
    key: "game",
    title: t("index.card.game.title") || "Game Overview",
    description:
      t("index.card.game.desc") || "Start the music trivia game and test your knowledge.",
    href: `/${String(lang)}/gamehome`,
    image: "/homecategories/game.png",
    imageAlt: "Game overview illustration",
  },
  {
    key: "knowledge",
    title: t("index.card.knowledge.title") || "Music Knowledge",
    description:
      t("index.card.knowledge.desc") || "Deep dive into music facts and category insights.",
    href: `/${String(lang)}/knowledge`,
    image: "/homecategories/knowledge.png",
    imageAlt: "Music knowledge illustration",
  },
  {
    key: "playlists",
    title: t("index.card.playlists.title") || "Playlists",
    description: t("index.card.playlists.desc") || "Explore themed playlists for each genre.",
    href: `/${String(lang)}/playlists`,
    image: "/homecategories/playlist.png",
    imageAlt: "Playlist collection graphic",
  },
  {
    key: "podcast",
    title: t("index.card.podcast.title") || "Podcast",
    description: t("index.card.podcast.desc") || "Listen to our music trivia podcast episodes.",
    href: `/${String(lang)}/podcasts`,
    image: "/homecategories/podcast.png",
    imageAlt: "Podcast microphone and notes",
  },
  {
    key: "news",
    title: t("index.card.news.title") || "News",
    description: t("index.card.news.desc") || "Latest updates, features and release notes.",
    href: `/${String(lang)}/news`,
    image: "/homecategories/news.png",
    imageAlt: "News updates illustration",
  },
];

// Kategorien laden (vereinfachter Ansatz nur fÃ¼r Daily Challenge)
let playableCategories: any[] = [];
try {
  const result = await loadCategoriesForLanguage({
    language: String(lang),
    fallbackLanguage: "en",
    useAliasPath: true,
  });
  playableCategories = result.categories.filter((c: any) => c.isPlayable);
} catch {
  playableCategories = [];
}
---

<Layout
  {title}
  description={optimizedDescription}
  {keywords}
  image={`/og-images/social-share-home-${String(lang)}.jpg`}
  type={pageType}
  {publishDate}
  {modifiedDate}
>
  <Fragment slot="head">
    <script is:inline type="application/ld+json" set:html={JSON.stringify(breadcrumbSchema)} />
  </Fragment>
  <div class="mx-auto w-full pb-14">
    <header class="mb-8 sm:mb-10">
      <h1 class="sr-only">{title}</h1>
      <div
        class="mx-auto flex w-full max-w-5xl flex-col items-center justify-center gap-6 md:flex-row md:items-center md:gap-10 lg:gap-14"
      >
        <div class="shrink-0">
          <Image
            class="mx-auto h-auto"
            src="/melody-mind.png"
            width={320}
            height={320}
            alt="Melody Mind Logo - Music Quiz App Logo"
            loading="eager"
            fetchpriority="high"
          />
        </div>
        <div class="max-w-[62ch] text-center md:text-left">
          <Paragraph textSize="lg" textAlign="center" className="m-0 leading-relaxed">
            {description}
          </Paragraph>
        </div>
      </div>
    </header>

    <section class="mb-10" aria-label={t("index.overview.sections") || "Application sections"}>
      <div
        class="mb-10 grid grid-cols-1 gap-6 sm:mb-12 sm:grid-cols-[repeat(auto-fill,minmax(300px,1fr))] sm:gap-6 md:gap-7 lg:gap-8 xl:gap-9"
        role="list"
        aria-label={t("index.overview.sections") || "Application sections"}
      >
        {
          cards.map((card, idx) => {
            // After first two cards, inject the Daily Challenge to sit "zentriert" im Grid
            if (idx === 2) {
              return (
                <Fragment>
                  <DailyChallengeCard lang={String(lang)} categories={playableCategories as any} />
                  <SectionCard
                    title={cards[0].title}
                    description={cards[0].description}
                    href={cards[0].href}
                    image={cards[0].image}
                    imageAlt={cards[0].imageAlt}
                  />
                  <SectionCard
                    title={cards[1].title}
                    description={cards[1].description}
                    href={cards[1].href}
                    image={cards[1].image}
                    imageAlt={cards[1].imageAlt}
                  />
                  <SectionCard
                    title={cards[2].title}
                    description={cards[2].description}
                    href={cards[2].href}
                    image={cards[2].image}
                    imageAlt={cards[2].imageAlt}
                  />
                </Fragment>
              );
            }
            if (idx < 2) {
              return null;
            } // already rendered above
            if (idx === 2) {
              return null;
            } // handled
            return (
              <SectionCard
                title={card.title}
                description={card.description}
                href={card.href}
                image={card.image}
                imageAlt={card.imageAlt}
              />
            );
          })
        }
      </div>
    </section>

    <footer class="mt-10 text-center text-sm text-violet-200">
      <Paragraph textSize="lg" textAlign="center" className="m-0 mb-0 text-violet-200"
        >{t("index.welcome.footnote")}</Paragraph
      >
    </footer>
  </div>
</Layout>
