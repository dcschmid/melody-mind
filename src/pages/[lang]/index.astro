---
/**
 * MelodyMind Homepage Component
 *
 * This component renders the main landing page of the MelodyMind app.
 * It implements WCAG AAA (7:1 contrast ratio) accessibility standards
 * and uses performance optimizations for fast loading and rendering.
 *
 * @author MelodyMind Team
 * @lastModified 2025-04-23
 */
import Layout from "@layouts/Layout.astro";
import { Image } from "astro:assets";
import { getLangFromUrl, useTranslations, getRelativeLocaleUrl } from "@utils/i18n";
import { extractKeywords, generateMetaDescription } from "@utils/seo";
import LanguagePicker from "@components/LanguagePicker.astro";
import Headline from "@components/Headline.astro";
import Paragraph from "@components/Paragraph.astro";
import ButtonLink from "@components/ButtonLink.astro";

// Extract language from URL and set up translations
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(String(lang));

/**
 * Dynamic redirect based on browser language preference
 * Ensures users land on their preferred language version
 */
if (Astro.request.method === "GET" && !Astro.params.lang) {
  return Astro.redirect(getRelativeLocaleUrl(Astro.preferredLocale || "en", "/"));
}

// Basic page content setup
const title = t("login.welcome");
const description = t("login.description");

/**
 * Enhanced SEO content generation
 * Combines various text elements for better keyword density and relevance
 */
const pageContent = `${title} ${description} ${t("index.welcome.footnote")}`;

// Generate optimized meta description and keyword set
const optimizedDescription = generateMetaDescription(pageContent);
const keywords = extractKeywords(pageContent) || t("meta.keywords");

// Structured data parameters for enhanced SEO
const pageType = "website";
const publishDate = new Date("2024-01-01");
const modifiedDate = new Date();

/**
 * Define main logo image optimization parameters
 * This improves performance by loading appropriately sized images
 */
const imageWidth = 600;
const imageHeight = 600;
---

<Layout
  {title}
  description={optimizedDescription}
  {keywords}
  image={`/og-images/social-share-home-${String(lang)}.jpg`}
  type={pageType}
  {publishDate}
  {modifiedDate}
>
  {/* Skip to content link for keyboard navigation accessibility */}
  <a
    href="#main-content"
    class="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 focus:z-50 focus:rounded focus:bg-purple-700 focus:px-4 focus:py-2 focus:font-medium focus:text-white focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-purple-700 focus:outline-none"
  >
    {t("accessibility.skip.to.content")}
  </a>

  <main
    id="main-content"
    class="flex min-h-screen items-center justify-center text-zinc-50"
    tabindex="-1"
  >
    <div class="mx-auto flex w-full max-w-4xl flex-col items-center px-6 py-12 text-center">
      <div class="flex w-full flex-col items-center">
        {/* Logo with comprehensive image optimization and accessibility */}
        <div class="relative mx-auto mb-8 aspect-square w-full max-w-[310px]" aria-hidden="true">
          <img
            src="/melody-mind.png"
            width={imageWidth}
            height={imageHeight}
            alt="Melody Mind Logo - Music Quiz App Logo"
            loading="eager"
            class="h-auto w-full transition-transform duration-300 motion-safe:hover:scale-105"
            fetchpriority="high"
          />
        </div>

        {/* Semantic heading with proper hierarchy */}
        <Headline level="h1" {title} className="mb-6 text-3xl font-bold text-white md:text-4xl" />

        {/* Description with enhanced contrast for AAA compliance */}
        <Paragraph
          className="mb-8 flex max-w-2xl items-center text-center text-lg leading-relaxed text-white"
        >
          {description}
        </Paragraph>

        {/* Accessible button container with increased touch targets */}
        <div class="mx-auto mt-6 flex w-full max-w-xs flex-col items-center gap-5">
          <ButtonLink
            href={`/${String(lang)}/gamehome`}
            aria-label={t("index.start.game.label")}
            className="focus:ring-opacity-80 flex min-h-[56px] w-full transform items-center justify-center rounded-xl bg-gradient-to-r from-purple-700 to-indigo-700 px-6 py-4 text-lg font-medium text-white shadow-lg transition-all duration-300 hover:scale-[1.02] hover:from-purple-600 hover:to-indigo-600 focus:ring-4 focus:ring-purple-300 focus:outline-none"
          >
            <span>{t("index.continue")}</span>
          </ButtonLink>
        </div>

        {/* Footer text with improved contrast ratio */}
        <p class="mt-10 text-xl text-white" aria-live="polite">
          {t("index.welcome.footnote")}
        </p>

        {/* Language selection with explicit label for accessibility */}
        <div class="mt-8" aria-labelledby="language-selector-label">
          <p id="language-selector-label" class="sr-only">
            {t("accessibility.language.selection")}
          </p>
        </div>
      </div>
    </div>
  </main>
</Layout>

<style>
  /* Enhanced focus styles for accessibility with improved contrast */
  :global(:focus-visible) {
    outline: 4px solid #a855f7 !important; /* Increased width and brighter color */
    outline-offset: 4px !important;
    border-radius: 0.25rem;
  }

  /* Respect user preferences for reduced motion */
  @media (prefers-reduced-motion: reduce) {
    :global(*) {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
      scroll-behavior: auto !important;
    }
  }

  /* High contrast mode support */
  @media (forced-colors: active) {
    :global(button),
    :global(a[role="button"]) {
      border: 2px solid ButtonText;
    }

    :global(:focus-visible) {
      outline: 3px solid Highlight !important;
    }
  }
</style>

<script>
  /**
   * Performance-optimized client-side enhancements
   * Uses passive event listeners and requestIdleCallback for non-critical operations
   */
  document.addEventListener(
    "DOMContentLoaded",
    () => {
      // Use requestIdleCallback for non-critical operations
      const idleCallback = window.requestIdleCallback || ((cb) => setTimeout(cb, 50));

      idleCallback(() => {
        // Register intersection observer for animation elements
        // This improves performance by only animating visible elements
        const observer = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                entry.target.classList.add("animate-in");
                observer.unobserve(entry.target); // Stop observing once visible
              }
            });
          },
          { rootMargin: "0px", threshold: 0.1 }
        );

        // Observe animatable elements
        document.querySelectorAll(".animate-on-view").forEach((el) => {
          observer.observe(el);
        });
      });
    },
    { passive: true }
  ); // Performance optimization with passive listener
</script>
