---
/**
 * @component DifficultyBasedGamePage
 * @description Renders a music trivia game page with questions based on selected category and difficulty level.
 * This page implements full WCAG AAA accessibility standards, including keyboard navigation,
 * screen reader support, reduced motion preferences, and high contrast mode.
 *
 * @prop {Object} categoryData - Data about the selected music category
 * @prop {string} categoryData.headline - Display name of the category
 * @prop {string} categoryData.slug - URL-safe identifier for the category
 * @prop {string} lang - Language code for the page content
 */
// Import removed - not used in this file
import Layout from "@layouts/Layout.astro";
import { getTitleBasedOnDifficulty } from "@utils/getTitleBasedOnDifficulty";
import FeedbackOverlay from "@components/Overlays/FeedbackOverlay.astro";
import EndOverlay from "@components/Overlays/EndOverlay.astro";
import LoadingSpinner from "@components/Game/LoadingSpinner.astro";
import Joker from "@components/Game/Joker.astro";

import { getLangFromUrl, useTranslations } from "@utils/i18n";
import type { Difficulty as GameDifficulty } from "@utils/game/jokerUtils";
import { Icon } from "astro-icon/components";
import { loadCategoriesForLanguage } from "../../../utils/category/categoryLoadingUtils";

// Server-side rendering for cookie-based authentication
export const prerender = false;

/**
 * Generates static paths for all supported languages, categories, and difficulty levels.
 * This ensures fast page loads as everything is pre-rendered at build time.
 * @returns {Array} Array of path objects with params and props
 */
export async function getStaticPaths() {
  // Define all supported languages for type safety
  const supportedLanguages = [
    "de",
    "en",
    "es",
    "fr",
    "it",
    "pt",
    "da",
    "nl",
    "sv",
    "fi",
    "cn",
    "ru",
    "jp",
    "uk",
  ] as const;

  // Define available difficulty levels
  const difficultyLevels = ["easy", "medium", "hard"] as const;

  const paths = [];

  for (const lang of supportedLanguages) {
    // Load categories via centralized loader to ensure build-time inclusion and fallback
    const result = await loadCategoriesForLanguage({ language: lang, fallbackLanguage: "en" });
    const categories = result.success ? result.categories : [];

    // Create a path for each category and difficulty combination
    for (const categoryData of categories) {
      for (const difficulty of difficultyLevels) {
        paths.push({
          params: {
            lang,
            category: categoryData.slug,
            difficulty,
          },
          props: {
            categoryData,
            lang,
          },
        });
      }
    }
  }

  return paths;
}

// Types for route props
interface Props {
  categoryData: {
    headline: string;
    slug: string;
  };
  lang: string;
}

// Extract props and URL parameters
const { categoryData: propsCategoryData } = Astro.props;
const lang = String(getLangFromUrl(Astro.url));
const t = useTranslations(lang);
const { category, difficulty } = Astro.params;

// Auth check: Verify if the user is logged in
// Check if Astro.request is available (for SSR compatibility)
const guestId = `guest_${Date.now()}_${Math.random().toString(36).slice(2, 11)}`;
const authResult = {
  authenticated: true,
  user: { id: guestId, email: "guest@melodymind.app" },
};

// Dynamic import of categories based on language
const _result = await loadCategoriesForLanguage({ language: lang, fallbackLanguage: "en" });
const categories = _result.success ? _result.categories : [];

// Default user for game functionality
const user = { id: authResult.user?.id || "guest" };

// Find current category data for display and metadata - first try from dynamic import, then from props
const currentCategoryData =
  categories.find((cat: { slug: string; headline: string }) => cat.slug === category) ||
  propsCategoryData;

const playerTitle = getTitleBasedOnDifficulty(difficulty as GameDifficulty);

// Generate optimized meta description for SEO
const metaDescription = `${t("game.meta.description.prefix")} ${currentCategoryData?.headline || ""} ${t("game.meta.description.suffix")} ${t(`difficulty.${String(difficulty)}`) || String(difficulty)}`;

// Calculate rounds based on difficulty
const getRoundsForDifficulty = (difficulty: string | undefined): number => {
  switch (difficulty) {
    case "easy":
      return 10;
    case "medium":
      return 15;
    case "hard":
      return 20;
    default:
      return 10;
  }
};

const totalRounds = getRoundsForDifficulty(difficulty);
---

<Layout
  title={`${currentCategoryData?.headline} - ${playerTitle}`}
  showHeader={false}
  showCoins={false}
  description={metaDescription}
>
  <FeedbackOverlay buttonId="quiz-next-round-button" />

  <EndOverlay
    id="endgame-popup"
    data-score="0"
    data-category={currentCategoryData?.slug || ""}
    data-categoryName={currentCategoryData?.headline || ""}
    data-difficulty={String(difficulty) || ""}
  />

  <!-- Improved game header section with better visual distinction -->
  <div class="relative z-[var(--z-sticky)] mb-6 md:mb-8 lg:mb-12">
    <!-- Game info badges -->
    <div class="mt-4 flex flex-wrap items-center justify-center gap-3" aria-live="polite">
      <div
        class="shadow-inset-white/10 relative inline-flex min-h-[var(--touch-target-enhanced)] cursor-default items-center overflow-hidden rounded-[var(--radius-xl)] border border-white/20 bg-gradient-to-br from-purple-600 to-purple-700 p-3 shadow-[var(--shadow-lg)] shadow-[var(--shadow-sm)] transition-all duration-200"
      >
        <Icon
          name="difficulty"
          class="relative z-10 mr-3 h-4 w-4 flex-shrink-0 text-amber-400 drop-shadow-[0_1px_2px_rgba(0,0,0,0.3)] transition-all duration-200"
          aria-hidden="true"
        />
        <span
          class="relative z-10 text-sm font-bold tracking-[0.02em] text-[var(--text-primary)] drop-shadow-[0_1px_2px_rgba(0,0,0,0.3)] transition-all duration-200"
        >
          {t(`difficulty.${String(difficulty)}`)}
        </span>
      </div>

      <div
        class="shadow-inset-white/10 relative inline-flex min-h-[var(--touch-target-enhanced)] cursor-default items-center overflow-hidden rounded-[var(--radius-xl)] border border-white/20 bg-gradient-to-br from-blue-600 to-blue-700 p-3 shadow-[var(--shadow-lg)] shadow-[var(--shadow-sm)] transition-all duration-200"
      >
        <Icon
          name="round"
          class="relative z-10 mr-3 h-4 w-4 flex-shrink-0 text-blue-300 drop-shadow-[0_1px_2px_rgba(0,0,0,0.3)] transition-all duration-200"
          aria-hidden="true"
        />
        <span
          class="relative z-10 text-sm font-bold tracking-[0.02em] text-[var(--text-primary)] drop-shadow-[0_1px_2px_rgba(0,0,0,0.3)] transition-all duration-200"
        >
          <span id="quiz-round-display" class="round">1/{totalRounds}</span>
        </span>
      </div>

      <div
        class="shadow-inset-white/10 relative inline-flex min-h-[var(--touch-target-enhanced)] cursor-default items-center overflow-hidden rounded-[var(--radius-xl)] border border-white/20 bg-gradient-to-br from-amber-600 to-amber-700 p-3 shadow-[var(--shadow-lg)] shadow-[var(--shadow-sm)] transition-all duration-200"
      >
        <Icon
          name="coins"
          class="relative z-10 mr-3 h-4 w-4 flex-shrink-0 text-amber-400 drop-shadow-[0_1px_2px_rgba(0,0,0,0.3)] transition-all duration-200"
          aria-hidden="true"
        />
        <span
          class="relative z-10 text-sm font-bold tracking-[0.02em] text-[var(--text-primary)] drop-shadow-[0_1px_2px_rgba(0,0,0,0.3)] transition-all duration-200"
        >
          <span id="coins-display" class="coinsCount">0</span>
        </span>
      </div>
    </div>
  </div>

  <!-- Error message should only show when needed -->
  <!-- ErrorMessage component will be dynamically created by JavaScript when errors occur -->

  <LoadingSpinner />

  <!-- Main game container with improved styling and accessibility -->
  <div
    id="question-container"
    class="relative mx-auto w-full max-w-[var(--container-lg)] overflow-hidden rounded-[var(--radius-lg)] text-center opacity-[var(--animation-opacity-full)] transition-all duration-200"
    role="main"
    aria-label={t("game.area.label")}
    aria-live="polite"
    data-categoryName={currentCategoryData?.headline}
    data-genre={String(category)}
    data-userID={user.id}
    data-difficulty={String(difficulty)}
  >
    <div
      id="question"
      class="relative z-10 mb-6 rounded-[var(--radius-lg)] border border-[var(--border-secondary)] bg-[var(--bg-tertiary)] p-6 text-center text-lg leading-[var(--leading-enhanced)] font-bold text-[var(--text-primary)]"
      role="heading"
      aria-level="2"
    >
    </div>

    <div
      id="options"
      class="relative z-10 flex flex-col gap-4"
      role="radiogroup"
      aria-label={t("game.options.label")}
    >
      <!-- Options will be populated by JavaScript -->
    </div>
  </div>

  <!-- Joker and game controls with improved accessibility -->
  <div class="relative z-20 mt-6 flex justify-center">
    <Joker />
  </div>

  <!-- Achievement notification component -->
</Layout>

<script>
  import { initOverlayManagerAuto } from "../../../utils/components/overlayManagerUtils";
  import { initGameEngine } from "../../../utils/game/gameEngine";

  // Initialize the game engine and accessibility features when the DOM is ready
  const initializeGame = (): void => {
    initGameEngine();
    initOverlayManagerAuto();
  };

  // Event listener for Astro page load
  document.addEventListener("astro:page-load", initializeGame);

  // Ensure proper initialization on direct navigation
  // Note: onDOMReady is not available in this context, using direct initialization
  initializeGame();
</script>
