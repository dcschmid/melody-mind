---
/**
 * @component DifficultyBasedGamePage
 * @description Renders a music trivia game page with questions based on selected category and difficulty level.
 * This page implements full WCAG AAA accessibility standards, including keyboard navigation,
 * screen reader support, reduced motion preferences, and high contrast mode.
 *
 * @prop {Object} categoryData - Data about the selected music category
 * @prop {string} categoryData.headline - Display name of the category
 * @prop {string} categoryData.slug - URL-safe identifier for the category
 * @prop {string} lang - Language code for the page content
 */
import Layout from "@layouts/Layout.astro";
import { getTitleBasedOnDifficulty } from "@utils/getTitleBasedOnDifficulty";
import FeedbackOverlay from "@components/Overlays/FeedbackOverlay.astro";
import EndOverlay from "@components/Overlays/EndOverlay.astro";
import LoadingSpinner from "@components/Game/LoadingSpinner.astro";
import Joker from "@components/Game/Joker.astro";
import AchievementNotification from "@components/Achievements/AchievementNotification.astro";
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import type { Difficulty as GameDifficulty } from "@utils/game/jokerUtils";
import { Icon } from "astro-icon/components";
import { requireAuth } from "../../../middleware/auth.js";

// Server-side rendering for cookie-based authentication
export const prerender = false;

/**
 * Generates static paths for all supported languages, categories, and difficulty levels.
 * This ensures fast page loads as everything is pre-rendered at build time.
 * @returns {Array} Array of path objects with params and props
 */
export async function getStaticPaths() {
  // Define all supported languages for type safety
  const supportedLanguages = [
    "de",
    "en",
    "es",
    "fr",
    "it",
    "pt",
    "da",
    "nl",
    "sv",
    "fi",
    "cn",
    "ru",
    "jp",
    "uk",
  ] as const;

  // Define available difficulty levels
  const difficultyLevels = ["easy", "medium", "hard"] as const;

  const paths = [];

  for (const lang of supportedLanguages) {
    // Load categories based on language with proper fallback mechanism
    let categories;
    try {
      categories = await import(`@json/${lang}_categories.json`);
    } catch {
      // Fallback to default language if the specific language file doesn't exist
      categories = await import(`@json/en_categories.json`);
    }

    // Create a path for each category and difficulty combination
    for (const categoryData of categories.default) {
      for (const difficulty of difficultyLevels) {
        paths.push({
          params: {
            lang,
            category: categoryData.slug,
            difficulty,
          },
          props: {
            categoryData,
            lang,
          },
        });
      }
    }
  }

  return paths;
}

// Types for route props
interface Props {
  categoryData: {
    headline: string;
    slug: string;
  };
  lang: string;
}

// Extract props and URL parameters
const { categoryData: propsCategoryData } = Astro.props;
const lang = String(getLangFromUrl(Astro.url));
const t = useTranslations(lang);
const { category, difficulty } = Astro.params;

// Auth check: Verify if the user is logged in
const authResult = await requireAuth(Astro.request);
console.log("🔍 Game Page Auth Result:", {
  authenticated: authResult.authenticated,
  userId: authResult.user?.id,
  userEmail: authResult.user?.email,
  url: Astro.request.url,
});

// Dynamic import of categories based on language
let categories;
try {
  categories = await import(`@json/${lang}_categories.json`);
} catch {
  // Fallback to default language if the specific language file doesn't exist
  categories = await import(`@json/en_categories.json`);
}

// Default user for game functionality
const user = { id: authResult.user?.id || "guest" };
console.log("🔍 Game Page Final User:", user);

// Find current category data for display and metadata - first try from dynamic import, then from props
const currentCategoryData =
  categories.default.find((cat: { slug: string; headline: string }) => cat.slug === category) ||
  propsCategoryData;

const playerTitle = getTitleBasedOnDifficulty(difficulty as GameDifficulty);

// Generate optimized meta description for SEO
const metaDescription = `${t("game.meta.description.prefix")} ${currentCategoryData?.headline || ""} ${t("game.meta.description.suffix")} ${t(`difficulty.${String(difficulty)}`) || String(difficulty)}`;

// Calculate rounds based on difficulty
const getRoundsForDifficulty = (difficulty: string | undefined): number => {
  switch (difficulty) {
    case "easy":
      return 10;
    case "medium":
      return 15;
    case "hard":
      return 20;
    default:
      return 10;
  }
};

const totalRounds = getRoundsForDifficulty(difficulty);
---

<Layout
  title={`${currentCategoryData?.headline} - ${playerTitle}`}
  showHeader={false}
  showCoins={false}
  description={metaDescription}
>
  <FeedbackOverlay />

  <EndOverlay
    id="endgame-popup"
    data-score="0"
    data-category={currentCategoryData?.slug || ""}
    data-categoryName={currentCategoryData?.headline || ""}
    data-difficulty={String(difficulty) || ""}
  />

  <!-- Improved game header section with better visual distinction -->
  <div class="game-header">
    <!-- Game info badges -->
    <div class="game-header__badges" aria-live="polite">
      <div class="game-badge">
        <Icon
          name="difficulty"
          class="game-badge__icon game-badge__icon--difficulty"
          aria-hidden="true"
        />
        <span class="game-badge__text">
          {t(`difficulty.${String(difficulty)}`)}
        </span>
      </div>

      <div class="game-badge">
        <Icon name="round" class="game-badge__icon game-badge__icon--rounds" aria-hidden="true" />
        <span class="game-badge__text">
          <span id="round-display" class="round">1/{totalRounds}</span>
        </span>
      </div>

      <div class="game-badge">
        <Icon name="coins" class="game-badge__icon game-badge__icon--coins" aria-hidden="true" />
        <span class="game-badge__text">
          <span id="coins-display" class="coinsCount">0</span>
        </span>
      </div>
    </div>
  </div>

  <!-- Error message should only show when needed -->
  <!-- ErrorMessage component will be dynamically created by JavaScript when errors occur -->

  <LoadingSpinner />

  <!-- Main game container with improved styling and accessibility -->
  <div
    id="question-container"
    class="game-container"
    role="main"
    aria-label={t("game.area.label")}
    aria-live="polite"
    data-categoryName={currentCategoryData?.headline}
    data-genre={String(category)}
    data-userID={user.id}
    data-difficulty={String(difficulty)}
  >
    <div id="question" class="game-container__question" role="heading" aria-level="2"></div>

    <div
      id="options"
      class="game-container__options"
      role="radiogroup"
      aria-label={t("game.options.label")}
    >
      <!-- Options will be populated by JavaScript -->
    </div>
  </div>

  <!-- Joker and game controls with improved accessibility -->
  <div class="game-controls">
    <Joker />
  </div>

  <!-- Achievement notification component -->
  <AchievementNotification {lang} />
</Layout>

<script>
  /**
   * Game Logic Initialization and Accessibility Enhancements
   *
   * This script initializes the game engine and handles all game logic.
   * It also implements accessibility enhancements for modal dialogs and keyboard navigation.
   */
  import { initGameEngine } from "../../../scripts/gameEngine.ts";

  // Initialize the game engine and accessibility features when the DOM is ready
  const initializeGame = (): void => {
    initGameEngine();
    setupFocusTrap();
  };

  // Event listener for Astro page load
  document.addEventListener("astro:page-load", initializeGame);

  // Ensure proper initialization on direct navigation
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeGame);
  } else {
    initializeGame();
  }

  /**
   * Sets up focus trapping for modal overlays to improve accessibility
   * - Traps focus within the modal when open
   * - Returns focus to trigger element when closed
   * - Handles Escape key to close modal
   */
  const setupFocusTrap = (): void => {
    // Select all overlay and popup elements
    const overlays = document.querySelectorAll<HTMLElement>(".overlay, .popup");
    let previousFocus: Element | null = null;
    let activeOverlay: HTMLElement | null = null;

    // Add event listeners to each overlay
    overlays.forEach((overlay) => {
      // Create an array of focusable elements within the overlay
      const focusableElements = overlay.querySelectorAll<HTMLElement>(
        'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
      );

      const firstFocusableElement = focusableElements[0];
      const lastFocusableElement = focusableElements[focusableElements.length - 1];

      // Store trigger elements that open this overlay
      const openTriggers = document.querySelectorAll(`[data-opens="${overlay.id}"]`);
      openTriggers.forEach((trigger) => {
        trigger.addEventListener("click", () => {
          previousFocus = document.activeElement;
          activeOverlay = overlay;

          // Set timeout to focus the first element after overlay is visible
          setTimeout(() => {
            if (firstFocusableElement) {
              firstFocusableElement.focus();
            }
          }, 50);
        });
      });

      // Handle focus trap with keyboard navigation
      overlay.addEventListener("keydown", (e: KeyboardEvent) => {
        // Close on Escape
        if (e.key === "Escape") {
          closeOverlay(overlay);
          e.preventDefault();
          return;
        }

        // Only handle Tab key for trapping focus
        if (e.key !== "Tab") {
          return;
        }

        // If shift + tab and on first element, move to last element
        if (e.shiftKey) {
          if (document.activeElement === firstFocusableElement) {
            lastFocusableElement.focus();
            e.preventDefault();
          }
        }
        // If tab and on last element, move to first element
        else {
          if (document.activeElement === lastFocusableElement) {
            firstFocusableElement.focus();
            e.preventDefault();
          }
        }
      });

      // Find close buttons within overlay
      const closeButtons = overlay.querySelectorAll("[data-closes]");
      closeButtons.forEach((button) => {
        button.addEventListener("click", () => {
          closeOverlay(overlay);
        });
      });
    });

    /**
     * Closes the overlay and returns focus to the previous element
     * @param {HTMLElement} overlay - The overlay element to close
     */
    const closeOverlay = (overlay: HTMLElement): void => {
      // Only proceed if this is the active overlay
      if (activeOverlay !== overlay) {
        return;
      }

      // Hide the overlay
      overlay.classList.add("hidden");

      // Return focus to previous element
      if (
        previousFocus &&
        "focus" in previousFocus &&
        typeof (previousFocus as HTMLElement).focus === "function"
      ) {
        (previousFocus as HTMLElement).focus();
      }

      // Reset active overlay
      activeOverlay = null;
    };

    // Add global event listener for Escape key
    document.addEventListener("keydown", (e: KeyboardEvent) => {
      if (e.key === "Escape" && activeOverlay) {
        closeOverlay(activeOverlay);
        e.preventDefault();
      }
    });
  };
</script>

<style lang="scss" is:global>
  /* ======================================
   * Global Game Styles - Cross-component functionality
   * ====================================== */

  /* Overlay states - used by multiple components */
  .overlay,
  .popup {
    &.hidden {
      display: none;
    }
  }

  #question-container {
    &[data-hidden="true"] {
      display: none;
    }
  }

  /* ======================================
   * Global Game Animations
   * ====================================== */

  /* Coin update animation with reduced motion support */
  .coins-updated {
    color: var(--color-warning-400);

    @media (prefers-reduced-motion: no-preference) {
      animation: coinPulseAAA var(--animation-duration-extended) ease-in-out;
    }
  }

  @keyframes coinPulseAAA {
    0% {
      transform: scale(var(--animation-scale-default));
      text-shadow: none;
    }
    15% {
      transform: scale(var(--animation-scale-medium));
    }
    30% {
      transform: scale(var(--animation-scale-enhanced));
      color: var(--color-warning-500);
      text-shadow: var(--animation-glow-spread) var(--animation-glow-spread)
        var(--animation-glow-size) var(--color-warning-500);
    }
    45% {
      transform: scale(var(--animation-scale-medium));
    }
    100% {
      transform: scale(var(--animation-scale-default));
      text-shadow: none;
    }
  }

  /* ======================================
   * Global Game Option Buttons - Used across game pages
   * ====================================== */

  .game-option-button {
    position: relative;
    width: 100%;
    padding: var(--space-md) var(--space-lg);
    border-radius: var(--radius-xl);
    text-align: left;
    font-size: var(--text-base);
    font-weight: var(--font-medium);
    background-color: var(--bg-secondary);
    border: var(--border-width-thin) solid var(--border-primary);
    color: var(--text-primary);
    transition: all var(--transition-normal);
    box-shadow: var(--shadow-sm);
    cursor: pointer;
    min-height: var(--min-touch-size);
    display: flex;
    align-items: center;

    // Mobile - reduced horizontal padding
    @media (max-width: 39.9375em) {
      padding: var(--space-md) var(--space-sm) !important;
    }

    // Mobile portrait - minimal horizontal padding
    @media (max-width: 29.9375em) {
      padding: var(--space-md) var(--space-xs) !important;
    }

    &:hover {
      background-color: var(--bg-tertiary);
      border-color: var(--border-secondary);
      box-shadow: var(--shadow-md);
      transform: translateY(-1px);
    }

    &:focus-visible {
      outline: 2px solid var(--border-focus);
      outline-offset: 2px;
      box-shadow: var(--focus-ring);
    }

    &:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
    }

    &__number {
      display: none;
    }

    &__text {
      flex: 1;
      text-align: left;
      margin-left: 0;
    }

    /* Game state styles */
    &.selected-option {
      background-color: var(--interactive-primary);
      border-color: var(--color-primary-500);
      color: var(--btn-primary-text);

      .game-option-button__number {
        background-color: var(--color-primary-600);
        color: var(--btn-primary-text);
      }
    }

    &[data-correct="true"] {
      background-color: var(--color-success-600);
      border-color: var(--color-success-500);
      color: var(--text-primary);
    }

    &[data-incorrect="true"] {
      background-color: var(--color-error-600);
      border-color: var(--color-error-500);
      color: var(--text-primary);
    }
  }
</style>

<style lang="scss">
  /**
   * Component-Specific Game Page Styles
   * Optimized structure with proper separation of concerns
   */

  /* ======================================
   * SCSS Mixins - Reusable component patterns
   * ====================================== */

  // Enhanced responsive design mixins using hardcoded breakpoints
  // Note: CSS variables don't work in media queries, so we use hardcoded em values
  // Mobile portrait: 0-479px (< 30em)
  // Mobile landscape: 480-639px (30em - 39.9375em)
  // Small tablet: 640-767px (40em - 47.9375em)
  // Tablet: 768-1023px (48em - 63.9375em)
  // Desktop: 1024-1279px (64em - 79.9375em)
  // Large desktop: 1280px+ (80em+)

  @mixin mobile-portrait {
    @media (max-width: 29.9375em) {
      // < 480px
      @content;
    }
  }

  @mixin mobile {
    @media (max-width: 39.9375em) {
      // < 640px
      @content;
    }
  }

  @mixin mobile-landscape {
    @media (min-width: 30em) and (max-width: 39.9375em) {
      // 480px - 640px
      @content;
    }
  }

  @mixin small-tablet {
    @media (min-width: 40em) and (max-width: 47.9375em) {
      // 640px - 768px
      @content;
    }
  }

  @mixin tablet {
    @media (min-width: 48em) and (max-width: 63.9375em) {
      // 768px - 1023px
      @content;
    }
  }

  @mixin desktop {
    @media (min-width: 64em) {
      // 1024px+
      @content;
    }
  }

  @mixin large-desktop {
    @media (min-width: 80em) {
      // 1280px+
      @content;
    }
  }

  // Enhanced component mixins using global.css variables
  @mixin fade-in-up($delay: 0s) {
    animation: fadeInUp var(--animation-duration-extended) ease-out $delay both;
  }

  @mixin hover-lift {
    transition:
      transform var(--transition-normal),
      box-shadow var(--transition-normal);

    &:hover {
      transform: translateY(var(--animation-y-offset-small));
      box-shadow: var(--shadow-lg);
    }
  }

  @mixin card-style {
    background: var(--card-bg);
    border: var(--border-width-thin) solid var(--card-border);
    border-radius: var(--radius-xl);
    box-shadow: var(--card-shadow);
    contain: layout style;
  }

  // Enhanced badge styling mixins using global.css variables
  @mixin badge-gradient($primary-color, $secondary-color) {
    background: linear-gradient(
      var(--gradient-angle),
      $primary-color var(--gradient-start),
      $secondary-color var(--gradient-end)
    );
    border: var(--border-width-thin) solid rgba(255, 255, 255, 0.2);
    box-shadow:
      var(--shadow-lg),
      var(--shadow-sm),
      inset 0 var(--border-width-thin) 0 rgba(255, 255, 255, 0.1);
  }

  @mixin badge-hover($primary-color, $secondary-color) {
    &:hover {
      background: linear-gradient(
        var(--gradient-angle),
        $primary-color var(--gradient-start),
        $secondary-color var(--gradient-end)
      );
      transform: translateY(calc(-1 * var(--space-xs))) scale(var(--scale-focus));
      box-shadow:
        var(--card-shadow-hover),
        var(--shadow-md),
        inset 0 var(--border-width-thin) 0 rgba(255, 255, 255, 0.2);
      border-color: rgba(255, 255, 255, 0.3);
      filter: brightness(var(--filter-brightness-medium));
    }
  }

  @mixin badge-icon($color) {
    color: $color;
    filter: drop-shadow(
      0 var(--border-width-thin) var(--space-micro) rgba(0, 0, 0, var(--shadow-opacity-light))
    );
    transition: all var(--transition-fast);

    &:hover {
      filter: drop-shadow(0 var(--space-micro) var(--space-xs) rgba(0, 0, 0, 0.4));
      transform: scale(var(--animation-scale-medium));
    }
  }

  /* ======================================
   * Component Animations
   * ====================================== */

  // Enhanced keyframes using global.css variables
  @keyframes fadeInUp {
    from {
      opacity: var(--animation-opacity-start);
      transform: translateY(var(--space-xl));
    }
    to {
      opacity: var(--animation-opacity-full);
      transform: translateY(0);
    }
  }

  /* ======================================
   * Game Header - Enhanced visual hierarchy
   * ====================================== */
  .game-header {
    margin-bottom: var(--space-xl);
    position: relative;
    z-index: var(--z-sticky);
    contain: layout;

    // Mobile portrait - compact header
    @include mobile-portrait {
      margin-bottom: var(--space-lg);
    }

    // Mobile landscape - balanced spacing
    @include mobile-landscape {
      margin-bottom: var(--space-lg);
    }

    // Desktop - enhanced spacing
    @include desktop {
      margin-bottom: var(--space-2xl);
    }

    /* Enhanced game info badges container with horizontal mobile layout */
    &__badges {
      margin-top: var(--space-xl);
      display: flex;
      flex-wrap: wrap;
      align-items: center;
      justify-content: center;
      gap: var(--space-lg);
      contain: layout;
      @include fade-in-up;

      // Large desktop - enhanced experience
      @include large-desktop {
        gap: var(--space-2xl);
      }

      // Desktop - premium spacing
      @include desktop {
        gap: var(--space-xl);
        margin-top: var(--space-2xl);
      }

      // Small tablet - optimal spacing
      @include small-tablet {
        gap: var(--space-lg);
        flex-direction: row;
      }

      // Mobile general - horizontal layout with compact spacing
      @include mobile {
        flex-direction: row !important;
        flex-wrap: nowrap !important;
        gap: var(--space-xs) !important;
        justify-content: center !important;
        margin-top: var(--space-md) !important;
        width: 100% !important;
        overflow-x: auto !important;
        scrollbar-width: none !important;
        -ms-overflow-style: none !important;

        &::-webkit-scrollbar {
          display: none;
        }
      }

      // Mobile portrait - horizontal but very compact
      @include mobile-portrait {
        flex-direction: row !important;
        flex-wrap: nowrap !important;
        gap: var(--space-xs) !important;
        margin-top: var(--space-sm) !important;
        justify-content: space-between !important;
        padding: 0 var(--space-xs) !important;
      }

      // Mobile landscape - horizontal with balanced spacing
      @include mobile-landscape {
        flex-direction: row !important;
        gap: var(--space-sm) !important;
        flex-wrap: nowrap !important;
        justify-content: center !important;
      }
    }
  }

  /* Enhanced individual game badge with mobile-first responsive design */
  .game-badge {
    position: relative;
    display: inline-flex;
    align-items: center;
    min-height: var(--touch-target-enhanced);
    border-radius: var(--radius-2xl);
    padding: var(--space-lg) var(--space-2xl);
    transition: all var(--transition-normal);
    cursor: default;
    overflow: hidden;
    contain: layout style;
    @include fade-in-up(0.1s);

    // Large desktop - enhanced badges
    @include large-desktop {
      padding: var(--space-xl) var(--space-3xl);
      min-width: var(--stat-width-sm);
    }

    // Desktop - premium badge experience
    @include desktop {
      padding: var(--space-lg) var(--space-2xl);
      border-radius: var(--radius-2xl);
      min-width: var(--stat-width-md);
    }

    // Small tablet - balanced layout
    @include small-tablet {
      padding: var(--space-md) var(--space-xl);
      border-radius: var(--radius-xl);
    }

    // Mobile general - horizontal layout with flex (higher specificity)
    @include mobile {
      flex: 1 !important;
      min-height: var(--touch-target-enhanced) !important;
      padding: var(--space-xs) var(--space-sm) !important;
      border-radius: var(--radius-md) !important;
      min-width: auto !important;
      max-width: calc(33.333% - var(--space-xs)) !important;
      justify-content: center !important;
    }

    // Mobile portrait - horizontal compact badges
    @include mobile-portrait {
      width: auto !important;
      flex: 1 !important;
      justify-content: center;
      padding: var(--space-xs) var(--space-xs) !important;
      border-radius: var(--radius-sm) !important;
      min-height: var(--touch-target-enhanced) !important;
      font-size: var(--text-xs) !important;
      max-width: calc(33.333% - var(--space-xs)) !important;
    }

    // Mobile landscape - horizontal balanced badges
    @include mobile-landscape {
      flex: 1 !important;
      padding: var(--space-xs) var(--space-sm) !important;
      border-radius: var(--radius-md) !important;
      min-width: auto !important;
      max-width: calc(33.333% - var(--space-sm)) !important;
    }

    /* Enhanced staggered animation using global.css timing */
    &:first-child {
      animation-delay: calc(var(--animation-delay-base) * 1ms);
    }

    &:nth-child(2) {
      animation-delay: calc(var(--animation-delay-base) * 2ms);
    }

    &:nth-child(3) {
      animation-delay: calc(var(--animation-delay-base) * 3ms);
    }

    /* Badge icon styling - Smaller, refined design with proper mobile priority */
    &__icon {
      // Default desktop sizing
      margin-right: var(--space-md);
      height: var(--text-lg);
      width: var(--text-lg);
      flex-shrink: 0;
      transition: all var(--transition-fast);
      z-index: 2;
      position: relative;

      // Large desktop - enhanced sizing
      @include large-desktop {
        height: var(--text-lg);
        width: var(--text-lg);
        margin-right: var(--space-md);
      }

      // Small tablet - base sizing
      @include small-tablet {
        height: var(--text-base);
        width: var(--text-base);
        margin-right: var(--space-sm);
      }

      // Mobile - smaller icons (most specific, comes last)
      @include mobile {
        margin-right: var(--space-xs) !important;
        height: var(--text-sm) !important;
        width: var(--text-sm) !important;
      }

      // Mobile portrait - ultra compact (highest specificity)
      @include mobile-portrait {
        margin-right: var(--space-xs) !important;
        height: calc(var(--text-sm) * 0.9) !important;
        width: calc(var(--text-sm) * 0.9) !important;
      }

      // Mobile landscape - compact
      @include mobile-landscape {
        margin-right: var(--space-xs) !important;
        height: var(--text-sm) !important;
        width: var(--text-sm) !important;
      }

      &--difficulty {
        @include badge-icon(#fbbf24);
      }

      &--rounds {
        @include badge-icon(#93c5fd);
      }

      &--coins {
        @include badge-icon(#fbbf24);
      }
    }

    /* Badge text styling - Refined typography with proper mobile priority */
    &__text {
      // Default desktop sizing
      font-size: var(--text-base);
      font-weight: var(--font-bold);
      color: var(--text-primary);
      letter-spacing: 0.02em;
      z-index: 2;
      position: relative;
      transition: all var(--transition-fast);
      text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);

      // Large desktop - refined sizing
      @include large-desktop {
        font-size: var(--text-base);
      }

      // Small tablet - balanced sizing
      @include small-tablet {
        font-size: var(--text-sm);
      }

      // Mobile - smaller text for compact badges (most specific)
      @include mobile {
        font-size: var(--text-xs) !important;
      }

      // Mobile portrait - ultra compact text
      @include mobile-portrait {
        font-size: calc(var(--text-xs) * 0.9) !important;
        letter-spacing: 0.01em;
      }

      // Mobile landscape - compact text
      @include mobile-landscape {
        font-size: var(--text-xs) !important;
      }
    }

    /* Difficulty badge - Purple gradient */
    &:first-child {
      @include badge-gradient(#7c3aed, #6d28d9);
      @include badge-hover(#7c3aed, #6d28d9);
    }

    /* Rounds badge - Blue gradient */
    &:nth-child(2) {
      @include badge-gradient(#2563eb, #1d4ed8);
      @include badge-hover(#2563eb, #1d4ed8);
    }

    /* Coins badge - Gold gradient */
    &:nth-child(3) {
      @include badge-gradient(#ca8a04, #a16207);
      @include badge-hover(#ca8a04, #a16207);
    }

    /* Enhanced focus states for keyboard navigation */
    &:focus-visible {
      outline: var(--focus-outline);
      outline-offset: var(--focus-ring-offset);
      box-shadow:
        var(--focus-ring),
        0 8px 25px rgba(0, 0, 0, 0.2);
    }
  }

  /* ======================================
   * Game Container - Enhanced responsive design with comprehensive breakpoints
   * ====================================== */
  .game-container {
    margin: 0 auto;
    width: var(--width-full);
    max-width: var(--container-lg);
    border-radius: var(--radius-xl);
    @include card-style;
    @include hover-lift;
    padding: var(--space-2xl);
    text-align: center;
    opacity: var(--animation-opacity-full);
    transition: all var(--transition-slow);
    position: relative;
    overflow: hidden;
    animation: fadeInUp var(--animation-duration-extended) ease-out
      calc(var(--animation-delay-medium) * 1ms) both;
    contain: layout style paint;

    // Mobile portrait - ultra compact layout with minimal side margins
    @include mobile-portrait {
      padding: var(--space-md) var(--space-xs);
      margin: 0 var(--space-xs);
      border-radius: var(--radius-md);
      max-width: calc(100vw - var(--space-sm));
    }

    // Mobile landscape - improved spacing with reduced side padding
    @include mobile-landscape {
      padding: var(--space-lg) var(--space-sm);
      margin: 0 var(--space-xs);
      border-radius: var(--radius-lg);
      max-width: calc(var(--container-sm) - var(--space-lg));
    }

    // Mobile general - ensure good touch targets with compact horizontal padding
    @include mobile {
      padding: var(--space-xl) var(--space-sm) !important;
      border-radius: var(--radius-lg);
      max-width: calc(100vw - var(--space-md)) !important;
      margin: 0 var(--space-xs) !important;
    }

    // Small tablet - balanced layout
    @include small-tablet {
      padding: var(--space-xl) var(--space-lg);
      border-radius: var(--radius-lg);
      max-width: var(--container-md);
    }

    // Tablet - enhanced layout
    @include tablet {
      padding: var(--space-2xl) var(--space-xl);
      border-radius: var(--radius-xl);
      max-width: var(--container-lg);
    }

    // Desktop - premium experience
    @include desktop {
      padding: var(--space-3xl);
      border-radius: var(--radius-xl);
      max-width: var(--container-lg);
    }

    // Large desktop - enhanced experience
    @include large-desktop {
      padding: var(--space-3xl) var(--space-4xl);
      border-radius: var(--radius-2xl);
      max-width: calc(var(--container-lg) * 1.125);
    }

    &[data-hidden="true"] {
      opacity: var(--animation-opacity-start);
      transform: translateY(var(--animation-y-offset)) scale(var(--animation-scale-start));
      transition: all var(--transition-normal);
    }

    /* Question text - Larger, more prominent design with proper mobile hierarchy */
    &__question {
      // Default desktop sizing
      margin-bottom: var(--space-2xl);
      font-size: var(--text-4xl);
      font-weight: var(--font-bold);
      line-height: var(--leading-enhanced);
      color: var(--text-primary);
      position: relative;
      z-index: 1;
      padding: var(--space-xl) var(--space-2xl);
      border-radius: var(--radius-lg);
      background: var(--bg-tertiary);
      border: var(--border-width-thin) solid var(--border-secondary);
      contain: layout style;
      text-align: center;

      // Large desktop - enhanced prominence
      @include large-desktop {
        font-size: var(--text-5xl);
        padding: var(--space-2xl) var(--space-3xl);
        margin-bottom: var(--space-3xl);
        line-height: var(--leading-tight);
      }

      // Tablet - optimal reading experience
      @include tablet {
        font-size: var(--text-3xl);
        padding: var(--space-xl) var(--space-2xl);
        margin-bottom: var(--space-2xl);
      }

      // Small tablet - strong visual hierarchy
      @include small-tablet {
        font-size: var(--text-2xl);
        padding: var(--space-lg) var(--space-xl);
        margin-bottom: var(--space-xl);
      }

      // Mobile general - improved prominence with compact horizontal padding
      @include mobile {
        font-size: var(--text-xl) !important;
        padding: var(--space-md) var(--space-sm) !important;
        margin-bottom: var(--space-xl) !important;
        line-height: var(--leading-relaxed) !important;
      }

      // Mobile portrait - readable and prominent with minimal padding
      @include mobile-portrait {
        font-size: var(--text-lg) !important;
        padding: var(--space-sm) var(--space-xs) !important;
        margin-bottom: var(--space-lg) !important;
        line-height: var(--leading-normal) !important;
      }

      // Mobile landscape - enhanced readability with compact padding
      @include mobile-landscape {
        font-size: var(--text-xl) !important;
        padding: var(--space-md) var(--space-sm) !important;
        margin-bottom: var(--space-lg) !important;
        line-height: var(--leading-relaxed) !important;
      }
    }

    /* Options container - Enhanced responsive spacing */
    &__options {
      display: flex;
      flex-direction: column;
      gap: var(--space-lg);
      position: relative;
      z-index: 1;
      contain: layout;

      // Mobile portrait - compact option spacing
      @include mobile-portrait {
        gap: var(--space-md);
      }

      // Mobile landscape - balanced spacing
      @include mobile-landscape {
        gap: var(--space-md);
      }

      // Small tablet - enhanced spacing
      @include small-tablet {
        gap: var(--space-lg);
      }

      // Desktop - premium spacing
      @include desktop {
        gap: var(--space-xl);
      }

      // Large desktop - enhanced experience
      @include large-desktop {
        gap: calc(var(--space-xl) + var(--space-sm));
      }
    }
  }

  /* Game controls area - Enhanced responsive positioning */
  .game-controls {
    margin-top: var(--space-xl);
    display: flex;
    justify-content: center;
    position: relative;
    z-index: 2;
    contain: layout;

    // Mobile portrait - compact controls
    @include mobile-portrait {
      margin-top: var(--space-lg);
      padding: 0 var(--space-xs);
    }

    // Mobile landscape - balanced layout
    @include mobile-landscape {
      margin-top: var(--space-lg);
      padding: 0 var(--space-sm);
    }

    // Mobile general
    @include mobile {
      margin-top: var(--space-lg);
    }

    // Small tablet - enhanced spacing
    @include small-tablet {
      margin-top: var(--space-xl);
    }

    // Desktop - premium spacing
    @include desktop {
      margin-top: var(--space-2xl);
    }

    // Large desktop - enhanced experience
    @include large-desktop {
      margin-top: var(--space-3xl);
    }
  }

  /* ======================================
   * Enhanced Accessibility & Performance Optimizations
   * ====================================== */

  /* Comprehensive reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    *,
    ::before,
    ::after {
      animation: none !important;
      transition: var(--transition-instant) !important;
    }

    .game-badge:hover,
    .game-container:hover {
      transform: none;
    }

    @keyframes fadeInUp {
      from,
      to {
        opacity: var(--animation-opacity-full);
        transform: translateY(0) translateZ(0);
      }
    }

    @keyframes coinPulseAAA {
      from,
      to {
        transform: scale(var(--animation-scale-default));
        text-shadow: none;
        color: var(--color-warning-400);
      }
    }
  }

  /* Enhanced high contrast and forced colors mode support */
  @media (forced-colors: active) {
    .game-container,
    .game-badge {
      border: var(--border-width-enhanced) solid CanvasText;
      background-color: Canvas;
      box-shadow: none;
      backdrop-filter: none;
      -webkit-backdrop-filter: none;
      forced-color-adjust: none;
    }

    .game-badge {
      background: ButtonFace;
      color: ButtonText;
    }

    .game-container__question {
      background: Canvas;
      border: var(--border-width-thin) solid CanvasText;
      color: CanvasText;
    }

    .game-option-button {
      background: ButtonFace;
      border: var(--border-width-thin) solid ButtonBorder;
      color: ButtonText;

      &:hover,
      &:focus-visible {
        background: Highlight;
        color: HighlightText;
      }
    }
  }

  /* Enhanced focus states with improved accessibility */
  .game-badge:focus-visible,
  .game-container:focus-visible {
    outline: var(--focus-enhanced-outline-dark);
    outline-offset: var(--focus-ring-offset);
    box-shadow: var(--focus-ring);
  }

  .game-container__question:focus-visible {
    outline: var(--focus-outline);
    outline-offset: var(--focus-ring-offset);
    box-shadow: var(--focus-ring);
  }

  /* Enhanced touch target optimization for all pointer types */
  @media (pointer: coarse) {
    .game-badge {
      min-height: var(--touch-target-enhanced);
      padding: var(--space-md) var(--space-lg);

      @include mobile-portrait {
        min-height: calc(var(--touch-target-enhanced) + var(--space-sm));
      }
    }

    .game-option-button {
      min-height: var(--touch-target-enhanced);
      padding: var(--space-lg) var(--space-xl);

      @include mobile-portrait {
        min-height: calc(var(--touch-target-enhanced) + var(--space-md));
        padding: var(--space-md) var(--space-lg);
      }
    }
  }

  /* Enhanced pointer device optimizations */
  @media (pointer: fine) {
    .game-badge:hover {
      cursor: default;
      transform: translateY(var(--animation-y-offset-micro)) scale(var(--animation-scale-small));
    }

    .game-container:hover {
      cursor: default;
    }

    .game-option-button:hover {
      cursor: pointer;
    }
  }

  /* Enhanced print optimization with global.css variables */
  @media print {
    .game-container,
    .game-header,
    .game-badge {
      break-inside: avoid;
      border: var(--print-border);
      background: var(--print-bg) !important;
      color: var(--print-text) !important;
      box-shadow: none;
      backdrop-filter: none;
      -webkit-backdrop-filter: none;
    }

    .game-container__question {
      background: var(--print-bg) !important;
      border: var(--print-border);
    }

    .game-option-button {
      background: var(--print-bg) !important;
      border: var(--print-border);
      color: var(--print-text) !important;
    }
  }

  /* Enhanced landscape orientation support for all breakpoints */
  @media (max-width: 63.9375em) and (orientation: landscape) {
    .game-container {
      max-height: 90vh;
      overflow-y: auto;
      scrollbar-width: var(--scrollbar-thin);
      scrollbar-color: var(--scrollbar-thumb-bg) var(--scrollbar-track-bg);

      // Mobile portrait landscape
      @media (max-width: 29.9375em) {
        max-height: 85vh;
        padding: var(--space-sm);
      }

      // Mobile landscape specific
      @media (min-width: 30em) and (max-width: 39.9375em) {
        max-height: 88vh;
        padding: var(--space-md);
      }
    }

    .game-header {
      margin-bottom: var(--space-md);

      &__badges {
        gap: var(--space-sm);
        margin-top: var(--space-md);
      }
    }
  }

  /* Container queries for enhanced responsive behavior */
  .game-container {
    container-type: inline-size;

    // Container query for very small containers
    @container (max-width: 20rem) {
      padding: var(--space-sm);
      border-radius: var(--radius-sm);

      .game-container__question {
        font-size: var(--text-sm);
        padding: var(--space-xs);
      }
    }

    // Container query for small containers
    @container (max-width: 28rem) {
      border-radius: var(--radius-md);

      .game-container__options {
        gap: var(--space-sm);
      }
    }
  }

  /* Enhanced support for different screen densities */
  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
    .game-badge,
    .game-container {
      -webkit-font-smoothing: var(--font-smoothing-light);
      -moz-osx-font-smoothing: var(--font-smoothing-grayscale);
    }
  }
</style>
