---
/**
 * Highscores Page
 *
 * This page displays the top scores across different game modes and categories.
 * Users can filter scores by game mode and category.
 *
 * Features:
 * - Display of top scores for quiz and chronology game modes
 * - Filtering by game mode and category
 * - Responsive design with CSS
 * - WCAG AAA compliant
 *
 * URL: /[lang]/highscores
 */
import Layout from "@layouts/Layout.astro";
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import { Icon } from "astro-icon/components";
import { formatDate } from "@utils/dateUtils";

// Interface for highscore entry
interface HighscoreEntry {
  id: string;
  username: string;
  gameMode: "quiz" | "chronology";
  score: number;
  category: string;
  createdAt: string;
}

// Get language from URL and initialize translations
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(String(lang));

// Default values
let highscores: HighscoreEntry[] = [];
let isLoading = true;
let error: string | null = null;

// Get filter parameters from URL
const url = Astro.url;
const searchParams = url.searchParams;
const selectedGameMode = searchParams.get("gameMode");
const selectedCategory = searchParams.get("category");

// Build API URL with filters
let apiUrl = `${Astro.url.origin}/${String(lang)}/api/scores/highscores`;
const apiParams = new URLSearchParams();

if (selectedGameMode) {
  apiParams.append("gameMode", selectedGameMode);
}

if (selectedCategory) {
  apiParams.append("category", selectedCategory);
}

if (apiParams.toString()) {
  apiUrl += `?${apiParams.toString()}`;
}

// Fetch highscores data from API endpoint with filters
try {
  const response = await fetch(apiUrl, {
    headers: {
      "Content-Type": "application/json",
    },
  });

  const data = await response.json();

  if (data.success) {
    highscores = data.highscores;
  } else {
    error = data.error || t("highscores.error");
  }
} catch (err) {
  console.error("Error fetching highscores data:", err);
  error = t("highscores.error");
} finally {
  isLoading = false;
}

// Format the date for display
const formatHighscoreDate = (dateString: string): string => {
  try {
    return formatDate(dateString, String(lang));
  } catch {
    return dateString;
  }
};

// Get unique categories from highscores for filter dropdown
const categories = [...new Set(highscores.map((score) => score.category))];

// Game mode names for display
const gameModeNames = {
  quiz: t("profile.stats.quiz"),
  chronology: t("profile.stats.chronology"),
};
---

<Layout
  title={t("highscores.title") || "Highscores"}
  description={t("highscores.description") ||
    "View the top scores across different game modes and categories"}
  type="website"
>
  <div class="highscores">
    <h1 class="highscores__title">
      {t("highscores.title") || "Highscores"}
    </h1>

    {
      isLoading && (
        <div class="highscores__loading" aria-live="polite">
          <div class="highscores__loading-content">
            <Icon name="loading" class="highscores__loading-icon" aria-hidden="true" />
            <span class="sr-only">{t("common.loading")}</span>
          </div>
        </div>
      )
    }

    {
      error && (
        <div class="highscores__error" role="alert">
          <p>{error}</p>
        </div>
      )
    }

    {
      !isLoading && !error && (
        <div class="highscores__content">
          <section class="highscores__filters" aria-labelledby="filter-heading">
            <h2 id="filter-heading" class="highscores__filter-title">
              {t("highscores.filters") || "Filter Results"}
            </h2>

            <div class="highscores__filter-grid">
              <div class="highscores__filter-item">
                <label for="game-mode-filter" class="highscores__filter-label">
                  {t("highscores.filter.game.mode") || "Game Mode"}
                </label>
                <select id="game-mode-filter" class="highscores__filter-select">
                  <option value="" selected={!selectedGameMode}>
                    {t("highscores.filter.all") || "All Game Modes"}
                  </option>
                  <option value="quiz" selected={selectedGameMode === "quiz"}>
                    {t("profile.stats.quiz") || "Quiz"}
                  </option>
                  <option value="chronology" selected={selectedGameMode === "chronology"}>
                    {t("profile.stats.chronology") || "Chronology"}
                  </option>
                </select>
              </div>

              <div class="highscores__filter-item">
                <label for="category-filter" class="highscores__filter-label">
                  {t("highscores.filter.category") || "Category"}
                </label>
                <div class="highscores__filter-dropdown">
                  <button
                    type="button"
                    id="category-dropdown-button"
                    class="highscores__filter-dropdown-button"
                    aria-haspopup="listbox"
                    aria-expanded="false"
                    aria-controls="category-dropdown-options"
                  >
                    <span id="selected-category">
                      {selectedCategory
                        ? categories.find((cat) => cat === selectedCategory) || selectedCategory
                        : t("highscores.filter.all") || "All Categories"}
                    </span>
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="highscores__filter-dropdown-icon"
                      viewBox="0 0 20 20"
                      fill="currentColor"
                      aria-hidden="true"
                    >
                      <path
                        fill-rule="evenodd"
                        d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                        clip-rule="evenodd"
                      />
                    </svg>
                  </button>

                  <select id="category-filter" class="sr-only" aria-hidden="true">
                    <option value="" selected={!selectedCategory}>
                      {t("highscores.filter.all") || "All Categories"}
                    </option>
                    {categories.map((category) => (
                      <option value={category} selected={selectedCategory === category}>
                        {category}
                      </option>
                    ))}
                  </select>

                  <div
                    id="category-dropdown-options"
                    class="highscores__filter-dropdown-options hidden"
                    aria-labelledby="category-dropdown-button"
                  >
                    <div class="highscores__filter-dropdown-search">
                      <div class="highscores__filter-dropdown-search-wrapper">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          class="highscores__filter-dropdown-search-icon"
                          viewBox="0 0 20 20"
                          fill="currentColor"
                          aria-hidden="true"
                        >
                          <path
                            fill-rule="evenodd"
                            d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z"
                            clip-rule="evenodd"
                          />
                        </svg>
                        <input
                          type="text"
                          id="category-search"
                          class="highscores__filter-dropdown-search-input"
                          placeholder={t("highscores.filter.search") || "Search categories..."}
                          aria-label={t("highscores.filter.search") || "Search categories"}
                        />
                      </div>
                    </div>

                    <div class="highscores__filter-dropdown-list" role="listbox">
                      {[
                        { value: "", label: t("highscores.filter.all") || "All Categories" },
                        ...categories.map((cat) => ({ value: cat, label: cat })),
                      ].map((option) => (
                        <button
                          class="highscores__filter-dropdown-option"
                          role="option"
                          data-value={option.value}
                          aria-selected={option.value === selectedCategory ? "true" : "false"}
                        >
                          {option.label}
                        </button>
                      ))}
                    </div>

                    <div
                      id="no-categories-found"
                      class="highscores__filter-dropdown-no-results hidden"
                    >
                      {t("highscores.filter.no.results") || "No categories found"}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </section>

          <section class="highscores__table-section" aria-labelledby="highscores-heading">
            <h2 id="highscores-heading" class="highscores__table-title">
              {t("highscores.table.title") || "Top Scores"}
            </h2>

            {highscores.length === 0 ? (
              <p class="highscores__table-empty">
                {t("highscores.empty") || "No highscores found"}
              </p>
            ) : (
              <div class="highscores__table-wrapper">
                <table class="highscores__table" aria-describedby="highscores-heading">
                  <thead>
                    <tr class="highscores__table-header-row">
                      <th scope="col" class="highscores__table-header-cell">
                        {t("highscores.table.rank") || "Rank"}
                      </th>
                      <th scope="col" class="highscores__table-header-cell">
                        {t("highscores.table.player") || "Player"}
                      </th>
                      <th scope="col" class="highscores__table-header-cell">
                        {t("highscores.table.game.mode") || "Game Mode"}
                      </th>
                      <th scope="col" class="highscores__table-header-cell">
                        {t("highscores.table.category") || "Category"}
                      </th>
                      <th
                        scope="col"
                        class="highscores__table-header-cell highscores__table-header-cell--right"
                      >
                        {t("highscores.table.score") || "Score"}
                      </th>
                      <th
                        scope="col"
                        class="highscores__table-header-cell highscores__table-header-cell--right"
                      >
                        {t("highscores.table.date") || "Date"}
                      </th>
                    </tr>
                  </thead>
                  <tbody>
                    {highscores.map((score, index) => (
                      <tr class="highscores__table-row">
                        <td class="highscores__table-cell highscores__table-cell--bold">
                          {index + 1}
                        </td>
                        <td class="highscores__table-cell">{score.username}</td>
                        <td class="highscores__table-cell">
                          <span
                            class={`highscores__table-badge highscores__table-badge--${score.gameMode}`}
                          >
                            {gameModeNames[score.gameMode as keyof typeof gameModeNames] ||
                              score.gameMode}
                          </span>
                        </td>
                        <td class="highscores__table-cell">{score.category}</td>
                        <td class="highscores__table-cell highscores__table-cell--right highscores__table-cell--bold">
                          {score.score}
                        </td>
                        <td class="highscores__table-cell highscores__table-cell--right">
                          {formatHighscoreDate(score.createdAt)}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            )}
          </section>
        </div>
      )
    }
  </div>
</Layout>

<script>
  // Enhanced filter functionality for highscores with searchable dropdown
  document.addEventListener("DOMContentLoaded", () => {
    const gameModeFilter = document.getElementById("game-mode-filter") as HTMLSelectElement;
    const categoryFilter = document.getElementById("category-filter") as HTMLSelectElement;
    const categoryDropdownButton = document.getElementById(
      "category-dropdown-button"
    ) as HTMLButtonElement;
    const categoryDropdownOptions = document.getElementById(
      "category-dropdown-options"
    ) as HTMLDivElement;
    const categorySearch = document.getElementById("category-search") as HTMLInputElement;
    const selectedCategoryText = document.getElementById("selected-category") as HTMLSpanElement;
    const noCategoriesFound = document.getElementById("no-categories-found") as HTMLDivElement;

    if (
      !gameModeFilter ||
      !categoryFilter ||
      !categoryDropdownButton ||
      !categoryDropdownOptions ||
      !categorySearch
    ) {
      return;
    }

    // Toggle dropdown visibility
    categoryDropdownButton.addEventListener("click", () => {
      const isExpanded = categoryDropdownButton.getAttribute("aria-expanded") === "true";
      categoryDropdownButton.setAttribute("aria-expanded", (!isExpanded).toString());
      categoryDropdownOptions.classList.toggle("hidden");

      if (!isExpanded) {
        // Focus search input when opening dropdown
        setTimeout(() => categorySearch.focus(), 100);
      }
    });

    // Close dropdown when clicking outside
    document.addEventListener("click", (event) => {
      if (
        !categoryDropdownButton.contains(event.target as Node) &&
        !categoryDropdownOptions.contains(event.target as Node)
      ) {
        categoryDropdownButton.setAttribute("aria-expanded", "false");
        categoryDropdownOptions.classList.add("hidden");
      }
    });

    // Handle category option selection
    const categoryOptions = categoryDropdownOptions.querySelectorAll(
      ".highscores__filter-dropdown-option"
    );
    categoryOptions.forEach((option) => {
      option.addEventListener("click", () => {
        const value = option.getAttribute("data-value") || "";
        const text = option.textContent?.trim() || "";

        // Update the hidden select value
        categoryFilter.value = value;

        // Update the visible button text
        selectedCategoryText.textContent = text;

        // Update aria-selected state
        categoryOptions.forEach((opt) => opt.setAttribute("aria-selected", "false"));
        option.setAttribute("aria-selected", "true");

        // Close the dropdown
        categoryDropdownButton.setAttribute("aria-expanded", "false");
        categoryDropdownOptions.classList.add("hidden");

        // Trigger filter update
        updateHighscores();
      });
    });

    // Filter dropdown options based on search input
    categorySearch.addEventListener("input", () => {
      const searchTerm = categorySearch.value.toLowerCase();
      let hasVisibleOptions = false;

      categoryOptions.forEach((option) => {
        const text = option.textContent?.toLowerCase() || "";
        const isAll = option.getAttribute("data-value") === ""; // "All Categories" option

        if (text.includes(searchTerm) || isAll) {
          (option as HTMLElement).style.display = "";
          hasVisibleOptions = true;
        } else {
          (option as HTMLElement).style.display = "none";
        }
      });

      // Show/hide "No results" message
      noCategoriesFound.classList.toggle("hidden", hasVisibleOptions);
    });

    // Handle keyboard navigation in dropdown
    categoryDropdownOptions.addEventListener("keydown", (e) => {
      if (e.key === "Escape") {
        categoryDropdownButton.setAttribute("aria-expanded", "false");
        categoryDropdownOptions.classList.add("hidden");
        categoryDropdownButton.focus();
      } else if (e.key === "ArrowDown" || e.key === "ArrowUp") {
        e.preventDefault();

        const visibleOptions = Array.from(categoryOptions).filter(
          (opt) => (opt as HTMLElement).style.display !== "none"
        );

        if (visibleOptions.length === 0) {
          return;
        }

        const currentFocusedIndex = visibleOptions.findIndex(
          (opt) => opt === document.activeElement
        );
        let nextIndex;

        if (e.key === "ArrowDown") {
          nextIndex = currentFocusedIndex < visibleOptions.length - 1 ? currentFocusedIndex + 1 : 0;
        } else {
          nextIndex = currentFocusedIndex > 0 ? currentFocusedIndex - 1 : visibleOptions.length - 1;
        }

        (visibleOptions[nextIndex] as HTMLElement).focus();
      } else if (e.key === "Enter" && document.activeElement !== categorySearch) {
        e.preventDefault();
        (document.activeElement as HTMLElement).click();
      }
    });

    // Function to update highscores based on filters
    const updateHighscores = async (): Promise<void> => {
      const gameMode = gameModeFilter.value;
      const category = categoryFilter.value;

      // Build query parameters
      const params = new URLSearchParams();
      if (gameMode) {
        params.append("gameMode", gameMode);
      }
      if (category) {
        params.append("category", category);
      }

      // Get current language from URL
      const lang = window.location.pathname.split("/")[1];

      try {
        // Show loading state
        const tableSection = document.querySelector('[aria-labelledby="highscores-heading"]');
        if (tableSection) {
          tableSection.innerHTML = `
            <h2 id="highscores-heading" class="highscores__table-title">
              ${document.getElementById("highscores-heading")?.textContent || "Top Scores"}
            </h2>
            <div class="highscores__loading">
              <div class="highscores__loading-content">
                <svg class="highscores__loading-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                <p class="highscores__loading-text">Loading highscores...</p>
              </div>
            </div>
          `;
        }

        // Fetch filtered highscores
        const response = await fetch(`/${String(lang)}/api/scores/highscores?${params.toString()}`);
        const data = await response.json();

        if (!data.success) {
          throw new Error(data.error || "Failed to load highscores");
        }

        // Reload the page with the new filters to update the server-rendered content
        window.location.href = `/${String(lang)}/highscores?${params.toString()}`;
      } catch (error) {
        console.error("Error updating highscores:", error);
        // Show error message
        const tableSection = document.querySelector('[aria-labelledby="highscores-heading"]');
        if (tableSection) {
          tableSection.innerHTML = `
            <h2 id="highscores-heading" class="highscores__table-title">
              ${document.getElementById("highscores-heading")?.textContent || "Top Scores"}
            </h2>
            <div class="highscores__error">
              <p>Error loading highscores</p>
            </div>
          `;
        }
      }
    };

    // Add event listener to game mode filter
    gameModeFilter.addEventListener("change", updateHighscores);

    // Set initial filter values from URL params if present
    const urlParams = new URLSearchParams(window.location.search);
    const gameModeParam = urlParams.get("gameMode");
    const categoryParam = urlParams.get("category");

    if (gameModeParam) {
      gameModeFilter.value = gameModeParam;
    }

    if (categoryParam) {
      categoryFilter.value = categoryParam;

      // Update the visible button text with the selected category
      const selectedOption = Array.from(categoryOptions).find(
        (opt) => opt.getAttribute("data-value") === categoryParam
      );

      if (selectedOption) {
        selectedCategoryText.textContent = selectedOption.textContent?.trim() || "";
        categoryOptions.forEach((opt) => opt.setAttribute("aria-selected", "false"));
        selectedOption.setAttribute("aria-selected", "true");
      }
    }
  });
</script>

<style>
  /* Highscores container */
  .highscores {
    max-width: var(--breakpoint-lg);
    margin-left: auto;
    margin-right: auto;
    padding: 0 var(--spacing-md);
  }

  /* Highscores title */
  .highscores__title {
    margin-bottom: var(--spacing-xl);
    font-size: var(--font-size-3xl);
    font-weight: 700;
    text-align: center;
    color: var(--color-white);
  }

  /* Loading state */
  .highscores__loading {
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 300px;
  }

  .highscores__loading-content {
    text-align: center;
  }

  .highscores__loading-icon {
    width: 3rem;
    height: 3rem;
    color: var(--color-purple-400);
    animation: spin 1.5s linear infinite;
  }

  .highscores__loading-text {
    margin-top: var(--spacing-md);
    color: var(--color-text-body);
  }

  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  /* Error message */
  .highscores__error {
    margin-bottom: var(--spacing-xl);
    padding: var(--spacing-md);
    border-radius: var(--border-radius-md);
    border: 1px solid var(--color-pink-700);
    background-color: rgba(131, 24, 67, 0.3); /* --color-pink-900 with 30% opacity */
    color: var(--color-white);
  }

  .highscores__error p {
    font-weight: 500;
    margin-bottom: 0;
  }

  /* Content container */
  .highscores__content {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-2xl);
  }

  /* Filters section */
  .highscores__filters {
    padding: var(--spacing-lg);
    background-color: var(--color-background-card);
    border-radius: var(--border-radius-md);
    box-shadow: var(--shadow-md);
  }

  .highscores__filter-title {
    font-size: var(--font-size-xl);
    margin-bottom: var(--spacing-md);
    color: var(--color-text-primary);
  }

  .highscores__filter-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--spacing-lg);
  }

  .highscores__filter-item {
    display: flex;
    flex-direction: column;
  }

  .highscores__filter-label {
    display: block;
    margin-bottom: var(--spacing-sm);
    font-size: var(--font-size-md);
    color: var(--color-gray-300);
  }

  .highscores__filter-select {
    width: 100%;
    padding: var(--spacing-md);
    border-radius: var(--border-radius-md);
    border: 1px solid var(--color-gray-700);
    background-color: var(--color-gray-800);
    color: var(--color-white);
    font-size: var(--font-size-md);
  }

  .highscores__filter-select:focus {
    outline: none;
    border-color: var(--color-purple-500);
    box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.3);
  }

  .highscores__filter-dropdown {
    position: relative;
  }

  .highscores__filter-dropdown-button {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    padding: var(--spacing-md);
    border-radius: var(--border-radius-md);
    border: 1px solid var(--color-gray-700);
    background-color: var(--color-gray-800);
    color: var(--color-white);
    font-size: var(--font-size-md);
    cursor: pointer;
  }

  .highscores__filter-dropdown-button:hover {
    background-color: var(--color-gray-700);
  }

  .highscores__filter-dropdown-button:focus {
    outline: none;
    border-color: var(--color-purple-500);
    box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.3);
  }

  .highscores__filter-dropdown-icon {
    width: 1.25rem;
    height: 1.25rem;
    color: var(--color-gray-400);
  }

  .highscores__filter-dropdown-options {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    z-index: 10;
    margin-top: var(--spacing-xs);
    border-radius: var(--border-radius-md);
    border: 1px solid var(--color-gray-700);
    background-color: var(--color-gray-800);
    box-shadow: var(--shadow-md);
  }

  .hidden {
    display: none;
  }

  .highscores__filter-dropdown-search {
    padding: var(--spacing-sm);
    border-bottom: 1px solid var(--color-gray-700);
  }

  .highscores__filter-dropdown-search-wrapper {
    position: relative;
  }

  .highscores__filter-dropdown-search-icon {
    position: absolute;
    top: 50%;
    left: var(--spacing-sm);
    width: 1.25rem;
    height: 1.25rem;
    color: var(--color-gray-400);
    transform: translateY(-50%);
  }

  .highscores__filter-dropdown-search-input {
    width: 100%;
    padding: var(--spacing-sm) var(--spacing-md) var(--spacing-sm) calc(var(--spacing-md) + 1.25rem);
    border-radius: var(--border-radius-sm);
    border: 1px solid var(--color-gray-700);
    background-color: var(--color-gray-900);
    color: var(--color-white);
    font-size: var(--font-size-md);
  }

  .highscores__filter-dropdown-search-input:focus {
    outline: none;
    border-color: var(--color-purple-500);
    box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.3);
  }

  .highscores__filter-dropdown-list {
    max-height: 15rem;
    overflow-y: auto;
    padding: var(--spacing-xs) 0;
    margin: 0;
  }

  .highscores__filter-dropdown-option {
    display: block;
    width: 100%;
    text-align: left;
    padding: var(--spacing-sm) var(--spacing-md);
    background: none;
    border: none;
    color: var(--color-white);
    font-size: var(--font-size-md);
    cursor: pointer;
  }

  .highscores__filter-dropdown-option:hover {
    background-color: var(--color-gray-700);
  }

  .highscores__filter-dropdown-option:focus {
    outline: none;
    background-color: var(--color-gray-700);
    box-shadow: 0 0 0 2px var(--color-purple-500) inset;
  }

  .highscores__filter-dropdown-option[aria-selected="true"] {
    background-color: var(--color-purple-900);
    color: var(--color-white);
    font-weight: 500;
  }

  .highscores__filter-dropdown-no-results {
    padding: var(--spacing-sm) var(--spacing-md);
    color: var(--color-gray-400);
    text-align: center;
  }

  /* Table section */
  .highscores__table-section {
    padding: var(--spacing-lg);
    background-color: var(--color-background-card);
    border-radius: var(--border-radius-md);
    box-shadow: var(--shadow-md);
  }

  .highscores__table-title {
    font-size: var(--font-size-xl);
    margin-bottom: var(--spacing-md);
    color: var(--color-text-primary);
  }

  .highscores__table-empty {
    padding: var(--spacing-lg) 0;
    text-align: center;
    color: var(--color-gray-400);
  }

  .highscores__table-wrapper {
    overflow-x: auto;
  }

  .highscores__table {
    width: 100%;
    border-collapse: collapse;
  }

  .highscores__table-header-row {
    border-bottom: 1px solid var(--color-gray-700);
  }

  .highscores__table-header-cell {
    padding: var(--spacing-md);
    text-align: left;
    font-weight: 500;
    color: var(--color-gray-300);
  }

  .highscores__table-header-cell--right {
    text-align: right;
  }

  .highscores__table-row {
    border-bottom: 1px solid var(--color-gray-700);
    transition: background-color 0.2s;
  }

  .highscores__table-row:hover {
    background-color: var(--color-gray-700);
  }

  .highscores__table-cell {
    padding: var(--spacing-md);
    color: var(--color-white);
  }

  .highscores__table-cell--bold {
    font-weight: 700;
  }

  .highscores__table-cell--right {
    text-align: right;
  }

  .highscores__table-badge {
    display: inline-flex;
    align-items: center;
    padding: var(--spacing-xs) var(--spacing-sm);
    border-radius: var(--border-radius-full);
    font-size: var(--font-size-sm);
    font-weight: 500;
  }

  .highscores__table-badge--quiz {
    background-color: rgba(234, 179, 8, 0.3);
    color: #fcd34d; /* light yellow */
  }

  .highscores__table-badge--chronology {
    background-color: rgba(59, 130, 246, 0.3);
    color: #93c5fd; /* light blue */
  }

  /* Media queries for responsive design */
  @media (min-width: 768px) {
    .highscores {
      padding: 0 var(--spacing-lg);
    }

    .highscores__title {
      font-size: var(--font-size-4xl);
    }

    .highscores__filter-grid {
      grid-template-columns: 1fr 1fr;
    }
  }

  /* Light mode overrides */
  @media (prefers-color-scheme: light) {
    .highscores__title {
      color: var(--color-gray-900);
    }

    .highscores__filter-label {
      color: var(--color-gray-700);
    }

    .highscores__filter-select,
    .highscores__filter-dropdown-button,
    .highscores__filter-dropdown-search-input {
      border-color: var(--color-gray-300);
      background-color: var(--color-white);
      color: var(--color-gray-900);
    }

    .highscores__filter-dropdown-button:hover {
      background-color: var(--color-gray-100);
    }

    .highscores__filter-dropdown-options {
      border-color: var(--color-gray-300);
      background-color: var(--color-white);
    }

    .highscores__filter-dropdown-option {
      color: var(--color-gray-900);
    }

    .highscores__filter-dropdown-option:hover,
    .highscores__filter-dropdown-option:focus {
      background-color: var(--color-gray-100);
    }

    .highscores__filter-dropdown-search {
      border-color: var(--color-gray-300);
    }

    .highscores__filter-dropdown-icon,
    .highscores__filter-dropdown-search-icon {
      color: var(--color-gray-600);
    }

    .highscores__table-header-cell {
      color: var(--color-gray-700);
    }

    .highscores__table-row {
      border-color: var(--color-gray-300);
    }

    .highscores__table-row:hover {
      background-color: var(--color-gray-100);
    }

    .highscores__table-cell {
      color: var(--color-gray-900);
    }

    .highscores__filter-dropdown-no-results,
    .highscores__table-empty {
      color: var(--color-gray-500);
    }
  }

  /* Reduced motion support (inherited from global.css) */
  @media (prefers-reduced-motion: reduce) {
    .highscores__loading-icon {
      animation: none;
    }
  }
</style>
