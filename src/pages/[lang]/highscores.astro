---
/**
 * Highscores Page
 *
 * This page displays the top scores across different game modes and categories.
 * Users can filter scores by game mode and category.
 *
 * Features:
 * - Display of top scores for quiz and chronology game modes
 * - Filtering by game mode and category with smooth transitions
 * - Responsive design using CSS custom properties from global.css
 * - WCAG AAA 2.2 compliant with enhanced accessibility features
 * - DRY-compliant implementation using maximum available root variables
 * - Performance optimized with proper CSS containment and transitions
 *
 * CSS Architecture:
 * - Uses BEM methodology for class naming consistency
 * - Leverages complete root variable system from global.css
 * - Implements responsive breakpoints with CSS custom properties
 * - Enhanced focus management and screen reader support
 * - Reduced motion and high contrast mode support
 *
 * URL: /[lang]/highscores
 */
import Layout from "@layouts/Layout.astro";
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import { Icon } from "astro-icon/components";
import { formatDate } from "@utils/dateUtils";
import Headline from "@components/Headline.astro";
import Paragraph from "@components/Paragraph.astro";

// Interface for highscore entry
interface HighscoreEntry {
  id: string;
  username: string;
  gameMode: "quiz" | "chronology" | "time-pressure";
  score: number;
  category: string;
  createdAt: string;
}

// Get language from URL and initialize translations
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(String(lang));

// Default values
let highscores: HighscoreEntry[] = [];
let isLoading = true;
let error: string | null = null;

// Get filter parameters from URL
const url = Astro.url;
const searchParams = url.searchParams;
const selectedGameMode = searchParams.get("gameMode");
const selectedCategory = searchParams.get("category");

// Build API URL with filters
let apiUrl = `${Astro.url.origin}/${String(lang)}/api/scores/highscores`;
const apiParams = new URLSearchParams();

if (selectedGameMode) {
  apiParams.append("gameMode", selectedGameMode);
}

if (selectedCategory) {
  apiParams.append("category", selectedCategory);
}

if (apiParams.toString()) {
  apiUrl += `?${apiParams.toString()}`;
}

// Fetch highscores data from API endpoint with filters
try {
  const response = await fetch(apiUrl, {
    headers: {
      "Content-Type": "application/json",
    },
  });

  const data = await response.json();

  if (data.success) {
    highscores = data.highscores;
  } else {
    error = data.error || t("highscores.error");
  }
} catch (err) {
  console.error("Error fetching highscores data:", err);
  error = t("highscores.error");
} finally {
  isLoading = false;
}

// Format the date for display
const formatHighscoreDate = (dateString: string): string => {
  try {
    return formatDate(dateString, String(lang));
  } catch {
    return dateString;
  }
};

// Get unique categories from highscores for filter dropdown
const categories = [...new Set(highscores.map((score) => score.category))];

// Game mode names for display
const gameModeNames = {
  quiz: t("profile.stats.quiz"),
  chronology: t("profile.stats.chronology"),
  "time-pressure": t("profile.stats.timePressure"),
};
---

<Layout title={t("highscores.title")} description={t("highscores.description")} type="website">
  <div class="highscores-container" id="main-content">
    <!-- Hero section styled like GameHome with improved contrast and accessibility -->
    <header class="highscores-hero" aria-labelledby="highscores-heading">
      <!-- Decorative background elements with aria-hidden -->
      <div class="highscores-hero__decoration" aria-hidden="true">
        <div class="highscores-hero__decoration-item highscores-hero__decoration-item--top-right">
        </div>
        <div class="highscores-hero__decoration-item highscores-hero__decoration-item--bottom-left">
        </div>
        <div
          class="highscores-hero__decoration-item highscores-hero__decoration-item--center-right"
        >
        </div>
      </div>

      <div class="highscores-hero__content">
        <Headline
          level="h1"
          id="highscores-heading"
          title={t("highscores.title")}
          className="highscores-hero__title"
          size="4xl"
        />
        <div class="highscores-hero__divider"></div>
        <Paragraph
          description={t("highscores.description")}
          className="highscores-hero__description"
          align="center"
        />
        <!-- Additional descriptive content for SEO -->
        <Paragraph className="highscores-hero__seo-description sr-only">
          {t("highscores.seo.description")}
        </Paragraph>
      </div>
    </header>

    {
      isLoading && (
        <section class="highscores__loading" aria-live="polite">
          <div class="highscores__loading-content">
            <Icon name="loading" class="highscores__loading-icon" aria-hidden="true" />
            <span class="sr-only">{t("common.loading")}</span>
          </div>
        </section>
      )
    }

    {
      error && (
        <section class="highscores__error" role="alert">
          <Paragraph description={error} />
        </section>
      )
    }

    {
      !isLoading && !error && (
        <div class="highscores__content">
          <section class="highscores__filters" aria-labelledby="filter-heading">
            <div class="highscores__filters-container">
              <Headline
                level="h2"
                id="filter-heading"
                title={t("highscores.filters")}
                className="highscores__filter-title"
                textAlign="center"
              />

              <div class="highscores__filter-grid">
                <div class="highscores__filter-group">
                  <div class="highscores__filter-header">
                    <Icon name="game" class="highscores__filter-icon" aria-hidden="true" />
                    <label for="game-mode-filter" class="highscores__filter-label">
                      {t("highscores.gameMode")}
                    </label>
                  </div>
                  <div class="highscores__select-wrapper">
                    <select id="game-mode-filter" class="highscores__filter-select">
                      <option value="">{t("highscores.allModes")}</option>
                      <option value="quiz" selected={selectedGameMode === "quiz"}>
                        {gameModeNames.quiz}
                      </option>
                      <option value="chronology" selected={selectedGameMode === "chronology"}>
                        {gameModeNames.chronology}
                      </option>
                      <option value="time-pressure" selected={selectedGameMode === "time-pressure"}>
                        {gameModeNames["time-pressure"]}
                      </option>
                    </select>
                    <Icon name="chevron-down" class="highscores__select-arrow" aria-hidden="true" />
                  </div>
                </div>

                <div class="highscores__filter-group">
                  <div class="highscores__filter-header">
                    <Icon name="category" class="highscores__filter-icon" aria-hidden="true" />
                    <label for="category-filter" class="highscores__filter-label">
                      {t("highscores.category")}
                    </label>
                  </div>
                  <div class="highscores__select-wrapper">
                    <select id="category-filter" class="highscores__filter-select">
                      <option value="">{t("highscores.allCategories")}</option>
                      {categories.map((category) => (
                        <option value={category} selected={selectedCategory === category}>
                          {category}
                        </option>
                      ))}
                    </select>
                    <Icon name="chevron-down" class="highscores__select-arrow" aria-hidden="true" />
                  </div>
                </div>
              </div>
            </div>
          </section>

          <section class="highscores__list" aria-labelledby="highscores-heading">
            <Headline
              level="h2"
              id="highscores-heading"
              title={t("highscores.results")}
              className="highscores__list-title"
              textAlign="center"
            />

            {highscores.length === 0 ? (
              <div class="highscores__empty" role="status">
                <Paragraph description={t("highscores.noResults")} />
              </div>
            ) : (
              <div
                class="highscores__cards-grid"
                role="list"
                aria-label={t("highscores.tableLabel")}
              >
                {highscores.map((score, index) => (
                  <article
                    class="highscores__card"
                    role="listitem"
                    aria-label={t("highscores.scoreEntry", {
                      rank: index + 1,
                      username: score.username,
                    })}
                  >
                    <div class="highscores__card-badge">
                      <span
                        class={`highscores__rank-badge highscores__rank-badge--medal highscores__rank-badge--${index === 0 ? "gold" : index === 1 ? "silver" : index === 2 ? "bronze" : "normal"}`}
                        aria-label={t("highscores.rank")}
                      >
                        <span>{index + 1}</span>
                      </span>
                    </div>

                    <div class="highscores__card-content">
                      <div class="highscores__card-main">
                        <Headline
                          level="h3"
                          title={score.username}
                          className="highscores__card-username"
                        />
                        <div class="highscores__card-score">
                          <span class="highscores__score-value">{score.score}</span>
                          <span class="highscores__score-label">{t("highscores.points")}</span>
                        </div>
                      </div>

                      <div class="highscores__card-details">
                        <div class="highscores__detail-item">
                          <div class="highscores__detail-header">
                            <Icon name="game" class="highscores__detail-icon" aria-hidden="true" />
                            <span class="highscores__detail-label">{t("highscores.gameMode")}</span>
                          </div>
                          <span class="highscores__detail-value highscores__mode">
                            {gameModeNames[score.gameMode]}
                          </span>
                        </div>

                        <div class="highscores__detail-item">
                          <div class="highscores__detail-header">
                            <Icon
                              name="category"
                              class="highscores__detail-icon"
                              aria-hidden="true"
                            />
                            <span class="highscores__detail-label">{t("highscores.category")}</span>
                          </div>
                          <span class="highscores__detail-value highscores__category">
                            {score.category}
                          </span>
                        </div>

                        <div class="highscores__detail-item">
                          <div class="highscores__detail-header">
                            <Icon
                              name="calendar"
                              class="highscores__detail-icon"
                              aria-hidden="true"
                            />
                            <span class="highscores__detail-label">{t("highscores.date")}</span>
                          </div>
                          <time
                            class="highscores__detail-value highscores__date"
                            datetime={score.createdAt}
                          >
                            {formatHighscoreDate(score.createdAt)}
                          </time>
                        </div>
                      </div>
                    </div>
                  </article>
                ))}
              </div>
            )}
          </section>
        </div>
      )
    }
  </div>
</Layout>

<script>
  // Simple filter functionality for highscores
  const initHighscoresFilters = (): void => {
    const gameModeFilter = document.getElementById("game-mode-filter") as HTMLSelectElement;
    const categoryFilter = document.getElementById("category-filter") as HTMLSelectElement;

    if (!gameModeFilter || !categoryFilter) {
      console.warn("Filter elements not found");
      return;
    }

    // Function to update highscores based on filters
    const updateHighscores = (): void => {
      const gameMode = gameModeFilter.value;
      const category = categoryFilter.value;

      // Build query parameters
      const params = new URLSearchParams();
      if (gameMode) {
        params.append("gameMode", gameMode);
      }
      if (category) {
        params.append("category", category);
      }

      // Get current language from URL
      const [, lang] = window.location.pathname.split("/");

      // Navigate with new filters
      const newUrl = `/${lang}/highscores${params.toString() ? `?${params.toString()}` : ""}`;
      window.location.href = newUrl;
    };

    // Add event listeners
    gameModeFilter.addEventListener("change", updateHighscores);
    categoryFilter.addEventListener("change", updateHighscores);

    // Set initial filter values from URL params
    const urlParams = new URLSearchParams(window.location.search);
    const gameModeParam = urlParams.get("gameMode");
    const categoryParam = urlParams.get("category");

    gameModeFilter.value = gameModeParam || "";
    categoryFilter.value = categoryParam || "";
  };

  // Initialize filters when DOM is ready
  document.addEventListener("DOMContentLoaded", initHighscoresFilters);
</script>

<style lang="scss" is:global>
  /* ======================================
   * HIGHSCORES PAGE STYLES - OPTIMIZED FOR STYLE GUARDIAN
   * BEM Methodology + Global Variables + Mobile-First
   * ====================================== */

  .highscores-container {
    width: var(--width-full);
    max-width: var(--container-xl);
    margin: 0 auto;
    padding: var(--space-md) var(--space-xs); // Mobile: minimal horizontal spacing
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    contain: layout style paint;

    @media (min-width: 20em) {
      padding: var(--space-lg) var(--space-sm);
    }

    @media (min-width: 48em) {
      padding: var(--space-xl) var(--space-md);
    }

    @media (min-width: 64em) {
      padding: var(--space-2xl) var(--space-lg);
    }

    @media (min-width: 80em) {
      padding: var(--space-3xl) var(--space-xl);
    }

    @media (prefers-reduced-motion: reduce) {
      scroll-behavior: auto;
    }
  }

  /* ======================================
   * HERO SECTION - SIMPLIFIED DESIGN
   * ====================================== */
  .highscores-hero {
    position: relative;
    margin-bottom: var(--space-xl);
    overflow: hidden;
    border-radius: var(--radius-lg);
    background: linear-gradient(
      135deg,
      var(--color-primary-900) 0%,
      var(--color-primary-700) 50%,
      var(--color-secondary-800) 100%
    );
    padding: var(--space-lg) var(--space-sm); // Mobile: compact spacing
    box-shadow: var(--shadow-xl);
    border: var(--border-width-thin) solid var(--border-primary);
    contain: layout style paint;

    @media (min-width: 48em) {
      margin-bottom: var(--space-2xl);
      padding: var(--space-xl) var(--space-lg);
      border-radius: var(--radius-xl);
    }

    @media (min-width: 64em) {
      margin-bottom: var(--space-3xl);
      padding: var(--space-2xl) var(--space-xl);
      border-radius: var(--radius-2xl);
    }

    @media (min-width: 80em) {
      padding: var(--space-3xl) var(--space-2xl);
    }

    // Decoration elements
    &__decoration {
      position: absolute;
      inset: 0;
      opacity: 0.1;
      pointer-events: none;
      contain: layout style paint;

      &-item {
        position: absolute;
        border-radius: var(--radius-full);
        background: var(--color-white);
        transition: transform var(--transition-base);
        contain: layout style paint;

        &--top-right {
          top: calc(-1 * var(--space-xl));
          right: calc(-1 * var(--space-xl));
          width: var(--space-3xl);
          height: var(--space-3xl);

          @media (min-width: 64em) {
            width: calc(var(--space-3xl) * 2);
            height: calc(var(--space-3xl) * 2);
          }
        }

        &--bottom-left {
          bottom: calc(-1 * var(--space-2xl));
          left: calc(-1 * var(--space-2xl));
          width: calc(var(--space-3xl) * 2);
          height: calc(var(--space-3xl) * 2);

          @media (min-width: 64em) {
            width: calc(var(--space-3xl) * 3);
            height: calc(var(--space-3xl) * 3);
          }
        }

        &--center-right {
          top: 50%;
          right: calc(-1 * var(--space-md));
          width: var(--space-2xl);
          height: var(--space-2xl);
          transform: translateY(-50%);

          @media (min-width: 48em) {
            width: var(--space-3xl);
            height: var(--space-3xl);
          }
        }
      }
    }

    &__content {
      position: relative;
      z-index: 1;
      text-align: center;
      color: var(--color-white);
      contain: layout style;
    }

    &__title {
      margin-bottom: var(--space-md);
      color: var(--color-white);
      text-shadow: var(--shadow-lg);
      font-size: var(--text-2xl);

      @media (min-width: 48em) {
        margin-bottom: var(--space-lg);
        font-size: var(--text-3xl);
      }

      @media (min-width: 64em) {
        font-size: var(--text-4xl);
      }

      @media (min-width: 80em) {
        font-size: var(--text-5xl);
      }
    }

    &__divider {
      width: var(--space-xl);
      height: var(--border-width-thick);
      background: var(--color-secondary-400);
      margin: var(--space-md) auto;
      border-radius: var(--radius-full);
      contain: layout style paint;

      @media (min-width: 64em) {
        width: var(--space-2xl);
        margin: var(--space-lg) auto;
      }

      @media (min-width: 80em) {
        width: var(--space-3xl);
      }
    }

    &__description {
      color: var(--color-neutral-100);
      font-size: var(--text-base);
      line-height: var(--leading-relaxed);
      max-width: var(--form-container-max-width);
      margin: 0 auto;
      contain: layout style;

      @media (min-width: 48em) {
        font-size: var(--text-lg);
      }

      @media (min-width: 64em) {
        font-size: var(--text-xl);
      }

      @media (min-width: 80em) {
        font-size: var(--text-2xl);
        max-width: calc(var(--form-container-max-width) * 1.2);
      }
    }

    &__seo-description {
      // SEO content hidden visually but available to screen readers
    }
  }

  /* ======================================
   * LOADING & ERROR STATES - SIMPLIFIED
   * ====================================== */
  .highscores__loading {
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: calc(var(--container-sm) * 0.4);
    padding: var(--space-xl);
    margin: var(--space-xl) auto;
    contain: layout style paint;

    &-content {
      text-align: center;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: var(--space-md);
    }

    &-icon {
      width: var(--icon-size-lg);
      height: var(--icon-size-lg);
      color: var(--interactive-primary);
      animation: loading-spin var(--animation-pulse-duration) linear infinite;

      @media (min-width: 48em) {
        width: var(--icon-size-xl);
        height: var(--icon-size-xl);
      }
    }
  }

  .highscores__error {
    background-color: var(--bg-error-aaa);
    border: var(--border-width-thin) solid var(--border-error);
    border-radius: var(--radius-md);
    padding: var(--space-lg);
    margin: var(--space-xl) auto;
    max-width: var(--container-sm);
    text-align: center;
    contain: layout style paint;

    @media (min-width: 48em) {
      padding: var(--space-xl);
      max-width: var(--container-md);
    }
  }

  // Keyframe animations
  @keyframes loading-spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  /* ======================================
   * CONTENT & FILTER SECTIONS - SIMPLIFIED
   * ====================================== */
  .highscores__content {
    margin-top: var(--space-2xl);
    line-height: var(--leading-enhanced);
    contain: layout style;
  }

  .highscores__filters {
    margin-bottom: var(--space-3xl);
    contain: layout style paint;
  }

  .highscores__filters-container {
    max-width: var(--container-lg);
    margin: 0 auto;
  }

  .highscores__filter-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--space-lg);
    margin-top: var(--space-2xl);
    max-width: 800px;
    margin-left: auto;
    margin-right: auto;

    @media (min-width: 48em) {
      grid-template-columns: repeat(2, 1fr);
      gap: var(--space-2xl);
    }
  }

  .highscores__filter-group {
    background: var(--card-bg);
    border: var(--border-width-thin) solid var(--card-border);
    border-radius: var(--radius-xl);
    padding: var(--space-2xl);
    box-shadow: var(--card-shadow);
    transition: all var(--transition-base);
    position: relative;
    overflow: hidden;
    contain: layout style paint;

    &:hover {
      transform: translateY(calc(-1 * var(--space-sm)));
      box-shadow: var(--card-shadow-hover);
      border-color: var(--interactive-primary);
      background: linear-gradient(
        135deg,
        var(--card-bg) 0%,
        color-mix(in srgb, var(--card-bg) 95%, var(--interactive-primary) 5%) 100%
      );
    }

    // Decorative accent line
    &::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: var(--border-width-enhanced);
      background: linear-gradient(
        90deg,
        var(--interactive-primary) 0%,
        var(--interactive-secondary) 50%,
        var(--interactive-primary) 100%
      );
      opacity: 0.7;
    }

    @media (min-width: 48em) {
      padding: var(--space-3xl);
    }
  }

  .highscores__filter-header {
    display: flex;
    align-items: center;
    gap: var(--space-md);
    margin-bottom: var(--space-xl);

    @media (min-width: 48em) {
      margin-bottom: var(--space-2xl);
    }
  }

  .highscores__filter-icon {
    width: var(--icon-size-lg);
    height: var(--icon-size-lg);
    color: var(--interactive-primary);
    flex-shrink: 0;

    @media (min-width: 48em) {
      width: var(--icon-size-xl);
      height: var(--icon-size-xl);
    }
  }

  .highscores__filter-label {
    font-size: var(--text-lg);
    font-weight: var(--font-semibold);
    color: var(--text-primary);
    line-height: var(--leading-tight);

    @media (min-width: 48em) {
      font-size: var(--text-xl);
    }
  }

  .highscores__select-wrapper {
    position: relative;
    display: flex;
    align-items: center;
  }

  .highscores__filter-select {
    width: var(--width-full);
    padding: var(--space-lg) var(--space-xl);
    background: var(--form-bg);
    border: var(--border-width-thin) solid var(--form-border);
    border-radius: var(--radius-lg);
    color: var(--form-text);
    font-size: var(--text-base);
    font-weight: var(--font-medium);
    line-height: var(--leading-normal);
    min-height: var(--touch-target-enhanced);
    transition: all var(--transition-base);
    cursor: pointer;
    appearance: none;
    padding-right: calc(var(--space-xl) + var(--icon-size-lg) + var(--space-md));
    contain: layout style paint;

    &:focus-visible {
      outline: var(--focus-ring);
      outline-offset: var(--focus-ring-offset);
    }

    &:hover {
      border-color: var(--interactive-primary);
      background-color: color-mix(in srgb, var(--form-bg) 95%, var(--interactive-primary) 5%);
    }

    &:focus {
      border-color: var(--interactive-primary);
      box-shadow: var(--focus-ring);
      background-color: var(--form-bg);
    }

    @media (min-width: 48em) {
      padding: var(--space-xl) var(--space-2xl);
      font-size: var(--text-lg);
      padding-right: calc(var(--space-2xl) + var(--icon-size-xl) + var(--space-lg));
    }
  }

  .highscores__select-arrow {
    position: absolute;
    right: var(--space-lg);
    width: var(--icon-size-md);
    height: var(--icon-size-md);
    color: var(--text-secondary);
    pointer-events: none;
    transition: color var(--transition-base);

    @media (min-width: 48em) {
      right: var(--space-xl);
      width: var(--icon-size-lg);
      height: var(--icon-size-lg);
    }
  }

  .highscores__filter-select:hover + .highscores__select-arrow {
    color: var(--interactive-primary);
  }

  /* ======================================
   * RESULTS & CARDS SECTIONS - SIMPLIFIED
   * ====================================== */
  .highscores__list {
    margin-top: var(--space-3xl);
    scroll-margin-top: var(--space-2xl);
  }

  .highscores__list-title {
    margin-bottom: var(--space-2xl);
    text-align: center;
  }

  .highscores__empty {
    text-align: center;
    padding: var(--space-2xl) var(--space-lg);
    border-radius: var(--radius-md);
    background-color: var(--bg-tertiary);
    border: var(--border-width-thin) solid var(--border-secondary);
    margin: var(--space-xl) auto;
    max-width: var(--container-sm);

    @media (min-width: 48em) {
      padding: var(--space-3xl) var(--space-2xl);
      max-width: var(--container-md);
    }
  }

  .highscores__cards-grid {
    display: grid;
    gap: var(--space-lg);
    margin: var(--space-2xl) auto;
    max-width: 1400px;
    padding: 0 var(--space-md);
    grid-template-columns: 1fr;
    contain: layout style paint;

    @media (min-width: 48em) {
      grid-template-columns: repeat(2, 1fr);
      gap: var(--space-xl);
    }

    @media (min-width: 64em) {
      grid-template-columns: repeat(3, 1fr);
      gap: var(--space-2xl);
    }
  }

  /* ======================================
   * CARD STYLING - SIMPLIFIED
   * ====================================== */
  .highscores__card {
    position: relative;
    background: var(--card-bg);
    border: var(--border-width-thin) solid var(--card-border);
    border-radius: var(--radius-xl);
    box-shadow: var(--card-shadow);
    padding: var(--space-xl);
    transition: all var(--transition-base);
    min-height: 200px;
    contain: layout style paint;

    &:hover {
      transform: translateY(calc(-1 * var(--space-xs)));
      box-shadow: var(--card-shadow-hover);
      border-color: var(--interactive-primary);
    }
  }

  .highscores__card-badge {
    position: absolute;
    top: var(--space-lg);
    right: var(--space-lg);
    z-index: 2;
  }

  .highscores__rank-badge {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 48px;
    height: 48px;
    border-radius: var(--radius-full);
    font-size: var(--text-xl);
    font-weight: var(--font-black);
    background: var(--interactive-primary);
    color: var(--color-white);
    box-shadow: var(--shadow-md);
    contain: layout style paint;
  }

  .highscores__rank-badge--medal {
    &.highscores__rank-badge--gold,
    &.highscores__rank-badge--silver,
    &.highscores__rank-badge--bronze {
      box-shadow: none !important;
    }
  }

  // Medal variations for specific positions
  .highscores__card:nth-child(2) .highscores__rank-badge--medal {
    background: linear-gradient(
      135deg,
      var(--achievement-silver) 0%,
      color-mix(in srgb, var(--achievement-silver) 80%, var(--color-white) 20%) 100%
    );
    border-color: var(--achievement-silver);
    box-shadow:
      0 0 var(--space-md) oklch(from var(--achievement-silver) l c h / 0.4),
      inset 0 var(--border-width-thin) 0 oklch(from var(--color-white) l c h / 0.3);
  }

  .highscores__card:nth-child(3) .highscores__rank-badge--medal {
    background: linear-gradient(
      135deg,
      var(--achievement-bronze) 0%,
      color-mix(in srgb, var(--achievement-bronze) 80%, var(--color-white) 20%) 100%
    );
    border-color: var(--achievement-bronze);
    box-shadow:
      0 0 var(--space-md) oklch(from var(--achievement-bronze) l c h / 0.4),
      inset 0 var(--border-width-thin) 0 oklch(from var(--color-white) l c h / 0.3);
  }

  /* ======================================
   * CARD CONTENT & SCORE SECTIONS
   * ====================================== */
  .highscores__card-content {
    display: flex;
    flex-direction: column;
    height: 100%;
  }

  .highscores__card-main {
    display: flex;
    flex-direction: column;
    gap: var(--space-md);
    margin-bottom: var(--space-lg);
    padding-bottom: var(--space-md);
  }

  .highscores__card-username {
    font-size: var(--text-lg);
    font-weight: var(--font-bold);
    color: var(--text-primary);
    line-height: var(--leading-tight);
    margin: 0;

    @media (min-width: 48em) {
      font-size: var(--text-xl);
    }

    @media (min-width: 64em) {
      font-size: var(--text-2xl);
    }
  }

  .highscores__card-score {
    display: flex;
    align-items: baseline;
    gap: var(--space-xs);
    flex-wrap: wrap;

    @media (min-width: 48em) {
      gap: var(--space-sm);
    }
  }

  .highscores__score-value {
    font-size: var(--text-xl);
    font-weight: var(--font-black);
    background: linear-gradient(
      135deg,
      var(--interactive-primary) 0%,
      var(--interactive-secondary) 100%
    );
    background-clip: text;
    -webkit-background-clip: text;
    color: transparent;
    line-height: var(--leading-tight);

    @media (min-width: 48em) {
      font-size: var(--text-2xl);
    }
  }

  .highscores__score-label {
    font-size: var(--text-sm);
    color: var(--text-secondary);
    font-weight: var(--font-semibold);
    text-transform: uppercase;
    letter-spacing: var(--text-spacing-letter-2x);

    @media (min-width: 48em) {
      font-size: var(--text-base);
    }
  }

  /* ======================================
   * CARD DETAILS SECTION
   * ====================================== */
  .highscores__card-details {
    display: flex;
    flex-direction: column;
    gap: var(--space-md);
    margin-top: var(--space-lg);
    padding-top: var(--space-lg);
    border-top: var(--border-width-thin) solid var(--border-secondary);
  }

  .highscores__detail-item {
    display: flex;
    align-items: center;
    gap: var(--space-sm);
  }

  .highscores__detail-icon {
    width: var(--icon-size-md);
    height: var(--icon-size-md);
    color: var(--interactive-primary);
    flex-shrink: 0;

    @media (min-width: 48em) {
      width: var(--icon-size-lg);
      height: var(--icon-size-lg);
    }
  }

  .highscores__detail-label {
    font-size: var(--text-xs);
    font-weight: var(--font-bold);
    color: var(--text-secondary);
    text-transform: uppercase;
    letter-spacing: var(--text-spacing-letter-2x);
    opacity: 0.8;

    @media (min-width: 48em) {
      font-size: var(--text-sm);
    }
  }

  .highscores__detail-value {
    font-size: var(--text-sm);
    color: var(--text-primary);
    font-weight: var(--font-semibold);
    line-height: var(--leading-tight);
    word-break: break-word;

    @media (min-width: 48em) {
      font-size: var(--text-base);
    }
  }

  // Special styling for different detail types
  .highscores__mode {
    color: var(--interactive-secondary);
    font-weight: var(--font-bold);
    text-transform: capitalize;
    background: linear-gradient(
      135deg,
      var(--interactive-secondary) 0%,
      var(--interactive-primary) 100%
    );
    background-clip: text;
    -webkit-background-clip: text;
    color: transparent;

    @media (min-width: 48em) {
      font-size: var(--text-xl);
    }

    // Fallback for browsers that don't support background-clip: text
    @supports not (background-clip: text) {
      color: var(--interactive-secondary);
    }
  }

  .highscores__category {
    color: var(--text-primary);
    font-weight: var(--font-semibold);

    @media (min-width: 48em) {
      font-size: var(--text-xl);
    }
  }

  .highscores__date {
    color: var(--text-tertiary);
    font-size: var(--text-base);
    font-variant-numeric: tabular-nums;
    font-weight: var(--font-medium);

    @media (min-width: 48em) {
      font-size: var(--text-lg);
    }
  }

  /* ======================================
   * ACCESSIBILITY & PRINT STYLES
   * ====================================== */

  // Reduced motion support
  @media (prefers-reduced-motion: reduce) {
    .highscores-hero {
      &__decoration-item {
        animation: none;
        transition: none;
      }
    }

    .highscores__loading-icon {
      animation: none;
    }

    .highscores__card {
      transition: var(--transition-instant);

      &:hover {
        transform: none;
      }
    }

    .highscores__rank-badge {
      transition: var(--transition-instant);

      &:hover {
        transform: none;
      }
    }
  }

  // High contrast mode support
  @media (prefers-contrast: high) {
    .highscores-hero {
      border-width: var(--border-width-thick);
      border-color: var(--color-white);
    }

    .highscores__card {
      border-width: var(--border-width-thick);
      border-color: var(--text-primary);
    }

    .highscores__rank-badge--medal {
      background: var(--text-primary) !important;
      color: var(--bg-primary) !important;
      border-color: var(--text-primary) !important;
    }
  }

  // Print styles
  @media print {
    .highscores__filters {
      display: none;
    }

    .highscores-container {
      padding: var(--space-md);
      max-width: var(--width-full);
    }

    .highscores-hero {
      background: var(--print-bg);
      box-shadow: none;
      border: var(--border-width-thin) solid var(--print-border);
    }

    .highscores__cards-grid {
      grid-template-columns: 1fr 1fr;
      gap: var(--space-md);
    }

    .highscores__card {
      border: var(--border-width-thin) solid var(--print-border);
      background: var(--print-bg);
      color: var(--print-text);
      page-break-inside: avoid;
      box-shadow: none;
      font-size: var(--text-sm);

      &-content {
        padding: var(--space-sm);
      }

      &-username {
        font-size: var(--text-base);
      }

      &-detail-label,
      &-detail-value {
        font-size: var(--text-xs);
      }
    }

    .highscores__score-value {
      font-size: var(--text-lg);
    }

    .highscores__rank-badge--medal {
      background: var(--print-text) !important;
      color: var(--print-bg) !important;
    }
  }
</style>
