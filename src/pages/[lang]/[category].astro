---
/**
 * Category Page Component
 * Displays a specific music category with its details and game options.
 */

import { Picture } from "astro:assets";
import Layout from "@layouts/Layout.astro";
import ButtonLink from "@components/ButtonLink.astro";
import { getRelativeLocaleUrl } from "astro:i18n";
import { useTranslations } from "@utils/i18n";
import Headline from "@components/Headline.astro";
import Paragraph from "@components/Paragraph.astro";
import { Icon } from "astro-icon/components";
import { extractKeywords, generateMetaDescription } from "@utils/seo";
import AuthForm from "@components/auth/AuthForm.astro";

export const prerender = true;

export async function getStaticPaths() {
  const supportedLanguages = ["de", "en", "es", "fr", "it", "pt", "da", "nl", "sv", "fi"] as const;
  const paths = [];

  for (const lang of supportedLanguages) {
    let categories;
    let usedFallback = false;

    try {
      const categoryData = await import(`../../../public/json/categories/${lang}_categories.json`);
      categories = categoryData.default;
    } catch {
      usedFallback = true;
      try {
        const fallbackData = await import(`../../../public/json/categories/en_categories.json`);
        categories = fallbackData.default;
      } catch {
        console.error(`Failed to load categories for ${lang} and fallback`);
        categories = [];
      }
    }

    for (const category of categories) {
      paths.push({
        params: { lang, category: category.slug },
        props: {
          categories,
          category,
          lang,
          usedFallback,
        },
      });
    }
  }

  return paths;
}

const { category, lang, usedFallback } = Astro.props;
const t = useTranslations(lang);

interface CategoryType {
  slug: string;
  headline: string;
  introSubline: string;
  imageUrl: string;
  text: string;
}

const currentCategory = category as CategoryType;
const title = `${currentCategory?.headline} ${t("category.start") || "Start"}`;
const description = currentCategory?.introSubline || "";
const pageContent = `${title} ${description} ${currentCategory?.text || ""}`;
const optimizedDescription = generateMetaDescription(pageContent);
const keywords = extractKeywords(pageContent) || t("meta.keywords");
---

<Layout
  {title}
  description={optimizedDescription}
  {keywords}
  image={currentCategory?.imageUrl || "/social-share-categories.jpg"}
>
  <div class="page-container">
    <div class="sr-only" aria-live="polite" id="dynamic-announcements"></div>

    {
      usedFallback && (
        <div class="alert-box" role="alert" aria-live="polite">
          <div class="alert-content">
            <Icon name="warning" class="icon-small" aria-hidden="true" />
            <span>
              {t("notice.fallback_content") ||
                "Using fallback content. Some information may be displayed in English."}
            </span>
          </div>
        </div>
      )
    }

    <header
      class="section-header section-container header-with-image"
      aria-labelledby="category-heading"
    >
      <div class="header-content">
        <div class="header-text">
          <div class="game-icon-badge header-badge">
            <Icon name="music-note" class="icon-large icon-white" />
          </div>
          <Headline title={currentCategory?.headline} level="h1" id="category-heading" />
          <Paragraph textSize="2xl" description={currentCategory?.introSubline} />
        </div>

        <div class="header-image">
          {
            currentCategory?.imageUrl ? (
              <div class="header-image-container">
                <Picture
                  class="header-responsive-image"
                  src={currentCategory.imageUrl}
                  widths={[400, 600, 800, 1000]}
                  sizes="(max-width: 640px) 400px, (max-width: 1024px) 600px, (max-width: 1280px) 800px, 1000px"
                  formats={["avif", "webp", "jpg"]}
                  alt={`${currentCategory.headline} ${t("category.image.alt") || "category image"}`}
                  loading="eager"
                  fetchpriority="high"
                  width={1000}
                  height={600}
                  decoding="async"
                />
              </div>
            ) : (
              <div
                class="header-no-image-container"
                role="img"
                aria-label={t("category.no_image_available") || "No image available"}
              >
                <div class="header-no-image-content">
                  <Icon name="image" class="icon-large" aria-hidden="true" />
                  <span>{t("category.no_image_available") || "No image available"}</span>
                </div>
              </div>
            )
          }
        </div>
      </div>
    </header>

    <article
      class="article-container"
      data-category={currentCategory?.slug}
      aria-labelledby="category-heading"
      id="main-content"
      tabindex="-1"
    >
      <section
        class="description-container section-container"
        aria-labelledby="description-heading"
      >
        <div class="game-icon-badge description-badge">
          <Icon name="info-circle" class="icon-large icon-white" />
        </div>
        <Headline level="h2" id="description-heading">
          {t("category.about.title") || "Ãœber diese Kategorie"}
        </Headline>
        <Paragraph textSize="2xl" description={currentCategory?.text} />
      </section>

      <section
        id="auth-section"
        class="section-container"
        aria-labelledby="auth-heading"
        aria-hidden="true"
      >
        <Headline level="h2" id="auth-heading">
          {t("auth.required.title") || "Anmeldung erforderlich"}
        </Headline>
        <Paragraph
          description={t("auth.required.description") ||
            "Bitte melde dich an oder registriere dich, um die Spielmodi zu nutzen."}
        />
        <div class="auth-form-container">
          <AuthForm initialMode="login" />
        </div>
      </section>

      <section
        id="quiz-section"
        class="section-container"
        aria-labelledby="quiz-heading"
        aria-hidden="true"
      >
        <div class="game-icon-badge">
          <Icon name="music" class="icon-large icon-white" />
        </div>
        <Headline level="h2" id="quiz-heading">
          {t("category.difficulty.heading")}
        </Headline>
        <Paragraph textSize="2xl" description={t("knowledge.play.description")} />

        <div class="button-group" role="group" aria-labelledby="quiz-heading">
          <ButtonLink
            href={getRelativeLocaleUrl(lang, `game-${currentCategory?.slug}/easy`)}
            aria-label={`${t("category.difficulty.easy")} ${t("difficulty.level")} - ${currentCategory?.headline}`}
            icon="play"
          >
            <span>{t("category.difficulty.easy")}</span>
          </ButtonLink>

          <ButtonLink
            href={getRelativeLocaleUrl(lang, `game-${currentCategory?.slug}/medium`)}
            aria-label={`${t("category.difficulty.medium")} ${t("difficulty.level")} - ${currentCategory?.headline}`}
            icon="bolt"
          >
            <span>{t("category.difficulty.medium")}</span>
          </ButtonLink>

          <ButtonLink
            href={getRelativeLocaleUrl(lang, `game-${currentCategory?.slug}/hard`)}
            aria-label={`${t("category.difficulty.hard")} ${t("difficulty.level")} - ${currentCategory?.headline}`}
            icon="fire"
          >
            <span>{t("category.difficulty.hard")}</span>
          </ButtonLink>
        </div>
      </section>

      <section
        id="chronology-section"
        class="section-container chronology-section"
        aria-labelledby="chronology-heading"
        aria-hidden="true"
      >
        <div class="game-icon-badge chronology-badge">
          <Icon name="clock-history" class="icon-large icon-white" />
        </div>
        <Headline level="h2" id="chronology-heading">
          {t("game.chronology.title")}
        </Headline>
        <Paragraph textSize="2xl" description={t("game.chronology.description")} />

        <div class="button-group" role="group" aria-labelledby="chronology-heading">
          <ButtonLink
            href={getRelativeLocaleUrl(lang, `chronology-${currentCategory?.slug}/easy`)}
            aria-label={`${t("game.chronology.title")} - ${t("category.difficulty.easy")} ${t("difficulty.level")} - ${currentCategory?.headline}`}
            icon="play"
          >
            {t("category.difficulty.easy")}
          </ButtonLink>

          <ButtonLink
            href={getRelativeLocaleUrl(lang, `chronology-${currentCategory?.slug}/medium`)}
            aria-label={`${t("game.chronology.title")} - ${t("category.difficulty.medium")} ${t("difficulty.level")} - ${currentCategory?.headline}`}
            icon="bolt"
          >
            <span>{t("category.difficulty.medium")}</span>
          </ButtonLink>

          <ButtonLink
            href={getRelativeLocaleUrl(lang, `chronology-${currentCategory?.slug}/hard`)}
            aria-label={`${t("game.chronology.title")} - ${t("category.difficulty.hard")} ${t("difficulty.level")} - ${currentCategory?.headline}`}
            icon="fire"
          >
            <span>{t("category.difficulty.hard")}</span>
          </ButtonLink>
        </div>
      </section>
    </article>
  </div>

  <script>
    import {
      isUserAuthenticated,
      registerAuthEventListeners,
      initCookieWatcher,
    } from "../../utils/client/authStatus";

    function checkAuthStatus(): void {
      const isLoggedIn = isUserAuthenticated();
      const authSection = document.getElementById("auth-section");
      const quizSection = document.getElementById("quiz-section");
      const chronologySection = document.getElementById("chronology-section");

      if (isLoggedIn) {
        // User is logged in - show game modes, hide auth form
        if (authSection) {
          authSection.style.display = "none";
          authSection.setAttribute("aria-hidden", "true");
        }
        if (quizSection) {
          quizSection.style.display = "flex";
          quizSection.setAttribute("aria-hidden", "false");
        }
        if (chronologySection) {
          chronologySection.style.display = "flex";
          chronologySection.setAttribute("aria-hidden", "false");
        }
      } else {
        // User is not logged in - show auth form, hide game modes
        if (authSection) {
          authSection.style.display = "flex";
          authSection.setAttribute("aria-hidden", "false");
        }
        if (quizSection) {
          quizSection.style.display = "none";
          quizSection.setAttribute("aria-hidden", "true");
        }
        if (chronologySection) {
          chronologySection.style.display = "none";
          chronologySection.setAttribute("aria-hidden", "true");
        }
      }
    }

    function initializePage(): void {
      // Initially hide all sections
      const sections = ["auth-section", "quiz-section", "chronology-section"];
      sections.forEach((id) => {
        const section = document.getElementById(id);
        if (section) {
          section.style.display = "none";
          section.setAttribute("aria-hidden", "true");
        }
      });

      // Check auth status
      checkAuthStatus();
    }

    // Initialize page when DOM is loaded
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", initializePage);
    } else {
      initializePage();
    }

    // Register auth event listeners
    const authListeners = registerAuthEventListeners(checkAuthStatus);
    const cookieWatcherId = initCookieWatcher(checkAuthStatus, 1000);

    // Cleanup on page unload
    document.addEventListener("astro:page-unload", () => {
      authListeners.remove();
      clearInterval(cookieWatcherId);
    });
  </script>
</Layout>

<style>
  /* ==============================================
   * KATEGORIE-SEITE STYLES - CLEAN & FUNCTIONAL
   * Using CSS variables from global.css for optimal maintainability
   * ============================================== */

  .page-container {
    margin: var(--space-none) auto;
    width: var(--width-full);
    max-width: var(--container-2xl);
    padding: var(--space-lg);
    min-height: 100vh;
    background: var(--bg-primary);
    color: var(--text-primary);
  }

  /* Tablet and above: --breakpoint-md (768px) */
  @media (min-width: 48em) {
    .page-container {
      padding: var(--space-2xl);
    }
  }

  /* ==============================================
   * HEADER & LAYOUT SECTIONS
   * ============================================== */

  /* Header Section */
  .section-header {
    text-align: center;
    margin-bottom: var(--space-3xl);
    padding: var(--space-xl);
  }

  /* Modern Header with integrated image */
  .header-with-image {
    margin: var(--space-none) auto var(--space-3xl) auto;
    padding: var(--space-2xl);
    text-align: center;
    width: var(--width-full);
    max-width: var(--container-xl);
  }

  /* Tablet and above: --breakpoint-md (768px) */
  @media (min-width: 48em) {
    .header-with-image {
      text-align: left;
    }
  }

  .header-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--space-3xl);
    width: var(--width-full);
  }

  .header-text {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    gap: var(--space-lg);
    flex: 1;
    min-width: 0;
  }

  .header-image {
    width: var(--width-full);
    max-width: var(--container-xs);
    flex-shrink: 0;
  }

  /* Desktop Layout - Side by side */
  /* Tablet and above: --breakpoint-md (768px) */
  @media (min-width: 48em) {
    .header-content {
      flex-direction: row;
      align-items: center;
      gap: var(--space-3xl);
    }

    .header-text {
      flex: 1;
      align-items: flex-start;
      text-align: left;
      max-width: 60%;
    }

    .header-image {
      flex: 0 0 40%;
      max-width: var(--container-sm);
    }
  }

  /* Large screens - More spacing and larger image */
  /* Desktop and above: --breakpoint-lg (1024px) */
  @media (min-width: 64em) {
    .header-content {
      gap: var(--space-3xl); /* Using root variable for consistent spacing */
    }

    .header-image {
      flex: 0 0 45%;
      max-width: var(--container-sm);
    }
  }

  /* Header Image Styling */
  .header-image-container {
    position: relative;
    width: var(--width-full);
    aspect-ratio: 5 / 3;
    overflow: hidden;
    border-radius: var(--radius-xl);
    box-shadow: var(--shadow-xl);
    border: var(--border-width-thin) solid var(--border-primary);
  }

  .header-responsive-image {
    height: var(--width-full);
    width: var(--width-full);
    object-fit: cover;
    transition: transform var(--transition-normal);
  }

  .header-with-image:hover .header-responsive-image {
    transform: scale(var(--animation-scale-hover-subtle));
  }

  .header-no-image-container {
    display: flex;
    aspect-ratio: 5 / 3;
    width: var(--width-full);
    align-items: center;
    justify-content: center;
    border-radius: var(--radius-xl);
    background: var(--bg-secondary);
    padding: var(--space-lg);
    text-align: center;
    color: var(--text-secondary);
    border: var(--border-width-thin) dashed var(--border-secondary);
  }

  .header-no-image-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--space-sm);
  }

  .divider {
    margin: var(--space-lg) auto;
    height: var(--border-width-thick);
    width: var(--space-3xl);
    border-radius: var(--radius-full);
    background: var(--interactive-primary);
  }

  /* Article Container */
  .article-container {
    margin: var(--space-none) auto;
    width: var(--width-full);
    max-width: var(--container-xl);
    display: flex;
    flex-direction: column;
    gap: var(--space-3xl);
  }

  /* ==============================================
   * CONTENT SECTIONS
   * ============================================== */

  /* Description Section - Modern styling matching game sections */
  .description-container {
    /* Remove old styles - now uses section-container base styles */
  }

  .description-badge {
    background: linear-gradient(135deg, var(--color-primary-500) 0%, var(--color-primary-600) 100%);
  }

  .description-badge::before {
    background: linear-gradient(135deg, var(--color-primary-400), var(--color-primary-600));
  }

  /* Header Badge - Modern styling with secondary color gradient */
  .header-badge {
    background: linear-gradient(
      135deg,
      var(--color-secondary-500) 0%,
      var(--color-secondary-600) 100%
    );
  }

  .header-badge::before {
    background: linear-gradient(135deg, var(--color-secondary-400), var(--color-secondary-600));
  }

  /* ==============================================
   * INTERACTIVE SECTIONS & COMPONENTS
   * ============================================== */

  /* Section Containers - Modern styling for game sections */
  .section-container {
    position: relative;
    display: flex;
    width: var(--width-full);
    flex-direction: column;
    align-items: center;
    gap: var(--space-2xl);
    margin-top: var(--space-2xl);
    padding: var(--space-2xl);
    border-radius: var(--radius-xl);
    background: linear-gradient(135deg, var(--bg-secondary) 0%, var(--bg-tertiary) 100%);
    border: var(--border-width-thin) solid var(--border-primary);
    box-shadow: var(--shadow-lg);
    transition: all var(--transition-normal);
    overflow: hidden;
  }

  .section-container::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: var(--border-width-thick);
    background: linear-gradient(90deg, var(--interactive-primary), var(--color-secondary-500));
    opacity: var(--opacity-high);
  }

  .section-container:hover {
    transform: translateY(var(--animation-x-offset-small));
    box-shadow: var(--shadow-xl);
    border-color: var(--interactive-primary);
  }

  .section-container:focus-within {
    box-shadow: var(--focus-ring), var(--shadow-xl);
    border-color: var(--border-focus);
    transform: translateY(var(--animation-x-offset-small));
  }

  /* Tablet and above: --breakpoint-md (768px) */
  @media (min-width: 48em) {
    .section-container {
      padding: var(--space-3xl);
      margin-left: auto;
      margin-right: auto;
      border-radius: var(--radius-2xl);
    }
  }

  .chronology-section {
    margin-top: var(--space-3xl);
    background: linear-gradient(135deg, var(--bg-secondary) 0%, var(--bg-tertiary) 100%);
  }

  .chronology-section::before {
    background: linear-gradient(90deg, var(--color-primary-500), var(--interactive-primary));
  } /* Button Groups - Responsive modern layout */
  .button-group {
    margin-top: var(--space-lg);
    display: flex;
    flex-direction: column;
    align-items: stretch;
    gap: var(--space-md);
    padding: var(--space-lg);
    border-radius: var(--radius-lg);
    background: rgba(255, 255, 255, var(--color-mix-light));
    backdrop-filter: blur(var(--space-sm));
    border: var(--border-width-thin) solid rgba(255, 255, 255, var(--opacity-low));
  }

  /* Tablet and Desktop - buttons side by side */
  /* Small tablet and above: closest to --breakpoint-sm (640px) but using 480px for early responsive design */
  @media (min-width: 30em) {
    .button-group {
      flex-direction: row;
      align-items: center;
      justify-content: center;
      gap: var(--space-lg);
      padding: var(--space-xl);
      width: fit-content;
      margin-left: auto;
      margin-right: auto;
    }
  }

  /* Medium screens and up - more spacing */
  /* Tablet and above: --breakpoint-md (768px) */
  @media (min-width: 48em) {
    .button-group {
      gap: var(--space-xl);
    }
  }

  /* Large screens - maximum spacing and comfort */
  /* Desktop and above: --breakpoint-lg (1024px) */
  @media (min-width: 64em) {
    .button-group {
      gap: var(--space-2xl);
      padding: var(--space-2xl);
    }
  }

  /* Force buttons to maintain natural width on larger screens */
  /* Small tablet and above: closest to --breakpoint-sm (640px) but using 480px for early responsive design */
  @media (min-width: 30em) {
    .button-group :global(.button-link) {
      flex-shrink: 0;
      width: fit-content !important;
    }
  }

  .game-button {
    min-height: var(--touch-target-enhanced);
    min-width: var(--touch-target-enhanced);
    display: flex;
    align-items: center;
    gap: var(--space-sm);
    padding: var(--space-sm) var(--space-md);
    transition: var(--transition-normal);
  }

  /* Tablet and above: --breakpoint-md (768px) */
  @media (min-width: 48em) {
    .game-button {
      padding: var(--space-md) var(--space-lg);
    }
  }

  /* ==============================================
   * ICON SYSTEM
   * ============================================== */

  /* Consolidated icon sizing system */
  .icon-small {
    height: var(--icon-size-sm);
    width: var(--icon-size-sm);
  }

  .icon-medium {
    height: var(--icon-size-sm);
    width: var(--icon-size-sm);
  }

  /* Tablet and above: --breakpoint-md (768px) */
  @media (min-width: 48em) {
    .icon-medium {
      height: var(--icon-size-md);
      width: var(--icon-size-md);
    }
  }

  .icon-large {
    height: var(--icon-size-xl);
    width: var(--icon-size-xl);
  }

  .icon-white {
    color: var(--color-white);
  }

  /* Game Icon Badge - Modern circular design */
  .game-icon-badge {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    width: var(--space-3xl);
    height: var(--space-3xl);
    border-radius: var(--radius-full);
    background: linear-gradient(
      135deg,
      var(--btn-primary-bg) 0%,
      var(--interactive-primary-hover) 100%
    );
    border: var(--border-width-thick) solid var(--color-white);
    box-shadow:
      var(--shadow-lg),
      inset 0 1px 0 rgba(255, 255, 255, var(--opacity-low));
    transition: all var(--transition-normal);
    margin-bottom: var(--space-md);
  }

  .game-icon-badge::before {
    content: "";
    position: absolute;
    inset: var(--animation-x-offset-small);
    border-radius: var(--radius-full);
    background: linear-gradient(135deg, var(--interactive-primary), var(--color-secondary-500));
    z-index: -1;
    opacity: 0;
    transition: opacity var(--transition-normal);
  }

  .section-container:hover .game-icon-badge::before {
    opacity: var(--opacity-medium);
  }

  .section-container:hover .game-icon-badge {
    transform: scale(var(--animation-scale-hover-subtle));
    box-shadow:
      var(--shadow-xl),
      inset 0 1px 0 rgba(255, 255, 255, var(--color-mix-dark));
  }

  /* Tablet and above: --breakpoint-md (768px) */
  @media (min-width: 48em) {
    .game-icon-badge {
      width: var(--space-3xl);
      height: var(--space-3xl);
    }
  }

  .chronology-badge {
    background: linear-gradient(
      135deg,
      var(--interactive-primary) 0%,
      var(--color-primary-600) 100%
    );
  }

  /* ==============================================
   * TYPOGRAPHY SYSTEM
   * ============================================== */

  /* Consolidated typography with consistent patterns */
  .headline-primary {
    margin-bottom: var(--space-md);
    font-size: var(--text-3xl);
    font-weight: var(--font-bold);
    color: var(--text-primary);
    text-align: center;
  }

  /* Tablet and above: --breakpoint-md (768px) */
  @media (min-width: 48em) {
    .headline-primary {
      font-size: var(--text-4xl);
    }
  }

  .paragraph-standard {
    font-size: var(--text-lg);
    font-weight: var(--font-medium);
    color: var(--text-secondary);
    text-align: center;
    max-width: var(--container-md);
    margin: var(--space-none) auto;
  }

  .paragraph-description {
    font-size: var(--text-base);
    color: var(--text-primary);
    text-align: center;
    max-width: var(--container-md);
    margin: var(--space-none) auto;
    line-height: var(--leading-enhanced);
  }

  /* Small tablet and above: --breakpoint-sm (640px) */
  @media (min-width: 40em) {
    .paragraph-description {
      font-size: var(--text-lg);
    }
  }

  .section-heading {
    margin-bottom: var(--space-lg);
    text-align: center;
    font-size: var(--text-2xl);
    font-weight: var(--font-bold);
    color: var(--text-primary);
  }

  /* Tablet and above: --breakpoint-md (768px) */
  @media (min-width: 48em) {
    .section-heading {
      font-size: var(--text-3xl);
    }
  }

  .section-description {
    margin-bottom: var(--space-lg);
    max-width: var(--container-md);
    text-align: center;
    font-size: var(--text-lg);
    color: var(--text-secondary);
    line-height: var(--leading-enhanced);
  }

  /* Tablet and above: --breakpoint-md (768px) */
  @media (min-width: 48em) {
    .section-description {
      font-size: var(--text-xl);
      margin-bottom: var(--space-2xl);
    }
  }

  /* ==============================================
   * FORM & INTERACTION COMPONENTS
   * ============================================== */

  /* Auth Form */
  .auth-form-container {
    margin: var(--space-none) auto;
    width: var(--width-full);
    max-width: var(--form-container-max-width);
  }

  /* Alert Box */
  .alert-box {
    margin-bottom: var(--space-lg);
    padding: var(--space-md);
    border-radius: var(--radius-md);
    background: var(--bg-warning-aaa);
    border: var(--border-width-thin) solid var(--color-warning-600);
    color: var(--text-warning-aaa);
    box-shadow: var(--shadow-sm);
  }

  .alert-content {
    display: flex;
    align-items: center;
    gap: var(--space-sm);
  }

  /* ==============================================
   * ACCESSIBILITY & UTILITY CLASSES
   * ============================================== */

  /* Screen Reader Only */
  .sr-only {
    position: absolute;
    width: var(--sr-only-width);
    height: var(--sr-only-height);
    padding: var(--space-none);
    margin: var(--sr-only-margin);
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    clip-path: var(--sr-only-clip-path);
    white-space: nowrap;
    border-width: var(--space-none);
  }

  /* Enhanced Focus Styles */
  :global(a:focus-visible),
  :global(button:focus-visible) {
    outline: var(--focus-outline);
    outline-offset: var(--focus-ring-offset);
  }

  /* ==============================================
   * RESPONSIVE & ACCESSIBILITY FEATURES
   * ============================================== */

  /* Reduced Motion Support */
  @media (prefers-reduced-motion: reduce) {
    .section-container,
    .game-icon-badge,
    .game-button {
      transition: var(--transition-instant);
    }

    .section-container:hover,
    .section-container:focus-within {
      transform: none;
    }

    .section-container:hover .game-icon-badge {
      transform: none;
    }
  }

  /* High Contrast Mode Support */
  @media (forced-colors: active) {
    .section-container,
    .description-container,
    .alert-box {
      border: var(--border-width-thick) solid CanvasText;
      background: Canvas;
    }

    .game-icon-badge {
      border: var(--border-width-thick) solid ButtonText;
      background: ButtonFace;
    }

    .icon-white {
      color: ButtonText;
    }
  }
</style>
