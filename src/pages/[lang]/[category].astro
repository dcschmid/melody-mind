---
/**
 * Category Page Component
 *
 * Displays a specific music category with its details and game options.
 * This page is pre-rendered at build time for all supported languages and categories.
 *
 * Accessibility Features:
 * - Proper heading hierarchy with semantic HTML
 * - High contrast text with 7:1 ratio for WCAG AAA compliance
 * - ARIA attributes for screen reader support
 * - Keyboard navigation support
 * - Reduced motion option for animations
 * - High contrast mode support
 *
 * Performance Optimizations:
 * - Static pre-rendering (SSG) for fast initial load
 * - Responsive image optimization with multiple formats and sizes
 * - Proper image aspect ratio to prevent layout shifts
 * - GPU-accelerated animations
 * - Optimized CSS with Tailwind utility classes
 */

import { Picture } from "astro:assets";
import Layout from "@layouts/Layout.astro";
import ButtonLink from "@components/ButtonLink.astro";
import { getRelativeLocaleUrl } from "astro:i18n";
import { useTranslations } from "@utils/i18n";
import Headline from "@components/Headline.astro";
import Paragraph from "@components/Paragraph.astro";
import { Icon } from "astro-icon/components";
import { extractKeywords, generateMetaDescription } from "@utils/seo";
import AuthForm from "@components/auth/AuthForm.astro";
// Keine serverseitige Authentifizierung mehr nötig, da wir clientseitig prüfen

// Mark this route for static generation (SSG)
export const prerender = true;

/**
 * Generates static paths for all supported languages and categories
 * This ensures fast page loads as everything is pre-rendered at build time
 * @returns {Array} Array of path objects with params and props
 */
export async function getStaticPaths() {
  // Define all supported languages as a constant array for type safety
  const supportedLanguages = ["de", "en", "es", "fr", "it", "pt", "da", "nl", "sv", "fi"] as const;

  const paths = [];

  for (const lang of supportedLanguages) {
    // Load categories based on language with proper fallback mechanism
    let categories;
    let usedFallback = false;

    try {
      // Try to load language-specific categories first
      const categoryData = await import(`../../../public/json/categories/${lang}_categories.json`);
      categories = categoryData.default;
    } catch (error) {
      // Fallback to English if language-specific file doesn't exist
      usedFallback = true;

      try {
        const fallbackData = await import(`../../../public/json/categories/en_categories.json`);
        categories = fallbackData.default;
      } catch (fallbackError) {
        // Emergency fallback with empty categories if even English fails
        categories = [];
      }
    }

    // Create a path for each category in this language
    for (const category of categories) {
      paths.push({
        params: { lang, category: category.slug },
        props: {
          categories,
          category,
          lang,
          usedFallback,
        },
      });
    }
  }

  return paths;
}

// Get props from getStaticPaths
const { category, lang, usedFallback } = Astro.props;
const t = useTranslations(lang);

// Bei SSG können wir keine serverseitige Authentifizierung durchführen
// Stattdessen setzen wir isLoggedIn initial auf false und prüfen den Status clientseitig
const isLoggedIn = false; // Wird clientseitig überschrieben

/**
 * Category interface definition
 * Represents the structure of a music category
 */
interface Category {
  slug: string; // URL-friendly identifier
  headline: string; // Display title
  introSubline: string; // Short description
  imageUrl: string; // Path to category image
  text: string; // Full description text
}

// Current category being displayed
const currentCategory = category;

// Generate SEO content for the current category
const title = `${currentCategory?.headline} ${t("category.start") || "Start"}`;
const description = currentCategory?.introSubline || "";

// Enhanced SEO content using utility functions
const pageContent = `${title} ${description} ${currentCategory?.text || ""}`;

// Generate optimized meta description and keywords for better search ranking
const optimizedDescription = generateMetaDescription(pageContent);
const keywords = extractKeywords(pageContent) || t("meta.keywords");

// Additional structured data parameters for SEO
const pageType = "website";
const publishDate = new Date("2024-01-01");
const modifiedDate = new Date();
---

<Layout
  {title}
  description={optimizedDescription}
  {keywords}
  image={currentCategory?.imageUrl || "/social-share-categories.jpg"}
  type={pageType}
  {publishDate}
  {modifiedDate}
>
  <div class="mx-auto max-w-4xl px-4 py-8">
    {/* Fallback Warning - Enhanced for screen readers with proper ARIA attributes */}
    {
      usedFallback && (
        <div
          class="mb-6 rounded-lg border border-amber-600/30 bg-amber-700/30 p-4 text-amber-100 shadow-inner"
          role="alert"
          aria-live="polite"
        >
          <div class="flex items-center gap-3">
            <Icon name="warning" class="h-5 w-5 flex-shrink-0" aria-hidden="true" />
            <span class="font-medium">
              {t("notice.fallback_content") ||
                "Using fallback content. Some information may be displayed in English."}
            </span>
          </div>
        </div>
      )
    }

    <!-- Hero section with improved contrast and accessibility -->
    <header
      class="mb-12 rounded-2xl bg-gradient-to-br from-zinc-800/60 to-zinc-900/60 p-8 text-center shadow-xl backdrop-blur-sm"
    >
      <Headline
        className="mb-4 text-center text-3xl font-bold text-white md:text-4xl"
        title={currentCategory?.headline}
        level="h1"
        id="category-heading"
      />
      <div class="mx-auto my-4 h-1 w-24 rounded-full bg-purple-500" aria-hidden="true"></div>

      <Paragraph
        className="mx-auto max-w-2xl text-center text-lg font-medium text-zinc-100"
        description={currentCategory?.introSubline}
      />
    </header>

    <article
      class="flex w-full flex-col items-center gap-8"
      data-category={currentCategory?.slug}
      aria-labelledby="category-heading"
    >
      <!-- Category image section with optimized responsive pictures -->
      <div class="relative mx-auto w-full max-w-2xl overflow-hidden rounded-xl shadow-xl">
        {
          currentCategory?.imageUrl ? (
            <div class="aspect-[16/9] w-full overflow-hidden rounded-xl shadow-lg">
              <Picture
                class="h-full w-full object-cover"
                src={currentCategory.imageUrl}
                widths={[320, 640, 960, 1280]}
                sizes="(max-width: 640px) 320px, (max-width: 1024px) 640px, (max-width: 1280px) 960px, 1280px"
                formats={["avif", "webp", "jpg"]}
                alt={`${currentCategory.headline} ${t("category.image.alt") || "category image"}`}
                loading="eager"
                fetchpriority="high"
                width={1280}
                height={720}
              />
              <div
                class="absolute inset-0 bg-gradient-to-t from-zinc-900/70 to-transparent"
                aria-hidden="true"
              />
            </div>
          ) : (
            <div
              class="flex aspect-[16/9] w-full items-center justify-center rounded-xl bg-zinc-800 p-6 text-center font-sans text-base text-zinc-100 shadow-lg"
              role="img"
              aria-label={t("category.no_image_available") || "No image available"}
            >
              <div class="flex items-center gap-3">
                <Icon name="image" class="h-8 w-8 text-zinc-400" aria-hidden="true" />
                <span>{t("category.no_image_available") || "No image available"}</span>
              </div>
            </div>
          )
        }
      </div>

      <!-- Category description with enhanced readability -->
      <div
        class="prose prose-invert prose-zinc w-full max-w-none rounded-xl border border-zinc-700/30 bg-zinc-800/50 px-6 py-6 leading-relaxed shadow-md sm:px-8 sm:py-8"
      >
        <Paragraph
          className="text-base leading-relaxed text-zinc-100 sm:text-lg"
          description={currentCategory?.text}
        />
      </div>

      <!-- Auth Form - Sichtbarkeit wird durch JavaScript gesteuert -->
      <section
        id="auth-section"
        class="relative mt-8 flex w-full flex-col items-center gap-8 rounded-xl border border-zinc-700/30 bg-gradient-to-br from-zinc-800/40 to-zinc-900/40 p-8 opacity-0 shadow-lg backdrop-blur-sm transition-opacity duration-300"
        aria-labelledby="auth-heading"
        aria-hidden="true"
      >
        <Headline
          level="h2"
          id="auth-heading"
          className="mb-6 text-center text-2xl font-bold text-white"
        >
          {t("auth.required.title") || "Anmeldung erforderlich"}
        </Headline>

        <Paragraph
          className="mb-6 max-w-2xl text-center text-zinc-100"
          description={t("auth.required.description") ||
            "Bitte melde dich an oder registriere dich, um die Spielmodi zu nutzen."}
        />

        <div class="mx-auto w-full max-w-md">
          <AuthForm initialMode="login" />
        </div>
      </section>

      <!-- Music Quiz Section - Sichtbarkeit wird durch JavaScript gesteuert -->
      <section
        id="quiz-section"
        class="relative mt-8 flex w-full flex-col items-center gap-8 rounded-xl border border-zinc-700/30 bg-gradient-to-br from-zinc-800/40 to-zinc-900/40 p-8 opacity-0 shadow-lg backdrop-blur-sm transition-opacity duration-300"
        aria-labelledby="quiz-heading"
        aria-hidden="true"
      >
        <div
          class="absolute -top-10 left-1/2 flex h-20 w-20 -translate-x-1/2 transform items-center justify-center rounded-full border-4 border-zinc-900 bg-gradient-to-br from-purple-600 to-indigo-700 shadow-lg"
          aria-hidden="true"
        >
          <Icon name="music" class="h-10 w-10 text-white" />
        </div>

        <Headline
          level="h2"
          id="quiz-heading"
          className="mt-6 pt-2 text-center text-2xl font-bold text-white"
        >
          {t("category.difficulty.heading")}
        </Headline>

        <Paragraph
          className="mb-6 max-w-2xl text-center text-zinc-100"
          description={t("knowledge.play.description")}
        />

        <div
          class="mt-2 flex w-full flex-wrap justify-center gap-4 sm:gap-6"
          role="group"
          aria-labelledby="quiz-heading"
        >
          <!-- Difficulty levels with improved accessibility -->
          <div class="perspective w-full max-w-xs">
            <ButtonLink
              href={getRelativeLocaleUrl(lang, `game-${currentCategory?.slug}/easy`)}
              aria-label={`${t("category.difficulty.easy")} ${t("difficulty.level")} - ${currentCategory?.headline}`}
              className="flex w-full transform items-center justify-center gap-3 rounded-xl bg-gradient-to-br from-green-600 to-green-700 px-6 py-5 shadow-md transition-all duration-300 hover:scale-[1.03] hover:from-green-500 hover:to-green-600 hover:shadow-green-700/20 focus:ring-4 focus:ring-green-500/50 focus:ring-offset-2 focus:ring-offset-zinc-900 focus:outline-none"
            >
              <Icon name="play" class="h-6 w-6" aria-hidden="true" />
              <span class="text-lg font-medium">{t("category.difficulty.easy")}</span>
            </ButtonLink>
          </div>

          <div class="perspective w-full max-w-xs">
            <ButtonLink
              href={getRelativeLocaleUrl(lang, `game-${currentCategory?.slug}/medium`)}
              aria-label={`${t("category.difficulty.medium")} ${t("difficulty.level")} - ${currentCategory?.headline}`}
              className="flex w-full transform items-center justify-center gap-3 rounded-xl bg-gradient-to-br from-blue-600 to-blue-700 px-6 py-5 shadow-md transition-all duration-300 hover:scale-[1.03] hover:from-blue-500 hover:to-blue-600 hover:shadow-blue-700/20 focus:ring-4 focus:ring-blue-500/50 focus:ring-offset-2 focus:ring-offset-zinc-900 focus:outline-none"
            >
              <Icon name="bolt" class="h-6 w-6" aria-hidden="true" />
              <span class="text-lg font-medium">{t("category.difficulty.medium")}</span>
            </ButtonLink>
          </div>

          <div class="perspective w-full max-w-xs">
            <ButtonLink
              href={getRelativeLocaleUrl(lang, `game-${currentCategory?.slug}/hard`)}
              aria-label={`${t("category.difficulty.hard")} ${t("difficulty.level")} - ${currentCategory?.headline}`}
              className="flex w-full transform items-center justify-center gap-3 rounded-xl bg-gradient-to-br from-red-600 to-red-700 px-6 py-5 shadow-md transition-all duration-300 hover:scale-[1.03] hover:from-red-500 hover:to-red-600 hover:shadow-red-700/20 focus:ring-4 focus:ring-red-500/50 focus:ring-offset-2 focus:ring-offset-zinc-900 focus:outline-none"
            >
              <Icon name="fire" class="h-6 w-6" aria-hidden="true" />
              <span class="text-lg font-medium">{t("category.difficulty.hard")}</span>
            </ButtonLink>
          </div>
        </div>
      </section>

      <!-- Music Chronology Game Section - Sichtbarkeit wird durch JavaScript gesteuert -->
      <section
        id="chronology-section"
        class="relative mt-12 flex w-full flex-col items-center gap-8 rounded-xl border border-zinc-700/30 bg-gradient-to-br from-zinc-800/40 to-zinc-900/40 p-8 opacity-0 shadow-lg backdrop-blur-sm transition-opacity duration-300"
        aria-labelledby="chronology-heading"
        aria-hidden="true"
      >
        <div
          class="absolute -top-10 left-1/2 flex h-20 w-20 -translate-x-1/2 transform items-center justify-center rounded-full border-4 border-zinc-900 bg-gradient-to-br from-indigo-500 to-indigo-700 shadow-lg"
          aria-hidden="true"
        >
          <Icon name="clock-history" class="h-10 w-10 text-white" />
        </div>

        <Headline
          level="h2"
          id="chronology-heading"
          className="mt-6 pt-2 text-center text-2xl font-bold text-white"
        >
          {t("game.chronology.title")}
        </Headline>

        <Paragraph
          className="mb-6 max-w-2xl text-center text-zinc-100"
          description={t("game.chronology.description")}
        />

        <div
          class="mt-2 flex w-full flex-wrap justify-center gap-4 sm:gap-6"
          role="group"
          aria-labelledby="chronology-heading"
        >
          <!-- Difficulty levels with improved accessibility -->
          <div class="perspective w-full max-w-xs">
            <ButtonLink
              href={getRelativeLocaleUrl(lang, `chronology-${currentCategory?.slug}/easy`)}
              aria-label={`${t("game.chronology.title")} - ${t("category.difficulty.easy")} ${t("difficulty.level")} - ${currentCategory?.headline}`}
              className="flex w-full transform items-center justify-center gap-3 rounded-xl bg-gradient-to-br from-green-600 to-green-700 px-6 py-5 shadow-md transition-all duration-300 hover:scale-[1.03] hover:from-green-500 hover:to-green-600 hover:shadow-green-700/20 focus:ring-4 focus:ring-green-500/50 focus:ring-offset-2 focus:ring-offset-zinc-900 focus:outline-none"
            >
              <Icon name="play" class="h-6 w-6" aria-hidden="true" />
              <span class="text-lg font-medium">{t("category.difficulty.easy")}</span>
            </ButtonLink>
          </div>

          <div class="perspective w-full max-w-xs">
            <ButtonLink
              href={getRelativeLocaleUrl(lang, `chronology-${currentCategory?.slug}/medium`)}
              aria-label={`${t("game.chronology.title")} - ${t("category.difficulty.medium")} ${t("difficulty.level")} - ${currentCategory?.headline}`}
              className="flex w-full transform items-center justify-center gap-3 rounded-xl bg-gradient-to-br from-blue-600 to-blue-700 px-6 py-5 shadow-md transition-all duration-300 hover:scale-[1.03] hover:from-blue-500 hover:to-blue-600 hover:shadow-blue-700/20 focus:ring-4 focus:ring-blue-500/50 focus:ring-offset-2 focus:ring-offset-zinc-900 focus:outline-none"
            >
              <Icon name="bolt" class="h-6 w-6" aria-hidden="true" />
              <span class="text-lg font-medium">{t("category.difficulty.medium")}</span>
            </ButtonLink>
          </div>

          <div class="perspective w-full max-w-xs">
            <ButtonLink
              href={getRelativeLocaleUrl(lang, `chronology-${currentCategory?.slug}/hard`)}
              aria-label={`${t("game.chronology.title")} - ${t("category.difficulty.hard")} ${t("difficulty.level")} - ${currentCategory?.headline}`}
              className="flex w-full transform items-center justify-center gap-3 rounded-xl bg-gradient-to-br from-red-600 to-red-700 px-6 py-5 shadow-md transition-all duration-300 hover:scale-[1.03] hover:from-red-500 hover:to-red-600 hover:shadow-red-700/20 focus:ring-4 focus:ring-red-500/50 focus:ring-offset-2 focus:ring-offset-zinc-900 focus:outline-none"
            >
              <Icon name="fire" class="h-6 w-6" aria-hidden="true" />
              <span class="text-lg font-medium">{t("category.difficulty.hard")}</span>
            </ButtonLink>
          </div>
        </div>
      </section>

      <!-- Client-side script für die Authentifizierungsprüfung -->
      <script>
        /**
         * Funktion zum Extrahieren eines Cookie-Werts anhand des Namens
         * @param {string} cookieName - Name des Cookies
         * @returns {string|null} - Cookie-Wert oder null, wenn nicht gefunden
         */
        /**
         * Prüft, ob ein bestimmter Schlüssel im localStorage existiert
         * @param {string} key - Der zu prüfende Schlüssel
         * @returns {boolean} - true wenn der Schlüssel existiert und einen Wert hat, sonst false
         */
        function checkLocalStorage(key: string): boolean {
          try {
            const value = localStorage.getItem(key);
            return value !== null;
          } catch (error) {
            console.error("Fehler beim Zugriff auf localStorage:", error);
            return false;
          }
        }

        /**
         * Setzt einen Wert im localStorage mit Fehlerbehandlung
         * @param {string} key - Der Schlüssel
         * @param {string} value - Der zu speichernde Wert
         * @returns {boolean} - true wenn erfolgreich, false wenn fehlgeschlagen
         */
        function setLocalStorage(key: string, value: string): boolean {
          try {
            localStorage.setItem(key, value);
            return true;
          } catch (error) {
            console.error("Fehler beim Setzen von localStorage:", error);
            return false;
          }
        }

        /**
         * Entfernt einen Schlüssel aus dem localStorage mit Fehlerbehandlung
         * @param {string} key - Der zu entfernende Schlüssel
         * @returns {boolean} - true wenn erfolgreich, false wenn fehlgeschlagen
         */
        function removeLocalStorage(key: string): boolean {
          try {
            localStorage.removeItem(key);
            return true;
          } catch (error) {
            console.error("Fehler beim Entfernen aus localStorage:", error);
            return false;
          }
        }

        /**
         * Funktion zur Aktualisierung der ARIA-Attribute basierend auf Sichtbarkeit
         * @param {HTMLElement} element - Das zu aktualisierende Element
         * @param {boolean} isVisible - Ob das Element sichtbar sein soll
         */
        function updateAriaVisibility(element: HTMLElement | null, isVisible: boolean): void {
          if (!element) {
            return;
          }

          element.setAttribute("aria-hidden", isVisible ? "false" : "true");

          // Wenn das Element sichtbar ist, Tab-Navigation ermöglichen, sonst deaktivieren
          const focusableElements = element.querySelectorAll(
            'a[href], button, input, textarea, select, details, [tabindex]:not([tabindex="-1"])'
          );

          focusableElements.forEach((el) => {
            if (isVisible) {
              (el as HTMLElement).removeAttribute("tabindex");
            } else {
              (el as HTMLElement).setAttribute("tabindex", "-1");
            }
          });
        }

        /**
         * Funktion zur Prüfung des Authentifizierungsstatus
         * Überprüft das Vorhandensein des access_token Cookies
         * und aktualisiert die UI entsprechend
         */
        /**
         * Prüft, ob der Benutzer eingeloggt ist, basierend auf mehreren Kriterien
         * @returns {boolean} - true wenn eingeloggt, false wenn nicht
         */
        /**
         * Prüft, ob der Benutzer authentifiziert ist
         * Da das access_token Cookie HttpOnly ist, können wir es nicht direkt lesen
         * Stattdessen verwenden wir den auth_status im localStorage
         * @returns {boolean} - true wenn der Benutzer authentifiziert ist, sonst false
         */
        function isUserAuthenticated(): boolean {
          // Primäre Methode: auth_status im localStorage prüfen
          const isAuthenticated =
            checkLocalStorage("auth_status") &&
            localStorage.getItem("auth_status") === "authenticated";

          // Debug-Ausgabe
          console.log("Auth Debug:", {
            localAuthStatus: localStorage.getItem("auth_status"),
            isAuthenticated,
            authStatusExists: checkLocalStorage("auth_status"),
          });

          return isAuthenticated;
        }

        /**
         * Aktualisiert die Sichtbarkeit einer Sektion mit Übergangseffekt
         * @param {HTMLElement} element - Das zu aktualisierende Element
         * @param {boolean} show - Ob das Element angezeigt werden soll
         */
        function updateSectionVisibility(element: HTMLElement | null, show: boolean): void {
          if (!element) {
            return;
          }

          if (show) {
            // Zuerst display und visibility setzen, dann Opacity ändern für sanften Übergang
            element.classList.remove("hidden"); // Tailwind-Klasse für display: none entfernen
            element.style.visibility = "visible";

            // Kurze Verzögerung, damit display: none vollständig entfernt wird, bevor Opacity geändert wird
            setTimeout(() => {
              element.classList.remove("opacity-0");
              element.classList.add("opacity-100");
              updateAriaVisibility(element, true);
            }, 10);
          } else {
            // Zuerst Opacity ändern, dann nach Übergang unsichtbar machen
            element.classList.add("opacity-0");
            element.classList.remove("opacity-100");
            updateAriaVisibility(element, false);

            // Warten auf Abschluss der Transition, bevor visibility und display geändert werden
            setTimeout(() => {
              if (element.classList.contains("opacity-0")) {
                element.style.visibility = "hidden";
                element.classList.add("hidden"); // Tailwind-Klasse für display: none hinzufügen
              }
            }, 300); // Entspricht der Transition-Dauer in CSS
          }
        }

        /**
         * Funktion zur Prüfung des Authentifizierungsstatus
         * Überprüft das Vorhandensein des access_token Cookies
         * und aktualisiert die UI entsprechend
         */
        function checkAuthStatus(): void {
          // Authentifizierungsstatus prüfen
          const isLoggedIn = isUserAuthenticated();

          // Elemente basierend auf dem Authentifizierungsstatus anzeigen/ausblenden
          const authSection = document.getElementById("auth-section");
          const quizSection = document.getElementById("quiz-section");
          const chronologySection = document.getElementById("chronology-section");

          if (isLoggedIn) {
            // Benutzer ist eingeloggt - Spielmodi anzeigen, Auth-Form ausblenden
            updateSectionVisibility(authSection, false);
            updateSectionVisibility(quizSection, true);
            updateSectionVisibility(chronologySection, true);

            // Authentifizierungsstatus im localStorage speichern
            setLocalStorage("auth_status", "authenticated");

            // Benutzerstatus-Event auslösen für andere Komponenten
            window.dispatchEvent(
              new CustomEvent("auth:status-change", {
                detail: { isAuthenticated: true },
              })
            );
          } else {
            // Benutzer ist nicht eingeloggt - Auth-Form anzeigen, Spielmodi ausblenden
            updateSectionVisibility(authSection, true);
            updateSectionVisibility(quizSection, false);
            updateSectionVisibility(chronologySection, false);

            // Authentifizierungsstatus im localStorage löschen
            removeLocalStorage("auth_status");

            // Benutzerstatus-Event auslösen für andere Komponenten
            window.dispatchEvent(
              new CustomEvent("auth:status-change", {
                detail: { isAuthenticated: false },
              })
            );
          }
        }

        // Authentifizierungsstatus beim Laden der Seite prüfen
        // Initialisierungsfunktion für die Seite
        function initializePage(): void {
          console.log("Initialisiere Seite...");

          // Ladezustand für alle Sektionen hinzufügen
          const sections = ["auth-section", "quiz-section", "chronology-section"];
          sections.forEach((id) => {
            const section = document.getElementById(id);
            if (section) {
              // Sektionen sind initial unsichtbar
              section.classList.add("opacity-0");
              section.classList.remove("opacity-100");
              section.style.visibility = "hidden";
              console.log(`Sektion ${id} initialisiert`);
            } else {
              console.warn(`Sektion ${id} nicht gefunden`);
            }
          });

          // Auth-Status sofort prüfen
          console.log("Prüfe Auth-Status...");
          checkAuthStatus();

          // Und nach kurzer Verzögerung erneut prüfen (für den Fall, dass Cookies verzögert geladen werden)
          setTimeout(() => {
            console.log("Erneute Auth-Status-Prüfung nach Verzögerung...");
            checkAuthStatus();
          }, 500);
        }

        // Seite initialisieren, wenn DOM geladen ist
        if (document.readyState === "loading") {
          document.addEventListener("DOMContentLoaded", () => {
            console.log("DOMContentLoaded ausgelöst");
            initializePage();
          });
        } else {
          // Falls DOMContentLoaded bereits ausgelöst wurde
          console.log("DOM bereits geladen, initialisiere sofort");
          initializePage();
        }

        // Authentifizierungsstatus bei Änderungen an den Cookies prüfen
        document.addEventListener("visibilitychange", () => {
          if (document.visibilityState === "visible") {
            checkAuthStatus();
          }
        });

        // Event-Listener für erfolgreiche Anmeldung/Abmeldung
        window.addEventListener("auth:login", (event) => {
          console.log("auth:login Event empfangen", event);
          // Bei erfolgreicher Anmeldung den Status im localStorage speichern
          setLocalStorage("auth_status", "authenticated");
          checkAuthStatus();
        });

        document.addEventListener("auth:login", (event) => {
          console.log("auth:login Event auf document empfangen", event);
          // Bei erfolgreicher Anmeldung den Status im localStorage speichern
          setLocalStorage("auth_status", "authenticated");
          checkAuthStatus();
        });

        window.addEventListener("auth:logout", (event) => {
          console.log("auth:logout Event empfangen", event);
          // Bei Abmeldung den Status aus dem localStorage entfernen
          removeLocalStorage("auth_status");
          checkAuthStatus();
        });

        document.addEventListener("auth:logout", (event) => {
          console.log("auth:logout Event auf document empfangen", event);
          // Bei Abmeldung den Status aus dem localStorage entfernen
          removeLocalStorage("auth_status");
          checkAuthStatus();
        });

        // Regelmäßige Überprüfung des Auth-Status (als Alternative zu cookieStore API)
        // Verbesserte Cookie-Überwachung mit Debouncing
        let previousCookieValue = document.cookie;
        let cookieCheckTimeout: number | null = null;

        function debouncedCookieCheck() {
          if (cookieCheckTimeout) {
            clearTimeout(cookieCheckTimeout);
          }

          cookieCheckTimeout = setTimeout(() => {
            if (document.cookie !== previousCookieValue) {
              console.log("Cookie-Änderung erkannt", {
                previous: previousCookieValue,
                current: document.cookie,
              });
              previousCookieValue = document.cookie;
              checkAuthStatus();
            }
          }, 300) as unknown as number;
        }

        // Cookie-Änderungen alle 500ms prüfen
        setInterval(debouncedCookieCheck, 500);

        // Manuelle Authentifizierungsprüfung ermöglichen
        // TypeScript-kompatible Zuweisung zum window-Objekt
        (window as any)["checkAuthManually"] = function () {
          console.log("Manuelle Authentifizierungsprüfung...");
          checkAuthStatus();
          return isUserAuthenticated();
        };

        // Hilfsfunktion zum Überprüfen des Auth-Status
        (window as any)["checkAuth"] = function () {
          const status = isUserAuthenticated();
          console.log("Aktueller Auth-Status:", status);
          return status;
        };

        // Hilfsfunktion zum manuellen Setzen des Auth-Status
        (window as any)["forceAuth"] = function (status: boolean) {
          if (status) {
            setLocalStorage("auth_status", "authenticated");
            console.log('Auth-Status manuell auf "authenticated" gesetzt');
            checkAuthStatus();
          } else {
            removeLocalStorage("auth_status");
            console.log("Auth-Status manuell zurückgesetzt");
            checkAuthStatus();
          }
          return isUserAuthenticated();
        };
      </script>
    </article>
  </div>
</Layout>

<style>
  /**
   * Advanced CSS optimizations for performance and accessibility
   *
   * Features:
   * 1. Hardware-accelerated animations with will-change
   * 2. Reduced motion support for accessibility
   * 3. High contrast mode support
   * 4. Optimized focus styles for keyboard navigation
   * 5. Touch-friendly target sizes (min 44x44px)
   * 6. Smooth opacity transitions for section visibility
   */

  /* Enhanced 3D effect with perspective - optimized for performance */
  .perspective {
    perspective: 1000px;
    contain: layout style; /* CSS containment for better performance */
  }

  /* Hardware acceleration for smooth transitions */
  .perspective a,
  .perspective button {
    will-change: transform; /* Hint to browser for hardware acceleration */
    transform: translateZ(0); /* Force GPU rendering */
    backface-visibility: hidden; /* Prevent flickering on some devices */
  }

  .perspective:hover a,
  .perspective:hover button {
    transform: translateY(-5px) scale(1.02);
    box-shadow: 0 15px 25px -12px rgba(0, 0, 0, 0.4);
  }

  /* Respect reduced motion preferences for accessibility */
  @media (prefers-reduced-motion: reduce) {
    .perspective:hover a,
    .perspective:hover button,
    .group-hover\:scale-105,
    .hover\:scale-\[1\.03\],
    .transform,
    .transition-all {
      transform: none !important;
      transition: none !important;
    }
  }

  /* Smooth transitions for section visibility */
  #auth-section,
  #quiz-section,
  #chronology-section {
    transition: opacity 0.3s ease-in-out;
    /* Visibility wird jetzt dynamisch per JavaScript gesetzt */
  }

  /* Verbesserte Sichtbarkeitssteuerung mit expliziten Zuständen */
  .opacity-0 {
    opacity: 0 !important;
  }

  .opacity-100 {
    opacity: 1 !important;
  }

  /* High Contrast Mode Support for assistive technologies */
  @media (forced-colors: active) {
    article[data-category],
    section,
    div[role="alert"] {
      border: 2px solid CanvasText;
      forced-color-adjust: none;
    }

    [role="group"] :global(a) {
      border: 2px solid ButtonText !important;
      forced-color-adjust: none;
    }

    /* Ensure proper focus visibility in high contrast mode */
    :global(a:focus-visible),
    :global(button:focus-visible) {
      outline: 3px solid ButtonText !important;
      outline-offset: 3px !important;
    }
  }

  /* Improved focus styles for better keyboard navigation - WCAG AAA compliant */
  :global(a:focus-visible),
  :global(button:focus-visible) {
    outline: 3px solid #a855f7 !important;
    outline-offset: 3px !important;
    transition: outline-offset 0.1s ease !important;
    box-shadow: 0 0 0 3px rgba(168, 85, 247, 0.4);
  }

  /* Better link readability - ensuring 7:1 contrast ratio */
  .prose :global(a) {
    color: #c084fc !important; /* Higher contrast purple */
    text-decoration: underline;
    text-decoration-thickness: 1px;
    text-underline-offset: 3px;
    font-weight: 500;
  }

  .prose :global(a:hover) {
    color: #d8b4fe !important;
    text-decoration-thickness: 2px;
  }

  /* Ensure minimum touch target size of 44x44px */
  [role="group"] :global(a),
  [role="group"] :global(button) {
    min-height: 44px;
    min-width: 44px;
  }
</style>
