---
import { Picture } from "astro:assets";
import Layout from "@layouts/Layout.astro";
import ButtonLink from "@components/ButtonLink.astro";
import { getRelativeLocaleUrl } from "astro:i18n";
import { useTranslations } from "@utils/i18n";
import Headline from "@components/Headline.astro";
import Paragraph from "@components/Paragraph.astro";

// Mark this route for static generation
export const prerender = true;

// Get static paths for all supported languages
export async function getStaticPaths() {
  const supportedLanguages = [
    "de",
    "en",
    "es",
    "fr",
    "it",
    "pt",
    "da",
    "nl",
    "sv",
    "fi",
  ] as const;

  const paths = [];

  for (const lang of supportedLanguages) {
    // Load categories based on language
    let categories;
    try {
      categories = await import(
        /* @vite-ignore */ `@json/${lang}_categories.json`
      );
    } catch (error) {
      // Fallback to default language if the specific language file doesn't exist
      categories = await import(/* @vite-ignore */ `@json/de_categories.json`);
    }

    // Create a path for each category
    for (const category of categories.default) {
      paths.push({
        params: { lang, category: category.slug },
        props: {
          categories: categories.default,
          category: category,
          lang,
        },
      });
    }
  }

  return paths;
}

// Get props from getStaticPaths
const { category, lang } = Astro.props;
const t = useTranslations(lang);

interface Category {
  slug: string;
  headline: string;
  introSubline: string;
  imageUrl: string;
  text: string;
}

// No login check needed anymore
const currentCategory = category;
---

<Layout title={`${currentCategory?.headline} Start`}>

<Headline className="text-center text-3xl md:text-4xl" title={currentCategory?.headline + " " + t("category.selected")} level="h1" />

<Paragraph className="text-center" description={currentCategory?.introSubline} />

  <article
    class="flex flex-col items-center gap-6 w-full"
    data-category={currentCategory?.slug}
    aria-labelledby="difficulty-heading"
  >
    <div
      class="relative mx-auto"
      role="img"
      aria-label={currentCategory?.headline + " " + t("category.image.alt")}
    >
      {
        currentCategory?.imageUrl ? (
          <Picture
            class="w-full max-w-[280px] h-auto rounded-lg shadow-md hover:scale-105 hover:shadow-xl transition-all duration-300 motion-safe:transform motion-reduce:transition-none"
            src={currentCategory.imageUrl}
            width={280}
            height={280}
            formats={["avif", "webp"]}
            alt=""
            loading="eager"
          />
        ) : (
          <div class="flex items-center justify-center w-[280px] h-[280px] p-6 rounded-lg bg-zinc-800 shadow-md font-sans text-base text-zinc-50 text-center">
            {t("category.no_image_available")}
          </div>
        )
      }
    </div>

    <Paragraph className="text-center"  description={currentCategory?.text} />

    <div class="flex flex-col gap-6 items-center w-full">
      <Headline
        level="h2"
      >
        {t("category.difficulty.heading")}
      </Headline>

      <div
        class="flex flex-wrap flex-col justify-center gap-6 w-full p-1 xs:flex-row"
        role="group"
        aria-label={t("category.difficulty.group")}
      >
        <ButtonLink
          href={getRelativeLocaleUrl(lang, `game-${currentCategory?.slug}/easy`)}
          aria-label={t("category.difficulty.easy.label")}
        >
        {t("category.difficulty.easy")}
        </ButtonLink>
       
        <ButtonLink
          href={getRelativeLocaleUrl(
            lang,
            `game-${currentCategory?.slug}/medium`,
          )}
          aria-label={t("category.difficulty.medium.label")}
        >
        {t("category.difficulty.medium")}
        </ButtonLink>
        
        <ButtonLink
          href={getRelativeLocaleUrl(lang, `game-${currentCategory?.slug}/hard`)}
          aria-label={t("category.difficulty.hard.label")}
        >
          {t("category.difficulty.hard")}
        </ButtonLink>
      </div>
    </div>
  </article>
</Layout>

<style>
  /* High Contrast Mode Support */
  @media (forced-colors: active) {
    article[data-category] {
      border: 2px solid CanvasText;
    }

    [role="group"] :global(button) {
      border: 2px solid ButtonText;
    }
  }
</style>
