---
/**
 * Category Page Component
 * Displays a specific music category with its details and game options.
 */

import { Picture } from "astro:assets";
import Layout from "@layouts/Layout.astro";
import ButtonLink from "@components/ButtonLink.astro";
import MusicButtons from "@components/MusicButtons.astro";
import { getRelativeLocaleUrl } from "astro:i18n";
import { useTranslations } from "@utils/i18n";
import Headline from "@components/Headline.astro";
import Paragraph from "@components/Paragraph.astro";
import { Icon } from "astro-icon/components";
import { extractKeywords, generateMetaDescription } from "@utils/seo";
import AuthForm from "@components/auth/AuthForm.astro";

export const prerender = true;

export async function getStaticPaths() {
  const supportedLanguages = [
    "de",
    "en",
    "es",
    "fr",
    "it",
    "pt",
    "da",
    "nl",
    "sv",
    "fi",
    "cn",
    "ru",
    "jp",
    "uk",
  ] as const;
  const paths = [];

  for (const lang of supportedLanguages) {
    let categories;
    let usedFallback = false;

    try {
      const categoryData = await import(`../../../public/json/categories/${lang}_categories.json`);
      categories = categoryData.default || [];
    } catch {
      usedFallback = true;
      try {
        const fallbackData = await import(`../../../public/json/categories/en_categories.json`);
        categories = fallbackData.default || [];
      } catch {
        categories = [];
      }
    }

    // Ensure categories is an array and has valid entries
    if (Array.isArray(categories) && categories.length > 0) {
      for (const categoryItem of categories) {
        // Ensure category has required slug property
        if (categoryItem && categoryItem.slug) {
          paths.push({
            params: {
              lang,
              category: categoryItem.slug,
            },
            props: {
              categories,
              category: categoryItem,
              lang,
              usedFallback,
            },
          });
        }
      }
    }
  }

  return paths;
}

const { category, lang, usedFallback } = Astro.props;
const t = useTranslations(lang);

interface CategoryType {
  slug: string;
  headline: string;
  introSubline: string;
  imageUrl: string;
  text: string;
  spotifyPlaylist?: string;
  deezerPlaylist?: string;
  appleMusicPlaylist?: string;
  knowledgeUrl?: string;
}

const currentCategory = category as CategoryType;
const title = `${currentCategory?.headline} ${t("category.start")}`;
const description = currentCategory?.introSubline || "";
const pageContent = `${title} ${description} ${currentCategory?.text || ""}`;
const optimizedDescription = generateMetaDescription(pageContent);
const keywords = extractKeywords(pageContent) || t("meta.keywords");
---

<Layout
  {title}
  description={optimizedDescription}
  {keywords}
  image={currentCategory?.imageUrl || "/social-share-categories.jpg"}
>
  <div class="page-container">
    <div class="sr-only" aria-live="polite" id="dynamic-announcements"></div>

    {
      usedFallback && (
        <div class="alert-box" role="alert" aria-live="polite">
          <div class="alert-content">
            <Icon name="warning" class="icon-small" aria-hidden="true" />
            <span>{t("notice.fallback_content")}</span>
          </div>
        </div>
      )
    }

    <header
      class="section-header section-container header-with-image"
      aria-labelledby="category-heading"
    >
      <div class="header-content">
        <div class="header-text">
          <div class="game-icon-badge header-badge">
            <Icon name="music-note" class="icon-large icon-white" />
          </div>
          <Headline title={currentCategory?.headline} level="h1" id="category-heading" />
          <Paragraph textSize="2xl" description={currentCategory?.introSubline} />
        </div>

        <div class="header-image">
          {
            currentCategory?.imageUrl ? (
              <div class="header-image-container">
                <Picture
                  class="header-responsive-image"
                  src={currentCategory.imageUrl}
                  widths={[400, 600, 800, 1000]}
                  sizes="(max-width: 640px) 400px, (max-width: 1024px) 600px, (max-width: 1280px) 800px, 1000px"
                  formats={["avif", "webp", "jpg"]}
                  alt={`${currentCategory.headline} ${t("category.image.alt")}`}
                  loading="eager"
                  fetchpriority="high"
                  width={1000}
                  height={600}
                  decoding="async"
                />
              </div>
            ) : (
              <div
                class="header-no-image-container"
                role="img"
                aria-label={t("category.no_image_available")}
              >
                <div class="header-no-image-content">
                  <Icon name="image" class="icon-large" aria-hidden="true" />
                  <span>{t("category.no_image_available")}</span>
                </div>
              </div>
            )
          }
        </div>
      </div>
    </header>

    <article
      class="article-container"
      data-category={currentCategory?.slug}
      aria-labelledby="category-heading"
      id="main-content"
      tabindex="-1"
    >
      <section
        class="description-container section-container"
        aria-labelledby="description-heading"
      >
        <div class="game-icon-badge description-badge">
          <Icon name="info-circle" class="icon-large icon-white" />
        </div>
        <Headline level="h2" id="description-heading">
          {t("category.about.title")}
        </Headline>
        <Paragraph textSize="2xl" description={currentCategory?.text} />

        {/* Music streaming platforms buttons */}
        {
          (currentCategory?.spotifyPlaylist ||
            currentCategory?.deezerPlaylist ||
            currentCategory?.appleMusicPlaylist) && (
            <div class="content-buttons-section">
              <MusicButtons category={currentCategory} title={currentCategory?.headline || ""} />
            </div>
          )
        }

        {/* Knowledge article button */}
        {
          currentCategory?.knowledgeUrl && (
            <div class="content-buttons-section">
              <ButtonLink
                href={currentCategory.knowledgeUrl}
                variant="secondary"
                icon="book-open"
                aria-label={`${t("knowledge.read.more")} Ã¼ber ${currentCategory?.headline}`}
              >
                {t("knowledge.read.article")}
              </ButtonLink>
            </div>
          )
        }
      </section>

      <section
        id="auth-section"
        class="section-container"
        aria-labelledby="auth-heading"
        aria-hidden="true"
      >
        <Headline level="h2" id="auth-heading">
          {t("auth.required.title")}
        </Headline>
        <Paragraph description={t("auth.required.description")} />
        <div class="auth-form-container">
          <AuthForm initialMode="login" />
        </div>
      </section>

      <section
        id="quiz-section"
        class="section-container"
        aria-labelledby="quiz-heading"
        aria-hidden="true"
      >
        <div class="game-icon-badge">
          <Icon name="music" class="icon-large icon-white" />
        </div>
        <Headline level="h2" id="quiz-heading" textAlign="center">
          {t("category.difficulty.heading")}
        </Headline>
        <Paragraph textSize="2xl" description={t("knowledge.play.description")} align="center" />

        <div class="button-group" role="group" aria-labelledby="quiz-heading">
          <ButtonLink
            href={getRelativeLocaleUrl(lang, `game-${currentCategory?.slug}/easy`)}
            aria-label={`${t("category.difficulty.easy")} ${t("difficulty.level")} - ${currentCategory?.headline}`}
            icon="play"
          >
            <span>{t("category.difficulty.easy")}</span>
          </ButtonLink>

          <ButtonLink
            href={getRelativeLocaleUrl(lang, `game-${currentCategory?.slug}/medium`)}
            aria-label={`${t("category.difficulty.medium")} ${t("difficulty.level")} - ${currentCategory?.headline}`}
            icon="bolt"
          >
            <span>{t("category.difficulty.medium")}</span>
          </ButtonLink>

          <ButtonLink
            href={getRelativeLocaleUrl(lang, `game-${currentCategory?.slug}/hard`)}
            aria-label={`${t("category.difficulty.hard")} ${t("difficulty.level")} - ${currentCategory?.headline}`}
            icon="fire"
          >
            <span>{t("category.difficulty.hard")}</span>
          </ButtonLink>
        </div>
      </section>

      <section
        id="time-pressure-section"
        class="section-container time-pressure-section"
        aria-labelledby="time-pressure-heading"
        aria-hidden="true"
      >
        <div class="game-icon-badge time-pressure-badge">
          <Icon name="timer" class="icon-large icon-white" />
        </div>
        <Headline level="h2" id="time-pressure-heading" textAlign="center">
          {t("game.timepressure.title")}
        </Headline>
        <Paragraph
          textSize="2xl"
          description={t("game.timepressure.description").replace(
            "{category}",
            currentCategory?.headline
          )}
          align="center"
        />

        <div
          class="button-group single-button-group"
          role="group"
          aria-labelledby="time-pressure-heading"
        >
          <ButtonLink
            href={getRelativeLocaleUrl(lang, `time-pressure-${currentCategory?.slug}`)}
            aria-label={`${t("game.timepressure.title")} - ${currentCategory?.headline}`}
            icon="zap"
            variant="primary"
          >
            <span>{t("game.start.now")}</span>
          </ButtonLink>
        </div>
      </section>

      <section
        id="chronology-section"
        class="section-container chronology-section"
        aria-labelledby="chronology-heading"
        aria-hidden="true"
      >
        <div class="game-icon-badge chronology-badge">
          <Icon name="clock-history" class="icon-large icon-white" />
        </div>
        <Headline level="h2" id="chronology-heading" textAlign="center">
          {t("game.chronology.title")}
        </Headline>
        <Paragraph textSize="2xl" description={t("game.chronology.description")} align="center" />

        <div class="button-group" role="group" aria-labelledby="chronology-heading">
          <ButtonLink
            href={getRelativeLocaleUrl(lang, `chronology-${currentCategory?.slug}/easy`)}
            aria-label={`${t("game.chronology.title")} - ${t("category.difficulty.easy")} ${t("difficulty.level")} - ${currentCategory?.headline}`}
            icon="play"
          >
            {t("category.difficulty.easy")}
          </ButtonLink>

          <ButtonLink
            href={getRelativeLocaleUrl(lang, `chronology-${currentCategory?.slug}/medium`)}
            aria-label={`${t("game.chronology.title")} - ${t("category.difficulty.medium")} ${t("difficulty.level")} - ${currentCategory?.headline}`}
            icon="bolt"
          >
            <span>{t("category.difficulty.medium")}</span>
          </ButtonLink>

          <ButtonLink
            href={getRelativeLocaleUrl(lang, `chronology-${currentCategory?.slug}/hard`)}
            aria-label={`${t("game.chronology.title")} - ${t("category.difficulty.hard")} ${t("difficulty.level")} - ${currentCategory?.headline}`}
            icon="fire"
          >
            <span>{t("category.difficulty.hard")}</span>
          </ButtonLink>
        </div>
      </section>
    </article>
  </div>

  <script>
    import {
      isUserAuthenticated,
      registerAuthEventListeners,
      initCookieWatcher,
    } from "../../utils/client/authStatus";

    // Simple section management
    const getSectionElements = (): HTMLElement[] => {
      const sections = [
        "auth-section",
        "quiz-section",
        "time-pressure-section",
        "chronology-section",
      ];
      return sections.map((id) => document.getElementById(id)).filter(Boolean) as HTMLElement[];
    };

    const updateSectionVisibility = (element: HTMLElement, isVisible: boolean): void => {
      element.style.display = isVisible ? "flex" : "none";
      element.setAttribute("aria-hidden", String(!isVisible));
    };

    const checkAuthStatus = (): void => {
      const isLoggedIn = isUserAuthenticated();
      const [authSection, quizSection, timePressureSection, chronologySection] =
        getSectionElements();

      if (isLoggedIn) {
        // User is logged in - show game modes, hide auth form
        if (authSection) {
          updateSectionVisibility(authSection, false);
        }
        if (quizSection) {
          updateSectionVisibility(quizSection, true);
        }
        if (timePressureSection) {
          updateSectionVisibility(timePressureSection, true);
        }
        if (chronologySection) {
          updateSectionVisibility(chronologySection, true);
        }
      } else {
        // User is not logged in - show auth form, hide game modes
        if (authSection) {
          updateSectionVisibility(authSection, true);
        }
        if (quizSection) {
          updateSectionVisibility(quizSection, false);
        }
        if (chronologySection) {
          updateSectionVisibility(chronologySection, false);
        }
      }
    };

    const initializePage = (): void => {
      // Initially hide all sections
      const sections = getSectionElements();
      sections.forEach((section) => {
        if (section) {
          updateSectionVisibility(section, false);
        }
      });

      // Check auth status
      checkAuthStatus();
    };

    // Initialize page when DOM is loaded
    const runWhenReady = (callback: () => void): void => {
      if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", callback, { once: true });
      } else {
        requestAnimationFrame(callback);
      }
    };

    // Initialize page
    runWhenReady(initializePage);

    // Register auth event listeners
    const authListeners = registerAuthEventListeners(checkAuthStatus);
    const cookieWatcherId = initCookieWatcher(checkAuthStatus, 1000);

    // Cleanup on page unload
    const cleanup = (): void => {
      authListeners.remove();
      clearInterval(cookieWatcherId);
    };

    document.addEventListener("astro:page-unload", cleanup, { once: true });
  </script>
</Layout>

<style lang="scss">
  /* ======================================
   * CATEGORY PAGE STYLES - OPTIMIZED FOR STYLE GUARDIAN
   * BEM Methodology + Global Variables + Mobile-First
   * ====================================== */

  .page-container {
    margin: 0 auto;
    width: var(--width-full);
    max-width: var(--container-2xl);
    min-height: 100vh;
    background: var(--bg-primary);
    color: var(--text-primary);
    contain: layout style paint;
    padding: var(--space-xs); // Mobile: minimal horizontal spacing

    @media (min-width: 20em) {
      padding: var(--space-sm);
    }

    @media (min-width: 48em) {
      padding: var(--space-lg);
    }

    @media (min-width: 64em) {
      padding: var(--space-xl);
    }
  }

  /* ======================================
   * HEADER & LAYOUT SECTIONS
   * ====================================== */
  .section-header {
    text-align: center;
    margin-bottom: var(--space-xl);
    padding: var(--space-md);
    contain: layout style paint;

    @media (min-width: 48em) {
      margin-bottom: var(--space-2xl);
      padding: var(--space-lg);
    }
  }

  .header-with-image {
    margin: 0 auto var(--space-2xl) auto;
    padding: var(--space-sm);
    text-align: center;
    width: var(--width-full);
    max-width: var(--container-xl);
    contain: layout style paint;

    @media (min-width: 48em) {
      text-align: left;
    }
  }

  .header-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--space-xl);
    width: var(--width-full);
    contain: layout style;

    @media (min-width: 48em) {
      display: grid;
      grid-template-columns: 1fr 0.8fr;
      gap: var(--space-2xl);
      align-items: center;
    }

    @media (min-width: 64em) {
      grid-template-columns: 1.2fr 1fr;
      gap: var(--space-3xl);
    }
  }

  .header-text {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    gap: var(--space-md);
    flex: 1;
    min-width: 0;

    @media (min-width: 48em) {
      align-items: flex-start;
      text-align: left;
    }
  }

  .header-image {
    width: var(--width-full);
    max-width: min(var(--container-xs), 90vw);
    flex-shrink: 0;

    @media (min-width: 48em) {
      max-width: var(--container-sm);
    }
  }

  .header-image-container {
    position: relative;
    width: var(--width-full);
    aspect-ratio: 5 / 3;
    overflow: hidden;
    border-radius: var(--radius-xl);
    box-shadow: var(--shadow-xl);
    border: var(--border-width-thin) solid var(--border-primary);
    contain: layout style paint;

    @media (max-width: 30em) {
      aspect-ratio: 4 / 3;
    }
  }

  .header-responsive-image {
    height: var(--width-full);
    width: var(--width-full);
    object-fit: cover;
    transition: transform var(--transition-base);
    contain: layout style paint;

    &:hover {
      transform: scale(1.02);
    }
  }

  .header-no-image-container {
    display: flex;
    aspect-ratio: 5 / 3;
    width: var(--width-full);
    align-items: center;
    justify-content: center;
    border-radius: var(--radius-xl);
    background: var(--bg-secondary);
    padding: var(--space-lg);
    text-align: center;
    color: var(--text-secondary);
    border: var(--border-width-thin) dashed var(--border-secondary);
  }

  .header-no-image-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--space-sm);
  }

  .divider {
    margin: var(--space-lg) auto;
    height: var(--border-width-thick);
    width: var(--space-3xl);
    border-radius: var(--radius-full);
    background: var(--interactive-primary);
  }

  /* ======================================
   * ARTICLE CONTAINER
   * ====================================== */
  .article-container {
    margin: 0 auto;
    width: var(--width-full);
    max-width: var(--container-xl);
    display: flex;
    flex-direction: column;
    gap: var(--space-2xl);
  }

  /* ======================================
   * CONTENT SECTIONS
   * ====================================== */
  .description-container {
    /* Uses section-container base styles */
  }

  .description-badge {
    background: linear-gradient(135deg, var(--color-primary-500) 0%, var(--color-primary-600) 100%);

    &::before {
      background: linear-gradient(135deg, var(--color-primary-400), var(--color-primary-600));
    }
  }

  .header-badge {
    background: linear-gradient(
      135deg,
      var(--color-secondary-500) 0%,
      var(--color-secondary-600) 100%
    );

    &::before {
      background: linear-gradient(135deg, var(--color-secondary-400), var(--color-secondary-600));
    }
  }

  /* ======================================
   * SECTION CONTAINERS
   * ====================================== */
  .section-container {
    position: relative;
    display: flex;
    width: var(--width-full);
    flex-direction: column;
    align-items: center;
    border-radius: var(--radius-xl);
    background: linear-gradient(135deg, var(--bg-secondary) 0%, var(--bg-tertiary) 100%);
    border: var(--border-width-thin) solid var(--border-primary);
    box-shadow: var(--shadow-lg);
    transition: all var(--transition-base);
    overflow: hidden;
    contain: layout style paint;
    gap: var(--space-md);
    margin-top: var(--space-md);
    padding: var(--space-sm);

    @media (min-width: 48em) {
      gap: var(--space-xl);
      margin-top: var(--space-xl);
      padding: var(--space-lg);
    }

    &::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: var(--border-width-thick);
      background: linear-gradient(90deg, var(--interactive-primary), var(--color-secondary-500));
      opacity: var(--opacity-high);
      contain: layout style paint;
    }

    &:hover {
      transform: translateY(-2px);
      box-shadow: var(--shadow-xl);
      border-color: var(--interactive-primary);
    }

    &:focus-within {
      box-shadow: var(--focus-ring), var(--shadow-xl);
      border-color: var(--border-focus);
      transform: translateY(-2px);
    }

    @media (min-width: 48em) {
      padding: var(--space-2xl);
      margin-left: auto;
      margin-right: auto;
      border-radius: var(--radius-2xl);
    }
  }

  .time-pressure-section {
    margin-top: var(--space-lg);
    background: linear-gradient(135deg, var(--color-warning-50) 0%, var(--color-error-50) 100%);

    &::before {
      background: linear-gradient(90deg, var(--color-warning), var(--color-error));
    }
  }

  .chronology-section {
    margin-top: var(--space-lg);
    background: linear-gradient(135deg, var(--bg-secondary) 0%, var(--bg-tertiary) 100%);

    &::before {
      background: linear-gradient(90deg, var(--color-primary-500), var(--interactive-primary));
    }
  }

  /* ======================================
   * BUTTON GROUPS
   * ====================================== */
  .button-group {
    margin: var(--space-xl) auto 0 auto;
    display: flex;
    flex-direction: column;
    gap: var(--space-md);
    width: 100%;
    max-width: 400px;
    align-items: center;
    contain: layout style;

    @media (min-width: 64em) {
      flex-direction: row;
      justify-content: center;
      max-width: 700px;
      gap: var(--space-lg);
    }

    a {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: var(--space-sm);
      min-height: var(--touch-target-enhanced);
      width: 100%;
      text-align: center;
      transition: all var(--transition-base);
      border-radius: var(--radius-lg);
      background: var(--btn-primary-bg);
      border: none;
      color: var(--color-white);
      text-decoration: none;
      contain: layout style paint;

      @media (max-width: 63.9375em) {
        flex-direction: row;
        padding: var(--space-lg) var(--space-xl);
        max-width: 360px;
      }

      @media (min-width: 64em) {
        flex-direction: column;
        padding: var(--space-xl);
        min-width: 160px;
        aspect-ratio: 1.1;
        max-width: 180px;
      }

      svg {
        width: 24px;
        height: 24px;
        color: var(--color-white);
        flex-shrink: 0;

        @media (min-width: 64em) {
          width: 32px;
          height: 32px;
        }
      }

      span {
        font-weight: var(--font-bold);
        font-size: var(--text-base);
        color: var(--color-white);
        white-space: nowrap;

        @media (min-width: 64em) {
          font-size: var(--text-sm);
        }
      }

      &:hover {
        transform: translateY(-2px);
        background: var(--btn-primary-hover);
        box-shadow: 0 8px 20px rgba(138, 43, 226, 0.4);
      }

      &:active {
        transform: translateY(0);
      }
    }
  }

  /* ======================================
   * ICON SYSTEM
   * ====================================== */
  .icon-small {
    height: var(--icon-size-sm);
    width: var(--icon-size-sm);
  }

  .icon-medium {
    height: var(--icon-size-sm);
    width: var(--icon-size-sm);

    @media (min-width: 48em) {
      height: var(--icon-size-md);
      width: var(--icon-size-md);
    }
  }

  .icon-large {
    height: var(--icon-size-xl);
    width: var(--icon-size-xl);
  }

  .icon-white {
    color: var(--color-white);
  }

  .game-icon-badge {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    width: var(--space-3xl);
    height: var(--space-3xl);
    border-radius: var(--radius-full);
    background: linear-gradient(
      135deg,
      var(--btn-primary-bg) 0%,
      var(--interactive-primary-hover) 100%
    );
    border: var(--border-width-thick) solid var(--color-white);
    box-shadow:
      var(--shadow-lg),
      inset 0 1px 0 rgba(255, 255, 255, var(--opacity-low));
    transition: all var(--transition-base);
    margin-bottom: var(--space-md);
    contain: layout style paint;

    &::before {
      content: "";
      position: absolute;
      inset: var(--animation-x-offset-small);
      border-radius: var(--radius-full);
      background: linear-gradient(135deg, var(--interactive-primary), var(--color-secondary-500));
      z-index: -1;
      opacity: 0;
      transition: opacity var(--transition-base);
    }

    @media (min-width: 48em) {
      width: var(--space-3xl);
      height: var(--space-3xl);
    }
  }

  .section-container:hover {
    .game-icon-badge {
      &::before {
        opacity: var(--opacity-medium);
      }

      transform: scale(1.05);
      box-shadow:
        var(--shadow-xl),
        inset 0 1px 0 rgba(255, 255, 255, var(--color-mix-dark));
    }
  }

  .chronology-badge {
    background: linear-gradient(
      135deg,
      var(--interactive-primary) 0%,
      var(--color-primary-600) 100%
    );
  }

  .time-pressure-badge {
    background: linear-gradient(135deg, var(--color-warning) 0%, var(--color-error) 100%);
    animation: pulse-glow 2s ease-in-out infinite alternate;
  }

  @keyframes pulse-glow {
    from {
      box-shadow:
        var(--shadow-xl),
        inset 0 1px 0 rgba(255, 255, 255, var(--color-mix-dark));
    }
    to {
      box-shadow:
        var(--shadow-xl),
        0 0 20px rgba(255, 193, 7, 0.3),
        inset 0 1px 0 rgba(255, 255, 255, var(--color-mix-dark));
    }
  }

  .single-button-group {
    justify-content: center;
  }

  .single-button-group .button-link {
    min-width: 200px;
    font-size: var(--text-lg);
    font-weight: var(--font-bold);
  }

  /* ======================================
   * TYPOGRAPHY SYSTEM
   * ====================================== */
  .headline-primary {
    margin-bottom: var(--space-md);
    font-size: var(--text-3xl);
    font-weight: var(--font-bold);
    color: var(--text-primary);
    text-align: center;

    @media (min-width: 48em) {
      font-size: var(--text-4xl);
    }
  }

  .paragraph-standard {
    font-size: var(--text-lg);
    font-weight: var(--font-medium);
    color: var(--text-secondary);
    text-align: center;
    max-width: var(--container-md);
    margin: 0 auto;
  }

  .paragraph-description {
    font-size: var(--text-base);
    color: var(--text-primary);
    text-align: center;
    max-width: var(--container-md);
    margin: 0 auto;
    line-height: var(--leading-enhanced);

    @media (min-width: 40em) {
      font-size: var(--text-lg);
    }
  }

  .section-heading {
    margin-bottom: var(--space-lg);
    text-align: center;
    font-size: var(--text-2xl);
    font-weight: var(--font-bold);
    color: var(--text-primary);

    @media (min-width: 48em) {
      font-size: var(--text-3xl);
    }
  }

  .section-description {
    margin-bottom: var(--space-lg);
    max-width: var(--container-md);
    text-align: center;
    font-size: var(--text-lg);
    color: var(--text-secondary);
    line-height: var(--leading-enhanced);

    @media (min-width: 48em) {
      font-size: var(--text-xl);
      margin-bottom: var(--space-2xl);
    }
  }

  /* ======================================
   * FORM & INTERACTION COMPONENTS
   * ====================================== */
  .auth-form-container {
    margin: 0 auto;
    width: var(--width-full);
    max-width: var(--form-container-max-width);
  }

  .alert-box {
    margin-bottom: var(--space-lg);
    padding: var(--space-md);
    border-radius: var(--radius-md);
    background: var(--bg-warning-aaa);
    border: var(--border-width-thin) solid var(--color-warning-600);
    color: var(--text-warning-aaa);
    box-shadow: var(--shadow-sm);
  }

  .alert-content {
    display: flex;
    align-items: center;
    gap: var(--space-sm);
  }

  /* ======================================
   * ACCESSIBILITY & UTILITY CLASSES
   * ====================================== */
  .sr-only {
    position: absolute;
    width: var(--sr-only-width);
    height: var(--sr-only-height);
    padding: 0;
    margin: var(--sr-only-margin);
    overflow: hidden;
    clip: var(--sr-only-clip-path);
    white-space: nowrap;
    border-width: 0;
  }

  :global(a:focus-visible),
  :global(button:focus-visible) {
    outline: var(--focus-ring);
    outline-offset: var(--focus-ring-offset);
  }

  /* ======================================
   * CONTENT BUTTONS
   * ====================================== */
  .content-buttons-section {
    margin-top: var(--space-md);

    @media (min-width: 20em) {
      margin-top: var(--space-lg);
    }

    @media (min-width: 48em) {
      margin-top: var(--space-xl);
    }
  }

  /* ======================================
   * ACCESSIBILITY ENHANCEMENTS
   * ====================================== */
  @media (prefers-reduced-motion: reduce) {
    .section-container,
    .game-icon-badge,
    .button-group {
      transition: var(--transition-instant);
      animation: none;
    }

    .section-container:hover,
    .section-container:focus-within {
      transform: none;
    }

    .section-container:hover {
      .game-icon-badge {
        transform: none;
      }
    }

    .button-group a {
      &:hover,
      &:active {
        transform: none;
      }
    }
  }

  @media (forced-colors: active) {
    .section-container,
    .description-container,
    .alert-box {
      border: var(--border-width-thick) solid CanvasText;
      background: Canvas;
    }

    .game-icon-badge {
      border: var(--border-width-thick) solid ButtonText;
      background: ButtonFace;
    }

    .icon-white {
      color: ButtonText;
    }

    .button-group {
      background: Canvas;
      border: var(--border-width-thick) solid CanvasText;

      a {
        border: var(--border-width-thin) solid CanvasText;
        background: ButtonFace;
        color: ButtonText;

        &::before {
          display: none;
        }
      }
    }
  }

  /* ======================================
   * MOBILE PORTRAIT OPTIMIZATIONS
   * ====================================== */
  @media (max-width: 29.9375em) {
    .page-container {
      padding: var(--space-sm) var(--space-xs);
    }

    .section-header {
      margin-bottom: var(--space-lg);
      padding: var(--space-sm);
    }

    .header-with-image {
      margin: 0 auto var(--space-lg) auto;
      padding: var(--space-sm) var(--space-xs);
    }

    .header-content {
      gap: var(--space-lg);
    }

    .header-text {
      gap: var(--space-sm);
    }

    .header-image {
      max-width: min(var(--container-xs), 90vw);
    }

    .section-container {
      gap: var(--space-lg);
      margin-top: var(--space-lg);
      padding: var(--space-xl) var(--space-md);
      border-radius: var(--radius-lg);
    }

    .game-icon-badge {
      width: var(--space-2xl);
      height: var(--space-2xl);
      margin-bottom: var(--space-sm);
    }

    .alert-box {
      margin-bottom: var(--space-md);
      padding: var(--space-sm);
      font-size: var(--text-sm);
      border-radius: var(--radius-md);
    }

    .headline-primary,
    h1 {
      font-size: var(--text-lg);
      line-height: var(--leading-snug);
      margin-bottom: var(--space-sm);
      text-align: center;
    }

    .paragraph-standard,
    .paragraph-description,
    p {
      font-size: var(--text-sm);
      line-height: var(--leading-relaxed);
      margin-bottom: var(--space-md);
      text-align: center;
    }

    .section-heading,
    h2 {
      font-size: var(--text-base);
      margin-bottom: var(--space-md);
      line-height: var(--leading-snug);
      text-align: center;
    }
  }

  @media (max-width: 359px) {
    .button-group {
      padding: var(--space-md) var(--space-sm);
      gap: var(--space-sm);

      a {
        min-height: calc(var(--touch-target-enhanced) + var(--space-md));
        padding: var(--space-md);

        svg {
          width: 20px;
          height: 20px;
        }

        span {
          font-size: var(--text-xs);
        }
      }
    }
  }

  @media (max-width: 47.9375em) and (orientation: landscape) {
    .button-group {
      flex-direction: row;
      justify-content: center;
      flex-wrap: nowrap;
      gap: var(--space-md);
      max-width: 100%;

      a {
        flex: 1;
        max-width: 160px;
        min-height: var(--touch-target-enhanced);
        flex-direction: row;
        gap: var(--space-sm);

        svg {
          width: 20px;
          height: 20px;
        }
      }
    }
  }

  @media (min-width: 30em) {
    .page-container {
      padding: var(--space-lg) var(--space-md);
    }

    .header-with-image {
      margin: 0 auto var(--space-xl) auto;
      padding: var(--space-md);
    }

    .header-content {
      gap: var(--space-xl);
    }

    .header-text {
      gap: var(--space-md);
    }

    .section-container {
      gap: var(--space-xl);
      margin-top: var(--space-xl);
      padding: var(--space-2xl);
    }

    h1 {
      font-size: clamp(var(--text-xl), 4vw, var(--text-2xl));
      line-height: var(--leading-tight);
      margin-bottom: var(--space-lg);
      text-align: center;
    }

    h2 {
      font-size: var(--text-lg);
      margin-bottom: var(--space-lg);
      line-height: var(--leading-snug);
      text-align: center;
    }

    p {
      font-size: var(--text-base);
      line-height: var(--leading-relaxed);
      margin-bottom: var(--space-lg);
      text-align: center;
    }
  }

  @media (min-width: 48em) and (max-width: 63.9375em) {
    h1 {
      font-size: clamp(var(--text-lg), 3vw, var(--text-xl)) !important;
    }

    h2 {
      font-size: var(--text-base) !important;
    }

    p {
      font-size: var(--text-sm) !important;
    }

    .paragraph {
      &--size {
        &-lg {
          font-size: var(--text-base) !important;
        }

        &-xl {
          font-size: var(--text-lg) !important;
        }

        &-2xl {
          font-size: var(--text-xl) !important;
        }
      }
    }

    .button-group {
      max-width: 520px;
      gap: var(--space-lg);
      padding: var(--space-xl) var(--space-2xl);

      a {
        padding: var(--space-lg) var(--space-xl);
        border-radius: var(--radius-xl);

        svg {
          width: 26px;
          height: 26px;
        }

        span {
          font-size: var(--text-sm);
          font-weight: var(--font-semibold);
        }
      }
    }
  }
</style>
