---
import { getLangFromUrl } from "@utils/i18n";
import Layout from "@layouts/Layout.astro";
import Headline from "@components/Headline.astro";
import Paragraph from "@components/Paragraph.astro";
import type { PodcastData } from "../../../types/podcast";
import enPodcastsJson from "../../../data/podcasts/en.json" assert { type: "json" };

/**
 * Static path generation for internationalization
 * Generates paths for all supported languages and podcast IDs
 */
export const getStaticPaths = async () => {
  const supportedLanguages = [
    "de",
    "en",
    "es",
    "fr",
    "it",
    "pt",
    "da",
    "nl",
    "sv",
    "fi",
    "cn",
    "ru",
    "jp",
    "uk",
  ];

  const podcasts = enPodcastsJson.podcasts;
  const paths: Array<{ params: { lang: string; id: string } }> = [];

  // Generate paths for all languages and all podcast IDs
  supportedLanguages.forEach((lang) => {
    podcasts.forEach((podcast) => {
      paths.push({
        params: { lang, id: podcast.id },
      });
    });
  });

  return paths;
};

/**
 * Enable static site generation for this page
 */
export const prerender = true;

/**
 * Language and translation setup
 */
const lang = String(getLangFromUrl(Astro.url));
const podcastId = Astro.params.id;

/**
 * Find the specific podcast by ID
 */
const findPodcastById = (id: string): PodcastData | null => {
  const podcasts = enPodcastsJson.podcasts;
  return podcasts.find((podcast) => podcast.id === id) || null;
};

const podcast = findPodcastById(podcastId || "");

// If podcast not found, return 404
if (!podcast) {
  return Astro.redirect("/404");
}

// SEO and page metadata
const title = podcast.title;
const description = podcast.description;
const currentUrl = new URL(Astro.url.pathname, Astro.site);
const baseUrl = Astro.site?.toString().replace(/\/$/, "") || "";

/**
 * Generate PodcastEpisode schema for SEO
 */
const generatePodcastSchema = () => ({
  "@context": "https://schema.org",
  "@type": "PodcastEpisode",
  name: podcast.title,
  description: podcast.description,
  url: currentUrl.toString(),
  inLanguage: lang,
  datePublished: podcast.publishedAt,
  image: {
    "@type": "ImageObject",
    url: new URL(podcast.imageUrl, baseUrl).toString(),
  },
  isPartOf: {
    "@type": "PodcastSeries",
    name: "MelodyMind Podcast",
    url: `${baseUrl}/${lang}/podcasts`,
  },
  ...(podcast.audioUrl && {
    audio: {
      "@type": "AudioObject",
      url: podcast.audioUrl,
      encodingFormat: "audio/mpeg",
    },
  }),
});

const pageSchema = generatePodcastSchema();

/**
 * Format the published date
 */
const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleDateString("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
  });
};

/**
 * Get the previous and next podcast for navigation
 */
const getNavigationPodcasts = () => {
  const podcasts = enPodcastsJson.podcasts.filter((p) => p.isAvailable);
  const currentIndex = podcasts.findIndex((p) => p.id === podcastId);

  if (currentIndex === -1) {
    return { prev: null, next: null };
  }

  const prev = currentIndex > 0 ? podcasts[currentIndex - 1] : null;
  const next = currentIndex < podcasts.length - 1 ? podcasts[currentIndex + 1] : null;

  return { prev, next };
};

const { prev, next } = getNavigationPodcasts();
---

<Layout {title} {description} type="article" image={podcast.imageUrl}>
  <Fragment slot="head">
    <script type="application/ld+json" set:html={JSON.stringify(pageSchema)} />

    <!-- Open Graph for Podcast Episode -->
    <meta property="og:type" content="music.song" />
    <meta property="music:creator" content="MelodyMind" />
    <meta property="article:published_time" content={podcast.publishedAt} />

    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={podcast.title} />
    <meta name="twitter:description" content={podcast.description} />
    <meta name="twitter:image" content={new URL(podcast.imageUrl, baseUrl).toString()} />
  </Fragment>

  <main class="min-h-screen bg-gray-900 text-white py-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <!-- Navigation Back -->
      <nav class="mb-8" aria-label="Podcast navigation">
        <a
          href={`/${lang}/podcasts`}
          class="inline-flex items-center gap-2 text-purple-400 hover:text-purple-300 font-semibold text-sm px-3 py-2 rounded-lg hover:bg-purple-500/10 transition-all duration-300 hover:-translate-x-1"
        >
          ‚Üê Back to All Podcasts
        </a>
      </nav>

      <!-- Hero Section -->
      <section class="bg-gray-800 border border-gray-700 rounded-2xl p-8 mb-12 shadow-xl">
        <div class="flex gap-8 mb-8 md:flex-row flex-col md:text-left text-center">
          <div class="flex-shrink-0">
            <img
              src={podcast.imageUrl}
              alt={podcast.title}
              width="200"
              height="200"
              loading="eager"
              class="w-48 h-48 rounded-2xl shadow-2xl"
            />
          </div>

          <div class="flex-1">
            <Headline level="h1" textSize="3xl" className="mb-4 text-white">
              {podcast.title}
            </Headline>

            <Paragraph textSize="lg" className="text-gray-300 mb-6">
              {podcast.description}
            </Paragraph>

            <div class="flex gap-6 items-center md:justify-start justify-center flex-wrap">
              <time class="text-gray-400 text-sm" datetime={podcast.publishedAt}>
                üìÖ {formatDate(podcast.publishedAt)}
              </time>
              <span class="text-gray-400 text-sm">üéôÔ∏è Episode</span>
            </div>
          </div>
        </div>

        {/* Audio Player */}
        {
          podcast.audioUrl && (
            <div class="bg-gradient-to-br from-gray-800 via-gray-700 to-gray-800 border border-gray-600 rounded-2xl p-8 text-center shadow-xl">
              <Headline level="h2" textSize="lg" className="mb-6 text-white">
                üéß Listen to Episode
              </Headline>

              {/* Functional Audio Player */}
              <div class="bg-gray-900 rounded-xl p-6 mb-6 border border-gray-600 shadow-inner">
                <div class="flex items-center justify-center gap-4 mb-4">
                  <div class="w-16 h-16 bg-purple-600 rounded-full flex items-center justify-center shadow-lg">
                    <svg class="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M8 5v14l11-7z" />
                    </svg>
                  </div>
                  <div class="text-left">
                    <div class="text-white font-semibold text-lg">{podcast.title}</div>
                    <div class="text-gray-400 text-sm">Podcast Episode</div>
                  </div>
                </div>

                {/* Hidden Audio Element */}
                {/* eslint-disable-next-line astro/jsx-a11y/media-has-caption */}
                <audio id="podcast-audio" preload="metadata" class="hidden">
                  <source src={podcast.audioUrl} type="audio/mpeg" />
                  {podcast.subtitleUrl ? (
                    <track kind="captions" src={podcast.subtitleUrl} label="English" />
                  ) : (
                    <track kind="captions" src="" label="No captions available" />
                  )}
                  Your browser does not support the audio element.
                </audio>

                {/* Progress Bar */}
                <div
                  class="w-full bg-gray-700 rounded-full h-2 mb-4 cursor-pointer"
                  id="progress-container"
                >
                  <div
                    class="bg-gradient-to-r from-purple-500 to-blue-500 h-2 rounded-full transition-all duration-300"
                    id="progress-bar"
                    style="width: 0%"
                  />
                </div>

                {/* Time Display */}
                <div class="flex justify-between text-gray-400 text-sm mb-4">
                  <span id="current-time">0:00</span>
                  <span id="total-time">0:00</span>
                </div>

                {/* Audio Controls */}
                <div class="flex items-center justify-center gap-6">
                  <button
                    class="text-gray-400 hover:text-white transition-colors duration-200"
                    id="rewind-btn"
                    title="Rewind 10s"
                  >
                    <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M12 5V1L7 6l5 5V7c3.31 0 6 2.69 6 6s-2.69 6-6 6-6-2.69-6-6H4c0 4.42 3.58 8 8 8s8-3.58 8-8-3.58-8-8-8z" />
                    </svg>
                  </button>
                  <button
                    class="w-12 h-12 bg-purple-600 rounded-full flex items-center justify-center hover:bg-purple-700 transition-colors duration-200 shadow-lg"
                    id="play-pause-btn"
                  >
                    <svg
                      class="w-8 h-8 text-white"
                      fill="currentColor"
                      viewBox="0 0 24 24"
                      id="play-icon"
                    >
                      <path d="M8 5v14l11-7z" />
                    </svg>
                    <svg
                      class="w-8 h-8 text-white hidden"
                      fill="currentColor"
                      viewBox="0 0 24 24"
                      id="pause-icon"
                    >
                      <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z" />
                    </svg>
                  </button>
                  <button
                    class="text-gray-400 hover:text-white transition-colors duration-200"
                    id="forward-btn"
                    title="Forward 10s"
                  >
                    <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M12 5V1l5 5-5 5V7c-3.31 0-6 2.69-6 6s2.69 6 6 6 6-2.69 6-6h2c0 4.42-3.58 8-8 8s-8-3.58-8-8 3.58-8 8-8z" />
                    </svg>
                  </button>
                </div>
              </div>

              {/* Action Buttons */}
              <div class="flex justify-center gap-4 flex-wrap">
                <a
                  href={podcast.audioUrl}
                  class="inline-flex items-center gap-3 px-6 py-3 bg-gradient-to-r from-purple-600 to-purple-700 text-white rounded-xl font-semibold text-sm hover:from-purple-700 hover:to-purple-800 transition-all duration-300 shadow-lg hover:shadow-xl hover:-translate-y-1"
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z" />
                  </svg>
                  Download Audio
                </a>
                {podcast.subtitleUrl && (
                  <a
                    href={podcast.subtitleUrl}
                    class="inline-flex items-center gap-3 px-6 py-3 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-xl font-semibold text-sm hover:from-blue-700 hover:to-blue-800 transition-all duration-300 shadow-lg hover:shadow-xl hover:-translate-y-1"
                    target="_blank"
                    rel="noopener noreferrer"
                  >
                    <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 2 2h12c1.1 0 2-.9 2-2V8l-6-6zm2 16H8v-2h8v2zm0-4H8v-2h8v2zm-3-5V3.5L18.5 9H13z" />
                    </svg>
                    View Subtitles
                  </a>
                )}
              </div>
            </div>
          )
        }
      </section>

      <!-- Main Content -->
      <section class="mb-12">
        <article class="bg-gray-800 border border-gray-700 rounded-2xl p-8 shadow-lg">
          <div class="prose prose-invert prose-lg max-w-none" set:html={podcast.showNotesHtml} />
        </article>
      </section>

      {/* Navigation Between Episodes */}
      {
        (prev || next) && (
          <nav class="mb-12" aria-label="Episode navigation">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              {prev && (
                <a
                  href={`/${lang}/podcasts/${prev.id}`}
                  class="flex items-center gap-4 p-6 bg-gray-800 border border-gray-700 rounded-xl text-white hover:bg-gray-700 hover:border-gray-600 transition-all duration-300 shadow-lg hover:shadow-xl hover:-translate-y-1"
                >
                  <span class="text-2xl text-purple-400">‚Üê</span>
                  <div class="flex-1">
                    <span class="block text-xs text-gray-400 uppercase tracking-wide mb-1">
                      Previous Episode
                    </span>
                    <span class="block font-semibold text-sm leading-tight">{prev.title}</span>
                  </div>
                </a>
              )}

              {next && (
                <a
                  href={`/${lang}/podcasts/${next.id}`}
                  class="flex items-center gap-4 p-6 bg-gray-800 border border-gray-700 rounded-xl text-white hover:bg-gray-700 hover:border-gray-600 transition-all duration-300 shadow-lg hover:shadow-xl hover:-translate-y-1 md:col-start-2"
                >
                  <div class="flex-1 text-right">
                    <span class="block text-xs text-gray-400 uppercase tracking-wide mb-1">
                      Next Episode
                    </span>
                    <span class="block font-semibold text-sm leading-tight">{next.title}</span>
                  </div>
                  <span class="text-2xl text-purple-400">‚Üí</span>
                </a>
              )}
            </div>
          </nav>
        )
      }

      {/* Call to Action */}
      <div
        class="w-full text-center p-12 bg-gradient-to-br from-purple-900 via-blue-800 to-gray-900 rounded-2xl border border-purple-500/30 shadow-2xl"
      >
        <Headline level="h2" textSize="xl" className="mb-4 text-white">
          Want More Music Stories?
        </Headline>
        <Paragraph className="text-gray-300 text-lg mb-8">
          Explore our complete collection of podcast episodes and discover the fascinating world of
          music history, culture, and innovation.
        </Paragraph>
        <a
          href={`/${lang}/podcasts`}
          class="inline-flex items-center gap-2 px-8 py-4 bg-purple-600 text-white rounded-xl font-semibold text-base hover:bg-purple-700 transition-colors duration-300 shadow-lg hover:shadow-xl hover:-translate-y-1"
        >
          Browse All Episodes
        </a>
      </div>
    </div>
  </main>

  <script>
    // Audio Player Functionality
    document.addEventListener("DOMContentLoaded", () => {
      const audio = document.getElementById("podcast-audio") as HTMLAudioElement;
      const playPauseBtn = document.getElementById("play-pause-btn") as HTMLButtonElement;
      const playIcon = document.getElementById("play-icon") as HTMLElement;
      const pauseIcon = document.getElementById("pause-icon") as HTMLElement;
      const progressBar = document.getElementById("progress-bar") as HTMLElement;
      const progressContainer = document.getElementById("progress-container") as HTMLElement;
      const currentTimeSpan = document.getElementById("current-time") as HTMLElement;
      const totalTimeSpan = document.getElementById("total-time") as HTMLElement;
      const rewindBtn = document.getElementById("rewind-btn") as HTMLButtonElement;
      const forwardBtn = document.getElementById("forward-btn") as HTMLButtonElement;

      if (!audio || !playPauseBtn || !progressBar || !progressContainer) {
        return;
      }

      // Format time in MM:SS
      function formatTime(seconds: number): string {
        const mins = Math.floor(seconds / 60);
        const secs = Math.floor(seconds % 60);
        return `${mins}:${secs.toString().padStart(2, "0")}`;
      }

      // Update progress bar and time display
      function updateProgress() {
        if (audio.duration && !isNaN(audio.duration)) {
          const progress = (audio.currentTime / audio.duration) * 100;
          progressBar.style.width = `${progress}%`;
          currentTimeSpan.textContent = formatTime(audio.currentTime);

          // Update total time if it's still 0:00
          if (totalTimeSpan.textContent === "0:00") {
            totalTimeSpan.textContent = formatTime(audio.duration);
          }
        }
      }

      // Update total time when metadata is loaded
      audio.addEventListener("loadedmetadata", () => {
        if (audio.duration && !isNaN(audio.duration)) {
          totalTimeSpan.textContent = formatTime(audio.duration);
        }
      });

      // Also try to get duration when canplay event fires
      audio.addEventListener("canplay", () => {
        if (audio.duration && !isNaN(audio.duration) && totalTimeSpan.textContent === "0:00") {
          totalTimeSpan.textContent = formatTime(audio.duration);
        }
      });

      // Update progress during playback
      audio.addEventListener("timeupdate", updateProgress);

      // Play/Pause functionality
      playPauseBtn.addEventListener("click", () => {
        if (audio.paused) {
          audio.play();
          playIcon.classList.add("hidden");
          pauseIcon.classList.remove("hidden");
        } else {
          audio.pause();
          playIcon.classList.remove("hidden");
          pauseIcon.classList.add("hidden");
        }
      });

      // Progress bar click to seek
      progressContainer.addEventListener("click", (e) => {
        const rect = progressContainer.getBoundingClientRect();
        const clickX = e.clientX - rect.left;
        const width = rect.width;
        const clickTime = (clickX / width) * audio.duration;
        audio.currentTime = clickTime;
      });

      // Rewind 10 seconds
      rewindBtn.addEventListener("click", () => {
        audio.currentTime = Math.max(0, audio.currentTime - 10);
      });

      // Forward 10 seconds
      forwardBtn.addEventListener("click", () => {
        audio.currentTime = Math.min(audio.duration, audio.currentTime + 10);
      });

      // Handle audio end
      audio.addEventListener("ended", () => {
        playIcon.classList.remove("hidden");
        pauseIcon.classList.add("hidden");
        progressBar.style.width = "0%";
        currentTimeSpan.textContent = "0:00";
      });
    });
  </script>
</Layout>
