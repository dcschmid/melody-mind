---
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import Layout from "@layouts/Layout.astro";
import Headline from "@components/Headline.astro";
import Prose from "@components/Prose.astro";
import type { PodcastData } from "../../../types/podcast";
import enPodcastsJson from "../../../data/podcasts/en.json" assert { type: "json" };
import { Icon } from "astro-icon/components";
import { extractKeywords, buildCanonicalUrl, buildBreadcrumbs } from "@utils/seo";
import { buildPageSeo } from "@utils/seo/buildPageSeo";
import Paragraph from "@components/Paragraph.astro";
import { SUPPORTED_LANGUAGES, type SupportedLanguage } from "@constants/languages";

/**
 * Static path generation for internationalization
 * Generates paths for all supported languages and podcast IDs
 */
export const getStaticPaths = async () => {
  // Only generate pages for podcasts explicitly marked as available.
  // This prevents unpublished / scheduled episodes from being built and
  // accidentally indexed (the sitemap plugin will also exclude them).
  const podcasts = (enPodcastsJson.podcasts || []).filter((p) => p?.isAvailable);
  return SUPPORTED_LANGUAGES.flatMap((lang: SupportedLanguage) =>
    podcasts.map((podcast) => ({ params: { lang, id: podcast.id } }))
  );
};

/**
 * Enable static site generation for this page
 */
export const prerender = true;

/**
 * Language and translation setup
 */
const lang = String(getLangFromUrl(Astro.url));
const t = useTranslations(String(lang));
const podcastId = Astro.params.id;

/**
 * Find the specific podcast by ID
 */
const findPodcastById = (id: string): PodcastData | null => {
  // Ensure the imported JSON is treated as PodcastData[] for TypeScript
  const podcasts = enPodcastsJson.podcasts as unknown as PodcastData[];
  return podcasts.find((podcast) => podcast.id === id) ?? null;
};

const podcast = findPodcastById(podcastId || "");

// If podcast not found, return 404
if (!podcast) {
  return Astro.redirect("/404");
}

// Base URL for canonical
const baseUrl = Astro.site?.toString().replace(/\/$/, "") || "";
// Gather preliminary keyword candidates
const keywordCandidates = extractKeywords(
  `${podcast.title} ${podcast.description} ${podcast.showNotesHtml || ""}`,
  20,
  lang
);

// Structured data & breadcrumbs now handled centrally via <SEO /> in Layout when type="podcastEpisode"

/**
 * Format the published date
 */
const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleDateString("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
  });
};

/**
 * Get the previous and next podcast for navigation
 */
const getNavigationPodcasts = () => {
  const podcasts = enPodcastsJson.podcasts.filter((p) => p.isAvailable);
  const currentIndex = podcasts.findIndex((p) => p.id === podcastId);

  if (currentIndex === -1) {
    return { prev: null, next: null };
  }

  const prev = currentIndex > 0 ? podcasts[currentIndex - 1] : null;
  const next = currentIndex < podcasts.length - 1 ? podcasts[currentIndex + 1] : null;

  return { prev, next };
};

const { prev, next } = getNavigationPodcasts();

/**
 * Determine 1-based episode number based on chronological order (oldest = 1)
 */
const computeEpisodeNumber = (id: string): number | null => {
  try {
    const available = enPodcastsJson.podcasts.filter((p) => p.isAvailable);
    const chronological = [...available].sort(
      (a, b) => new Date(a.publishedAt).getTime() - new Date(b.publishedAt).getTime()
    );
    const index = chronological.findIndex((p) => p.id === id);
    return index === -1 ? null : index + 1;
  } catch {
    return null;
  }
};

const episodeNumber = computeEpisodeNumber(podcast.id);

/**
 * Validate an ISO date string and return a Date instance if valid.
 * Otherwise return undefined so downstream SEO logic can safely skip it.
 */
const toValidDate = (value: string | undefined): Date | undefined => {
  if (!value) {
    return undefined;
  }
  const d = new Date(value);
  return isNaN(d.getTime()) ? undefined : d;
};

const publishDate = toValidDate(podcast.publishedAt);
// For now modifiedDate equals publishDate (no separate lastModified tracking yet)
const modifiedDate = publishDate;

// Canonical URL & breadcrumbs
const canonical = buildCanonicalUrl(baseUrl, Astro.url.pathname);
const breadcrumbs = buildBreadcrumbs([
  { name: t("nav.home") || "Home", url: `${baseUrl}/${lang}` },
  { name: t("podcast.title") || "Podcasts", url: `${baseUrl}/${lang}/podcasts` },
  { name: podcast.title, url: canonical },
]);
const prevUrl = prev ? buildCanonicalUrl(baseUrl, `/${lang}/podcasts/${prev.id}`) : undefined;
const nextUrl = next ? buildCanonicalUrl(baseUrl, `/${lang}/podcasts/${next.id}`) : undefined;

// Unified SEO object for episode
const pageSeo = buildPageSeo({
  title: podcast.title,
  description: podcast.description,
  url: canonical,
  contentKind: "podcast",
  breadcrumbs,
  publishDate: publishDate,
  modifiedDate: modifiedDate,
  enrichedParts: [
    t("podcast.listen_to_episode") || "Listen to episode",
    podcast.seriesName || "MelodyMind Podcast",
    podcast.title,
    podcast.description.slice(0, 120),
  ],
  fallbackKeywords: keywordCandidates
    ? keywordCandidates
        .split(",")
        .map((k) => k.trim())
        .filter(Boolean)
    : [],
  keywordLimit: 22,
  maxDescription: 155,
  image: podcast.imageUrl || undefined,
  index: true,
  follow: true,
  autoSocialImage: false, // explicit image normally provided
});
---

<Layout
  {pageSeo}
  ogMusic={{ creator: "Melody Mind" }}
  audioSrc={podcast.audioUrl}
  episodeNumber={episodeNumber || undefined}
  seriesName="MelodyMind Podcast"
  seriesUrl={`${baseUrl}/${lang}/podcasts`}
  {breadcrumbs}
  {prevUrl}
  {nextUrl}
>
  {/* Page Content inside Layout slot so footer appears after content */}
  <nav class="mb-8" aria-label={t("podcast.navigation.aria")}>
    <a
      href={`/${lang}/podcasts`}
      class="inline-flex items-center gap-2 rounded-lg px-3 py-2 text-sm font-semibold text-purple-400 transition-all duration-300 hover:-translate-x-1 hover:bg-purple-500/10 hover:text-purple-300"
    >
      {t("podcast.back_to_all")}
    </a>
  </nav>

  <section class="mb-12">
    <div class="mb-6 flex flex-col gap-10 text-center md:text-left lg:flex-row">
      <div class="relative w-full flex-shrink-0 md:w-[560px]">
        <div class="group relative aspect-[3/2] w-full overflow-hidden">
          <img
            src={podcast.imageUrl}
            alt={podcast.title}
            width="720"
            height="405"
            loading="eager"
            class="absolute inset-0 h-full w-full overflow-hidden rounded-2xl object-contain"
          />
        </div>
      </div>

      <div class="flex-1">
        <div class="mb-5 flex flex-wrap items-center justify-start gap-5 text-lg">
          {
            episodeNumber && (
              <span
                aria-label={`Episode ${episodeNumber}`}
                class="mr-3 inline-flex items-center justify-center rounded-md bg-gradient-to-r from-purple-600 to-indigo-600 px-2 py-1 align-middle text-lg font-bold tracking-wider text-white shadow-sm ring-1 ring-white/10"
              >
                EP {episodeNumber}
              </span>
            )
          }
          <time class="flex items-center gap-1" datetime={podcast.publishedAt}>
            <span class="text-gray-500">📅</span>
            {formatDate(podcast.publishedAt)}
          </time>
        </div>
        <Headline level="h1" textSize="2xl">
          <span class="align-middle">{podcast.title}</span>
        </Headline>
        <Paragraph textSize="lg" className="mb-8">{podcast.description}</Paragraph>
      </div>
    </div>

    {
      podcast.audioUrl && (
        <div class="rounded-2xl text-center shadow-xl">
          <div class="mb-6 rounded-xl border border-gray-600 bg-gray-900 p-6 shadow-inner">
            <Headline level="h2" textSize="lg" className="mb-6 text-center text-white">
              🎧 {t("podcast.listen_to_episode")}
            </Headline>
            <div class="mb-4 flex flex-col items-center justify-center gap-4 md:flex-row md:items-center">
              <div class="relative">
                <button
                  id="play-button"
                  aria-label="Play"
                  class="flex h-12 w-12 items-center justify-center rounded-full bg-purple-600 shadow-lg transition-transform duration-150 hover:scale-105 focus:ring-4 focus:ring-purple-400 focus:outline-none md:h-16 md:w-16"
                >
                  <Icon name="play" width={32} height={32} aria-hidden="true" />
                </button>
                <button
                  id="pause-button"
                  aria-label="Pause"
                  class="hidden h-12 w-12 items-center justify-center rounded-full bg-purple-600 shadow-lg transition-transform duration-150 hover:scale-105 focus:ring-4 focus:ring-purple-400 focus:outline-none md:h-16 md:w-16"
                >
                  <Icon name="pause" width={32} height={32} aria-hidden="true" />
                </button>
              </div>
              <div class="text-center md:text-left">
                <div class="text-lg font-semibold text-white">{podcast.title}</div>
                <div class="sr-only text-sm text-gray-400">{t("podcast.episode_label")}</div>
              </div>
            </div>
            <audio
              id="audio-player"
              preload="metadata"
              class="hidden"
              data-podcast-id={podcast.id}
              data-podcast-title={podcast.title}
            >
              <source src={podcast.audioUrl} type="audio/mpeg" />
              {podcast.subtitleUrl && (
                <track
                  kind="captions"
                  src={podcast.subtitleUrl}
                  srclang={lang}
                  label={lang}
                  default
                />
              )}
              Your browser does not support the audio element.
            </audio>
            <div class="mb-4 w-full">
              <div
                id="progress-bar"
                role="slider"
                aria-valuemin="0"
                aria-valuemax="100"
                aria-valuenow="0"
                class="relative h-3 w-full cursor-pointer rounded-full bg-gray-700"
              >
                <div
                  id="progress-fill"
                  class="absolute top-0 left-0 h-3 rounded-full bg-gradient-to-r from-purple-500 to-blue-500"
                  style="width:0%"
                />
              </div>
            </div>
            <div class="mb-4 flex flex-col items-center gap-2 text-sm text-gray-400 md:flex-row md:justify-center md:gap-4">
              <span id="time-display">0:00 / 0:00</span>
              <div
                id="buffer-indicator"
                class="pointer-events-none scale-95 items-center gap-2 text-xs text-gray-300 opacity-0 transition-all duration-300 ease-out"
              >
                <svg class="h-4 w-4 animate-spin text-gray-300" viewBox="0 0 24 24" fill="none">
                  <circle
                    cx="12"
                    cy="12"
                    r="10"
                    stroke="currentColor"
                    stroke-width="2"
                    opacity="0.15"
                  />
                  <path
                    d="M22 12a10 10 0 00-10-10"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                  />
                </svg>
                Buffering...
              </div>
            </div>
            <div class="flex items-center justify-center gap-6">
              <button
                class="text-gray-400 transition-colors duration-200 hover:text-white"
                id="rewind-button"
                title="Rewind 10s"
              >
                <svg class="h-5 w-5 md:h-6 md:w-6" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 5V1L7 6l5 5V7c3.31 0 6 2.69 6 6s-2.69 6-6 6-6-2.69-6-6H4c0 4.42 3.58 8 8 8s8-3.58 8-8-3.58-8-8-8z" />
                </svg>
              </button>
              <button
                class="text-gray-400 transition-colors duration-200 hover:text-white"
                id="forward-button"
                title="Forward 10s"
              >
                <svg class="h-5 w-5 md:h-6 md:w-6" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 5V1l5 5-5 5V7c-3.31 0-6 2.69-6 6s2.69 6 6 6 6-2.69 6-6h2c0 4.42-3.58 8-8 8s-8-3.58-8-8 3.58-8 8-8z" />
                </svg>
              </button>
              <button
                id="mute-button"
                class="text-gray-400 transition-transform duration-150 hover:scale-110 hover:text-white focus:outline-none"
                aria-label="Mute"
                aria-pressed="false"
              >
                <svg
                  class="icon-unmuted h-5 w-5"
                  viewBox="0 0 24 24"
                  fill="currentColor"
                  aria-hidden="true"
                >
                  <path d="M3 10v4h4l5 5V5L7 10H3z" />
                  <path d="M16.5 12c0-1.77-.77-3.37-2-4.47v8.94c1.23-1.1 2-2.7 2-4.47z" />
                </svg>
                <svg
                  class="icon-muted hidden h-5 w-5"
                  viewBox="0 0 24 24"
                  fill="currentColor"
                  aria-hidden="true"
                >
                  <path d="M16.5 12c0-1.77-.77-3.37-2-4.47v8.94c1.23-1.1 2-2.7 2-4.47z" />
                  <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z" />
                </svg>
              </button>
            </div>
          </div>
        </div>
      )
    }
  </section>

  <section class="mb-12">
    <article>
      <Prose html={podcast.showNotesHtml} size="lg" invert fullWidth />
    </article>
  </section>

  {
    (prev || next) && (
      <nav class="mb-12" aria-label={t("podcasts.navigation.aria")}>
        <div class="grid grid-cols-1 gap-4 md:grid-cols-2">
          {prev && (
            <a
              href={`/${lang}/podcasts/${prev.id}`}
              class="flex items-center gap-4 rounded-xl border border-gray-700 bg-gray-800 p-6 text-white shadow-lg transition-all duration-300 hover:-translate-y-1 hover:border-gray-600 hover:bg-gray-700 hover:shadow-xl"
            >
              <span class="text-2xl text-purple-400">←</span>
              <div class="flex-1">
                <span class="mb-1 block text-xs tracking-wide text-gray-400 uppercase">
                  {t("podcasts.navigation.previous")}
                </span>
                <span class="block text-base leading-tight font-semibold">{prev.title}</span>
              </div>
            </a>
          )}
          {next && (
            <a
              href={`/${lang}/podcasts/${next.id}`}
              class="flex items-center gap-4 rounded-xl border border-gray-700 bg-gray-800 p-6 text-white shadow-lg transition-all duration-300 hover:-translate-y-1 hover:border-gray-600 hover:bg-gray-700 hover:shadow-xl md:col-start-2"
            >
              <div class="flex-1 text-right">
                <span class="mb-1 block text-xs tracking-wide text-gray-400 uppercase">
                  {t("podcasts.navigation.next")}
                </span>
                <span class="block text-base leading-tight font-semibold">{next.title}</span>
              </div>
              <span class="text-2xl text-purple-400">→</span>
            </a>
          )}
        </div>
      </nav>
    )
  }

  <script>
    import { initAudioPlayerAuto } from "../../../utils/components/audioPlayerUtils";
    document.addEventListener("DOMContentLoaded", () => {
      initAudioPlayerAuto();
    });
  </script>
</Layout>
