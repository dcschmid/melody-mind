---
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import Layout from "@layouts/Layout.astro";
import Headline from "@components/Headline.astro";
import Paragraph from "@components/Paragraph.astro";
import { Icon } from "astro-icon/components";
import { buildCanonicalUrl, buildBreadcrumbs } from "@utils/seo";

import type { PodcastData } from "../../types/podcast";
import enPodcastsJson from "../../data/podcasts/en.json" assert { type: "json" };
/**
 * Static path generation for internationalization
 * Required for Astro dynamic routes to work properly
 */
export const getStaticPaths = async (): Promise<{ params: { lang: string } }[]> => {
  const supportedLanguages = [
    "de",
    "en",
    "es",
    "fr",
    "it",
    "pt",
    "da",
    "nl",
    "sv",
    "fi",
    "cn",
    "ru",
    "jp",
    "uk",
  ] as const;

  return supportedLanguages.map((lang) => ({
    params: { lang },
  }));
};

/**
 * Enable static site generation for this page
 */
export const prerender = true;

/**
 * Language and translation setup
 */
const lang = String(getLangFromUrl(Astro.url));
const t = useTranslations(String(lang));

/**
 * Load English podcast data regardless of site language
 * Uses static data to avoid build issues
 */
const loadPodcastsForLanguage = async (_language: string): Promise<PodcastData[]> => {
  const podcasts = enPodcastsJson.podcasts;
  return Array.isArray(podcasts) ? (podcasts as unknown as PodcastData[]) : [];
};

// Load English podcast data regardless of current language
const episodes = await loadPodcastsForLanguage("en");
// Only consider episodes that are available when counting/displaying lengths
const availableEpisodes = Array.isArray(episodes)
  ? episodes.filter((ep) => Boolean(ep.isAvailable))
  : [];

// Show a notice when site language is not English
const showEnglishOnlyNotice = lang !== "en";

// SEO Basisdaten
const title = t("podcast.title");
const description = t("podcast.description");
const baseUrl = Astro.site?.toString().replace(/\/$/, "") || "";
const canonical = buildCanonicalUrl(baseUrl, Astro.url.pathname);

// Breadcrumbs
const breadcrumbs = buildBreadcrumbs([
  { name: t("nav.home") || "Home", url: `${baseUrl}/${lang}` },
  { name: title, url: canonical },
]);

// Structured Data: PodcastSeries + ItemList (Episodes)
const podcastSeriesSchema = {
  "@context": "https://schema.org",
  "@type": "PodcastSeries",
  name: "MelodyMind Podcast",
  description,
  url: canonical,
  inLanguage: lang,
  numberOfEpisodes: availableEpisodes.length,
  publisher: {
    "@type": "Organization",
    name: "Melody Mind",
  },
};

const episodesItemList = (() => {
  if (!availableEpisodes.length) {
    return undefined;
  }
  // Sort newest first for display, but provide stable position mapping
  const sorted = [...availableEpisodes].sort(
    (a: PodcastData, b: PodcastData) =>
      new Date(b.publishedAt).getTime() - new Date(a.publishedAt).getTime()
  );
  const chronological = [...availableEpisodes]
    .sort(
      (a: PodcastData, b: PodcastData) =>
        new Date(a.publishedAt).getTime() - new Date(b.publishedAt).getTime()
    )
    .map((e, idx) => ({ id: e.id, number: idx + 1 }));
  const numberMap = new Map(chronological.map((e) => [e.id, e.number] as const));
  return {
    "@context": "https://schema.org",
    "@type": "ItemList",
    itemListElement: sorted.map((ep: PodcastData, idx: number) => ({
      "@type": "ListItem",
      position: idx + 1,
      url: `${baseUrl}/${lang}/podcasts/${ep.id}`,
      name: ep.title,
      datePublished: ep.publishedAt,
      episodeNumber: numberMap.get(ep.id) || undefined,
    })),
  };
})();

// Cast to any[] to avoid Astro's strict structural inference complaints
const structuredDataExtra: any[] = episodesItemList
  ? [podcastSeriesSchema, episodesItemList]
  : [podcastSeriesSchema];
---

<!-- OG image: podcast overview -->
<Layout
  {title}
  {description}
  type="website"
  image="/homecategories/podcast.png"
  imageWidth={1200}
  imageHeight={630}
  {canonical}
  {breadcrumbs}
  {structuredDataExtra}
  ogMusic={{ creator: "Melody Mind" }}
>
  <Fragment slot="head">
    <!-- RSS Feed Discovery (English-only) -->
    <link
      rel="alternate"
      type="application/rss+xml"
      title="MelodyMind Podcast - English"
      href="/en/podcasts/rss.xml"
    />
    <!-- Platform discovery meta (kept minimal) -->
    <meta name="apple-itunes-app" content="app-id=525463029" />
    <meta name="google-play-app" content="app-id=com.google.android.apps.podcasts" />
  </Fragment>

  <!-- Hero Section -->
  <section
    class="relative mb-16 overflow-hidden rounded-3xl border border-purple-500/30 bg-gradient-to-br from-purple-900 via-blue-800 to-gray-900 p-8 shadow-2xl sm:p-12 lg:p-16"
    aria-labelledby="podcast-heading"
  >
    <!-- Decorative background elements -->
    <div class="pointer-events-none absolute inset-0 opacity-10" aria-hidden="true">
      <div class="absolute -top-8 -right-8 h-32 w-32 rounded-full bg-white"></div>
      <div class="absolute -bottom-8 -left-8 h-24 w-24 rounded-full bg-white"></div>
      <div class="absolute top-1/2 right-4 h-16 w-16 rounded-full bg-white"></div>
    </div>

    <div class="relative z-10 w-full text-center text-white">
      <Headline level="h1" textSize="3xl" textAlign="center" className="mb-4">
        üéôÔ∏è {title}
      </Headline>

      <div class="mx-auto my-8 h-1 w-12 rounded-full bg-blue-400"></div>

      <Paragraph textAlign="center" textSize="lg" className="mb-8">
        {description}
      </Paragraph>

      {/* Podcast Platform Links */}
      <div class="mb-8 flex flex-wrap justify-center gap-4">
        <a
          href="https://podcasts.apple.com/us/podcast/the-melody-mind-podcast/id1833549333"
          class="music-platform-link flex items-center gap-3 rounded-xl border border-white/25 bg-white/15 px-4 py-3 text-white shadow-lg backdrop-blur-md transition-all duration-300"
          data-platform="apple"
          data-playlist-title={title}
          target="_blank"
          rel="noopener noreferrer"
          aria-label={t("musicPlatforms.listenOn", {
            title: title,
            platform: t("musicPlatforms.platform.apple"),
          })}
        >
          <Icon
            name="apple-music"
            width={32}
            height={32}
            aria-hidden="true"
            class="transition-inherit size-4 md:size-6"
          />
          <span class="text-sm md:text-lg">{t("podcasts.platform.apple")}</span>
        </a>

        <a
          href="https://www.deezer.com/de/show/1002117431"
          class="music-platform-link flex items-center gap-3 rounded-xl border border-white/25 bg-white/15 px-4 py-3 text-white shadow-lg backdrop-blur-md transition-all duration-300"
          data-platform="deezer"
          data-playlist-title={title}
          target="_blank"
          rel="noopener noreferrer"
          aria-label={t("musicPlatforms.listenOn", {
            title: title,
            platform: t("musicPlatforms.platform.deezer"),
          })}
        >
          <Icon
            name="deezer"
            width={32}
            height={32}
            aria-hidden="true"
            class="transition-inherit size-4 md:size-6"
          />
          <span class="text-sm md:text-lg">{t("podcasts.platform.deezer")}</span>
        </a>

        <a
          href="https://open.spotify.com/show/6nBTNqNNYXbFsJW42QnFTN"
          class="music-platform-link flex items-center gap-3 rounded-xl border border-white/25 bg-white/15 px-4 py-3 text-white shadow-lg backdrop-blur-md transition-all duration-300"
          data-platform="spotify"
          data-playlist-title={title}
          target="_blank"
          rel="noopener noreferrer"
          aria-label={t("musicPlatforms.listenOn", {
            title: title,
            platform: t("musicPlatforms.platform.spotify"),
          })}
        >
          <Icon
            name="spotify"
            width={32}
            height={32}
            aria-hidden="true"
            class="transition-inherit size-4 md:size-6"
          />
          <span class="text-sm md:text-lg">{t("podcasts.platform.spotify")}</span>
        </a>

        <a
          href="https://www.youtube.com/channel/UCD7MQkWw4P5Pd5xA_o6McLg"
          class="music-platform-link flex items-center gap-3 rounded-xl border border-white/25 bg-white/15 px-4 py-3 text-white shadow-lg backdrop-blur-md transition-all duration-300"
          data-platform="youtube"
          data-playlist-title={title}
          target="_blank"
          rel="noopener noreferrer"
          aria-label={t("musicPlatforms.listenOn", {
            title: title,
            platform: t("musicPlatforms.platform.youtube"),
          })}
        >
          <Icon
            name="youtube"
            width={32}
            height={32}
            aria-hidden="true"
            class="transition-inherit size-4 md:size-6"
          />
          <span class="text-sm md:text-lg">{t("podcasts.platform.youtube")}</span>
        </a>
      </div>

      {
        availableEpisodes.length > 0 && (
          <div class="flex flex-wrap justify-center gap-4">
            <div class="flex max-w-[220px] min-w-[140px] items-center gap-3 rounded-xl border border-white/25 bg-white/15 px-4 py-3 backdrop-blur-md">
              <Icon
                name="episodes"
                width={32}
                height={32}
                aria-hidden="true"
                class="transition-inherit size-4 md:size-6"
              />
              <div class="text-sm md:text-lg">
                {availableEpisodes.length}{" "}
                {availableEpisodes.length === 1
                  ? t("podcasts.episode.singular")
                  : t("podcasts.episode.plural")}
              </div>
            </div>

            <div class="flex max-w-[220px] min-w-[140px] items-center gap-3 rounded-xl border border-white/25 bg-white/15 px-4 py-3 backdrop-blur-md">
              <Icon
                name="language"
                width={32}
                height={32}
                aria-hidden="true"
                class="transition-inherit size-4 md:size-6"
              />
              <div class="text-sm md:text-lg">{t("language.en")}</div>
            </div>

            {/* RSS Subscribe Button in Stats (English-only) */}
            <a
              href={`/en/podcasts/rss.xml`}
              class="external-link flex max-w-[220px] min-w-[140px] items-center gap-3 rounded-xl border border-white/25 bg-white/15 px-4 py-3 shadow-lg backdrop-blur-md transition-all duration-300 hover:-translate-y-1 hover:border-orange-500/60 hover:bg-orange-500/30 hover:shadow-orange-500/30"
              title={t("podcast.rss.subscribe.title")}
              aria-label={`${t("podcast.rss.subscribe")} - ${t("podcast.rss.subscribe.description")}`}
              target="_blank"
              rel="noopener noreferrer"
              data-external-label="podcast_rss"
            >
              <Icon
                name="rss"
                width={32}
                height={32}
                aria-hidden="true"
                class="transition-inherit size-4 md:size-6"
              />
              <div class="text-sm md:text-lg">{t("podcast.rss.subscribe")}</div>
            </a>
          </div>
        )
      }
    </div>
  </section>

  {/* Language Restriction Notice */}
  {
    showEnglishOnlyNotice && (
      <div class="mb-8 w-full rounded-xl border border-blue-200 bg-gradient-to-r from-blue-50 to-indigo-100 p-4">
        <div class="flex items-center justify-center gap-3 text-blue-800">
          <div class="text-blue-500">‚ÑπÔ∏è</div>
          <div class="text-center text-sm md:text-lg">{t("podcasts.note.only_english")}</div>
        </div>
      </div>
    )
  }

  {/* Episodes List */}
  <section>
    <!-- Search UI for podcasts -->
    <div class="mx-auto mb-8 w-full max-w-5xl">
      <div class="relative">
        <label for="podcast-search" class="sr-only"
          >{t("podcast.search.label") || "Search podcasts"}</label
        >
        <div class="pointer-events-none absolute inset-y-0 left-0 z-10 flex items-center pl-6">
          <Icon
            name="search"
            width={32}
            height={32}
            aria-hidden="true"
            class="transition-inherit size-4 md:size-6"
          />
        </div>

        <input
          id="podcast-search"
          type="search"
          class="block w-full rounded-3xl border-2 border-purple-500/40 bg-gray-800/90 py-5 pr-20 pl-16 text-base font-medium placeholder-gray-400 shadow-2xl backdrop-blur-md transition-all duration-300 focus:border-purple-400 focus:ring-4 focus:ring-purple-500/60 focus:outline-none md:text-xl"
          placeholder={t("podcast.search.placeholder") || "Search podcasts..."}
          aria-controls="podcast-list"
          autocomplete="off"
        />

        <button
          id="clear-search"
          class="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-6 text-gray-400 opacity-0 transition-colors duration-200 hover:text-purple-400"
          type="button"
          aria-label={t("game.search.clear") || "Clear search"}
        >
          <Icon
            name="x"
            width={32}
            height={32}
            aria-hidden="true"
            class="transition-inherit size-4 md:size-6"
          />
        </button>
      </div>

      <div class="mt-4 text-center">
        <button
          id="reset-search"
          class="inline-flex items-center gap-3 rounded-xl bg-purple-600 px-6 py-3 font-semibold text-white shadow-lg transition-colors duration-200 hover:bg-purple-700 hover:shadow-purple-500/20"
          type="button"
          aria-controls="podcast-list"
        >
          <Icon
            name="reset"
            width={32}
            height={32}
            aria-hidden="true"
            class="transition-inherit size-4 md:size-6"
          />
          <span>{t("game.search.reset.text") || "Reset Search"}</span>
        </button>
      </div>
    </div>

    <div id="podcast-list">
      {
        availableEpisodes.length === 0 ? (
          <div class="rounded-2xl border-2 border-dashed border-gray-600 bg-gray-800 p-16 text-center text-gray-400">
            <div class="mb-4 text-4xl">üéôÔ∏è</div>
            <Headline level="h2" textSize="2xl" className="mb-4 text-gray-300">
              {t("podcasts.empty.title")}
            </Headline>
            <Paragraph textSize="base" className="text-gray-400 max-w-2xl mx-auto">
              {t("podcasts.empty.text")}
            </Paragraph>
          </div>
        ) : (
          <div class="space-y-6">
            {(() => {
              const sorted = [...availableEpisodes].sort(
                (a: PodcastData, b: PodcastData) =>
                  new Date(b.publishedAt).getTime() - new Date(a.publishedAt).getTime()
              );
              const chronological = [...availableEpisodes]
                .sort(
                  (a: PodcastData, b: PodcastData) =>
                    new Date(a.publishedAt).getTime() - new Date(b.publishedAt).getTime()
                )
                .map((e, idx) => ({ id: e.id, number: idx + 1 }));
              const numberMap = new Map(chronological.map((e) => [e.id, e.number] as const));
              return sorted.map((episode: PodcastData) => {
                const epNumber = numberMap.get(episode.id);
                return (
                  <article class="group relative overflow-hidden rounded-2xl border border-gray-700 bg-gray-800/90 p-2 shadow-lg">
                    <div class="relative mb-6 flex flex-col gap-6 text-left md:flex-row">
                      <div class="relative w-full flex-shrink-0 md:w-96">
                        <div class="relative aspect-[3/2] w-full overflow-hidden">
                          <img
                            src={episode.imageUrl}
                            alt={episode.title}
                            loading="lazy"
                            width="360"
                            height="220"
                            class="absolute inset-0 h-full w-full rounded-2xl object-contain"
                          />
                        </div>
                      </div>
                      <div class="flex-1">
                        <div class="mb-4 flex items-center justify-start gap-3">
                          {epNumber && (
                            <span
                              aria-label={`Episode ${epNumber}`}
                              class="inline-flex items-center justify-center rounded-md bg-gradient-to-r from-purple-600 to-indigo-600 px-2 py-1 text-sm tracking-wider text-white shadow-sm ring-1 ring-white/10"
                            >
                              EP {epNumber}
                            </span>
                          )}
                          <time datetime={episode.publishedAt} class="flex items-center gap-2">
                            <span class="inline-block text-lg text-gray-500">üìÖ</span>
                            {new Date(episode.publishedAt).toLocaleDateString("en-US", {
                              year: "numeric",
                              month: "short",
                              day: "numeric",
                            })}
                          </time>
                        </div>

                        <Headline level="h2" textSize="lg" className="mb-3 text-white leading-snug">
                          <span class="align-middle font-semibold">{episode.title}</span>
                        </Headline>

                        <Paragraph textSize="lg" className="text-gray-300 mb-4">
                          {episode.description}
                        </Paragraph>
                        <a
                          href={`/${lang}/podcasts/${episode.id}`}
                          class="inline-flex items-start gap-2 rounded-xl bg-gradient-to-r from-purple-600 to-indigo-600 px-5 py-3 text-lg font-semibold text-white shadow-lg ring-1 shadow-purple-900/20 ring-white/10 transition-all duration-300 focus-visible:ring-2 focus-visible:ring-purple-400 focus-visible:outline-none"
                        >
                          <span>üìñ {t("podcasts.read_full_notes")}</span>
                        </a>
                      </div>
                    </div>
                  </article>
                );
              });
            })()}
          </div>
        )
      }
    </div>
  </section>

  <script>
    import { initDefaultMusicButtons } from "../../utils/components/musicButtonsUtils";
    import { initGenericSearchAuto } from "../../utils/components/searchUtils";

    /* eslint-disable @typescript-eslint/explicit-function-return-type */
    function wire() {
      const instance = initGenericSearchAuto({
        inputId: "podcast-search",
        clearButtonId: "clear-search",
        itemSelector: "#podcast-list article",
      });

      try {
        window.__lastSearchInstance = instance;
      } catch {
        // ignore storing instance
      }

      try {
        const resetBtn = document.getElementById("reset-search");
        if (resetBtn) {
          resetBtn.addEventListener("click", () => {
            try {
              const inst = window.__lastSearchInstance;
              if (inst && typeof inst.clear === "function") {
                inst.clear();
              } else if (inst && typeof inst.performSearch === "function") {
                inst.performSearch("");
              }
              const input = document.getElementById("podcast-search");
              if (input) {
                input.focus();
              }
            } catch {
              // ignore reset errors
            }
          });
        }
      } catch {
        // ignore listener errors
      }

      // Initialize music platform link tracking (Fathom) for this page
      try {
        initDefaultMusicButtons();
      } catch {
        // ignore music button init errors
      }
    }

    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", () => {
        (window.requestIdleCallback || ((cb) => setTimeout(cb, 1)))(wire);
      });
    } else {
      (window.requestIdleCallback || ((cb) => setTimeout(cb, 1)))(wire);
    }
  </script>
</Layout>
