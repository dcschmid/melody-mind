---
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import Layout from "@layouts/Layout.astro";
import Headline from "@components/Headline.astro";
import Paragraph from "@components/Paragraph.astro";
import { Icon } from "astro-icon/components";
import { buildCanonicalUrl, buildBreadcrumbs } from "@utils/seo";
import { resolveBaseUrl } from "@utils/seo/seoBasics";
import SearchPanel from "@components/Search/SearchPanel.astro";
import {
  generateMetaDescription,
  extractKeywordsFallback,
  buildKeywordsString,
} from "@utils/seo/seoText";
import { buildPodcastSeriesSchema, buildPodcastEpisodesItemList } from "@utils/seo/seoSchema";
import { derivePublishModified, normalizeDate } from "@utils/content/dateUtils";
import { buildSequentialNumberMapByDate } from "@utils/content/ordering";

import type { PodcastData } from "../../types/podcast";
import enPodcastsJson from "../../data/podcasts/en.json" assert { type: "json" };
/**
 * Static path generation for internationalization
 * Required for Astro dynamic routes to work properly
 */
export const getStaticPaths = async (): Promise<{ params: { lang: string } }[]> => {
  const { buildLangStaticPaths } = await import("../../utils/i18n/staticPaths");
  return buildLangStaticPaths();
};

/**
 * Enable static site generation for this page
 */
export const prerender = true;

/**
 * Language and translation setup
 */
const lang = String(getLangFromUrl(Astro.url));
const t = useTranslations(String(lang));

/**
 * Load English podcast data regardless of site language
 * Uses static data to avoid build issues
 */
const loadPodcastsForLanguage = async (_language: string): Promise<PodcastData[]> => {
  const podcasts = enPodcastsJson.podcasts;
  return Array.isArray(podcasts) ? (podcasts as unknown as PodcastData[]) : [];
};

// Load English podcast data regardless of current language
const episodes = await loadPodcastsForLanguage("en");
// Only consider episodes that are available when counting/displaying lengths
const availableEpisodes = Array.isArray(episodes)
  ? episodes.filter((ep) => Boolean(ep.isAvailable))
  : [];

// Show a notice when site language is not English
const showEnglishOnlyNotice = lang !== "en";

// SEO Basisdaten
const title = t("podcast.title");
const description = generateMetaDescription(t("podcast.description"), { maxLength: 150 });
const baseUrl = resolveBaseUrl(Astro.site, "https://melodymind.app");
const canonical = buildCanonicalUrl(baseUrl, Astro.url.pathname);

// Breadcrumbs
const breadcrumbs = buildBreadcrumbs([
  { name: t("nav.home") || "Home", url: `${baseUrl}/${lang}` },
  { name: title, url: canonical },
]);

// Structured Data & SEO Keywords
const keywordPool = availableEpisodes.flatMap((ep) =>
  ep.description ? ep.description.split(/\s+/) : []
);
const autoKeywords = extractKeywordsFallback(keywordPool.join(" "), 8, lang);
const metaKeywords = buildKeywordsString(autoKeywords, ["podcast", "music", "melodymind"]);

// Derive collection level publish / modified dates based on episode publish dates
const publishedDates = availableEpisodes
  .map((ep) => normalizeDate(ep.publishedAt))
  .filter((d): d is Date => !!d);
const earliest = publishedDates.length
  ? new Date(Math.min(...publishedDates.map((d) => d.getTime())))
  : normalizeDate("2024-01-01");
const latest = publishedDates.length
  ? new Date(Math.max(...publishedDates.map((d) => d.getTime())))
  : new Date();
const pm = derivePublishModified(earliest, latest);
const publishDate = pm.publishDate || earliest || new Date("2024-01-01");
const modifiedDate = pm.modifiedDate || latest || new Date();

// Structured Data via centralized builders
const podcastSeriesSchema = buildPodcastSeriesSchema({
  name: "MelodyMind Podcast",
  description,
  url: canonical,
  inLanguage: lang,
  numberOfEpisodes: availableEpisodes.length,
  publisherName: "Melody Mind",
});

// Pre-compute chronological number mapping (oldest first -> episodeNumber)
const episodeNumberMap = buildSequentialNumberMapByDate(availableEpisodes, {
  id: (e: PodcastData) => e.id,
  date: (e: PodcastData) => normalizeDate(e.publishedAt) || new Date(0),
  direction: "asc",
});

const episodesItemList = buildPodcastEpisodesItemList({
  episodes: availableEpisodes as PodcastData[],
  baseUrl,
  lang,
  chronologicalNumberMap: episodeNumberMap,
});

// Cast to any[] to avoid Astro's strict structural inference complaints
const structuredDataExtra: any[] = episodesItemList
  ? [podcastSeriesSchema, episodesItemList]
  : [podcastSeriesSchema];
---

<!-- OG image: podcast overview -->
<Layout
  {title}
  {description}
  keywords={metaKeywords}
  type="website"
  image="/homecategories/podcast.png"
  imageWidth={1200}
  imageHeight={630}
  {canonical}
  {breadcrumbs}
  {structuredDataExtra}
  {publishDate}
  {modifiedDate}
  ogMusic={{ creator: "Melody Mind" }}
>
  <Fragment slot="head">
    <!-- RSS Feed Discovery (English-only) -->
    <link
      rel="alternate"
      type="application/rss+xml"
      title="MelodyMind Podcast - English"
      href="/en/podcasts/rss.xml"
    />
    <!-- Platform discovery meta (kept minimal) -->
    <meta name="apple-itunes-app" content="app-id=525463029" />
    <meta name="google-play-app" content="app-id=com.google.android.apps.podcasts" />
  </Fragment>

  <!-- Hero Section -->
  <section
    class="relative mb-16 overflow-hidden rounded-3xl border border-purple-500/30 bg-gradient-to-br from-purple-900 via-blue-800 to-gray-900 p-8 shadow-2xl sm:p-12 lg:p-16"
    aria-labelledby="podcast-heading"
  >
    <!-- Decorative background elements -->
    <div class="pointer-events-none absolute inset-0 opacity-10" aria-hidden="true">
      <div class="absolute -top-8 -right-8 h-32 w-32 rounded-full bg-white"></div>
      <div class="absolute -bottom-8 -left-8 h-24 w-24 rounded-full bg-white"></div>
      <div class="absolute top-1/2 right-4 h-16 w-16 rounded-full bg-white"></div>
    </div>

    <div class="relative z-10 w-full text-center text-white">
      <Headline level="h1" textSize="3xl" textAlign="center" className="mb-4">
        üéôÔ∏è {title}
      </Headline>

      <div class="mx-auto my-8 h-1 w-12 rounded-full bg-blue-400"></div>

      <Paragraph textAlign="center" textSize="lg" className="mb-8">
        {description}
      </Paragraph>

      {/* Podcast Platform Links */}
      <div class="mb-8 flex flex-wrap justify-center gap-4">
        <a
          href="https://podcasts.apple.com/us/podcast/the-melody-mind-podcast/id1833549333"
          class="music-platform-link flex items-center gap-3 rounded-xl border border-white/25 bg-white/15 px-4 py-3 text-white shadow-lg backdrop-blur-md transition-all duration-300"
          data-platform="apple"
          data-playlist-title={title}
          target="_blank"
          rel="noopener noreferrer"
          aria-label={t("musicPlatforms.listenOn", {
            title: title,
            platform: t("musicPlatforms.platform.apple"),
          })}
        >
          <Icon
            name="apple-music"
            width={32}
            height={32}
            aria-hidden="true"
            class="transition-inherit size-4 md:size-6"
          />
          <span class="text-sm md:text-lg">{t("podcasts.platform.apple")}</span>
        </a>

        <a
          href="https://www.deezer.com/de/show/1002117431"
          class="music-platform-link flex items-center gap-3 rounded-xl border border-white/25 bg-white/15 px-4 py-3 text-white shadow-lg backdrop-blur-md transition-all duration-300"
          data-platform="deezer"
          data-playlist-title={title}
          target="_blank"
          rel="noopener noreferrer"
          aria-label={t("musicPlatforms.listenOn", {
            title: title,
            platform: t("musicPlatforms.platform.deezer"),
          })}
        >
          <Icon
            name="deezer"
            width={32}
            height={32}
            aria-hidden="true"
            class="transition-inherit size-4 md:size-6"
          />
          <span class="text-sm md:text-lg">{t("podcasts.platform.deezer")}</span>
        </a>

        <a
          href="https://open.spotify.com/show/6nBTNqNNYXbFsJW42QnFTN"
          class="music-platform-link flex items-center gap-3 rounded-xl border border-white/25 bg-white/15 px-4 py-3 text-white shadow-lg backdrop-blur-md transition-all duration-300"
          data-platform="spotify"
          data-playlist-title={title}
          target="_blank"
          rel="noopener noreferrer"
          aria-label={t("musicPlatforms.listenOn", {
            title: title,
            platform: t("musicPlatforms.platform.spotify"),
          })}
        >
          <Icon
            name="spotify"
            width={32}
            height={32}
            aria-hidden="true"
            class="transition-inherit size-4 md:size-6"
          />
          <span class="text-sm md:text-lg">{t("podcasts.platform.spotify")}</span>
        </a>

        <a
          href="https://www.youtube.com/channel/UCD7MQkWw4P5Pd5xA_o6McLg"
          class="music-platform-link flex items-center gap-3 rounded-xl border border-white/25 bg-white/15 px-4 py-3 text-white shadow-lg backdrop-blur-md transition-all duration-300"
          data-platform="youtube"
          data-playlist-title={title}
          target="_blank"
          rel="noopener noreferrer"
          aria-label={t("musicPlatforms.listenOn", {
            title: title,
            platform: t("musicPlatforms.platform.youtube"),
          })}
        >
          <Icon
            name="youtube"
            width={32}
            height={32}
            aria-hidden="true"
            class="transition-inherit size-4 md:size-6"
          />
          <span class="text-sm md:text-lg">{t("podcasts.platform.youtube")}</span>
        </a>
      </div>

      {
        availableEpisodes.length > 0 && (
          <div class="flex flex-wrap justify-center gap-4">
            <div class="flex max-w-[220px] min-w-[140px] items-center gap-3 rounded-xl border border-white/25 bg-white/15 px-4 py-3 backdrop-blur-md">
              <Icon
                name="episodes"
                width={32}
                height={32}
                aria-hidden="true"
                class="transition-inherit size-4 md:size-6"
              />
              <div class="text-sm md:text-lg">
                {availableEpisodes.length}{" "}
                {availableEpisodes.length === 1
                  ? t("podcasts.episode.singular")
                  : t("podcasts.episode.plural")}
              </div>
            </div>

            <div class="flex max-w-[220px] min-w-[140px] items-center gap-3 rounded-xl border border-white/25 bg-white/15 px-4 py-3 backdrop-blur-md">
              <Icon
                name="language"
                width={32}
                height={32}
                aria-hidden="true"
                class="transition-inherit size-4 md:size-6"
              />
              <div class="text-sm md:text-lg">{t("language.en")}</div>
            </div>

            {/* RSS Subscribe Button in Stats (English-only) */}
            <a
              href={`/en/podcasts/rss.xml`}
              class="external-link flex max-w-[220px] min-w-[140px] items-center gap-3 rounded-xl border border-white/25 bg-white/15 px-4 py-3 shadow-lg backdrop-blur-md transition-all duration-300 hover:-translate-y-1 hover:border-orange-500/60 hover:bg-orange-500/30 hover:shadow-orange-500/30"
              title={t("podcast.rss.subscribe.title")}
              aria-label={`${t("podcast.rss.subscribe")} - ${t("podcast.rss.subscribe.description")}`}
              target="_blank"
              rel="noopener noreferrer"
              data-external-label="podcast_rss"
            >
              <Icon
                name="rss"
                width={32}
                height={32}
                aria-hidden="true"
                class="transition-inherit size-4 md:size-6"
              />
              <div class="text-sm md:text-lg">{t("podcast.rss.subscribe")}</div>
            </a>
          </div>
        )
      }
    </div>
  </section>

  {/* Language Restriction Notice */}
  {
    showEnglishOnlyNotice && (
      <div class="mb-8 w-full rounded-xl border border-blue-200 bg-gradient-to-r from-blue-50 to-indigo-100 p-4">
        <div class="flex items-center justify-center gap-3 text-blue-800">
          <div class="text-blue-500">‚ÑπÔ∏è</div>
          <div class="text-center text-sm md:text-lg">{t("podcasts.note.only_english")}</div>
        </div>
      </div>
    )
  }

  {/* Episodes List */}
  <section>
    <!-- Search (refactored to reusable component) -->
    <div class="mx-auto mb-8 w-full max-w-5xl">
      <SearchPanel
        idBase="podcasts-search"
        label={t("podcast.search.label") || "Search podcasts"}
        placeholder={t("podcast.search.placeholder") || "Search podcasts..."}
        ariaControls="podcast-list"
      />
    </div>

    <div
      id="podcast-list"
      itemscope
      itemtype="https://schema.org/ItemList"
      aria-label="Podcast episodes list"
    >
      <meta itemprop="name" content="Podcast Episodes" />
      <meta itemprop="numberOfItems" content={String(availableEpisodes.length)} />
      {
        availableEpisodes.length === 0 ? (
          <div class="rounded-2xl border-2 border-dashed border-gray-600 bg-gray-800 p-16 text-center text-gray-400">
            <div class="mb-4 text-4xl">üéôÔ∏è</div>
            <Headline level="h2" textSize="2xl" className="mb-4 text-gray-300">
              {t("podcasts.empty.title")}
            </Headline>
            <Paragraph textSize="base" className="text-gray-400 max-w-2xl mx-auto">
              {t("podcasts.empty.text")}
            </Paragraph>
          </div>
        ) : (
          <div class="space-y-6">
            {(() => {
              const sorted = [...availableEpisodes].sort(
                (a: PodcastData, b: PodcastData) =>
                  new Date(b.publishedAt).getTime() - new Date(a.publishedAt).getTime()
              );
              return sorted.map((episode: PodcastData, idx: number) => {
                const epNumber = episodeNumberMap.get(episode.id);
                return (
                  <article
                    class="group relative overflow-hidden rounded-2xl border border-gray-700 bg-gray-800/90 p-2 shadow-lg"
                    itemprop="itemListElement"
                    itemscope
                    itemtype="https://schema.org/ListItem"
                  >
                    <meta itemprop="position" content={String(idx + 1)} />
                    <div itemprop="item" itemscope itemtype="https://schema.org/PodcastEpisode">
                      <meta itemprop="name" content={episode.title} />
                      {epNumber && <meta itemprop="episodeNumber" content={String(epNumber)} />}
                      <meta itemprop="datePublished" content={episode.publishedAt} />
                      <meta itemprop="url" content={`${baseUrl}/${lang}/podcasts/${episode.id}`} />
                      <div class="relative mb-6 flex flex-col gap-6 text-left md:flex-row">
                        <div class="relative w-full flex-shrink-0 md:w-96">
                          <div class="relative aspect-[3/2] w-full overflow-hidden">
                            <img
                              src={episode.imageUrl}
                              alt={episode.title}
                              loading="lazy"
                              width="360"
                              height="220"
                              class="absolute inset-0 h-full w-full rounded-2xl object-contain"
                            />
                          </div>
                        </div>
                        <div class="flex-1">
                          <div class="mb-4 flex items-center justify-start gap-3">
                            {epNumber && (
                              <span
                                aria-label={`Episode ${epNumber}`}
                                class="inline-flex items-center justify-center rounded-md bg-gradient-to-r from-purple-600 to-indigo-600 px-2 py-1 text-sm tracking-wider text-white shadow-sm ring-1 ring-white/10"
                              >
                                EP {epNumber}
                              </span>
                            )}
                            <time
                              datetime={episode.publishedAt}
                              class="flex items-center gap-2"
                              itemprop="datePublished"
                            >
                              <span class="inline-block text-lg text-gray-500">üìÖ</span>
                              {new Date(episode.publishedAt).toLocaleDateString("en-US", {
                                year: "numeric",
                                month: "short",
                                day: "numeric",
                              })}
                            </time>
                          </div>
                          <Headline
                            level="h2"
                            textSize="lg"
                            className="mb-3 text-white leading-snug"
                          >
                            <span class="align-middle font-semibold" itemprop="name">
                              {episode.title}
                            </span>
                          </Headline>
                          <Paragraph
                            textSize="lg"
                            className="text-gray-300 mb-4"
                            itemprop="description"
                          >
                            {episode.description}
                          </Paragraph>
                          <a
                            href={`/${lang}/podcasts/${episode.id}`}
                            class="inline-flex items-start gap-2 rounded-xl bg-gradient-to-r from-purple-600 to-indigo-600 px-5 py-3 text-lg font-semibold text-white shadow-lg ring-1 shadow-purple-900/20 ring-white/10 transition-all duration-300 focus-visible:ring-2 focus-visible:ring-purple-400 focus-visible:outline-none"
                          >
                            <span>üìñ {t("podcasts.read_full_notes")}</span>
                          </a>
                        </div>
                      </div>
                    </div>
                  </article>
                );
              });
            })()}
          </div>
        )
      }
    </div>
  </section>

  <script>
    import { initSearchPanel } from "@components/Search/initSearchPanel";

    import { initDefaultMusicButtons } from "../../utils/components/musicButtonsUtils";

    ((): void => {
      function wire(): void {
        initSearchPanel({
          idBase: "podcasts-search",
          itemSelector: "#podcast-list article",
          debounceMs: 200,
        });
        try {
          initDefaultMusicButtons();
        } catch {
          /* ignore */
        }
      }
      const schedule = (fn: () => void): void => {
        const idle = (window as unknown as { requestIdleCallback?: (cb: () => void) => void })
          .requestIdleCallback;
        if (typeof idle === "function") {
          idle(fn);
        } else {
          setTimeout(fn, 1);
        }
      };
      if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", () => {
          schedule(wire);
        });
      } else {
        schedule(wire);
      }
    })();
  </script>
</Layout>
