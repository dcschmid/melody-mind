---
/**
 * Reset Password Page for MelodyMind
 *
 * This page displays the form for resetting a password using the Layout component.
 * It supports two distinct modes:
 * 1. Request mode: User enters email to receive a reset link (without token)
 * 2. Confirmation mode: User sets a new password with a valid token
 *
 * The page is fully optimized for WCAG AAA 2.2 compliance and uses only
 * CSS custom properties from global.css for consistent styling.
 *
 * @route /[lang]/auth/reset-password
 * @since 3.0.0
 */

// 1. Imports
import PasswordResetForm from "@components/auth/PasswordResetForm.astro";
import Layout from "@layouts/Layout.astro";
import { getLangFromUrl, useTranslations } from "@utils/i18n";

// 2. Dynamic route requirements for Astro
export async function getStaticPaths() {
  const supportedLanguages = [
    "de",
    "en",
    "es",
    "fr",
    "it",
    "pt",
    "da",
    "nl",
    "sv",
    "fi",
    "cn",
    "ru",
    "jp",
    "uk",
  ] as const;

  return supportedLanguages.map((lang) => ({
    params: { lang },
  }));
}

// 3. URL and state processing
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang.toString());

// Extract token from URL parameters for password reset confirmation
const url = new URL(Astro.request.url);
const token = url.searchParams.get("token");
const isConfirmReset = !!token;

// 4. SEO and content variables
const title = isConfirmReset
  ? t("auth.password_reset_confirm.title")
  : t("auth.password_reset.title");

const description = isConfirmReset
  ? t("auth.password_reset_confirm.description")
  : t("auth.password_reset.description");
---

<Layout {title} {description}>
  <!-- Main content wrapper with semantic HTML structure -->
  <main class="reset-password-page" role="main">
    <div class="reset-password-page__container">
      <PasswordResetForm {token} {isConfirmReset} />
    </div>
  </main>
</Layout>

<script>
  /**
   * Reset Password Page Client-Side Enhancements
   *
   * Modern ES6+ features for enhanced user experience:
   * - Arrow functions for event handlers
   * - Template literals for dynamic content
   * - Destructuring for cleaner code
   * - Optional chaining for safe property access
   * - Modern async/await patterns
   * - Enhanced accessibility features
   */

  // DOM elements with modern querySelector
  const mainElement = document.querySelector(".reset-password-page") as HTMLElement;
  const containerElement = document.querySelector(".reset-password-page__container") as HTMLElement;

  // Enhanced page initialization with modern patterns
  const initializePage = (): void => {
    // Add enhanced focus management
    const handleFocusManagement = (): void => {
      const focusableElements = mainElement?.querySelectorAll(
        'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
      );

      if (focusableElements?.length) {
        // Store first and last focusable elements for keyboard navigation
        const firstElement = focusableElements[0] as HTMLElement;
        const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;

        // Enhanced keyboard navigation
        const handleKeyDown = (event: KeyboardEvent): void => {
          const { key, shiftKey } = event;

          if (key === "Tab") {
            if (shiftKey && document.activeElement === firstElement) {
              event.preventDefault();
              lastElement?.focus();
            } else if (!shiftKey && document.activeElement === lastElement) {
              event.preventDefault();
              firstElement?.focus();
            }
          }
        };

        mainElement?.addEventListener("keydown", handleKeyDown);
      }
    };

    // Enhanced animation handling with modern patterns
    const handleAnimations = (): void => {
      const prefersReducedMotion = window.matchMedia("(prefers-reduced-motion: reduce)").matches;

      if (prefersReducedMotion && containerElement) {
        containerElement.style.setProperty("animation", "none");
        containerElement.style.setProperty("transition", "none");
      }
    };

    // Enhanced responsive behavior
    const handleResponsiveBehavior = (): void => {
      const updateContainerWidth = (): void => {
        const { innerWidth } = window;

        if (containerElement) {
          // Dynamic container sizing based on viewport
          if (innerWidth < 640) {
            containerElement.style.maxWidth = "95vw";
            containerElement.style.padding = "var(--space-md)";
          } else if (innerWidth < 1024) {
            containerElement.style.maxWidth = "var(--container-md)";
            containerElement.style.padding = "var(--space-lg)";
          } else {
            containerElement.style.maxWidth = "var(--container-lg)";
            containerElement.style.padding = "var(--space-xl)";
          }
        }
      };

      // Initial call
      updateContainerWidth();

      // Debounced resize handler
      let resizeTimeout: ReturnType<typeof setTimeout>;
      const handleResize = (): void => {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(updateContainerWidth, 150);
      };

      window.addEventListener("resize", handleResize);
    };

    // Enhanced accessibility features
    const enhanceAccessibility = (): void => {
      // Add skip link functionality
      const createSkipLink = (): void => {
        const skipLink = document.createElement("a");
        skipLink.href = "#password-reset-form";
        skipLink.textContent = "Skip to form";
        skipLink.className = "skip-link";
        skipLink.style.cssText = `
          position: absolute;
          top: -40px;
          left: 6px;
          background: var(--color-primary-600);
          color: var(--color-white);
          padding: 8px;
          text-decoration: none;
          border-radius: 4px;
          z-index: 1000;
          transition: top 0.3s;
        `;

        skipLink.addEventListener("focus", () => {
          skipLink.style.top = "6px";
        });

        skipLink.addEventListener("blur", () => {
          skipLink.style.top = "-40px";
        });

        mainElement?.insertBefore(skipLink, mainElement.firstChild);
      };

      // Enhanced focus indicators
      const enhanceFocusIndicators = (): void => {
        const focusableElements = mainElement?.querySelectorAll(
          'button, input, textarea, select, a[href], [tabindex]:not([tabindex="-1"])'
        );

        focusableElements?.forEach((element) => {
          const htmlElement = element as HTMLElement;
          htmlElement.addEventListener("focus", () => {
            htmlElement.style.outline = "var(--focus-outline)";
            htmlElement.style.outlineOffset = "var(--focus-ring-offset)";
          });

          htmlElement.addEventListener("blur", () => {
            htmlElement.style.outline = "";
            htmlElement.style.outlineOffset = "";
          });
        });
      };

      createSkipLink();
      enhanceFocusIndicators();
    };

    // Enhanced error handling with modern patterns
    const handleErrors = (): void => {
      const handleGlobalError = (error: Error | string): void => {
        console.error("Reset password page error:", error);

        // Enhanced error reporting
        const errorMessage =
          typeof error === "string" ? error : error?.message || "An unexpected error occurred";

        // Create user-friendly error display
        const errorDisplay = document.createElement("div");
        errorDisplay.className = "global-error";
        errorDisplay.style.cssText = `
          position: fixed;
          top: 20px;
          right: 20px;
          background: var(--color-error-500);
          color: var(--color-white);
          padding: var(--space-md);
          border-radius: var(--border-radius);
          z-index: 1000;
          max-width: 300px;
          box-shadow: var(--card-shadow);
        `;
        errorDisplay.textContent = errorMessage;

        document.body.appendChild(errorDisplay);

        // Auto-remove after 5 seconds
        setTimeout(() => {
          errorDisplay.remove();
        }, 5000);
      };

      // Global error handler
      window.addEventListener("error", (event) => handleGlobalError(event.error || event.message));
      window.addEventListener("unhandledrejection", (event) => {
        handleGlobalError(event.reason);
      });
    };

    // Initialize all enhancements
    handleFocusManagement();
    handleAnimations();
    handleResponsiveBehavior();
    enhanceAccessibility();
    handleErrors();
  };

  // Enhanced page load handling
  const handlePageLoad = (): void => {
    // Wait for DOM to be fully loaded
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", initializePage);
    } else {
      initializePage();
    }
  };

  // Enhanced performance monitoring
  const monitorPerformance = (): void => {
    if ("performance" in window && "PerformanceObserver" in window) {
      const observer = new PerformanceObserver((list) => {
        list.getEntries().forEach((entry) => {
          if (entry.entryType === "navigation") {
            const navigationEntry = entry as PerformanceNavigationTiming;
            console.log(
              "Page load time:",
              navigationEntry.loadEventEnd - navigationEntry.loadEventStart,
              "ms"
            );
          }
        });
      });

      observer.observe({ entryTypes: ["navigation"] });
    }
  };

  // Initialize everything
  handlePageLoad();
  monitorPerformance();
</script>

<style lang="scss">
  /* ======================================
   * RESET PASSWORD PAGE STYLES
   * ======================================
   * 
   * Modern SCSS with enhanced responsiveness
   * Uses only CSS custom properties from global.css
   * WCAG AAA 2.2 compliant with enhanced contrast
   * BEM methodology for consistent class naming
   */

  // Variables for better maintainability
  $breakpoint-sm: 640px;
  $breakpoint-md: 768px;
  $breakpoint-lg: 1024px;
  $breakpoint-xl: 1280px;
  $breakpoint-2xl: 1536px;

  // Mixins for responsive design
  @mixin respond-to($breakpoint) {
    @if $breakpoint == sm {
      @media (min-width: $breakpoint-sm) {
        @content;
      }
    } @else if $breakpoint == md {
      @media (min-width: $breakpoint-md) {
        @content;
      }
    } @else if $breakpoint == lg {
      @media (min-width: $breakpoint-lg) {
        @content;
      }
    } @else if $breakpoint == xl {
      @media (min-width: $breakpoint-xl) {
        @content;
      }
    } @else if $breakpoint == 2xl {
      @media (min-width: $breakpoint-2xl) {
        @content;
      }
    }
  }

  // Mixin for reduced motion
  @mixin reduced-motion {
    @media (prefers-reduced-motion: reduce) {
      @content;
    }
  }

  // Mixin for high contrast
  @mixin high-contrast {
    @media (prefers-contrast: high) {
      @content;
    }
  }

  // Mixin for high DPI displays
  @mixin high-dpi {
    @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
      @content;
    }
  }

  .reset-password-page {
    // Core layout properties
    min-height: 100vh;
    background: linear-gradient(
      var(--gradient-angle),
      var(--bg-primary) var(--gradient-start),
      var(--bg-secondary) var(--gradient-end)
    );
    display: flex;
    align-items: center;
    justify-content: center;
    padding: var(--space-lg);

    // Enhanced typography using root variables
    font-size: var(--text-lg);
    line-height: var(--leading-enhanced);
    letter-spacing: var(--letter-spacing-base);

    // Performance optimization using root variables
    contain: layout style;
    will-change: opacity, transform;

    // Enhanced responsive padding
    @include respond-to(sm) {
      padding: var(--space-xl);
    }

    @include respond-to(md) {
      padding: var(--space-2xl);
    }

    @include respond-to(lg) {
      padding: var(--space-3xl);
    }

    // Enhanced accessibility
    @include reduced-motion {
      background: var(--bg-primary);

      &__container {
        animation: none;
        transition: none;
      }
    }

    @include high-contrast {
      background: var(--bg-primary);
      border: var(--border-width-enhanced) solid var(--border-primary);
    }

    // Enhanced rendering for high-resolution displays
    @include high-dpi {
      -webkit-font-smoothing: var(--font-smoothing-light);
      -moz-osx-font-smoothing: var(--font-smoothing-grayscale);
    }

    // ======================================
    // CONTAINER STYLES
    // ======================================
    &__container {
      width: var(--width-full);
      max-width: var(--form-container-max-width);
      margin: var(--space-none) auto;
      padding: var(--space-lg);
      animation: fadeIn var(--animation-duration-medium) ease-out;

      // Enhanced responsive container sizing
      @include respond-to(sm) {
        max-width: var(--container-sm);
        padding: var(--space-xl);
      }

      @include respond-to(md) {
        max-width: var(--container-md);
        padding: var(--space-2xl);
      }

      @include respond-to(lg) {
        max-width: var(--container-lg);
        padding: var(--space-3xl);
      }

      @include respond-to(xl) {
        max-width: var(--container-xl);
      }

      // Enhanced focus states
      &:focus-within {
        outline: var(--focus-outline);
        outline-offset: var(--focus-ring-offset);
        border-radius: var(--border-radius);
      }

      // Enhanced hover effects
      @media (hover: hover) {
        &:hover {
          transform: translateY(-2px);
          transition: transform var(--animation-duration-fast) ease-out;
        }
      }
    }

    // ======================================
    // ENHANCED ANIMATIONS & TRANSITIONS
    // ======================================

    // Fade-in animation for page entrance
    @keyframes fadeIn {
      from {
        opacity: var(--animation-opacity-start);
        transform: translateY(var(--animation-y-offset)) translateZ(0);
      }
      to {
        opacity: var(--animation-opacity-full);
        transform: translateY(var(--space-none)) translateZ(0);
      }
    }

    // Slide-in animation for container
    @keyframes slideIn {
      from {
        opacity: 0;
        transform: translateY(20px) scale(0.95);
      }
      to {
        opacity: 1;
        transform: translateY(0) scale(1);
      }
    }

    // Reduced motion accessibility for animations
    @include reduced-motion {
      @keyframes fadeIn {
        from,
        to {
          opacity: var(--animation-opacity-full);
          transform: translateY(var(--space-none));
        }
      }

      @keyframes slideIn {
        from,
        to {
          opacity: 1;
          transform: translateY(0) scale(1);
        }
      }
    }

    // ======================================
    // ENHANCED RESPONSIVE DESIGN
    // ======================================

    // Mobile-first approach with progressive enhancement
    @include respond-to(sm) {
      &__container {
        box-shadow: var(--card-shadow);
        border-radius: var(--border-radius-lg);
        backdrop-filter: blur(10px);
        background: rgba(var(--bg-secondary-rgb), 0.8);
      }
    }

    @include respond-to(md) {
      &__container {
        box-shadow: var(--card-shadow-hover);
        border: 1px solid var(--border-primary);
      }
    }

    @include respond-to(lg) {
      &__container {
        max-width: 600px;
        margin: 0 auto;
      }
    }

    // ======================================
    // ENHANCED ACCESSIBILITY FEATURES
    // ======================================

    // Skip link styles
    .skip-link {
      &:focus {
        top: 6px !important;
        transition: top var(--animation-duration-fast) ease-out;
      }
    }

    // Enhanced focus indicators
    &:focus-within {
      outline: none;
    }

    // High contrast mode enhancements
    @include high-contrast {
      &__container {
        border: 3px solid var(--border-primary);
        background: var(--bg-primary);
      }
    }

    // Forced colors mode support
    @media (forced-colors: active) {
      &__container {
        border: 2px solid CanvasText;
        background: Canvas;
      }
    }

    // ======================================
    // ENHANCED PERFORMANCE OPTIMIZATIONS
    // ======================================

    // Hardware acceleration
    &__container {
      transform: translateZ(0);
      backface-visibility: hidden;
      perspective: 1000px;
    }

    // Print styles
    @media print {
      background: var(--color-white);
      color: var(--color-black);

      &__container {
        box-shadow: none;
        border: 1px solid var(--color-black);
      }
    }
  }

  // ======================================
  // GLOBAL ERROR STYLES
  // ======================================

  .global-error {
    animation: slideIn var(--animation-duration-medium) ease-out;

    @include reduced-motion {
      animation: none;
    }
  }
</style>
