---
/**
 * Reset Password Page for MelodyMind
 *
 * This page displays the form for resetting a password using the Layout component.
 * It supports two distinct modes:
 * 1. Request mode: User enters email to receive a reset link (without token)
 * 2. Confirmation mode: User sets a new password with a valid token
 *
 * The page is fully optimized for WCAG AAA 2.2 compliance and uses only
 * CSS custom properties from global.css for consistent styling.
 *
 * @route /[lang]/auth/reset-password
 * @since 3.0.0
 */

// 1. Imports
import PasswordResetForm from "@components/auth/PasswordResetForm.astro";
import Layout from "@layouts/Layout.astro";
import { getLangFromUrl, useTranslations } from "@utils/i18n";

// 2. Dynamic route requirements for Astro
export async function getStaticPaths() {
  const supportedLanguages = [
    "de",
    "en",
    "es",
    "fr",
    "it",
    "pt",
    "da",
    "nl",
    "sv",
    "fi",
    "cn",
    "ru",
    "jp",
    "uk",
  ] as const;

  return supportedLanguages.map((lang) => ({
    params: { lang },
  }));
}

// 3. URL and state processing
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang.toString());

// Extract token from URL parameters for password reset confirmation
const url = new URL(Astro.request.url);
const token = url.searchParams.get("token");
const isConfirmReset = !!token;

// 4. SEO and content variables
const title = isConfirmReset
  ? t("auth.password_reset_confirm.title")
  : t("auth.password_reset.title");

const description = isConfirmReset
  ? t("auth.password_reset_confirm.description")
  : t("auth.password_reset.description");
---

<Layout {title} {description}>
  <!-- Main content wrapper with semantic HTML structure -->
  <main class="reset-password-page" role="main">
    <div class="reset-password-page__container">
      <PasswordResetForm {token} {isConfirmReset} />
    </div>
  </main>
</Layout>

<script>
  /**
   * Reset Password Page Client-Side Enhancements
   *
   * Modern ES6+ features for enhanced user experience:
   * - Arrow functions for event handlers
   * - Template literals for dynamic content
   * - Destructuring for cleaner code
   * - Optional chaining for safe property access
   * - Modern async/await patterns
   * - Enhanced accessibility features
   */

  // DOM elements with modern querySelector
  const mainElement = document.querySelector(".reset-password-page") as HTMLElement;
  const containerElement = document.querySelector(".reset-password-page__container") as HTMLElement;

  // Enhanced page initialization with modern patterns
  const initializePage = (): void => {
    // Add enhanced focus management
    const handleFocusManagement = (): void => {
      const focusableElements = mainElement?.querySelectorAll(
        'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
      );

      if (focusableElements?.length) {
        // Store first and last focusable elements for keyboard navigation
        const firstElement = focusableElements[0] as HTMLElement;
        const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;

        // Enhanced keyboard navigation
        const handleKeyDown = (event: KeyboardEvent): void => {
          const { key, shiftKey } = event;

          if (key === "Tab") {
            if (shiftKey && document.activeElement === firstElement) {
              event.preventDefault();
              lastElement?.focus();
            } else if (!shiftKey && document.activeElement === lastElement) {
              event.preventDefault();
              firstElement?.focus();
            }
          }
        };

        mainElement?.addEventListener("keydown", handleKeyDown);
      }
    };

    // Enhanced animation handling with modern patterns
    const handleAnimations = (): void => {
      const prefersReducedMotion = window.matchMedia("(prefers-reduced-motion: reduce)").matches;

      if (prefersReducedMotion && containerElement) {
        containerElement.style.setProperty("animation", "none");
        containerElement.style.setProperty("transition", "none");
      }
    };

    // Enhanced responsive behavior
    const handleResponsiveBehavior = (): void => {
      const updateContainerWidth = (): void => {
        const { innerWidth } = window;

        if (containerElement) {
          // Dynamic container sizing using comprehensive breakpoints and global.css variables
          if (innerWidth < 480) {
            containerElement.style.maxWidth = "calc(100vw - var(--space-md))";
            containerElement.style.padding = "var(--space-sm)";
          } else if (innerWidth < 640) {
            containerElement.style.maxWidth = "calc(var(--container-sm) - var(--space-lg))";
            containerElement.style.padding = "var(--space-md)";
          } else if (innerWidth < 768) {
            containerElement.style.maxWidth = "var(--container-query-lg)";
            containerElement.style.padding = "var(--space-lg)";
          } else if (innerWidth < 1024) {
            containerElement.style.maxWidth = "var(--form-container-max-width)";
            containerElement.style.padding = "var(--space-xl)";
          } else {
            containerElement.style.maxWidth = "calc(var(--form-container-max-width) * 1.125)";
            containerElement.style.padding = "var(--space-2xl)";
          }
        }
      };

      // Initial call
      updateContainerWidth();

      // Debounced resize handler
      let resizeTimeout: ReturnType<typeof setTimeout>;
      const handleResize = (): void => {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(updateContainerWidth, 150);
      };

      window.addEventListener("resize", handleResize);
    };

    // Enhanced accessibility features
    const enhanceAccessibility = (): void => {
      // Add skip link functionality
      const createSkipLink = (): void => {
        const skipLink = document.createElement("a");
        skipLink.href = "#password-reset-form";
        skipLink.textContent = "Skip to form";
        skipLink.className = "skip-link";
        skipLink.style.cssText = `
          position: absolute;
          top: calc(-1 * var(--space-2xl));
          left: var(--space-xs);
          background: var(--interactive-primary);
          color: var(--color-white);
          padding: var(--space-sm);
          text-decoration: none;
          border-radius: var(--radius-sm);
          z-index: var(--z-notification);
          transition: top var(--transition-normal);
          font-size: var(--text-sm);
          font-weight: var(--font-semibold);
        `;

        skipLink.addEventListener("focus", () => {
          skipLink.style.top = "var(--space-xs)";
        });

        skipLink.addEventListener("blur", () => {
          skipLink.style.top = "calc(-1 * var(--space-2xl))";
        });

        mainElement?.insertBefore(skipLink, mainElement.firstChild);
      };

      // Enhanced focus indicators
      const enhanceFocusIndicators = (): void => {
        const focusableElements = mainElement?.querySelectorAll(
          'button, input, textarea, select, a[href], [tabindex]:not([tabindex="-1"])'
        );

        focusableElements?.forEach((element) => {
          const htmlElement = element as HTMLElement;
          htmlElement.addEventListener("focus", () => {
            htmlElement.style.outline = "var(--focus-outline)";
            htmlElement.style.outlineOffset = "var(--focus-ring-offset)";
          });

          htmlElement.addEventListener("blur", () => {
            htmlElement.style.outline = "";
            htmlElement.style.outlineOffset = "";
          });
        });
      };

      createSkipLink();
      enhanceFocusIndicators();
    };

    // Enhanced error handling with modern patterns
    const handleErrors = (): void => {
      const handleGlobalError = (error: Error | string): void => {
        console.error("Reset password page error:", error);

        // Enhanced error reporting
        const errorMessage =
          typeof error === "string" ? error : error?.message || "An unexpected error occurred";

        // Create user-friendly error display
        const errorDisplay = document.createElement("div");
        errorDisplay.className = "global-error";
        errorDisplay.style.cssText = `
          position: fixed;
          top: var(--space-lg);
          right: var(--space-lg);
          background: var(--bg-error-aaa);
          color: var(--text-error-aaa);
          padding: var(--space-md);
          border-radius: var(--radius-lg);
          border: var(--border-width-thin) solid var(--border-error);
          z-index: var(--z-notification);
          max-width: var(--grid-min-width-lg);
          box-shadow: var(--shadow-xl);
          font-size: var(--text-sm);
          font-weight: var(--font-medium);
        `;
        errorDisplay.textContent = errorMessage;

        document.body.appendChild(errorDisplay);

        // Auto-remove using global.css timeout values
        setTimeout(
          () => {
            errorDisplay.remove();
          },
          parseInt(
            getComputedStyle(document.documentElement).getPropertyValue(
              "--error-auto-hide-duration"
            )
          ) || 5000
        );
      };

      // Global error handler
      window.addEventListener("error", (event) => handleGlobalError(event.error || event.message));
      window.addEventListener("unhandledrejection", (event) => {
        handleGlobalError(event.reason);
      });
    };

    // Initialize all enhancements
    handleFocusManagement();
    handleAnimations();
    handleResponsiveBehavior();
    enhanceAccessibility();
    handleErrors();
  };

  // Enhanced page load handling
  const handlePageLoad = (): void => {
    // Wait for DOM to be fully loaded
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", initializePage);
    } else {
      initializePage();
    }
  };

  // Enhanced performance monitoring
  const monitorPerformance = (): void => {
    if ("performance" in window && "PerformanceObserver" in window) {
      const observer = new PerformanceObserver((list) => {
        list.getEntries().forEach((entry) => {
          if (entry.entryType === "navigation") {
            const navigationEntry = entry as PerformanceNavigationTiming;
            console.log(
              "Page load time:",
              navigationEntry.loadEventEnd - navigationEntry.loadEventStart,
              "ms"
            );
          }
        });
      });

      observer.observe({ entryTypes: ["navigation"] });
    }
  };

  // Initialize everything
  handlePageLoad();
  monitorPerformance();
</script>

<style lang="scss">
  /* ======================================
   * RESET PASSWORD PAGE STYLES
   * ======================================
   * 
   * Modern SCSS with enhanced responsiveness
   * Uses only CSS custom properties from global.css
   * WCAG AAA 2.2 compliant with enhanced contrast
   * BEM methodology for consistent class naming
   */

  // Note: Using hardcoded em values in media queries since CSS variables don't work in @media rules
  // Mobile portrait: 0-479px (< 30em)
  // Mobile landscape: 480-639px (30em - 39.9375em)
  // Small tablet: 640-767px (40em - 47.9375em)
  // Tablet: 768-1023px (48em - 63.9375em)
  // Desktop: 1024-1279px (64em - 79.9375em)
  // Large desktop: 1280px+ (80em+)

  // Enhanced responsive design mixins using hardcoded breakpoints
  @mixin respond-to-sm {
    @media (min-width: 40em) {
      @content;
    }
  }

  @mixin respond-to-md {
    @media (min-width: 48em) {
      @content;
    }
  }

  @mixin respond-to-lg {
    @media (min-width: 64em) {
      @content;
    }
  }

  @mixin respond-to-xl {
    @media (min-width: 80em) {
      @content;
    }
  }

  @mixin respond-to-2xl {
    @media (min-width: 96em) {
      @content;
    }
  }

  // Mixin for reduced motion
  @mixin reduced-motion {
    @media (prefers-reduced-motion: reduce) {
      @content;
    }
  }

  // Mixin for high contrast
  @mixin high-contrast {
    @media (prefers-contrast: high) {
      @content;
    }
  }

  // Mixin for high DPI displays
  @mixin high-dpi {
    @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
      @content;
    }
  }

  .reset-password-page {
    // Core layout properties
    min-height: 100vh;
    background: linear-gradient(
      var(--gradient-angle),
      var(--bg-primary) var(--gradient-start),
      var(--bg-secondary) var(--gradient-end)
    );
    display: flex;
    align-items: center;
    justify-content: center;
    padding: var(--space-lg);

    // Enhanced typography using root variables
    font-size: var(--text-lg);
    line-height: var(--leading-enhanced);
    letter-spacing: var(--letter-spacing-base);

    // Performance optimization using root variables
    contain: layout style;
    will-change: opacity, transform;

    // Enhanced mobile-first responsive design with comprehensive breakpoints

    // Mobile portrait (< 480px) - very compact
    @media (max-width: 29.9375em) {
      padding: var(--space-sm);
      min-height: 100dvh; // Use dynamic viewport height on mobile
    }

    // Mobile landscape (480px - 640px) - balanced layout
    @media (min-width: 30em) and (max-width: 39.9375em) {
      padding: var(--space-md) var(--space-sm);
    }

    // Small tablet (640px - 768px) - enhanced spacing
    @include respond-to-sm {
      padding: var(--space-lg);
    }

    // Tablet (768px - 1024px) - optimal spacing
    @include respond-to-md {
      padding: var(--space-xl);
    }

    // Desktop (1024px - 1280px) - full spacing
    @include respond-to-lg {
      padding: var(--space-2xl);
    }

    // Large desktop (1280px+) - premium spacing
    @include respond-to-xl {
      padding: var(--space-3xl);
    }

    // Enhanced accessibility
    @include reduced-motion {
      background: var(--bg-primary);

      &__container {
        animation: none;
        transition: none;
      }
    }

    @include high-contrast {
      background: var(--bg-primary);
      border: var(--border-width-enhanced) solid var(--border-primary);
    }

    // Enhanced rendering for high-resolution displays
    @include high-dpi {
      -webkit-font-smoothing: var(--font-smoothing-light);
      -moz-osx-font-smoothing: var(--font-smoothing-grayscale);
    }

    // ======================================
    // CONTAINER STYLES
    // ======================================
    &__container {
      width: var(--width-full);
      max-width: var(--form-container-max-width);
      margin: var(--space-none) auto;
      padding: var(--space-lg);
      animation: fadeIn var(--animation-duration-medium) ease-out;

      // Enhanced responsive container sizing with comprehensive breakpoints

      // Mobile portrait (< 480px) - minimal padding
      @media (max-width: 29.9375em) {
        padding: var(--space-sm);
        margin: 0 var(--space-xs);
        max-width: calc(100vw - var(--space-md));
      }

      // Mobile landscape (480px - 640px) - improved spacing
      @media (min-width: 30em) and (max-width: 39.9375em) {
        padding: var(--space-md);
        margin: 0 var(--space-sm);
        max-width: calc(var(--container-sm) - var(--space-lg));
      }

      // Small tablet (640px - 768px) - balanced layout
      @include respond-to-sm {
        max-width: var(--container-query-lg);
        padding: var(--space-lg);
        margin: 0 auto;
      }

      // Tablet (768px - 1024px) - optimal form width
      @include respond-to-md {
        max-width: var(--form-container-max-width);
        padding: var(--space-xl);
      }

      // Desktop (1024px - 1280px) - enhanced layout
      @include respond-to-lg {
        padding: var(--space-2xl);
        max-width: calc(var(--form-container-max-width) * 1.125);
      }

      // Large desktop (1280px+) - premium experience
      @include respond-to-xl {
        padding: var(--space-2xl) var(--space-3xl);
        max-width: calc(var(--form-container-max-width) * 1.25);
      }

      // Enhanced focus states using global.css system
      &:focus-within {
        outline: var(--focus-outline);
        outline-offset: var(--focus-ring-offset);
        border-radius: var(--radius-lg);
        box-shadow: var(--focus-ring);
      }

      // Enhanced hover effects using global.css variables
      @media (hover: hover) {
        &:hover {
          transform: translateY(var(--animation-y-offset-small));
          transition: transform var(--animation-duration-fast) ease-out;
          box-shadow: var(--card-shadow-hover);
        }
      }

      // Enhanced active state
      &:active {
        transform: translateY(0) scale(var(--scale-active));
        transition: all var(--transition-fast);
      }
    }

    // ======================================
    // ENHANCED ANIMATIONS & TRANSITIONS
    // ======================================

    // Fade-in animation for page entrance
    @keyframes fadeIn {
      from {
        opacity: var(--animation-opacity-start);
        transform: translateY(var(--animation-y-offset)) translateZ(0);
      }
      to {
        opacity: var(--animation-opacity-full);
        transform: translateY(var(--space-none)) translateZ(0);
      }
    }

    // Enhanced slide-in animation using global.css variables
    @keyframes slideIn {
      from {
        opacity: var(--animation-opacity-start);
        transform: translateY(var(--animation-y-offset)) scale(var(--animation-scale-start));
      }
      to {
        opacity: var(--animation-opacity-full);
        transform: translateY(0) scale(var(--animation-scale-end));
      }
    }

    // Reduced motion accessibility for animations
    @include reduced-motion {
      @keyframes fadeIn {
        from,
        to {
          opacity: var(--animation-opacity-full);
          transform: translateY(var(--space-none));
        }
      }

      @keyframes slideIn {
        from,
        to {
          opacity: var(--animation-opacity-full);
          transform: translateY(0) scale(var(--animation-scale-end));
        }
      }
    }

    // ======================================
    // ENHANCED RESPONSIVE DESIGN
    // ======================================

    // Enhanced progressive enhancement with comprehensive responsive design

    // Small tablet and up - enhanced visual styling
    @include respond-to-sm {
      &__container {
        box-shadow: var(--card-shadow);
        border-radius: var(--radius-lg);
        backdrop-filter: blur(var(--backdrop-blur));
        background: var(--card-bg);
        border: var(--border-width-thin) solid var(--card-border);
      }
    }

    // Tablet and up - premium styling
    @include respond-to-md {
      &__container {
        box-shadow: var(--card-shadow-hover);
        border: var(--border-width-thin) solid var(--border-primary);
        border-radius: var(--radius-xl);
      }
    }

    // Desktop and up - optimal layout
    @include respond-to-lg {
      &__container {
        max-width: var(--form-container-max-width);
        margin: 0 auto;
        box-shadow: var(--shadow-xl);
      }
    }

    // Large desktop - premium experience
    @include respond-to-xl {
      &__container {
        border-radius: var(--radius-2xl);
        backdrop-filter: blur(calc(var(--backdrop-blur) * 1.5));
      }
    }

    // ======================================
    // ENHANCED ACCESSIBILITY FEATURES
    // ======================================

    // Skip link styles
    .skip-link {
      &:focus {
        top: 6px !important;
        transition: top var(--animation-duration-fast) ease-out;
      }
    }

    // Enhanced focus indicators
    &:focus-within {
      outline: none;
    }

    // Enhanced high contrast mode using global.css variables
    @include high-contrast {
      &__container {
        border: var(--border-width-enhanced) solid var(--text-primary);
        background: var(--bg-primary);
        box-shadow: var(--shadow-xl);
      }
    }

    // Enhanced forced colors mode support
    @media (forced-colors: active) {
      &__container {
        border: var(--border-width-thick) solid CanvasText;
        background: Canvas;
        forced-color-adjust: none;
        box-shadow: none;
      }
    }

    // ======================================
    // ENHANCED PERFORMANCE OPTIMIZATIONS
    // ======================================

    // Hardware acceleration
    &__container {
      transform: translateZ(0);
      backface-visibility: hidden;
      perspective: 1000px;
    }

    // Enhanced print styles using global.css print variables
    @media print {
      background: var(--print-bg);
      color: var(--print-text);
      padding: var(--space-md);

      &__container {
        box-shadow: none;
        border: var(--print-border);
        background: var(--print-bg);
        max-width: var(--width-full);
        margin: var(--space-md) 0;
        padding: var(--space-lg);
        page-break-inside: avoid;
      }
    }
  }

  // ======================================
  // GLOBAL ERROR STYLES
  // ======================================

  .global-error {
    animation: slideIn var(--animation-duration-medium) ease-out;

    @include reduced-motion {
      animation: none;
    }
  }

  // ======================================
  // ENHANCED LANDSCAPE & CONTAINER QUERIES
  // ======================================

  /* Enhanced landscape orientation adjustments for all mobile devices */
  @media (max-width: 47.9375em) and (orientation: landscape) {
    .reset-password-page {
      padding: var(--space-sm);
      min-height: 100lvh; // Use logical viewport height for landscape

      &__container {
        padding: var(--space-sm);
        margin: 0 var(--space-sm);
        max-height: 85lvh;
        overflow-y: auto;
        scrollbar-width: var(--scrollbar-thin);
        scrollbar-color: var(--scrollbar-thumb-bg) var(--scrollbar-track-bg);

        // Specific mobile portrait landscape (< 480px)
        @media (max-width: 29.9375em) {
          padding: var(--space-xs) var(--space-sm);
          margin: 0 var(--space-xs);
          max-height: 80lvh;
        }
      }
    }
  }

  /* Container queries for enhanced responsive behavior */
  .reset-password-page {
    container-type: inline-size;

    &__container {
      container-type: inline-size;

      // Container query for very small containers
      @container (max-width: 20rem) {
        padding: var(--space-sm);
        border-radius: var(--radius-sm);
      }

      // Container query for small containers
      @container (max-width: 28rem) {
        border-radius: var(--radius-md);

        @container (max-width: 24rem) {
          padding: var(--space-md);
        }
      }
    }
  }

  /* Enhanced touch and pointer support */
  @media (pointer: coarse) {
    .reset-password-page__container {
      // Enhance touch targets for touch devices
      padding: var(--space-lg);

      // Ensure minimum touch target sizes
      * {
        min-height: var(--touch-target-enhanced);
      }
    }
  }

  @media (pointer: fine) {
    .reset-password-page__container {
      // Optimize for precise pointer devices
      &:hover {
        box-shadow: var(--card-shadow-hover);
      }
    }
  }
</style>
