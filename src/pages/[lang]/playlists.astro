---
import Layout from "@layouts/Layout.astro";
import { useTranslations } from "@utils/i18n";
import Headline from "@components/Headline.astro";
import Paragraph from "@components/Paragraph.astro";
import PlaylistCard from "@components/PlaylistCard.astro";
import BackToTop from "@components/Shared/BackToTop.astro";

// import { extractKeywords, generateMetaDescription } from "@utils/seo"; // Removed unused import

/**
 * Enable static site generation for all supported languages.
 */
export const prerender = true;

/**
 * Define supported languages and generate static paths for each language.
 */
export async function getStaticPaths() {
  const supportedLanguages = [
    "de",
    "en",
    "es",
    "fr",
    "it",
    "pt",
    "da",
    "nl",
    "sv",
    "fi",
    "cn",
    "ru",
    "jp",
    "uk",
  ] as const;

  const allLanguageDataPromises = supportedLanguages.map(async (lang) => {
    try {
      const playlistData = await import(`../../../public/json/playlist/${lang}_playlist.json`);
      return { lang, playlists: playlistData.default };
    } catch {
      try {
        console.warn(`No playlist data found for ${lang}, falling back to English`);
        const fallbackData = await import(`../../../public/json/playlist/en_playlist.json`);
        return { lang, playlists: fallbackData.default };
      } catch (fallbackError) {
        console.error(`Error loading playlist data for ${lang}:`, fallbackError);
        return { lang, playlists: [] };
      }
    }
  });

  const languageData = await Promise.all(allLanguageDataPromises);
  const paths = languageData.map(({ lang, playlists }) => ({
    params: { lang },
    props: { playlists },
  }));

  return paths;
}

const { lang } = Astro.params;
const { playlists } = Astro.props;
const t = useTranslations(lang);

/**
 * Interface for playlist data structure
 */
interface Playlist {
  headline: string;
  imageUrl: string;
  introSubline: string;
  spotifyPlaylist: string;
  deezerPlaylist: string;
  appleMusicPlaylist: string;
  categoryType?: string;
}

// Helper function for decade extraction (moved up)
function getDecadeFromHeadline(headline: string): string {
  const yearMatch = headline.match(/\b(\d{4})\b/);
  if (yearMatch) {
    return `${yearMatch[1].substring(0, 3)}0s`;
  }
  return "Other";
}

// Sort playlists chronologically (moved up)
const sortedPlaylists = [...playlists].sort((a: Playlist, b: Playlist) => {
  const decadeA = getDecadeFromHeadline(a.headline);
  const decadeB = getDecadeFromHeadline(b.headline);
  return decadeA.localeCompare(decadeB, undefined, { sensitivity: "base" });
});

// Enhanced SEO content generation with more detailed information
const title = t("playlist.page.heading");
const description = t("playlist.page.description");

// Create enriched content for better SEO by including playlist information
const playlistDecades = [
  ...new Set(playlists.map((p: Playlist) => getDecadeFromHeadline(p.headline))),
].join(", ");
const playlistCount = playlists.length;
const enrichedContent = `${title} ${description} Explore ${playlistCount} carefully curated music playlists spanning decades including ${playlistDecades}. Each playlist features authentic tracks from legendary artists and iconic albums. Perfect for music enthusiasts, trivia players, and anyone looking to discover classic hits from different musical eras.`;

// const optimizedDescription = generateMetaDescription(enrichedContent, 158); // Removed - function no longer exists
// const keywords = extractKeywords(enrichedContent, 12, lang); // Removed - function no longer exists
const optimizedDescription =
  enrichedContent.substring(0, 158) + (enrichedContent.length > 158 ? "..." : "");
const keywords = "music playlists, music history, classic hits, music discovery, music trivia";

// SEO-optimized URL and canonical setup
const baseUrl = Astro.site?.toString() || "https://melody-mind.de";
const currentUrl = `${baseUrl}/${lang}/playlists`;

// Enhanced structured data for playlist collection
const playlistCollectionSchema = {
  "@context": "https://schema.org",
  "@type": "ItemList",
  name: `${title} | Melody Mind`,
  description: optimizedDescription,
  url: currentUrl,
  numberOfItems: playlistCount,
  itemListOrder: "chronological",
  itemListElement: sortedPlaylists.slice(0, 10).map((playlist, index) => ({
    "@type": "MusicPlaylist",
    position: index + 1,
    name: playlist.headline,
    description: playlist.introSubline || playlist.headline,
    url: `${currentUrl}#playlist-${index}`,
    genre: getDecadeFromHeadline(playlist.headline),
    inLanguage: lang,
    creator: {
      "@type": "Organization",
      name: "Melody Mind",
    },
  })),
};

// Breadcrumb structured data for better navigation SEO
const breadcrumbSchema = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  itemListElement: [
    {
      "@type": "ListItem",
      position: 1,
      name: t("nav.home"),
      item: `${baseUrl}/${lang}/`,
    },
    {
      "@type": "ListItem",
      position: 2,
      name: title,
      item: currentUrl,
    },
  ],
};
---

<Layout
  {title}
  description={optimizedDescription}
  {keywords}
  image={`/og-images/social-share-playlists-${lang}.jpg`}
  type="website"
  publishDate={new Date()}
  modifiedDate={new Date()}
>
  <!-- Enhanced SEO structured data -->
  <Fragment slot="head">
    <script
      is:inline
      type="application/ld+json"
      is:inline
      set:html={JSON.stringify(playlistCollectionSchema)}
    />
    <script is:inline type="application/ld+json" set:html={JSON.stringify(breadcrumbSchema)} />
    <meta name="robots" content="index, follow, max-image-preview:large" />
    <meta name="googlebot" content="index, follow" />
    <link rel="canonical" href={currentUrl} />

    <!-- Additional SEO meta tags -->
    <meta name="author" content="Melody Mind Team" />
    <meta property="og:type" content="website" />
    <meta property="og:locale" content={`${lang}_${lang.toUpperCase()}`} />
    <meta property="article:section" content="Music" />
    <meta property="article:tag" content="Music Playlists" />
    <meta property="article:tag" content="Music History" />
    <meta property="article:tag" content="Music Discovery" />

    <!-- Music-specific meta tags -->
    <meta name="music:genre" content="Various" />
    <meta name="music:playlist_count" content={playlistCount.toString()} />
    <meta name="music:decades" content={playlistDecades} />

    <!-- Enhanced Open Graph for better social sharing -->
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:image:type" content="image/jpeg" />

    <!-- Twitter Card enhancements -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@melodymind" />
    <meta name="twitter:creator" content="@melodymind" />
  </Fragment>

  <main class="min-h-screen bg-gray-900 py-8 text-white">
    <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
      <!-- Hero section -->
      <section
        class="relative mb-16 overflow-hidden rounded-3xl border border-purple-500/30 bg-gradient-to-br from-purple-900 via-blue-800 to-gray-900 p-8 shadow-2xl sm:p-12 lg:p-16"
        aria-labelledby="playlist-heading"
      >
        <!-- Decorative background elements -->
        <div class="pointer-events-none absolute inset-0 opacity-10" aria-hidden="true">
          <div class="absolute -top-8 -right-8 h-32 w-32 rounded-full bg-white"></div>
          <div class="absolute -bottom-8 -left-8 h-24 w-24 rounded-full bg-white"></div>
          <div class="absolute top-1/2 right-4 h-16 w-16 rounded-full bg-white"></div>
        </div>

        <div class="relative z-10 w-full text-center text-white">
          <Headline level="h1" textSize="3xl" textAlign="center">
            {t("playlist.page.heading")}
          </Headline>
          <div class="mx-auto my-8 h-1 w-12 rounded-full bg-blue-400"></div>
          <Paragraph textAlign="center" textSize="lg">
            {t("playlist.page.description")}
          </Paragraph>
        </div>
      </section>

      <!-- Enhanced Search Section - Much Wider & Better Looking -->
      <section class="mb-16" aria-labelledby="search-heading">
        <div class="mx-auto w-full max-w-7xl px-4 sm:px-6 lg:px-8">
          <!-- Search Heading -->
          <div class="mb-10 text-center">
            <Headline level="h2" textSize="2xl" textAlign="center">
              {t("playlist.search.heading") || "Playlists durchsuchen"}
            </Headline>
            <Paragraph textAlign="center" textSize="lg">
              Finde deine Lieblingsmusik nach KÃ¼nstler, Stil, Epoche oder Genre
            </Paragraph>
          </div>

          <!-- Enhanced Search Field - Much Wider -->
          <div class="relative mx-auto w-full max-w-5xl">
            <label for="playlist-search" class="sr-only">
              {t("playlist.search.aria.label") || "Musik-Playlists durchsuchen"}
            </label>

            <!-- Search Input with Glassmorphism - Full Width -->
            <div class="relative">
              <div
                class="pointer-events-none absolute inset-y-0 left-0 z-10 flex items-center pl-6"
              >
                <svg
                  class="h-7 w-7 text-purple-400"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
              </div>

              <input
                type="text"
                id="playlist-search"
                class="block w-full rounded-3xl border-2 border-purple-500/40 bg-gray-800/90 py-5 pr-20 pl-16 text-xl font-medium text-white placeholder-gray-400 shadow-2xl backdrop-blur-md transition-all duration-300 hover:shadow-purple-500/20 focus:border-purple-400 focus:ring-4 focus:ring-purple-500/60 focus:outline-none"
                placeholder={t("playlist.search.placeholder") ||
                  "Suchen nach KÃ¼nstler oder Stil..."}
                aria-describedby="search-examples"
              />

              <!-- Clear Button -->
              <button
                type="button"
                id="clear-search"
                class="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-6 text-gray-400 opacity-0 transition-colors duration-200 hover:text-purple-400"
                aria-label={t("game.search.clear")}
              >
                <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
          </div>
        </div>
      </section>

      <!-- Enhanced Playlist Grid with semantic markup and microdata -->
      <section aria-labelledby="playlists-heading">
        <Headline level="h2" textSize="base" className="sr-only">
          {t("playlist.grid.heading", { count: playlistCount })}
        </Headline>

        {/* Simple sorted playlist grid */}
        <div class="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3" id="playlist-grid">
          {
            sortedPlaylists.map((playlist, index) => (
              <div
                class="playlist-item overflow-hidden rounded-2xl border border-gray-700 bg-gray-800 shadow-lg transition-all duration-300 hover:-translate-y-1 hover:shadow-xl"
                itemscope
                itemtype="https://schema.org/MusicPlaylist"
                data-search-text={`${playlist.headline} ${playlist.introSubline || ""} ${playlist.categoryType || ""}`.toLowerCase()}
              >
                <meta itemprop="name" content={playlist.headline} />
                <meta itemprop="description" content={playlist.introSubline || playlist.headline} />
                <meta
                  itemprop="genre"
                  content={playlist.categoryType || getDecadeFromHeadline(playlist.headline)}
                />
                <meta itemprop="inLanguage" content={lang} />
                <PlaylistCard
                  headline={playlist.headline}
                  imageUrl={playlist.imageUrl}
                  introSubline={playlist.introSubline}
                  spotifyPlaylist={playlist.spotifyPlaylist}
                  deezerPlaylist={playlist.deezerPlaylist}
                  appleMusicPlaylist={playlist.appleMusicPlaylist}
                  index={index}
                  lang={lang}
                />
              </div>
            ))
          }
        </div>
      </section>
    </div>
  </main>

  <!-- Back to Top Button -->
  <BackToTop {lang} />
</Layout>

<script>
  import { initGenericSearchAuto } from "../../utils/components/searchUtils";

  /* eslint-disable @typescript-eslint/explicit-function-return-type */
  function wire() {
    const instance = initGenericSearchAuto({
      inputId: "playlist-search",
      clearButtonId: "clear-search",
      itemSelector: ".playlist-item",
      examplesContainerId: "search-examples",
      exampleButtonSelector: ".search-example",
    });

    try {
      window.__lastSearchInstance = instance;
    } catch {
      // ignore storing instance
    }

    try {
      const resetBtn = document.getElementById("reset-search");
      if (resetBtn) {
        resetBtn.addEventListener("click", () => {
          try {
            const inst = window.__lastSearchInstance;
            if (inst && typeof inst.clear === "function") {
              inst.clear();
            } else if (inst && typeof inst.performSearch === "function") {
              inst.performSearch("");
            }
            const input = document.getElementById("playlist-search");
            if (input) {
              input.focus();
            }
          } catch {
            // ignore reset errors
          }
        });
      }
    } catch {
      // ignore listener setup errors
    }
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => {
      (window.requestIdleCallback || ((cb) => setTimeout(cb, 1)))(wire);
    });
  } else {
    (window.requestIdleCallback || ((cb) => setTimeout(cb, 1)))(wire);
  }
</script>
