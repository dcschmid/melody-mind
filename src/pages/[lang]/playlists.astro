---
import Layout from "@layouts/Layout.astro";
import { useTranslations } from "@utils/i18n";
import Headline from "@components/Headline.astro";
import Paragraph from "@components/Paragraph.astro";
import PlaylistCard from "@components/PlaylistCard.astro";
import BackToTop from "@components/Shared/BackToTop.astro";
import CategoryFilter from "@components/CategoryFilter.astro";
import { Icon } from "astro-icon/components";
import { extractKeywords, generateMetaDescription } from "@utils/seo";

/**
 * Enable static site generation for all supported languages.
 */
export const prerender = true;

/**
 * Define supported languages and generate static paths for each language.
 */
export async function getStaticPaths() {
  const supportedLanguages = [
    "de",
    "en",
    "es",
    "fr",
    "it",
    "pt",
    "da",
    "nl",
    "sv",
    "fi",
    "cn",
    "ru",
    "jp",
    "uk",
  ] as const;

  const allLanguageDataPromises = supportedLanguages.map(async (lang) => {
    try {
      const playlistData = await import(`../../../public/json/playlist/${lang}_playlist.json`);
      return { lang, playlists: playlistData.default };
    } catch {
      try {
        console.warn(`No playlist data found for ${lang}, falling back to English`);
        const fallbackData = await import(`../../../public/json/playlist/en_playlist.json`);
        return { lang, playlists: fallbackData.default };
      } catch (fallbackError) {
        console.error(`Error loading playlist data for ${lang}:`, fallbackError);
        return { lang, playlists: [] };
      }
    }
  });

  const languageData = await Promise.all(allLanguageDataPromises);
  const paths = languageData.map(({ lang, playlists }) => ({
    params: { lang },
    props: { playlists },
  }));

  return paths;
}

const { lang } = Astro.params;
const { playlists } = Astro.props;
const t = useTranslations(lang);

/**
 * Interface for playlist data structure
 */
interface Playlist {
  headline: string;
  imageUrl: string;
  introSubline: string;
  spotifyPlaylist: string;
  deezerPlaylist: string;
  appleMusicPlaylist: string;
  categoryType?: string;
}

// Helper function for decade extraction (moved up)
function getDecadeFromHeadline(headline: string): string {
  const yearMatch = headline.match(/\b(\d{4})\b/);
  if (yearMatch) {
    return `${yearMatch[1].substring(0, 3)}0s`;
  }
  return "Other";
}

// Sort playlists chronologically (moved up)
const sortedPlaylists = [...playlists].sort((a: Playlist, b: Playlist) => {
  const decadeA = getDecadeFromHeadline(a.headline);
  const decadeB = getDecadeFromHeadline(b.headline);
  return decadeA.localeCompare(decadeB, undefined, { sensitivity: "base" });
});

// Enhanced SEO content generation with more detailed information
const title = t("playlist.page.heading");
const description = t("playlist.page.description");

// Create enriched content for better SEO by including playlist information
const playlistDecades = [
  ...new Set(playlists.map((p: Playlist) => getDecadeFromHeadline(p.headline))),
].join(", ");
const playlistCount = playlists.length;
const enrichedContent = `${title} ${description} Explore ${playlistCount} carefully curated music playlists spanning decades including ${playlistDecades}. Each playlist features authentic tracks from legendary artists and iconic albums. Perfect for music enthusiasts, trivia players, and anyone looking to discover classic hits from different musical eras.`;

const optimizedDescription = generateMetaDescription(enrichedContent, 158);
const keywords = extractKeywords(enrichedContent, 12, lang);

// SEO-optimized URL and canonical setup
const baseUrl = Astro.site?.toString() || "https://melody-mind.de";
const currentUrl = `${baseUrl}/${lang}/playlists`;

// Enhanced structured data for playlist collection
const playlistCollectionSchema = {
  "@context": "https://schema.org",
  "@type": "ItemList",
  name: `${title} | Melody Mind`,
  description: optimizedDescription,
  url: currentUrl,
  numberOfItems: playlistCount,
  itemListOrder: "chronological",
  itemListElement: sortedPlaylists.slice(0, 10).map((playlist, index) => ({
    "@type": "MusicPlaylist",
    position: index + 1,
    name: playlist.headline,
    description: playlist.introSubline || playlist.headline,
    url: `${currentUrl}#playlist-${index}`,
    genre: getDecadeFromHeadline(playlist.headline),
    inLanguage: lang,
    creator: {
      "@type": "Organization",
      name: "Melody Mind",
    },
  })),
};

// Breadcrumb structured data for better navigation SEO
const breadcrumbSchema = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  itemListElement: [
    {
      "@type": "ListItem",
      position: 1,
      name: t("nav.home"),
      item: `${baseUrl}/${lang}/`,
    },
    {
      "@type": "ListItem",
      position: 2,
      name: title,
      item: currentUrl,
    },
  ],
};
---

<Layout
  {title}
  description={optimizedDescription}
  {keywords}
  image={`/og-images/social-share-playlist-${lang}.jpg`}
  type="website"
  publishDate={new Date()}
  modifiedDate={new Date()}
>
  <!-- Enhanced SEO structured data -->
  <Fragment slot="head">
    <script
      is:inline
      type="application/ld+json"
      set:html={JSON.stringify(playlistCollectionSchema)}
    />
    <script is:inline type="application/ld+json" set:html={JSON.stringify(breadcrumbSchema)} />
    <meta name="robots" content="index, follow, max-image-preview:large" />
    <meta name="googlebot" content="index, follow" />
    <link rel="canonical" href={currentUrl} />

    <!-- Additional SEO meta tags -->
    <meta name="author" content="Melody Mind Team" />
    <meta property="og:type" content="website" />
    <meta property="og:locale" content={`${lang}_${lang.toUpperCase()}`} />
    <meta property="article:section" content="Music" />
    <meta property="article:tag" content="Music Playlists" />
    <meta property="article:tag" content="Music History" />
    <meta property="article:tag" content="Music Discovery" />

    <!-- Music-specific meta tags -->
    <meta name="music:genre" content="Various" />
    <meta name="music:playlist_count" content={playlistCount.toString()} />
    <meta name="music:decades" content={playlistDecades} />

    <!-- Enhanced Open Graph for better social sharing -->
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:image:type" content="image/jpeg" />

    <!-- Twitter Card enhancements -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@melodymind" />
    <meta name="twitter:creator" content="@melodymind" />
  </Fragment>

  <div class="playlist-container">
    <!-- Hero section -->
    <section class="playlist-hero" aria-labelledby="playlist-heading">
      <div class="playlist-hero__decoration" aria-hidden="true">
        <div class="playlist-hero__decoration-item playlist-hero__decoration-item--top-right"></div>
        <div class="playlist-hero__decoration-item playlist-hero__decoration-item--bottom-left">
        </div>
        <div class="playlist-hero__decoration-item playlist-hero__decoration-item--center-right">
        </div>
      </div>

      <div class="playlist-hero__content">
        <Headline
          title={t("playlist.page.heading")}
          level="h1"
          size="4xl"
          className="playlist-hero__title"
        />
        <div class="playlist-hero__divider" aria-hidden="true"></div>
        <Paragraph className="playlist-hero__description" align="center">
          {t("playlist.page.description")}
        </Paragraph>
      </div>
    </section>

    <main class="playlist-selection" role="main">
      <!-- Category Filter Dropdown -->
      <CategoryFilter
        categories={[
          { type: "decade", title: t("game.filter.decades") || "Decades", icon: "📅" },
          { type: "female", title: t("game.filter.female") || "Female Artists", icon: "👩‍🎤" },
          {
            type: "classic-rock",
            title: t("game.filter.classic-rock") || "Classic Rock & Hard Rock",
            icon: "🎸",
          },
          {
            type: "metal-classic",
            title: t("game.filter.metal-classic") || "Metal – Classics",
            icon: "⚡",
          },
          {
            type: "metal-modern",
            title: t("game.filter.metal-modern") || "Modern Metal",
            icon: "🔥",
          },
          {
            type: "metal-avantgarde",
            title: t("game.filter.metal-avantgarde") || "Avantgarde & Extreme Metal",
            icon: "🎭",
          },
          {
            type: "mainstream-pop",
            title: t("game.filter.mainstream-pop") || "Mainstream Pop",
            icon: "🎤",
          },
          {
            type: "indie-alternative",
            title: t("game.filter.indie-alternative") || "Indie & Alternative",
            icon: "🎶",
          },
          {
            type: "global-pop",
            title: t("game.filter.global-pop") || "Global Pop Scenes",
            icon: "🌏",
          },
          {
            type: "jazz-soul-funk",
            title: t("game.filter.jazz-soul-funk") || "Jazz, Soul & Funk",
            icon: "🎷",
          },
          {
            type: "hip-hop-rap",
            title: t("game.filter.hip-hop-rap") || "Hip Hop & Rap",
            icon: "🎤",
          },
          {
            type: "house-techno",
            title: t("game.filter.house-techno") || "House & Techno",
            icon: "🎛️",
          },
          { type: "club-sounds", title: t("game.filter.club-sounds") || "Club Sounds", icon: "🎚️" },
          {
            type: "breaks-experimental",
            title: t("game.filter.breaks-experimental") || "Breaks & Experimental",
            icon: "🌀",
          },
          { type: "latin-vibes", title: t("game.filter.latin-vibes") || "Latin Vibes", icon: "🎺" },
          {
            type: "caribbean-afro",
            title: t("game.filter.caribbean-afro") || "Caribbean & Afro",
            icon: "🌴",
          },
          {
            type: "folk-regional",
            title: t("game.filter.folk-regional") || "Folk & Regional",
            icon: "🪕",
          },
          {
            type: "classical-orchestral",
            title: t("game.filter.classical-orchestral") || "Classical & Orchestral",
            icon: "🎼",
          },
          {
            type: "countries-regional",
            title: t("game.filter.countries-regional") || "Countries & Regional",
            icon: "🌍",
          },
          {
            type: "emotional",
            title: t("game.filter.emotional") || "Emotional Genres",
            icon: "💫",
          },
          { type: "seasonal", title: t("game.filter.seasonal") || "Seasonal Genres", icon: "❄️" },
          {
            type: "situational",
            title: t("game.filter.situational") || "Situational & Activity-Based",
            icon: "🎉",
          },
          { type: "other", title: t("game.filter.other") || "Other Categories", icon: "📚" },
        ]}
        selectedValue="all"
      />

      <!-- Enhanced Playlist Grid with semantic markup and microdata -->
      <section aria-labelledby="playlists-heading">
        <Headline
          title={t("playlist.grid.heading", { count: playlistCount })}
          level="h2"
          size="base"
          className="sr-only"
          id="playlists-heading"
        />

        {/* Dynamic Category Groups */}
        {
          (() => {
            // Define category group configurations
            const categoryGroups = [
              { type: "decade", title: t("game.filter.decades") || "Decades", icon: "📅" },
              { type: "female", title: t("game.filter.female") || "Female Artists", icon: "👩‍🎤" },
              {
                type: "classic-rock",
                title: t("game.filter.classic-rock") || "Classic Rock & Hard Rock",
                icon: "🎸",
              },
              {
                type: "metal-classic",
                title: t("game.filter.metal-classic") || "Metal – Classics",
                icon: "⚡",
              },
              {
                type: "metal-modern",
                title: t("game.filter.metal-modern") || "Modern Metal",
                icon: "🔥",
              },
              {
                type: "metal-avantgarde",
                title: t("game.filter.metal-avantgarde") || "Avantgarde & Extreme Metal",
                icon: "🎭",
              },
              {
                type: "mainstream-pop",
                title: t("game.filter.mainstream-pop") || "Mainstream Pop",
                icon: "🎤",
              },
              {
                type: "indie-alternative",
                title: t("game.filter.indie-alternative") || "Indie & Alternative",
                icon: "🎶",
              },
              {
                type: "global-pop",
                title: t("game.filter.global-pop") || "Global Pop Scenes",
                icon: "🌏",
              },
              {
                type: "jazz-soul-funk",
                title: t("game.filter.jazz-soul-funk") || "Jazz, Soul & Funk",
                icon: "🎷",
              },
              {
                type: "hip-hop-rap",
                title: t("game.filter.hip-hop-rap") || "Hip Hop & Rap",
                icon: "🎤",
              },
              {
                type: "house-techno",
                title: t("game.filter.house-techno") || "House & Techno",
                icon: "🎛️",
              },
              {
                type: "club-sounds",
                title: t("game.filter.club-sounds") || "Club Sounds",
                icon: "🎚️",
              },
              {
                type: "breaks-experimental",
                title: t("game.filter.breaks-experimental") || "Breaks & Experimental",
                icon: "🌀",
              },
              {
                type: "latin-vibes",
                title: t("game.filter.latin-vibes") || "Latin Vibes",
                icon: "🎺",
              },
              {
                type: "caribbean-afro",
                title: t("game.filter.caribbean-afro") || "Caribbean & Afro",
                icon: "🌴",
              },
              {
                type: "folk-regional",
                title: t("game.filter.folk-regional") || "Folk & Regional",
                icon: "🪕",
              },
              {
                type: "classical-orchestral",
                title: t("game.filter.classical-orchestral") || "Classical & Orchestral",
                icon: "🎼",
              },
              {
                type: "countries-regional",
                title: t("game.filter.countries-regional") || "Countries & Regional",
                icon: "🌍",
              },
              {
                type: "emotional",
                title: t("game.filter.emotional") || "Emotional Genres",
                icon: "💫",
              },
              {
                type: "seasonal",
                title: t("game.filter.seasonal") || "Seasonal Genres",
                icon: "❄️",
              },
              {
                type: "situational",
                title: t("game.filter.situational") || "Situational & Activity-Based",
                icon: "🎉",
              },
              { type: "other", title: t("game.filter.other") || "Other Categories", icon: "📚" },
            ];

            // Generate category groups dynamically
            return categoryGroups.map((group) => {
              const groupPlaylists = sortedPlaylists.filter(
                (playlist) => playlist.categoryType === group.type
              );
              if (groupPlaylists.length === 0) {
                return null;
              }

              return (
                <div class="category-group" data-category-type={group.type}>
                  <h3 class="category-group__title">
                    {group.icon} {group.title}
                  </h3>
                  <ul
                    class="playlist-grid"
                    aria-label={`${group.title} playlists`}
                    aria-live="polite"
                  >
                    {groupPlaylists.map((playlist, index) => (
                      <li
                        class="playlist-card"
                        id={`playlist-${group.type}-${index}`}
                        itemscope
                        itemtype="https://schema.org/MusicPlaylist"
                      >
                        <meta itemprop="name" content={playlist.headline} />
                        <meta
                          itemprop="description"
                          content={playlist.introSubline || playlist.headline}
                        />
                        <meta
                          itemprop="genre"
                          content={
                            playlist.categoryType || getDecadeFromHeadline(playlist.headline)
                          }
                        />
                        <meta itemprop="inLanguage" content={lang} />
                        <PlaylistCard
                          headline={playlist.headline}
                          imageUrl={playlist.imageUrl}
                          introSubline={playlist.introSubline}
                          spotifyPlaylist={playlist.spotifyPlaylist}
                          deezerPlaylist={playlist.deezerPlaylist}
                          appleMusicPlaylist={playlist.appleMusicPlaylist}
                          index={index}
                          lang={lang}
                        />
                      </li>
                    ))}
                  </ul>
                </div>
              );
            });
          })()
        }
      </section>
    </main>
  </div>

  <!-- Back to Top Button -->
  <BackToTop {lang} />
</Layout>

<style lang="scss">
  /* ======================================
   * PLAYLIST PAGE STYLES - OPTIMIZED FOR STYLE GUARDIAN
   * BEM Methodology + Global Variables + Mobile-First
   * ====================================== */

  .playlist-container {
    width: 100%;
    max-width: var(--container-xl);
    margin: 0 auto;
    padding: var(--space-xs); // Mobile: minimal horizontal spacing
    overflow-x: hidden;
    box-sizing: border-box;
    contain: layout style paint;
  }

  /* ======================================
   * HERO SECTION
   * ====================================== */
  .playlist-hero {
    position: relative;
    margin-bottom: var(--space-lg);
    overflow: hidden;
    border-radius: var(--radius-lg);
    background: linear-gradient(
      135deg,
      var(--color-primary-800) 0%,
      var(--color-primary-900) 50%,
      var(--color-neutral-900) 100%
    );
    padding: var(--space-md);
    box-shadow: var(--shadow-xl);
    contain: layout style paint;

    &__decoration {
      position: absolute;
      inset: 0;
      opacity: 0.1;
      pointer-events: none;
      contain: layout style paint;

      &-item {
        position: absolute;
        border-radius: var(--radius-full);
        contain: layout style paint;

        &--top-right {
          top: calc(-1 * var(--space-xl));
          right: calc(-1 * var(--space-xl));
          width: var(--space-3xl);
          height: var(--space-3xl);
          background-color: var(--color-primary-500);
        }

        &--bottom-left {
          bottom: var(--space-md);
          left: var(--space-md);
          width: var(--space-2xl);
          height: var(--space-2xl);
          background-color: var(--color-secondary-500);
        }

        &--center-right {
          top: 50%;
          right: var(--space-lg);
          transform: translateY(-50%);
          width: var(--space-lg);
          height: var(--space-lg);
          background-color: var(--color-primary-400);
        }
      }
    }

    &__content {
      position: relative;
      z-index: var(--z-fixed);
      text-align: center;
      color: var(--color-neutral-100);
      contain: layout style;
    }

    &__title {
      margin-bottom: var(--space-sm);
      font-size: var(--text-2xl);
      line-height: var(--leading-tight);
      font-weight: var(--font-bold);
      text-align: center;
      contain: layout style;
    }

    &__divider {
      margin: var(--space-md) auto;
      height: var(--border-width-thick);
      width: var(--space-2xl);
      border-radius: var(--radius-full);
      background: var(--color-secondary-400);
      contain: layout style paint;
    }

    &__description {
      margin: 0 auto;
      max-width: var(--container-sm);
      font-size: var(--text-base);
      line-height: var(--leading-relaxed);
      opacity: 0.9;
      text-align: center;
      contain: layout style;
    }
  }

  /* ======================================
   * CATEGORY GROUPS
   * ====================================== */
  .category-group {
    margin-bottom: var(--space-xl);
    contain: layout style;

    @media (min-width: 48em) {
      margin-bottom: var(--space-2xl);
    }
  }

  .category-group__title {
    font-size: var(--text-xl);
    font-weight: var(--font-weight-bold);
    color: var(--text-primary);
    margin-bottom: var(--space-lg);
    text-align: center;
    contain: layout style;

    @media (min-width: 48em) {
      font-size: var(--text-2xl);
      margin-bottom: var(--space-xl);
    }
  }

  /* ======================================
   * PLAYLIST GRID
   * ====================================== */
  .playlist-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--space-md);
    margin: var(--space-lg) auto;
    width: 100%;
    list-style: none;
    padding: 0;
    contain: layout style;

    @media (min-width: 48em) {
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: var(--space-lg);
    }
  }

  /* ======================================
   * PLAYLIST CARDS
   * ====================================== */
  .playlist-card {
    transition:
      transform var(--transition-base),
      box-shadow var(--transition-base);
    contain: layout style paint;
  }

  /* ======================================
   * MOBILE PORTRAIT OPTIMIZATIONS
   * ====================================== */
  @media (max-width: 29.9375em) {
    .playlist-container {
      padding: var(--space-xs);
    }

    .playlist-hero {
      padding: var(--space-sm);
      margin-bottom: var(--space-md);
    }

    .playlist-hero__title {
      font-size: var(--text-xl);
    }

    .playlist-hero__description {
      font-size: var(--text-sm);
    }

    .breadcrumb-list {
      font-size: var(--text-xs);
    }
  }
</style>

<script>
  // Simple intersection observer for playlist cards
  function setupIntersectionObserver() {
    const playlistCards = document.querySelectorAll(".playlist-card");

    if (playlistCards.length === 0) {
      return;
    }

    const observerOptions = {
      root: null,
      rootMargin: "50px",
      threshold: 0.1,
    };

    const cardObserver = new IntersectionObserver(function (entries) {
      entries.forEach(function (entry) {
        if (entry.isIntersecting) {
          entry.target.classList.add("in-view");
        }
      });
    }, observerOptions);

    playlistCards.forEach(function (card) {
      cardObserver.observe(card);
    });
  }

  // Initialize playlist page
  function initializePlaylistPage() {
    setupIntersectionObserver();
  }

  // Initialize when DOM is ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializePlaylistPage);
  } else {
    initializePlaylistPage();
  }
</script>
