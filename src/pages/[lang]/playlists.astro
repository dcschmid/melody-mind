---
import Layout from "@layouts/Layout.astro";
import { useTranslations } from "@utils/i18n";
import Headline from "@components/Headline.astro";
import Paragraph from "@components/Paragraph.astro";
import PlaylistCard from "@components/PlaylistCard.astro";
import { Icon } from "astro-icon/components";
import { extractKeywords, generateMetaDescription } from "@utils/seo";

/**
 * Enable static site generation for all supported languages.
 */
export const prerender = true;

/**
 * Define supported languages and generate static paths for each language.
 */
export async function getStaticPaths() {
  const supportedLanguages = ["de", "en", "es", "fr", "it", "pt", "da", "nl", "sv", "fi"] as const;

  const allLanguageDataPromises = supportedLanguages.map(async (lang) => {
    try {
      const playlistData = await import(`../../../public/json/playlist/${lang}_playlist.json`);
      return { lang, playlists: playlistData.default };
    } catch {
      try {
        console.warn(`No playlist data found for ${lang}, falling back to English`);
        const fallbackData = await import(`../../../public/json/playlist/en_playlist.json`);
        return { lang, playlists: fallbackData.default };
      } catch (fallbackError) {
        console.error(`Error loading playlist data for ${lang}:`, fallbackError);
        return { lang, playlists: [] };
      }
    }
  });

  const languageData = await Promise.all(allLanguageDataPromises);
  const paths = languageData.map(({ lang, playlists }) => ({
    params: { lang },
    props: { playlists },
  }));

  return paths;
}

const { lang } = Astro.params;
const { playlists } = Astro.props;
const t = useTranslations(lang);

// SEO-Optimierung
const title = t("playlist.page.heading") || "Music Playlists Collection";
const description =
  t("playlist.page.description") ||
  "Discover curated music playlists across different decades and genres.";
const pageContent = `${title} ${description}`;
const optimizedDescription = generateMetaDescription(pageContent);
const keywords = extractKeywords(pageContent, 10, lang);

// Helper function for decade extraction
function getDecadeFromHeadline(headline: string): string {
  const yearMatch = headline.match(/\b(\d{4})\b/);
  if (yearMatch) {
    return `${yearMatch[1].substring(0, 3)}0s`;
  }
  return "Other";
}

// Sort playlists chronologically
const sortedPlaylists = [...playlists].sort((a, b) => {
  const decadeA = getDecadeFromHeadline(a.headline);
  const decadeB = getDecadeFromHeadline(b.headline);
  return decadeA.localeCompare(decadeB, undefined, { sensitivity: "base" });
});
---

<Layout
  {title}
  description={optimizedDescription}
  {keywords}
  image={`/og-images/social-share-playlist-${lang}.jpg`}
>
  <div class="playlist-container">
    <!-- Hero section -->
    <section class="playlist-hero" aria-labelledby="playlist-heading">
      <div class="playlist-hero__decoration" aria-hidden="true">
        <div class="playlist-hero__decoration-item playlist-hero__decoration-item--top-right"></div>
        <div class="playlist-hero__decoration-item playlist-hero__decoration-item--bottom-left">
        </div>
        <div class="playlist-hero__decoration-item playlist-hero__decoration-item--center-right">
        </div>
      </div>

      <div class="playlist-hero__content">
        <Headline title={t("playlist.page.heading")} level="h1" className="playlist-hero__title" />
        <div class="playlist-hero__divider"></div>
        <Paragraph className="playlist-hero__description" align="center">
          {t("playlist.page.description")}
        </Paragraph>
      </div>
    </section>

    <section class="playlist-selection">
      <!-- Search input -->
      <div class="search-container">
        <div class="search-container__icon" aria-hidden="true">
          <Icon name="search" class="search-container__icon-element" />
        </div>
        <label for="playlist-search" class="sr-only">
          {t("playlist.search.label")}
        </label>
        <input
          class="search-container__input"
          type="search"
          id="playlist-search"
          placeholder={t("playlist.search.label")}
          aria-label={t("playlist.search.label")}
          autocomplete="off"
        />
      </div>

      <!-- No results message -->
      <div id="no-results" class="no-results">
        <h2 class="no-results__heading">
          {t("playlist.no.results.heading") || "No playlists found"}
        </h2>
        <p class="no-results__text">
          {t("playlist.no.results")}
        </p>
        <button id="reset-search" class="no-results__button">
          {t("playlist.reset.search") || "Reset search"}
        </button>
      </div>

      <!-- Playlist Grid -->
      <ul id="playlist-grid" class="playlist-grid">
        {
          sortedPlaylists.map((playlist, index) => (
            <li
              class="playlist-card"
              data-searchable={`${playlist.headline.toLowerCase()} ${playlist.introSubline.toLowerCase()}`}
              data-decade={getDecadeFromHeadline(playlist.headline)}
            >
              <PlaylistCard
                headline={playlist.headline}
                imageUrl={playlist.imageUrl}
                introSubline={playlist.introSubline}
                spotifyPlaylist={playlist.spotifyPlaylist}
                deezerPlaylist={playlist.deezerPlaylist}
                appleMusicPlaylist={playlist.appleMusicPlaylist}
                index={index}
                lang={lang}
              />
            </li>
          ))
        }
      </ul>
    </section>
  </div>
</Layout>

<style>
  /* Container Layout */
  .playlist-container {
    width: var(--width-full);
    max-width: var(--container-xl);
    margin: 0 auto;
    padding: var(--space-lg) var(--space-md);
  }

  @media (min-width: var(--breakpoint-md)) {
    .playlist-container {
      padding: var(--space-xl) var(--space-lg);
    }
  }

  /* Hero Section */
  .playlist-hero {
    position: relative;
    margin-bottom: var(--space-2xl);
    overflow: hidden;
    border-radius: var(--radius-xl);
    background: linear-gradient(
      135deg,
      var(--color-primary-800) 0%,
      var(--color-primary-900) 50%,
      var(--color-neutral-900) 100%
    );
    padding: var(--space-xl);
    box-shadow: var(--shadow-xl);
  }

  .playlist-hero__decoration {
    position: absolute;
    inset: 0;
    opacity: 0.1;
    pointer-events: none;
  }

  .playlist-hero__decoration-item {
    position: absolute;
    border-radius: var(--radius-full);
  }

  .playlist-hero__decoration-item--top-right {
    top: calc(-1 * var(--space-3xl) - var(--space-2xl));
    right: calc(-1 * var(--space-3xl) - var(--space-md));
    width: calc(var(--space-3xl) * 4);
    height: calc(var(--space-3xl) * 4);
    background-color: var(--color-primary-500);
  }

  .playlist-hero__decoration-item--bottom-left {
    bottom: calc(var(--space-xl) + var(--space-sm));
    left: calc(var(--space-xl) + var(--space-sm));
    width: calc(var(--space-3xl) + var(--space-2xl));
    height: calc(var(--space-3xl) + var(--space-2xl));
    background-color: var(--color-secondary-500);
  }

  .playlist-hero__decoration-item--center-right {
    top: 50%;
    right: var(--percentage-quarter);
    transform: translateY(-50%);
    width: var(--space-3xl);
    height: var(--space-3xl);
    background-color: var(--color-primary-400);
  }

  .playlist-hero__content {
    position: relative;
    z-index: var(--z-fixed);
    text-align: center;
    color: var(--color-neutral-100);
  }

  .playlist-hero__title {
    margin-bottom: var(--space-md);
    font-size: var(--text-4xl);
    line-height: var(--leading-tight);
    font-weight: var(--font-bold);
  }

  .playlist-hero__divider {
    margin: var(--space-lg) auto;
    height: var(--border-width-thick);
    width: var(--space-3xl);
    border-radius: var(--radius-full);
    background: var(--color-secondary-400);
  }

  .playlist-hero__description {
    margin: 0 auto;
    max-width: var(--container-sm);
    font-size: var(--text-xl);
    line-height: var(--leading-relaxed);
    opacity: 0.9;
  }

  /* Search Container */
  .search-container {
    position: relative;
    margin: 0 auto var(--space-xl);
    max-width: var(--container-sm);
    display: flex;
    align-items: center;
    border-radius: var(--radius-full);
    background-color: var(--bg-secondary);
    box-shadow: var(--shadow-lg);
    transition: box-shadow var(--transition-base);
  }

  .search-container:focus-within {
    box-shadow: var(--shadow-xl);
  }

  .search-container__icon {
    position: absolute;
    left: var(--space-lg);
    z-index: var(--z-10);
    color: var(--text-tertiary);
    transition: color var(--transition-fast);
  }

  .search-container:focus-within .search-container__icon {
    color: var(--interactive-primary);
  }

  .search-container__icon-element {
    width: var(--icon-size-lg);
    height: var(--icon-size-lg);
  }

  .search-container__input {
    width: 100%;
    padding: var(--space-lg) var(--space-lg) var(--space-lg)
      calc(var(--space-3xl) + var(--space-sm));
    border: none;
    border-radius: var(--radius-full);
    background-color: transparent;
    color: var(--text-primary);
    font-size: var(--text-lg);
    transition: all var(--transition-base);
  }

  .search-container__input::placeholder {
    color: var(--text-tertiary);
  }

  .search-container__input:focus {
    outline: none;
  }

  /* Playlist Grid - Progressive responsive scaling */
  .playlist-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--space-lg);
    margin: var(--space-xl) auto;
    width: var(--width-full);
    list-style: none;
    padding: 0;
  }

  /* Mobile first: 1 column by default */
  /* --breakpoint-xs: 20em (320px) */
  @media (min-width: 20em) {
    .playlist-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  /* --breakpoint-md: 48em (768px) */
  @media (min-width: 48em) {
    .playlist-grid {
      grid-template-columns: repeat(3, 1fr);
      gap: var(--space-xl);
    }
  }

  /* --breakpoint-lg: 64em (1024px) */
  @media (min-width: 64em) {
    .playlist-grid {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  /* Playlist Cards */
  .playlist-card {
    transition:
      transform var(--transition-base),
      box-shadow var(--transition-base);
  }

  .playlist-card:hover,
  .playlist-card:focus-within {
    transform: translateY(calc(-1 * var(--space-xs)));
    box-shadow: var(--shadow-xl);
  }

  /* No Results */
  .no-results {
    display: none;
    text-align: center;
    padding: var(--space-2xl);
    color: var(--text-secondary);
  }

  .no-results.show {
    display: block;
  }

  .no-results__heading {
    margin-bottom: var(--space-md);
    font-size: var(--text-2xl);
    font-weight: var(--font-semibold);
    color: var(--text-primary);
  }

  .no-results__text {
    margin-bottom: var(--space-lg);
    font-size: var(--text-lg);
  }

  .no-results__button {
    padding: var(--space-md) var(--space-lg);
    border: none;
    border-radius: var(--radius-lg);
    background-color: var(--interactive-primary);
    color: var(--color-neutral-100);
    font-size: var(--text-base);
    font-weight: var(--font-medium);
    cursor: pointer;
    transition: all var(--transition-base);
  }

  .no-results__button:hover,
  .no-results__button:focus {
    background-color: var(--interactive-primary-hover);
    transform: translateY(calc(-1 * var(--space-xs)));
  }

  /* Utility Classes */
  .sr-only {
    position: absolute;
    width: var(--sr-only-width);
    height: var(--sr-only-height);
    padding: 0;
    margin: var(--sr-only-margin);
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }

  :focus {
    outline: var(--focus-outline);
    outline-offset: var(--focus-ring-offset);
  }

  :focus:not(:focus-visible) {
    outline: none;
  }

  :focus-visible {
    outline: var(--focus-outline);
    outline-offset: var(--focus-ring-offset);
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const searchInput = document.getElementById("playlist-search") as HTMLInputElement | null;
    const playlistCards = document.querySelectorAll(".playlist-card");
    const noResultsElement = document.getElementById("no-results") as HTMLElement | null;
    const resetButton = document.getElementById("reset-search") as HTMLButtonElement | null;

    function filterPlaylists(): void {
      if (!searchInput) {
        return;
      }

      const searchTerm = searchInput.value.toLowerCase().trim();
      let visibleCount = 0;

      playlistCards.forEach((card) => {
        const searchableText = (card as HTMLElement).getAttribute("data-searchable") || "";
        const isVisible = searchableText.includes(searchTerm);

        (card as HTMLElement).style.display = isVisible ? "" : "none";
        if (isVisible) {
          visibleCount++;
        }
      });

      if (noResultsElement) {
        noResultsElement.classList.toggle("show", visibleCount === 0 && searchTerm !== "");
      }
    }

    if (searchInput) {
      searchInput.addEventListener("input", filterPlaylists);

      searchInput.addEventListener("keydown", (e) => {
        if (e.key === "Escape") {
          searchInput.value = "";
          filterPlaylists();
        }
      });
    }

    if (resetButton) {
      resetButton.addEventListener("click", () => {
        if (searchInput) {
          searchInput.value = "";
          searchInput.focus();
        }
        filterPlaylists();
      });
    }
  });
</script>
