---
import Layout from "@layouts/Layout.astro";
import { useTranslations } from "@utils/i18n";
import Headline from "@components/Headline.astro";
import Paragraph from "@components/Paragraph.astro";
import PlaylistCard from "@components/PlaylistCard.astro";
import BackToTop from "@components/Shared/BackToTop.astro";
import SearchPanel from "@components/Search/SearchPanel.astro";
import { buildCategoryItemListSchema } from "@utils/seo/seoSchema";
import { normalizeDate } from "@utils/content/dateUtils";

// import { extractKeywords, generateMetaDescription } from "@utils/seo"; // Removed unused import

/**
 * Enable static site generation for all supported languages.
 */
export const prerender = true;

/**
 * Define supported languages and generate static paths for each language.
 */
export async function getStaticPaths() {
  const { buildLangStaticPathsWithProps } = await import("../../utils/i18n/staticPaths");
  return buildLangStaticPathsWithProps(async (lang: any) => {
    try {
      const playlistData = await import(`../../../public/json/playlist/${lang}_playlist.json`);
      return { playlists: playlistData.default };
    } catch {
      try {
        console.warn(`No playlist data found for ${lang}, falling back to English`);
        const fallbackData = await import(`../../../public/json/playlist/en_playlist.json`);
        return { playlists: fallbackData.default };
      } catch (fallbackError) {
        console.error(`Error loading playlist data for ${lang}:`, fallbackError);
        return { playlists: [] };
      }
    }
  });
}

const { lang } = Astro.params;
const { playlists } = Astro.props;
const t = useTranslations(lang);

/**
 * Interface for playlist data structure
 */
interface Playlist {
  headline: string;
  imageUrl: string;
  introSubline: string;
  spotifyPlaylist: string;
  deezerPlaylist: string;
  appleMusicPlaylist: string;
  categoryType?: string;
}

// Helper function for decade extraction (moved up)
function getDecadeFromHeadline(headline: string): string {
  const yearMatch = headline.match(/\b(\d{4})\b/);
  if (yearMatch) {
    return `${yearMatch[1].substring(0, 3)}0s`;
  }
  return "Other";
}

// Sort playlists chronologically (moved up)
const sortedPlaylists = [...playlists].sort((a: Playlist, b: Playlist) => {
  const decadeA = getDecadeFromHeadline(a.headline);
  const decadeB = getDecadeFromHeadline(b.headline);
  return decadeA.localeCompare(decadeB, undefined, { sensitivity: "base" });
});

// Enhanced SEO content generation with more detailed information
const title = t("playlist.page.heading");
const description = t("playlist.page.description");

// Create enriched content for better SEO by including playlist information
const playlistDecades = [
  ...new Set(playlists.map((p: Playlist) => getDecadeFromHeadline(p.headline))),
].join(", ");
const playlistCount = playlists.length;
const enrichedContent = `${title} ${description} Explore ${playlistCount} carefully curated music playlists spanning decades including ${playlistDecades}. Each playlist features authentic tracks from legendary artists and iconic albums. Perfect for music enthusiasts, trivia players, and anyone looking to discover classic hits from different musical eras.`;

// const optimizedDescription = generateMetaDescription(enrichedContent, 158); // Removed - function no longer exists
// const keywords = extractKeywords(enrichedContent, 12, lang); // Removed - function no longer exists
const optimizedDescription =
  enrichedContent.substring(0, 158) + (enrichedContent.length > 158 ? "..." : "");
const keywords = "music playlists, music history, classic hits, music discovery, music trivia";

// SEO-optimized URL and canonical setup
const baseUrl = Astro.site?.toString() || "https://melody-mind.de";
const currentUrl = `${baseUrl}/${lang}/playlists`;

// Enhanced structured data for playlist collection (static dates)
const publishDate = normalizeDate("2024-01-01");
const modifiedDate = new Date();
const playlistCollectionSchema = {
  "@type": "ItemList",
  name: `${title} | Melody Mind`,
  description: optimizedDescription,
  url: currentUrl,
  numberOfItems: playlistCount,
  datePublished: publishDate.toISOString(),
  dateModified: modifiedDate.toISOString(),
  itemListOrder: "chronological",
  itemListElement: sortedPlaylists.slice(0, 10).map((playlist, index) => ({
    "@type": "MusicPlaylist",
    position: index + 1,
    name: playlist.headline,
    description: playlist.introSubline || playlist.headline,
    url: `${currentUrl}#playlist-${index}`,
    genre: getDecadeFromHeadline(playlist.headline),
    inLanguage: lang,
    creator: { "@type": "Organization", name: "Melody Mind" },
  })),
};
// Additional generic category schema for playlists
const categoryItemListSchema = buildCategoryItemListSchema({
  categories: sortedPlaylists.map((p: Playlist) => ({
    slug: p.headline.toLowerCase().replace(/[^a-z0-9]+/g, "-"),
    title: p.headline,
    description: p.introSubline,
  })),
  baseUrl,
  lang,
  name: "Playlists",
  description: "All music playlists",
  pathPrefix: "playlists",
  limit: 60,
});
const breadcrumbs = [
  { name: t("nav.home"), url: `${baseUrl}/${lang}` },
  { name: title, url: currentUrl },
];
const structuredDataExtra = [playlistCollectionSchema, categoryItemListSchema].filter(Boolean);

// (Derived publish/modified removed; using static publishDate/modifiedDate above)
---

<!-- OG image: playlists overview -->
<Layout
  {title}
  description={optimizedDescription}
  {keywords}
  image="/homecategories/playlist.png"
  imageWidth={1200}
  imageHeight={630}
  type="website"
  {publishDate}
  {modifiedDate}
  canonical={currentUrl}
  {breadcrumbs}
  {structuredDataExtra}
>
  <Fragment slot="head"></Fragment>

  <main class="min-h-screen bg-gray-900 py-8 text-white">
    <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
      <!-- Hero section -->
      <section
        class="relative mb-16 overflow-hidden rounded-3xl border border-purple-500/30 bg-gradient-to-br from-purple-900 via-blue-800 to-gray-900 p-8 shadow-2xl sm:p-12 lg:p-16"
        aria-labelledby="playlist-heading"
      >
        <!-- Decorative background elements -->
        <div class="pointer-events-none absolute inset-0 opacity-10" aria-hidden="true">
          <div class="absolute -top-8 -right-8 h-32 w-32 rounded-full bg-white"></div>
          <div class="absolute -bottom-8 -left-8 h-24 w-24 rounded-full bg-white"></div>
          <div class="absolute top-1/2 right-4 h-16 w-16 rounded-full bg-white"></div>
        </div>

        <div class="relative z-10 w-full text-center text-white">
          <Headline level="h1" textSize="3xl" textAlign="center">
            {t("playlist.page.heading")}
          </Headline>
          <div class="mx-auto my-8 h-1 w-12 rounded-full bg-blue-400"></div>
          <Paragraph textAlign="center" textSize="lg">
            {t("playlist.page.description")}
          </Paragraph>
        </div>
      </section>

      <!-- Enhanced Search Section - Much Wider & Better Looking -->
      <section class="mb-16" aria-labelledby="search-heading">
        <div class="mx-auto w-full max-w-7xl px-4 sm:px-6 lg:px-8">
          <div class="mb-10 text-center">
            <Headline level="h2" textSize="2xl" textAlign="center">
              {t("playlist.search.heading") || "Playlists durchsuchen"}
            </Headline>
            <Paragraph textAlign="center" textSize="lg">
              Finde deine Lieblingsmusik nach Künstler, Stil, Epoche oder Genre
            </Paragraph>
          </div>
          <SearchPanel
            idBase="playlist-search"
            label={t("playlist.search.aria.label") || "Musik-Playlists durchsuchen"}
            placeholder={t("playlist.search.placeholder") || "Suchen nach Künstler oder Stil..."}
            ariaControls="playlist-grid"
            size="lg"
          />
        </div>
      </section>

      <!-- Enhanced Playlist Grid with semantic markup and microdata -->
      <section aria-labelledby="playlists-heading" itemscope itemtype="https://schema.org/ItemList">
        <Headline level="h2" textSize="base" className="sr-only">
          {t("playlist.grid.heading", { count: playlistCount })}
        </Headline>

        <meta itemprop="name" content={`${title} Collection`} />
        <meta itemprop="numberOfItems" content={String(sortedPlaylists.length)} />
        <meta itemprop="datePublished" content={publishDate.toISOString()} />
        <meta itemprop="dateModified" content={modifiedDate.toISOString()} />
        <div
          class="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3"
          id="playlist-grid"
          itemprop="itemListElement"
        >
          {
            sortedPlaylists.map((playlist, index) => (
              <div
                class="playlist-item"
                itemscope
                itemtype="https://schema.org/ListItem"
                data-search-text={`${playlist.headline} ${playlist.introSubline || ""} ${playlist.categoryType || ""}`.toLowerCase()}
              >
                <meta itemprop="position" content={String(index + 1)} />
                <div
                  itemscope
                  itemprop="item"
                  itemtype="https://schema.org/MusicPlaylist"
                  class="overflow-hidden rounded-2xl border border-gray-700 bg-gray-800 shadow-lg transition-all duration-300 hover:-translate-y-1 hover:shadow-xl"
                >
                  <meta itemprop="name" content={playlist.headline} />
                  <meta
                    itemprop="description"
                    content={playlist.introSubline || playlist.headline}
                  />
                  <meta
                    itemprop="genre"
                    content={playlist.categoryType || getDecadeFromHeadline(playlist.headline)}
                  />
                  <meta itemprop="inLanguage" content={lang} />
                  <PlaylistCard
                    headline={playlist.headline}
                    imageUrl={playlist.imageUrl}
                    introSubline={playlist.introSubline}
                    spotifyPlaylist={playlist.spotifyPlaylist}
                    deezerPlaylist={playlist.deezerPlaylist}
                    appleMusicPlaylist={playlist.appleMusicPlaylist}
                    index={index}
                    lang={lang}
                  />
                </div>
              </div>
            ))
          }
        </div>
      </section>
    </div>
  </main>

  <!-- Back to Top Button -->
  <BackToTop {lang} />
</Layout>

<script>
  import { initSearchPanel } from "@components/Search/initSearchPanel";
  (function (): void {
    function start(): void {
      initSearchPanel({
        idBase: "playlist-search",
        itemSelector: ".playlist-item",
        debounceMs: 200,
      });
    }
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", start);
    } else {
      start();
    }
  })();
</script>
