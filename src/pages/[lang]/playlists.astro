---
import Layout from "@layouts/Layout.astro";
import { useTranslations } from "@utils/i18n";
import Headline from "@components/Headline.astro";
import Paragraph from "@components/Paragraph.astro";
import PlaylistCard from "@components/PlaylistCard.astro";
import HeroSection from "@components/HeroSection.astro";
import StructuredItemList from "@components/StructuredItemList.astro";
import BackToTop from "@components/Shared/BackToTop.astro";
import SearchPanel from "@components/Search/SearchPanel.astro";
import { buildCategoryItemListSchema } from "@utils/seo/seoSchema";
import { buildCollectionWithItemListSchema } from "../../utils/seo/collectionSchema";
import { buildBreadcrumbs } from "@utils/seo";
import { normalizeDate } from "@utils/content/dateUtils";
import { createSlug } from "@utils/seo";
import { getBaseUrl } from "../../utils/url/baseUrl";
import { buildPageSeo } from "../../utils/seo/buildPageSeo";

// import { extractKeywords, generateMetaDescription } from "@utils/seo"; // Removed unused import

/**
 * Enable static site generation for all supported languages.
 */
export const prerender = true;

/**
 * Define supported languages and generate static paths for each language.
 */
export async function getStaticPaths() {
  const { buildLangStaticPathsWithProps } = await import("../../utils/i18n/staticPaths");
  return buildLangStaticPathsWithProps(async (lang: any) => {
    try {
      const playlistData = await import(`../../../public/json/playlist/${lang}_playlist.json`);
      return { playlists: playlistData.default };
    } catch {
      try {
        console.warn(`No playlist data found for ${lang}, falling back to English`);
        const fallbackData = await import(`../../../public/json/playlist/en_playlist.json`);
        return { playlists: fallbackData.default };
      } catch (fallbackError) {
        console.error(`Error loading playlist data for ${lang}:`, fallbackError);
        return { playlists: [] };
      }
    }
  });
}

const { lang } = Astro.params;
const { playlists } = Astro.props;
const t = useTranslations(lang);

/**
 * Interface for playlist data structure
 */
interface Playlist {
  headline: string;
  imageUrl: string;
  introSubline: string;
  spotifyPlaylist: string;
  deezerPlaylist: string;
  appleMusicPlaylist: string;
  categoryType?: string;
}

// Helper function for decade extraction (moved up)
function getDecadeFromHeadline(headline: string): string {
  const yearMatch = headline.match(/\b(\d{4})\b/);
  if (yearMatch) {
    return `${yearMatch[1].substring(0, 3)}0s`;
  }
  return "Other";
}

// Sort playlists chronologically (moved up)
const sortedPlaylists = [...playlists].sort((a: Playlist, b: Playlist) => {
  const decadeA = getDecadeFromHeadline(a.headline);
  const decadeB = getDecadeFromHeadline(b.headline);
  return decadeA.localeCompare(decadeB, undefined, { sensitivity: "base" });
});

// Enhanced SEO content generation with more detailed information
const title = t("playlist.page.heading");
const description = t("playlist.page.description");

// Create enriched content for better SEO by including playlist information
const playlistDecades = [
  ...new Set(playlists.map((p: Playlist) => getDecadeFromHeadline(p.headline))),
].join(", ");
const playlistCount = playlists.length;
const enrichedParts = [
  `Explore ${playlistCount} carefully curated music playlists spanning decades including ${playlistDecades}.`,
  "Each playlist features authentic tracks from legendary artists and iconic albums.",
  "Perfect for music enthusiasts, trivia players, and discovery of classic hits.",
];
const pageSeo = buildPageSeo({
  title: `${title} - Melody Mind`,
  description,
  enrichedParts,
  language: lang,
  keywordLimit: 14,
  fallbackKeywords: ["music", "playlist", "decades"],
  maxDescription: 158,
  url: `${getBaseUrl(Astro.site, "https://melody-mind.de")}/${lang}/playlists`,
  contentKind: "playlist",
});
const optimizedDescription = pageSeo.description;

// SEO-optimized URL and canonical setup
const baseUrl = getBaseUrl(Astro.site, "https://melody-mind.de");
const currentUrl = pageSeo.canonical;

// Enhanced structured data for playlist collection (static dates)
const publishDate: Date = normalizeDate("2024-01-01")!; // normalizeDate expected to return Date
const modifiedDate = new Date();
const playlistCollectionSchema = buildCollectionWithItemListSchema({
  pageName: `${title} | Melody Mind`,
  description: optimizedDescription,
  url: currentUrl,
  inLanguage: lang,
  siteName: "Melody Mind",
  siteUrl: baseUrl,
  itemTypeDefault: "MusicPlaylist",
  items: sortedPlaylists.map((playlist, index) => ({
    position: index + 1,
    url: `${currentUrl}#playlist-${index}`,
    name: playlist.headline,
    description: playlist.introSubline || playlist.headline,
    genre: getDecadeFromHeadline(playlist.headline),
    about: "Music Playlist",
    authorName: "Melody Mind",
    publisherName: "Melody Mind",
  })),
  limit: 10,
});
// Additional generic category schema for playlists
const categoryItemListSchema = buildCategoryItemListSchema({
  categories: sortedPlaylists.map((p: Playlist) => ({
    slug: createSlug(p.headline),
    title: p.headline,
    description: p.introSubline,
  })),
  baseUrl,
  lang,
  name: "Playlists",
  description: "All music playlists",
  pathPrefix: "playlists",
  limit: 60,
});
const breadcrumbs = buildBreadcrumbs([
  { name: t("nav.home"), url: `${baseUrl}/${lang}` },
  { name: title, url: currentUrl },
]);
const structuredDataExtra = [playlistCollectionSchema, categoryItemListSchema].filter(Boolean);

// (Derived publish/modified removed; using static publishDate/modifiedDate above)
---

<!-- OG image: playlists overview -->
<Layout
  pageSeo={{
    ...pageSeo,
    structuredData: (structuredDataExtra || []).filter(Boolean) as Record<string, unknown>[],
    publishDate,
    modifiedDate,
  }}
  {breadcrumbs}
>
  <Fragment slot="head"></Fragment>

  <main class="min-h-screen bg-gray-900 py-8 text-white">
    <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
      <HeroSection
        title={t("playlist.page.heading")}
        subtitle={t("playlist.page.description")}
        headingLevel="h1"
        id="playlist-heading"
      />

      <!-- Enhanced Search Section - Much Wider & Better Looking -->
      <section class="mb-16" aria-labelledby="search-heading">
        <div class="mx-auto w-full max-w-7xl px-4 sm:px-6 lg:px-8">
          <div class="mb-10 text-center">
            <Headline level="h2" textSize="2xl" textAlign="center">
              {t("playlist.search.heading") || "Playlists durchsuchen"}
            </Headline>
            <Paragraph textAlign="center" textSize="lg">
              Finde deine Lieblingsmusik nach Künstler, Stil, Epoche oder Genre
            </Paragraph>
          </div>
          <SearchPanel
            idBase="playlist-search"
            label={t("playlist.search.aria.label") || "Musik-Playlists durchsuchen"}
            placeholder={t("playlist.search.placeholder") || "Suchen nach Künstler oder Stil..."}
            ariaControls="playlist-grid"
            size="lg"
          />
        </div>
      </section>

      <section aria-labelledby="playlists-heading">
        <Headline level="h2" textSize="base" className="sr-only">
          {t("playlist.grid.heading", { count: playlistCount })}
        </Headline>
        <StructuredItemList
          items={sortedPlaylists}
          listName={`${title} Collection`}
          itemType="MusicPlaylist"
          {lang}
          includeCreator={true}
          containerId="playlist-grid"
          listItemClass="playlist-item"
          getName={(p) => p.headline}
          getDescription={(p) => p.introSubline || p.headline}
          getGenre={(p) => p.categoryType || getDecadeFromHeadline(p.headline)}
          cardComponent={PlaylistCard}
          mapItemToCardProps={(item, index) => ({
            headline: item.headline,
            imageUrl: item.imageUrl,
            introSubline: item.introSubline,
            spotifyPlaylist: item.spotifyPlaylist,
            deezerPlaylist: item.deezerPlaylist,
            appleMusicPlaylist: item.appleMusicPlaylist,
            index,
            lang,
            microdataDisable: true,
          })}
        />
      </section>
    </div>
  </main>

  <!-- Back to Top Button -->
  <BackToTop {lang} />
</Layout>

<script>
  import { initSearchPanel } from "@components/Search/initSearchPanel";
  (function (): void {
    function start(): void {
      initSearchPanel({
        idBase: "playlist-search",
        itemSelector: ".playlist-item",
        debounceMs: 200,
      });
    }
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", start);
    } else {
      start();
    }
  })();
</script>
