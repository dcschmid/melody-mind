---
import Layout from "@layouts/Layout.astro";
import { useTranslations } from "@utils/i18n";
import Headline from "@components/Headline.astro";
import Paragraph from "@components/Paragraph.astro";
import PlaylistCard from "@components/PlaylistCard.astro";
import BackToTop from "@components/Shared/BackToTop.astro";
import { Icon } from "astro-icon/components";
import { extractKeywords, generateMetaDescription } from "@utils/seo";

/**
 * Enable static site generation for all supported languages.
 */
export const prerender = true;

/**
 * Define supported languages and generate static paths for each language.
 */
export async function getStaticPaths() {
  const supportedLanguages = ["de", "en", "es", "fr", "it", "pt", "da", "nl", "sv", "fi"] as const;

  const allLanguageDataPromises = supportedLanguages.map(async (lang) => {
    try {
      const playlistData = await import(`../../../public/json/playlist/${lang}_playlist.json`);
      return { lang, playlists: playlistData.default };
    } catch {
      try {
        console.warn(`No playlist data found for ${lang}, falling back to English`);
        const fallbackData = await import(`../../../public/json/playlist/en_playlist.json`);
        return { lang, playlists: fallbackData.default };
      } catch (fallbackError) {
        console.error(`Error loading playlist data for ${lang}:`, fallbackError);
        return { lang, playlists: [] };
      }
    }
  });

  const languageData = await Promise.all(allLanguageDataPromises);
  const paths = languageData.map(({ lang, playlists }) => ({
    params: { lang },
    props: { playlists },
  }));

  return paths;
}

const { lang } = Astro.params;
const { playlists } = Astro.props;
const t = useTranslations(lang);

/**
 * Interface for playlist data structure
 */
interface Playlist {
  headline: string;
  imageUrl: string;
  introSubline: string;
  spotifyPlaylist: string;
  deezerPlaylist: string;
  appleMusicPlaylist: string;
}

// Helper function for decade extraction (moved up)
function getDecadeFromHeadline(headline: string): string {
  const yearMatch = headline.match(/\b(\d{4})\b/);
  if (yearMatch) {
    return `${yearMatch[1].substring(0, 3)}0s`;
  }
  return "Other";
}

// Sort playlists chronologically (moved up)
const sortedPlaylists = [...playlists].sort((a: Playlist, b: Playlist) => {
  const decadeA = getDecadeFromHeadline(a.headline);
  const decadeB = getDecadeFromHeadline(b.headline);
  return decadeA.localeCompare(decadeB, undefined, { sensitivity: "base" });
});

// Enhanced SEO content generation with more detailed information
const title = t("playlist.page.heading") || "Music Playlists Collection";
const description =
  t("playlist.page.description") ||
  "Discover curated music playlists across different decades and genres.";

// Create enriched content for better SEO by including playlist information
const playlistDecades = [
  ...new Set(playlists.map((p: Playlist) => getDecadeFromHeadline(p.headline))),
].join(", ");
const playlistCount = playlists.length;
const enrichedContent = `${title} ${description} Explore ${playlistCount} carefully curated music playlists spanning decades including ${playlistDecades}. Each playlist features authentic tracks from legendary artists and iconic albums. Perfect for music enthusiasts, trivia players, and anyone looking to discover classic hits from different musical eras.`;

const optimizedDescription = generateMetaDescription(enrichedContent, 158);
const keywords = extractKeywords(enrichedContent, 12, lang);

// SEO-optimized URL and canonical setup
const baseUrl = Astro.site?.toString() || "https://melody-mind.de";
const currentUrl = `${baseUrl}/${lang}/playlists`;

// Enhanced structured data for playlist collection
const playlistCollectionSchema = {
  "@context": "https://schema.org",
  "@type": "ItemList",
  name: `${title} | Melody Mind`,
  description: optimizedDescription,
  url: currentUrl,
  numberOfItems: playlistCount,
  itemListOrder: "chronological",
  itemListElement: sortedPlaylists.slice(0, 10).map((playlist, index) => ({
    "@type": "MusicPlaylist",
    position: index + 1,
    name: playlist.headline,
    description: playlist.introSubline || playlist.headline,
    url: `${currentUrl}#playlist-${index}`,
    genre: getDecadeFromHeadline(playlist.headline),
    inLanguage: lang,
    creator: {
      "@type": "Organization",
      name: "Melody Mind",
    },
  })),
};

// Breadcrumb structured data for better navigation SEO
const breadcrumbSchema = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  itemListElement: [
    {
      "@type": "ListItem",
      position: 1,
      name: t("nav.home"),
      item: `${baseUrl}/${lang}/`,
    },
    {
      "@type": "ListItem",
      position: 2,
      name: title,
      item: currentUrl,
    },
  ],
};
---

<Layout
  {title}
  description={optimizedDescription}
  {keywords}
  image={`/og-images/social-share-playlist-${lang}.jpg`}
  type="website"
  publishDate={new Date()}
  modifiedDate={new Date()}
>
  <!-- Enhanced SEO structured data -->
  <Fragment slot="head">
    <script type="application/ld+json" set:html={JSON.stringify(playlistCollectionSchema)} />
    <script type="application/ld+json" set:html={JSON.stringify(breadcrumbSchema)} />
    <meta name="robots" content="index, follow, max-image-preview:large" />
    <meta name="googlebot" content="index, follow" />
    <link rel="canonical" href={currentUrl} />

    <!-- Additional SEO meta tags -->
    <meta name="author" content="Melody Mind Team" />
    <meta property="og:type" content="website" />
    <meta property="og:locale" content={`${lang}_${lang.toUpperCase()}`} />
    <meta property="article:section" content="Music" />
    <meta property="article:tag" content="Music Playlists" />
    <meta property="article:tag" content="Music History" />
    <meta property="article:tag" content="Music Discovery" />

    <!-- Music-specific meta tags -->
    <meta name="music:genre" content="Various" />
    <meta name="music:playlist_count" content={playlistCount.toString()} />
    <meta name="music:decades" content={playlistDecades} />

    <!-- Enhanced Open Graph for better social sharing -->
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:image:type" content="image/jpeg" />

    <!-- Twitter Card enhancements -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@melodymind" />
    <meta name="twitter:creator" content="@melodymind" />
  </Fragment>

  <div class="playlist-container">
    <!-- Breadcrumb Navigation for SEO -->
    <nav aria-label="Breadcrumb" class="breadcrumb-nav">
      <ol class="breadcrumb-list" itemscope itemtype="https://schema.org/BreadcrumbList">
        <li
          class="breadcrumb-item"
          itemprop="itemListElement"
          itemscope
          itemtype="https://schema.org/ListItem"
        >
          <a href={`/${lang}/`} itemprop="item" class="breadcrumb-link">
            <Icon name="home" class="breadcrumb-icon" aria-hidden="true" />
            <span itemprop="name" class="sr-only">{t("nav.home") || "Home"}</span>
          </a>
          <meta itemprop="position" content="1" />
        </li>
        <li
          class="breadcrumb-item"
          itemprop="itemListElement"
          itemscope
          itemtype="https://schema.org/ListItem"
          aria-current="page"
        >
          <span itemprop="name">{title}</span>
          <meta itemprop="position" content="2" />
        </li>
      </ol>
    </nav>
    <!-- Hero section -->
    <section class="playlist-hero" aria-labelledby="playlist-heading">
      <div class="playlist-hero__decoration" aria-hidden="true">
        <div class="playlist-hero__decoration-item playlist-hero__decoration-item--top-right"></div>
        <div class="playlist-hero__decoration-item playlist-hero__decoration-item--bottom-left">
        </div>
        <div class="playlist-hero__decoration-item playlist-hero__decoration-item--center-right">
        </div>
      </div>

      <div class="playlist-hero__content">
        <Headline
          title={t("playlist.page.heading")}
          level="h1"
          size="4xl"
          className="playlist-hero__title"
        />
        <div class="playlist-hero__divider" aria-hidden="true"></div>
        <Paragraph className="playlist-hero__description" align="center">
          {t("playlist.page.description")}
        </Paragraph>
      </div>
    </section>

    <main class="playlist-selection" role="main">
      <!-- Search input with improved accessibility -->
      <section class="search-section" role="search" aria-labelledby="search-heading">
        <Headline
          title={t("playlist.search.heading")}
          level="h2"
          size="base"
          className="sr-only"
          id="search-heading"
        />
        <div class="search-container">
          <div class="search-container__icon" aria-hidden="true">
            <Icon name="search" class="search-container__icon-element" />
          </div>
          <label for="playlist-search" class="sr-only">
            {t("playlist.search.aria.label")}
          </label>
          <input
            class="search-container__input"
            type="search"
            id="playlist-search"
            placeholder={t("playlist.search.placeholder")}
            aria-label={t("playlist.search.aria.label")}
            autocomplete="off"
          />
        </div>
      </section>

      <!-- No results message with improved accessibility -->
      <div id="no-results" class="no-results" role="status" aria-live="polite">
        <Headline
          title={t("playlist.no.results.heading")}
          level="h3"
          size="2xl"
          className="no-results__heading"
        />
        <Paragraph className="no-results__text">
          {t("playlist.no.results")}
        </Paragraph>
        <button id="reset-search" class="no-results__button">
          {t("playlist.reset.search")}
        </button>
      </div>

      <!-- Enhanced Playlist Grid with semantic markup and microdata -->
      <section aria-labelledby="playlists-heading">
        <Headline
          title={t("playlist.grid.heading", { count: playlistCount })}
          level="h2"
          size="base"
          className="sr-only"
          id="playlists-heading"
        />
        <ul id="playlist-grid" class="playlist-grid">
          {
            sortedPlaylists.map((playlist, index) => (
              <li
                class="playlist-card"
                id={`playlist-${index}`}
                data-searchable={`${playlist.headline.toLowerCase()} ${playlist.introSubline.toLowerCase()}`}
                data-decade={getDecadeFromHeadline(playlist.headline)}
                itemscope
                itemtype="https://schema.org/MusicPlaylist"
              >
                <meta itemprop="name" content={playlist.headline} />
                <meta itemprop="description" content={playlist.introSubline || playlist.headline} />
                <meta itemprop="genre" content={getDecadeFromHeadline(playlist.headline)} />
                <meta itemprop="inLanguage" content={lang} />
                <PlaylistCard
                  headline={playlist.headline}
                  imageUrl={playlist.imageUrl}
                  introSubline={playlist.introSubline}
                  spotifyPlaylist={playlist.spotifyPlaylist}
                  deezerPlaylist={playlist.deezerPlaylist}
                  appleMusicPlaylist={playlist.appleMusicPlaylist}
                  index={index}
                  lang={lang}
                />
              </li>
            ))
          }
        </ul>
      </section>
    </main>
  </div>

  <!-- Back to Top Button -->
  <BackToTop {lang} />
</Layout>

<style>
  /* Container Layout */
  .playlist-container {
    width: 100%;
    max-width: var(--container-xl);
    margin: 0 auto;
    padding: var(--space-md) var(--space-sm);

    /* Prevent horizontal overflow on small screens */
    overflow-x: hidden;
    box-sizing: border-box;
  }

  @media (min-width: 640px) {
    .playlist-container {
      padding: var(--space-lg) var(--space-md);
    }
  }

  @media (min-width: 768px) {
    .playlist-container {
      padding: var(--space-xl) var(--space-lg);
    }
  }

  /* Breadcrumb Navigation */
  .breadcrumb-nav {
    margin-bottom: var(--space-lg);
  }

  .breadcrumb-list {
    display: flex;
    align-items: center;
    gap: var(--space-sm);
    margin: 0;
    padding: 0;
    list-style: none;
    font-size: var(--text-sm);
    color: var(--text-secondary);
  }

  .breadcrumb-item {
    display: flex;
    align-items: center;
  }

  .breadcrumb-item:not(:last-child)::after {
    content: "›";
    margin-left: var(--space-sm);
    color: var(--text-tertiary);
    font-weight: var(--font-medium);
  }

  .breadcrumb-link {
    display: inline-flex;
    align-items: center;
    color: var(--interactive-primary);
    text-decoration: none;
    transition: color var(--transition-fast);
  }

  .breadcrumb-link:hover,
  .breadcrumb-link:focus {
    color: var(--interactive-primary-hover);
    text-decoration: underline;
  }

  .breadcrumb-icon {
    width: var(--icon-size-sm);
    height: var(--icon-size-sm);
  }

  /* Hero Section */
  .playlist-hero {
    position: relative;
    margin-bottom: var(--space-xl);
    overflow: hidden;
    border-radius: var(--radius-lg);
    background: linear-gradient(
      135deg,
      var(--color-primary-800) 0%,
      var(--color-primary-900) 50%,
      var(--color-neutral-900) 100%
    );
    padding: var(--space-lg);
    box-shadow: var(--shadow-xl);
  }

  @media (min-width: 768px) {
    .playlist-hero {
      margin-bottom: var(--space-2xl);
      border-radius: var(--radius-xl);
      padding: var(--space-xl);
    }
  }

  /* Responsive Hero Section padding */
  @media (max-width: 767px) {
    .playlist-hero {
      padding: var(--space-md);
      margin-bottom: var(--space-lg);
      border-radius: var(--radius-lg);
    }
  }

  .playlist-hero__decoration {
    position: absolute;
    inset: 0;
    opacity: 0.1;
    pointer-events: none;
  }

  .playlist-hero__decoration-item {
    position: absolute;
    border-radius: var(--radius-full);
  }

  .playlist-hero__decoration-item--top-right {
    top: calc(-1 * var(--space-xl));
    right: calc(-1 * var(--space-xl));
    width: var(--space-3xl);
    height: var(--space-3xl);
    background-color: var(--color-primary-500);
  }

  .playlist-hero__decoration-item--bottom-left {
    bottom: var(--space-md);
    left: var(--space-md);
    width: var(--space-2xl);
    height: var(--space-2xl);
    background-color: var(--color-secondary-500);
  }

  .playlist-hero__decoration-item--center-right {
    top: 50%;
    right: var(--space-lg);
    transform: translateY(-50%);
    width: var(--space-lg);
    height: var(--space-lg);
    background-color: var(--color-primary-400);
  }

  .playlist-hero__content {
    position: relative;
    z-index: var(--z-fixed);
    text-align: center;
    color: var(--color-neutral-100);
  }

  .playlist-hero__title {
    margin-bottom: var(--space-md);
    font-size: var(--text-4xl);
    line-height: var(--leading-tight);
    font-weight: var(--font-bold);
    text-align: center;
  }

  .playlist-hero__divider {
    margin: var(--space-lg) auto;
    height: var(--border-width-thick);
    width: var(--space-3xl);
    border-radius: var(--radius-full);
    background: var(--color-secondary-400);
  }

  .playlist-hero__description {
    margin: 0 auto;
    max-width: var(--container-sm);
    font-size: var(--text-xl);
    line-height: var(--leading-relaxed);
    opacity: 0.9;
    text-align: center;
  }

  /* Search Container */
  .search-section {
    margin-bottom: var(--space-xl);
  }

  .search-container {
    position: relative;
    margin: 0 auto;
    max-width: var(--container-sm);
    display: flex;
    align-items: center;
    border-radius: var(--radius-full);
    background-color: var(--bg-secondary);
    box-shadow: var(--shadow-lg);
    transition: box-shadow var(--transition-base);
  }

  .search-container:focus-within {
    box-shadow: var(--shadow-xl);
  }

  .search-container__icon {
    position: absolute;
    left: var(--space-lg);
    z-index: var(--z-10);
    color: var(--text-tertiary);
    transition: color var(--transition-fast);
  }

  .search-container:focus-within .search-container__icon {
    color: var(--interactive-primary);
  }

  .search-container__icon-element {
    width: var(--icon-size-lg);
    height: var(--icon-size-lg);
  }

  .search-container__input {
    width: 100%;
    min-width: 0; /* Prevent input from overflowing */
    max-width: 100%; /* Ensure input doesn't exceed container */
    padding: var(--space-lg) var(--space-lg) var(--space-lg)
      calc(var(--space-3xl) + var(--space-sm));
    border: none;
    border-radius: var(--radius-full);
    background-color: transparent;
    color: var(--text-primary);
    font-size: var(--text-lg);
    transition: all var(--transition-base);
    box-sizing: border-box; /* Include padding in width calculation */
    /* Additional mobile-friendly constraints */
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .search-container__input::placeholder {
    color: var(--text-tertiary);
  }

  .search-container__input:focus {
    outline: none;
  }

  /* Mobile-specific search container optimizations */
  @media (max-width: 480px) {
    .search-container {
      max-width: 100%;
      margin: 0 var(--space-xs);
    }

    .search-container__input {
      font-size: var(--text-base);
      padding: var(--space-md) var(--space-md) var(--space-md)
        calc(var(--space-2xl) + var(--space-sm));
    }

    .search-container__icon {
      left: var(--space-md);
    }
  }

  /* ======================================
   * PLAYLIST GRID - Responsive Auto-Fill Pattern (Aligned with GameHome)
   * ====================================== */
  .playlist-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(var(--grid-min-width-md), 1fr));
    gap: var(--space-lg);
    margin: var(--space-lg) auto;
    width: 100%;
    list-style: none;
    padding: 0;

    /* Performance optimizations */
    contain: layout style;
  }

  @media (min-width: 640px) {
    .playlist-grid {
      grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
      gap: var(--space-xl);
    }
  }

  /* Playlist Cards */
  .playlist-card {
    transition:
      transform var(--transition-base),
      box-shadow var(--transition-base);
  }

  .playlist-card:hover,
  .playlist-card:focus-within {
    transform: translateY(calc(-1 * var(--space-xs)));
    box-shadow: var(--shadow-xl);
  }

  /* No Results */
  .no-results {
    display: none;
    text-align: center;
    padding: var(--space-2xl);
    color: var(--text-secondary);
  }

  .no-results.show {
    display: block;
  }

  .no-results__heading {
    margin-bottom: var(--space-md);
    font-size: var(--text-2xl);
    font-weight: var(--font-semibold);
    color: var(--text-primary);
  }

  .no-results__text {
    margin-bottom: var(--space-lg);
    font-size: var(--text-lg);
  }

  .no-results__button {
    padding: var(--space-md) var(--space-lg);
    border: none;
    border-radius: var(--radius-lg);
    background-color: var(--interactive-primary);
    color: var(--color-neutral-100);
    font-size: var(--text-base);
    font-weight: var(--font-medium);
    cursor: pointer;
    transition: all var(--transition-base);
  }

  .no-results__button:hover,
  .no-results__button:focus {
    background-color: var(--interactive-primary-hover);
    transform: translateY(calc(-1 * var(--space-xs)));
  }

  /* Utility Classes */
  :focus {
    outline: var(--focus-outline);
    outline-offset: var(--focus-ring-offset);
  }

  :focus:not(:focus-visible) {
    outline: none;
  }

  :focus-visible {
    outline: var(--focus-outline);
    outline-offset: var(--focus-ring-offset);
  }
</style>

<script>
  // Global timeout management with proper typing
  interface WindowWithTimeouts extends Window {
    searchTimeout?: number;
    filterTimeout?: number;
  }

  declare const window: WindowWithTimeouts;

  document.addEventListener("DOMContentLoaded", function () {
    const searchInput = document.getElementById("playlist-search") as HTMLInputElement | null;
    const playlistCards = document.querySelectorAll(".playlist-card");
    const noResultsElement = document.getElementById("no-results") as HTMLElement | null;
    const resetButton = document.getElementById("reset-search") as HTMLButtonElement | null;
    const playlistGrid = document.getElementById("playlist-grid") as HTMLElement | null;

    /**
     * Announces search results to screen readers for accessibility
     */
    function announceSearchResults(visibleCount: number, searchTerm: string): void {
      const announcement = document.createElement("div");
      announcement.setAttribute("aria-live", "polite");
      announcement.setAttribute("aria-atomic", "true");
      announcement.className = "sr-only";

      if (searchTerm === "") {
        announcement.textContent = `Showing all ${playlistCards.length} playlists`;
      } else if (visibleCount === 0) {
        announcement.textContent = `No playlists found for "${searchTerm}"`;
      } else {
        announcement.textContent = `Found ${visibleCount} playlist${visibleCount === 1 ? "" : "s"} for "${searchTerm}"`;
      }

      document.body.appendChild(announcement);
      setTimeout(() => document.body.removeChild(announcement), 1000);
    }

    /**
     * Updates the browser URL with search parameters
     */
    function updateSearchUrl(searchTerm: string, visibleCount: number): void {
      if (searchTerm && visibleCount > 0) {
        const url = new URL(window.location.href);
        url.searchParams.set("search", searchTerm);
        window.history.replaceState(null, "", url.toString());
      } else if (!searchTerm) {
        const url = new URL(window.location.href);
        url.searchParams.delete("search");
        window.history.replaceState(null, "", url.toString());
      }
    }

    /**
     * Filters playlist cards based on search term
     */
    function filterPlaylists(): void {
      if (!searchInput) {
        return;
      }

      const searchTerm = searchInput.value.toLowerCase().trim();
      let visibleCount = 0;

      playlistCards.forEach((card) => {
        const element = card as HTMLElement;
        const searchableText = element.getAttribute("data-searchable") || "";
        const decade = element.getAttribute("data-decade") || "";
        const isVisible =
          searchableText.includes(searchTerm) || decade.toLowerCase().includes(searchTerm);

        element.style.display = isVisible ? "" : "none";
        if (isVisible) {
          visibleCount++;
        }
      });

      if (playlistGrid) {
        playlistGrid.setAttribute("aria-busy", "false");
      }

      if (noResultsElement) {
        const shouldShow = visibleCount === 0 && searchTerm !== "";
        noResultsElement.classList.toggle("show", shouldShow);
        if (shouldShow) {
          noResultsElement.focus();
        }
      }

      // Debounced announcement and URL update
      if (window.searchTimeout) {
        clearTimeout(window.searchTimeout);
      }
      window.searchTimeout = window.setTimeout(() => {
        announceSearchResults(visibleCount, searchTerm);
      }, 500);

      updateSearchUrl(searchTerm, visibleCount);
    }

    /**
     * Sets up search input event listeners
     */
    function setupSearchListeners(): void {
      if (!searchInput) {
        return;
      }

      searchInput.addEventListener("input", () => {
        if (playlistGrid) {
          playlistGrid.setAttribute("aria-busy", "true");
        }

        if (window.filterTimeout) {
          clearTimeout(window.filterTimeout);
        }
        window.filterTimeout = window.setTimeout(filterPlaylists, 200);
      });

      searchInput.addEventListener("keydown", (e: KeyboardEvent) => {
        if (e.key === "Escape") {
          searchInput.value = "";
          filterPlaylists();
          searchInput.blur();
        }
      });

      searchInput.addEventListener("focus", () => {
        searchInput.setAttribute("aria-expanded", "true");
      });

      searchInput.addEventListener("blur", () => {
        searchInput.setAttribute("aria-expanded", "false");
      });
    }

    /**
     * Sets up keyboard navigation and reset button
     */
    function setupAdditionalListeners(): void {
      if (resetButton) {
        resetButton.addEventListener("click", () => {
          if (searchInput) {
            searchInput.value = "";
            searchInput.focus();
          }
          filterPlaylists();
        });
      }

      document.addEventListener("keydown", (e: KeyboardEvent) => {
        if (e.altKey && e.key === "/") {
          e.preventDefault();
          if (searchInput) {
            searchInput.focus();
          }
        }
      });
    }

    /**
     * Sets up intersection observer for card animations
     */
    function setupIntersectionObserver(): void {
      const observerOptions = {
        root: null,
        rootMargin: "50px",
        threshold: 0.1,
      };

      const cardObserver = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("in-view");
          }
        });
      }, observerOptions);

      playlistCards.forEach((card) => cardObserver.observe(card));
    }

    // Initialize search from URL parameter
    const urlParams = new URLSearchParams(window.location.search);
    const initialSearch = urlParams.get("search");
    if (initialSearch && searchInput) {
      searchInput.value = initialSearch;
      filterPlaylists();
    }

    // Setup all functionality
    setupSearchListeners();
    setupAdditionalListeners();
    setupIntersectionObserver();
  });
</script>
