---
import Layout from "@layouts/Layout.astro";
import { useTranslations } from "@utils/i18n";
import Headline from "@components/Headline.astro";
import Paragraph from "@components/Paragraph.astro";
import { Icon } from "astro-icon/components";
import { extractKeywords, generateMetaDescription } from "@utils/seo";
import { Picture } from "astro:assets";

/**
 * Enable static site generation for all supported languages.
 * This ensures the playlist pages are pre-rendered at build time for optimal performance.
 * @see https://docs.astro.build/en/reference/directives-reference/#prerender
 */
export const prerender = true;

/**
 * Define supported languages and generate static paths for each language.
 * This creates separate routes for each language version of the playlist page.
 * @returns {Array} Array of route objects with params and props
 */
export async function getStaticPaths() {
  // Define all languages supported by the application
  const supportedLanguages = [
    "de",
    "en",
    "es",
    "fr",
    "it",
    "pt",
    "da",
    "nl",
    "sv",
    "fi",
  ] as const;

  // Process data for each language
  const paths = await Promise.all(
    supportedLanguages.map(async (lang) => {
      // Try to load playlist data for the specific language
      let playlists = [];
      try {
        const playlistData = await import(
          `../../../public/json/playlist/${lang}_playlist.json`
        );
        playlists = playlistData.default;
      } catch (error) {
        // Fallback to English if language file doesn't exist
        try {
          console.info(
            `No playlist data found for ${lang}, falling back to English`
          );
          const fallbackData = await import(
            `../../../public/json/playlist/en_playlist.json`
          );
          playlists = fallbackData.default;
        } catch (fallbackError) {
          console.error(
            `Error loading playlist data for ${lang}:`,
            fallbackError
          );
        }
      }

      return {
        params: { lang },
        props: {
          lang,
          playlists,
        },
      };
    })
  );

  return paths;
}

/**
 * Type definition for component props
 */
interface Props {
  lang: "de" | "en" | "es" | "fr" | "it" | "pt" | "da" | "nl" | "sv" | "fi";
  playlists: Playlist[];
}

/**
 * Type definition for playlist objects
 */
interface Playlist {
  headline: string;
  imageUrl: string;
  introSubline: string;
  spotifyPlaylist?: string;
  deezerPlaylist?: string;
  appleMusicPlaylist?: string;
}

// Extract data from props with default empty array for playlists
const { lang, playlists = [] } = Astro.props;

// Use the i18n utilities for translations
const t = useTranslations(lang);

// Generate SEO content
const title = t("playlist.page.title");
const description = t("playlist.page.description");

// Enhanced SEO content using utility functions
const pageContent = `${title} ${description} ${playlists.map((p) => `${p.headline} ${p.introSubline}`).join(" ")}`;

// Generate optimized meta description and keywords
const optimizedDescription = generateMetaDescription(pageContent);
const keywords = extractKeywords(pageContent) || t("meta.keywords");

// Additional structured data parameters for SEO
const pageType = "website";
const publishDate = new Date("2024-01-01");
const modifiedDate = new Date();

// Sort playlists chronologically (assuming decade in headline format like "1950s")
const sortedPlaylists = [...playlists].sort((a, b) =>
  a.imageUrl.localeCompare(b.imageUrl, undefined, { sensitivity: "base" })
);
---

<Layout
  title={title}
  description={optimizedDescription}
  keywords={keywords}
  image={`/og-images/social-share-playlist-${lang}.jpg`}
  type={pageType}
  publishDate={publishDate}
  modifiedDate={modifiedDate}
>
  <main class="max-w-6xl mx-auto px-4 py-8">
    <!-- Page heading and description -->
    <div class="text-center mb-12">
      <Headline
        title={t("playlist.page.heading")}
        level="h1"
        className="text-white font-bold text-3xl md:text-4xl mb-4"
      />
      <div class="h-1 w-24 bg-purple-500 rounded-full mx-auto mt-2 mb-6"></div>
      <Paragraph
        description={t("playlist.page.description")}
        className="max-w-2xl mx-auto text-zinc-100"
      />
    </div>

    <!-- Search and filter section -->
    <div
      class="search-filter-container bg-zinc-800/90 rounded-xl p-6 border border-zinc-700 shadow-lg mb-10"
      role="search"
      aria-labelledby="search-heading"
    >
      <h2 id="search-heading" class="sr-only">
        {t("playlist.search.label")}
      </h2>

      <div class="flex flex-col md:flex-row gap-4 mb-6">
        <!-- Search field -->
        <div class="relative flex-grow">
          <label for="playlist-search" class="sr-only">
            {t("playlist.search.placeholder")}
          </label>
          <div class="relative">
            <div
              class="absolute inset-y-0 left-3 flex items-center pointer-events-none"
              aria-hidden="true"
            >
              <Icon name="search" class="h-5 w-5 text-purple-400" />
            </div>
            <input
              type="search"
              id="playlist-search"
              placeholder={t("playlist.search.placeholder")}
              class="w-full py-3 pl-10 pr-4 bg-zinc-800 border-2 border-zinc-600
                    rounded-xl text-zinc-50 placeholder-zinc-400
                    focus:outline-none focus:border-purple-500 focus:ring-3
                    focus:ring-purple-500/50 transition-all duration-300"
              aria-controls="playlist-grid"
              aria-describedby="search-playlist-description"
            />
            <div id="search-playlist-description" class="sr-only">
              {
                t("playlist.search.live.description") ||
                  "Results are filtered automatically as you type"
              }
            </div>
          </div>
        </div>
      </div>

      <!-- Search status for screen readers -->
      <div
        id="search-results-status"
        class="sr-only"
        aria-live="polite"
        aria-atomic="true"
        role="status"
      >
      </div>

      <!-- No results message (initially hidden) -->
      <div
        id="no-results"
        class="hidden flex flex-col items-center justify-center p-12 bg-gradient-to-br from-zinc-700 to-zinc-800 rounded-xl border border-zinc-600 text-center shadow-md mb-10"
        aria-live="polite"
        role="status"
      >
        <Icon
          name="search-no-results"
          class="w-16 h-16 text-zinc-300 mb-4"
          aria-hidden="true"
        />
        <h2 class="text-zinc-100 text-xl font-medium mb-2">
          {t("playlist.no.results.heading") || "No playlists found"}
        </h2>
        <p class="text-zinc-300 mb-4">
          {t("playlist.no.results")}
        </p>
        <button
          id="reset-search"
          class="mt-2 px-6 py-3 bg-purple-700 hover:bg-purple-600 text-white rounded-lg
                 min-h-[44px] min-w-[120px] font-medium
                 focus:outline-none focus:ring-4 focus:ring-purple-500/50 focus:ring-offset-2 focus:ring-offset-zinc-800
                 transition-all duration-300"
          aria-label={t("playlist.reset.search.button") ||
            "Reset search filters"}
        >
          {t("playlist.reset.search") || "Reset search"}
        </button>
      </div>

      <!-- Playlist Grid -->
      <ul
        id="playlist-grid"
        class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-8"
        aria-label={t("playlist.page.heading")}
      >
        {
          sortedPlaylists.map((playlist, index) => {
            // Extract decade for filtering
            const decadeMatch = playlist.headline.match(/\d{4}/);
            const decade = decadeMatch
              ? decadeMatch[0].substring(0, 3) + "0s"
              : "Other";

            // Generate unique ID for each playlist item for better accessibility
            const playlistId = `playlist-${index}`;

            return (
              <li
                class="playlist-card animate-fadeIn"
                style={{ animationDelay: `${index * 0.05}s` }}
                data-searchable={`${playlist.headline.toLowerCase()} ${playlist.introSubline.toLowerCase()}`}
                data-decade={decade}
                id={playlistId}
              >
                <article class="h-full bg-zinc-800 rounded-xl overflow-hidden border border-zinc-700 shadow-lg transition-all duration-300 hover:shadow-xl hover:translate-y-[-5px]">
                  <div
                    class="p-0.5 bg-gradient-to-r from-purple-500 to-indigo-500"
                    aria-hidden="true"
                  />

                  <div class="relative aspect-video overflow-hidden rounded-t-lg">
                    <Picture
                      src={playlist.imageUrl || "/default-cover.jpg"}
                      alt={`Cover image for ${playlist.headline}`}
                      class="w-full h-full object-cover"
                      loading={index < 4 ? "eager" : "lazy"}
                      widths={[400, 800, 1200]}
                      sizes="(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw"
                      formats={["avif", "webp", "jpg"]}
                      width={1280}
                      height={720}
                    />
                    <div
                      class="absolute inset-0 bg-gradient-to-t from-zinc-900/30 via-zinc-900/10 to-transparent"
                      aria-hidden="true"
                    />
                  </div>

                  <div class="p-5 space-y-4 bg-gradient-to-b from-zinc-800 to-zinc-800/90">
                    <h3 class="text-xl md:text-2xl font-bold text-white mb-2">
                      {playlist.headline}
                    </h3>
                    <div class="h-0.5 w-16 bg-gradient-to-r from-purple-500 to-indigo-500 rounded-full mb-3" />
                    <p class="text-zinc-50 text-base">
                      {playlist.introSubline}
                    </p>

                    <div class="flex flex-wrap gap-3 mt-4">
                      {playlist.spotifyPlaylist && (
                        <a
                          href={playlist.spotifyPlaylist}
                          target="_blank"
                          rel="noopener noreferrer"
                          class="inline-flex items-center gap-2 px-4 py-3 
                                 bg-[#1DB954] hover:bg-[#1aa34a] 
                                 rounded-full text-black font-medium 
                                 min-h-[44px] min-w-[100px]
                                 focus:outline-none focus:ring-4 focus:ring-[#1DB954]/50 
                                 focus:ring-offset-2 focus:ring-offset-zinc-800
                                 transition-all duration-300"
                          aria-label={`${t("playlist.listen.spotify")} - ${playlist.headline}`}
                        >
                          <Icon
                            name="spotify"
                            class="h-5 w-5"
                            aria-hidden="true"
                          />
                          <span>Spotify</span>
                        </a>
                      )}

                      {playlist.deezerPlaylist && (
                        <a
                          href={playlist.deezerPlaylist}
                          target="_blank"
                          rel="noopener noreferrer"
                          class="inline-flex items-center gap-2 px-4 py-3
                                 bg-[#FF0092] hover:bg-[#d4007a]
                                 rounded-full text-white font-medium
                                 min-h-[44px] min-w-[100px]
                                 focus:outline-none focus:ring-4 focus:ring-[#FF0092]/50
                                 focus:ring-offset-2 focus:ring-offset-zinc-800
                                 transition-all duration-300"
                          aria-label={`${t("playlist.listen.deezer")} - ${playlist.headline}`}
                        >
                          <Icon
                            name="deezer"
                            class="h-5 w-5"
                            aria-hidden="true"
                          />
                          <span>Deezer</span>
                        </a>
                      )}

                      {playlist.appleMusicPlaylist && (
                        <a
                          href={playlist.appleMusicPlaylist}
                          target="_blank"
                          rel="noopener noreferrer"
                          class="inline-flex items-center gap-2 px-4 py-3
                                 bg-[#FB233B] hover:bg-[#d41e32]
                                 rounded-full text-white font-medium
                                 min-h-[44px] min-w-[100px]
                                 focus:outline-none focus:ring-4 focus:ring-[#FB233B]/50
                                 focus:ring-offset-2 focus:ring-offset-zinc-800
                                 transition-all duration-300"
                          aria-label={`${t("playlist.listen.apple")} - ${playlist.headline}`}
                        >
                          <Icon
                            name="apple"
                            class="h-5 w-5"
                            aria-hidden="true"
                          />
                          <span>Apple Music</span>
                        </a>
                      )}
                    </div>
                  </div>
                </article>
              </li>
            );
          })
        }
      </ul>

      <!-- Back to top button -->
      <button
        id="back-to-top"
        class="fixed bottom-8 right-8 p-4 bg-purple-700 text-white rounded-full shadow-lg opacity-0 invisible
               transition-all duration-300 hover:bg-purple-600
               min-w-[48px] min-h-[48px] flex items-center justify-center
               focus:outline-none focus:ring-4 focus:ring-purple-500/50 focus:ring-offset-2 focus:ring-offset-zinc-800"
        aria-label={t("back.to.top") || "Back to top of page"}
      >
        <Icon name="arrow-up" class="h-6 w-6" aria-hidden="true" />
      </button>
    </div>
  </main>

  <style>
    /* Improved color contrast for WCAG AAA (7:1) */
    :root {
      --text-primary: #ffffff; /* Maximum contrast */
      --text-secondary: #e2e2e7; /* Higher contrast than standard zinc-300 */
      --bg-card: #27272a; /* zinc-800 */
      --border-card: rgba(161, 161, 170, 0.3); /* zinc-400 with transparency */
      --accent-primary: #9333ea; /* purple-600 - darker for better contrast */
      --accent-secondary: #a855f7; /* purple-500 */
    }

    /* Improved focus states for keyboard navigation */
    :focus-visible {
      outline: 3px solid var(--accent-primary);
      outline-offset: 3px;
    }

    /* Animations for cards */
    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(10px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .animate-fadeIn {
      animation: fadeIn 0.5s ease-out forwards;
      opacity: 0;
    }

    /* Improved back-to-top button animation */
    #back-to-top.visible {
      opacity: 1;
      visibility: visible;
    }

    /* Disable animations if user prefers reduced motion */
    @media (prefers-reduced-motion: reduce) {
      *,
      ::before,
      ::after {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
        scroll-behavior: auto !important;
      }

      .animate-fadeIn {
        opacity: 1;
        animation: none;
        transform: translateY(0);
      }

      .playlist-card:hover {
        transform: none !important;
        box-shadow: none !important;
      }

      html {
        scroll-behavior: auto !important;
      }
    }
  </style>

  <script>
    /**
     * Optimized Playlist Page Manager
     *
     * This script handles the interactive functionality of the playlist page with
     * improved performance and accessibility:
     * - Search and filtering system for playlists using efficient DOM operations
     * - Decade-based filtering with proper ARIA announcements
     * - Enhanced keyboard accessibility
     * - Optimized back-to-top button with IntersectionObserver
     * - Improved performance with debouncing and requestAnimationFrame
     */
    document.addEventListener("DOMContentLoaded", function () {
      // Cache DOM elements for better performance
      const searchInput = document.getElementById(
        "playlist-search"
      ) as HTMLInputElement;
      const decadeFilter = document.getElementById(
        "decadeFilter"
      ) as HTMLSelectElement;
      const playlistCards = document.querySelectorAll(".playlist-card");
      const noResultsElement = document.getElementById("no-results");
      const searchStatusElement = document.getElementById(
        "search-results-status"
      );
      const resetSearchButton = document.getElementById("reset-search");
      const backToTopButton = document.getElementById("back-to-top");

      // Setup variables for optimization
      let debounceTimeout: number | null = null;
      let isSearching = false;
      let lastSearchTerm = "";
      let lastSelectedDecade = "all";

      /**
       * Debounce function to limit how often a function is called
       * @param {Function} func - Function to debounce
       * @param {number} delay - Delay in milliseconds
       * @returns {Function} Debounced function
       */
      function debounce(func: Function, delay: number) {
        return function (...args: any[]) {
          if (debounceTimeout) {
            clearTimeout(debounceTimeout);
          }
          debounceTimeout = window.setTimeout(() => {
            func.apply(null, args);
            debounceTimeout = null;
          }, delay);
        };
      }

      /**
       * Filter playlists based on search input and decade selection
       * Uses requestAnimationFrame for smooth UI updates
       */
      function filterPlaylists() {
        if (!searchInput || isSearching) return;

        isSearching = true;

        // Get current filter values
        const searchTerm = searchInput.value.toLowerCase().trim();
        const selectedDecade = decadeFilter?.value || "all";

        // Skip if nothing has changed
        if (
          searchTerm === lastSearchTerm &&
          selectedDecade === lastSelectedDecade
        ) {
          isSearching = false;
          return;
        }

        lastSearchTerm = searchTerm;
        lastSelectedDecade = selectedDecade;

        // Use requestAnimationFrame for smooth UI updates
        requestAnimationFrame(() => {
          let visibleCount = 0;
          const totalCount = playlistCards.length;

          // Filter playlist cards by search term and decade
          playlistCards.forEach((card) => {
            const searchable = card.getAttribute("data-searchable") || "";
            const decade = card.getAttribute("data-decade") || "";

            const matchesSearch =
              searchTerm === "" || searchable.includes(searchTerm);
            const matchesDecade =
              selectedDecade === "all" || decade === selectedDecade;

            const isVisible = matchesSearch && matchesDecade;

            if (isVisible) {
              (card as HTMLElement).classList.remove("hidden");
              visibleCount++;
            } else {
              (card as HTMLElement).classList.add("hidden");
            }
          });

          // Show/hide "No results" message
          if (noResultsElement) {
            noResultsElement.classList.toggle("hidden", visibleCount > 0);
          }

          // Update status for screen readers with appropriate messaging
          if (searchStatusElement) {
            if (visibleCount === 0) {
              searchStatusElement.textContent = `No playlists found matching "${searchTerm}" ${selectedDecade !== "all" ? `in ${selectedDecade}` : ""}`;
            } else if (visibleCount === 1) {
              searchStatusElement.textContent = `1 playlist found ${selectedDecade !== "all" ? `in ${selectedDecade}` : ""}`;
            } else if (visibleCount === totalCount) {
              searchStatusElement.textContent = `All ${visibleCount} playlists are displayed`;
            } else {
              searchStatusElement.textContent = `${visibleCount} of ${totalCount} playlists found ${selectedDecade !== "all" ? `in ${selectedDecade}` : ""}`;
            }
          }

          isSearching = false;
        });
      }

      // Event listeners for search and filter with debounce for performance
      if (searchInput) {
        searchInput.addEventListener("input", debounce(filterPlaylists, 300));
        // Add keyboard event for accessibility
        searchInput.addEventListener("keydown", function (e) {
          if (e.key === "Escape") {
            searchInput.value = "";
            filterPlaylists();
          }
        });
      }

      if (decadeFilter) {
        decadeFilter.addEventListener("change", filterPlaylists);
      }

      // Reset search and filters
      if (resetSearchButton) {
        resetSearchButton.addEventListener("click", function () {
          if (searchInput) searchInput.value = "";
          if (decadeFilter) decadeFilter.value = "all";
          filterPlaylists();

          // Announce reset for screen readers
          if (searchStatusElement) {
            searchStatusElement.textContent = "Search filters have been reset";
          }

          // Return focus to search input for better keyboard UX
          searchInput?.focus();
        });
      }

      // Back to top button with IntersectionObserver for performance
      if (backToTopButton) {
        const observer = new IntersectionObserver(
          ([entry]) => {
            backToTopButton.classList.toggle("visible", !entry.isIntersecting);
          },
          { threshold: 0, rootMargin: "-200px 0px 0px 0px" }
        );

        // Observe the page header to show/hide button
        const pageHeader = document.querySelector("h1");
        if (pageHeader) observer.observe(pageHeader);

        backToTopButton.addEventListener("click", function () {
          // Use scrollIntoView with behavior: smooth for better performance than scrollTo
          document.body.scrollIntoView({
            behavior: "smooth",
            block: "start",
          });

          // Announce for screen readers
          if (searchStatusElement) {
            searchStatusElement.textContent = "Scrolled back to top of page";
          }
        });

        // Ensure keyboard users can access main content after using back to top
        backToTopButton.addEventListener("keydown", function (e) {
          if (e.key === "Tab" && !e.shiftKey) {
            searchInput?.focus();
            e.preventDefault();
          }
        });
      }

      // Initialize the filter on page load
      filterPlaylists();

      // Add event listeners for better keyboard navigation
      document.addEventListener("keydown", function (e) {
        // Press '/' to focus search
        if (e.key === "/" && document.activeElement?.tagName !== "INPUT") {
          e.preventDefault();
          searchInput?.focus();
        }
      });
    });
  </script>
</Layout>
```
