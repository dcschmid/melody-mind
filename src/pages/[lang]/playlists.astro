---
import Layout from "@layouts/Layout.astro";
import { useTranslations } from "@utils/i18n";
import Headline from "@components/Headline.astro";
import Paragraph from "@components/Paragraph.astro";
import PlaylistCard from "@components/PlaylistCard.astro";
import BackToTop from "@components/Shared/BackToTop.astro";
import { Icon } from "astro-icon/components";
import { extractKeywords, generateMetaDescription } from "@utils/seo";

/**
 * Enable static site generation for all supported languages.
 */
export const prerender = true;

/**
 * Define supported languages and generate static paths for each language.
 */
export async function getStaticPaths() {
  const supportedLanguages = [
    "de",
    "en",
    "es",
    "fr",
    "it",
    "pt",
    "da",
    "nl",
    "sv",
    "fi",
    "cn",
    "ru",
    "jp",
    "uk",
  ] as const;

  const allLanguageDataPromises = supportedLanguages.map(async (lang) => {
    try {
      const playlistData = await import(`../../../public/json/playlist/${lang}_playlist.json`);
      return { lang, playlists: playlistData.default };
    } catch {
      try {
        console.warn(`No playlist data found for ${lang}, falling back to English`);
        const fallbackData = await import(`../../../public/json/playlist/en_playlist.json`);
        return { lang, playlists: fallbackData.default };
      } catch (fallbackError) {
        console.error(`Error loading playlist data for ${lang}:`, fallbackError);
        return { lang, playlists: [] };
      }
    }
  });

  const languageData = await Promise.all(allLanguageDataPromises);
  const paths = languageData.map(({ lang, playlists }) => ({
    params: { lang },
    props: { playlists },
  }));

  return paths;
}

const { lang } = Astro.params;
const { playlists } = Astro.props;
const t = useTranslations(lang);

/**
 * Interface for playlist data structure
 */
interface Playlist {
  headline: string;
  imageUrl: string;
  introSubline: string;
  spotifyPlaylist: string;
  deezerPlaylist: string;
  appleMusicPlaylist: string;
}

// Helper function for decade extraction (moved up)
function getDecadeFromHeadline(headline) {
  const yearMatch = headline.match(/\b(\d{4})\b/);
  if (yearMatch) {
    return `${yearMatch[1].substring(0, 3)}0s`;
  }
  return "Other";
}

// Sort playlists chronologically (moved up)
const sortedPlaylists = [...playlists].sort((a: Playlist, b: Playlist) => {
  const decadeA = getDecadeFromHeadline(a.headline);
  const decadeB = getDecadeFromHeadline(b.headline);
  return decadeA.localeCompare(decadeB, undefined, { sensitivity: "base" });
});

// Enhanced SEO content generation with more detailed information
const title = t("playlist.page.heading");
const description = t("playlist.page.description");

// Create enriched content for better SEO by including playlist information
const playlistDecades = [
  ...new Set(playlists.map((p: Playlist) => getDecadeFromHeadline(p.headline))),
].join(", ");
const playlistCount = playlists.length;
const enrichedContent = `${title} ${description} Explore ${playlistCount} carefully curated music playlists spanning decades including ${playlistDecades}. Each playlist features authentic tracks from legendary artists and iconic albums. Perfect for music enthusiasts, trivia players, and anyone looking to discover classic hits from different musical eras.`;

const optimizedDescription = generateMetaDescription(enrichedContent, 158);
const keywords = extractKeywords(enrichedContent, 12, lang);

// SEO-optimized URL and canonical setup
const baseUrl = Astro.site?.toString() || "https://melody-mind.de";
const currentUrl = `${baseUrl}/${lang}/playlists`;

// Enhanced structured data for playlist collection
const playlistCollectionSchema = {
  "@context": "https://schema.org",
  "@type": "ItemList",
  name: `${title} | Melody Mind`,
  description: optimizedDescription,
  url: currentUrl,
  numberOfItems: playlistCount,
  itemListOrder: "chronological",
  itemListElement: sortedPlaylists.slice(0, 10).map((playlist, index) => ({
    "@type": "MusicPlaylist",
    position: index + 1,
    name: playlist.headline,
    description: playlist.introSubline || playlist.headline,
    url: `${currentUrl}#playlist-${index}`,
    genre: getDecadeFromHeadline(playlist.headline),
    inLanguage: lang,
    creator: {
      "@type": "Organization",
      name: "Melody Mind",
    },
  })),
};

// Breadcrumb structured data for better navigation SEO
const breadcrumbSchema = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  itemListElement: [
    {
      "@type": "ListItem",
      position: 1,
      name: t("nav.home"),
      item: `${baseUrl}/${lang}/`,
    },
    {
      "@type": "ListItem",
      position: 2,
      name: title,
      item: currentUrl,
    },
  ],
};
---

<Layout
  {title}
  description={optimizedDescription}
  {keywords}
  image={`/og-images/social-share-playlist-${lang}.jpg`}
  type="website"
  publishDate={new Date()}
  modifiedDate={new Date()}
>
  <!-- Enhanced SEO structured data -->
  <Fragment slot="head">
    <script type="application/ld+json" set:html={JSON.stringify(playlistCollectionSchema)} />
    <script type="application/ld+json" set:html={JSON.stringify(breadcrumbSchema)} />
    <meta name="robots" content="index, follow, max-image-preview:large" />
    <meta name="googlebot" content="index, follow" />
    <link rel="canonical" href={currentUrl} />

    <!-- Additional SEO meta tags -->
    <meta name="author" content="Melody Mind Team" />
    <meta property="og:type" content="website" />
    <meta property="og:locale" content={`${lang}_${lang.toUpperCase()}`} />
    <meta property="article:section" content="Music" />
    <meta property="article:tag" content="Music Playlists" />
    <meta property="article:tag" content="Music History" />
    <meta property="article:tag" content="Music Discovery" />

    <!-- Music-specific meta tags -->
    <meta name="music:genre" content="Various" />
    <meta name="music:playlist_count" content={playlistCount.toString()} />
    <meta name="music:decades" content={playlistDecades} />

    <!-- Enhanced Open Graph for better social sharing -->
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:image:type" content="image/jpeg" />

    <!-- Twitter Card enhancements -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@melodymind" />
    <meta name="twitter:creator" content="@melodymind" />
  </Fragment>

  <div class="playlist-container">
    <!-- Breadcrumb Navigation for SEO -->
    <nav aria-label="Breadcrumb" class="breadcrumb-nav">
      <ol class="breadcrumb-list" itemscope itemtype="https://schema.org/BreadcrumbList">
        <li
          class="breadcrumb-item"
          itemprop="itemListElement"
          itemscope
          itemtype="https://schema.org/ListItem"
        >
          <a href={`/${lang}/`} itemprop="item" class="breadcrumb-link">
            <Icon name="home" class="breadcrumb-icon" aria-hidden="true" />
            <span itemprop="name" class="sr-only">{t("nav.home")}</span>
          </a>
          <meta itemprop="position" content="1" />
        </li>
        <li
          class="breadcrumb-item"
          itemprop="itemListElement"
          itemscope
          itemtype="https://schema.org/ListItem"
          aria-current="page"
        >
          <span itemprop="name">{title}</span>
          <meta itemprop="position" content="2" />
        </li>
      </ol>
    </nav>
    <!-- Hero section -->
    <section class="playlist-hero" aria-labelledby="playlist-heading">
      <div class="playlist-hero__decoration" aria-hidden="true">
        <div class="playlist-hero__decoration-item playlist-hero__decoration-item--top-right"></div>
        <div class="playlist-hero__decoration-item playlist-hero__decoration-item--bottom-left">
        </div>
        <div class="playlist-hero__decoration-item playlist-hero__decoration-item--center-right">
        </div>
      </div>

      <div class="playlist-hero__content">
        <Headline
          title={t("playlist.page.heading")}
          level="h1"
          size="4xl"
          className="playlist-hero__title"
        />
        <div class="playlist-hero__divider" aria-hidden="true"></div>
        <Paragraph className="playlist-hero__description" align="center">
          {t("playlist.page.description")}
        </Paragraph>
      </div>
    </section>

    <main class="playlist-selection" role="main">

      <!-- Enhanced Playlist Grid with semantic markup and microdata -->
      <section aria-labelledby="playlists-heading">
        <Headline
          title={t("playlist.grid.heading", { count: playlistCount })}
          level="h2"
          size="base"
          className="sr-only"
          id="playlists-heading"
        />
        <ul id="playlist-grid" class="playlist-grid">
          {
            sortedPlaylists.map((playlist, index) => (
              <li
                class="playlist-card"
                id={`playlist-${index}`}
                itemscope
                itemtype="https://schema.org/MusicPlaylist"
              >
                <meta itemprop="name" content={playlist.headline} />
                <meta itemprop="description" content={playlist.introSubline || playlist.headline} />
                <meta itemprop="genre" content={getDecadeFromHeadline(playlist.headline)} />
                <meta itemprop="inLanguage" content={lang} />
                <PlaylistCard
                  headline={playlist.headline}
                  imageUrl={playlist.imageUrl}
                  introSubline={playlist.introSubline}
                  spotifyPlaylist={playlist.spotifyPlaylist}
                  deezerPlaylist={playlist.deezerPlaylist}
                  appleMusicPlaylist={playlist.appleMusicPlaylist}
                  index={index}
                  lang={lang}
                />
              </li>
            ))
          }
        </ul>
      </section>
    </main>
  </div>

  <!-- Back to Top Button -->
  <BackToTop {lang} />
</Layout>

<style lang="scss">
  // ======================================
  // SCSS VARIABLES & MIXINS
  // ======================================

  // Breakpoint mixins for responsive design
  @mixin mobile {
    @media (max-width: 479px) {
      @content;
    }
  }

  @mixin tablet {
    @media (min-width: 480px) and (max-width: 767px) {
      @content;
    }
  }

  @mixin desktop {
    @media (min-width: 768px) {
      @content;
    }
  }

  @mixin large-desktop {
    @media (min-width: 1024px) {
      @content;
    }
  }

  @mixin ultra-wide {
    @media (min-width: 1280px) {
      @content;
    }
  }

  // Container query mixins
  @mixin container-small {
    @container playlist-container (max-width: 500px) {
      @content;
    }
  }

  @mixin container-large {
    @container playlist-container (min-width: 1400px) {
      @content;
    }
  }

  // Touch device detection
  @mixin touch-device {
    @media (hover: none) and (pointer: coarse) {
      @content;
    }
  }

  @mixin mouse-device {
    @media (hover: hover) and (pointer: fine) {
      @content;
    }
  }

  // Reduced motion support
  @mixin reduced-motion {
    @media (prefers-reduced-motion: reduce) {
      @content;
    }
  }

  // Dark mode support
  @mixin dark-mode {
    @media (prefers-color-scheme: dark) {
      @content;
    }
  }

  // ======================================
  // CONTAINER LAYOUT
  // ======================================

  .playlist-container {
    width: 100%;
    max-width: var(--container-xl);
    margin: 0 auto;
    padding: var(--space-sm) var(--space-xs);
    overflow-x: hidden;
    box-sizing: border-box;
    container-type: inline-size;
    container-name: playlist-container;

    @include mobile {
      padding: var(--space-xs);
    }

    @include tablet {
      padding: var(--space-md) var(--space-sm);
    }

    @include desktop {
      padding: var(--space-lg) var(--space-md);
    }

    @include large-desktop {
      padding: var(--space-xl) var(--space-lg);
    }

    @include ultra-wide {
      padding: var(--space-xl) var(--space-xl);
    }
  }

  // ======================================
  // BREADCRUMB NAVIGATION
  // ======================================

  .breadcrumb-nav {
    margin-bottom: var(--space-md);

    @include desktop {
      margin-bottom: var(--space-lg);
    }
  }

  .breadcrumb-list {
    display: flex;
    align-items: center;
    gap: var(--space-xs);
    margin: 0;
    padding: 0;
    list-style: none;
    font-size: var(--text-xs);
    color: var(--text-secondary);

    @include tablet {
      gap: var(--space-sm);
      font-size: var(--text-sm);
    }
  }

  .breadcrumb-item {
    display: flex;
    align-items: center;

    &:not(:last-child)::after {
      content: "›";
      margin-left: var(--space-xs);
      color: var(--text-tertiary);
      font-weight: var(--font-medium);

      @include tablet {
        margin-left: var(--space-sm);
      }
    }
  }

  .breadcrumb-link {
    display: inline-flex;
    align-items: center;
    color: var(--interactive-primary);
    text-decoration: none;
    transition: color var(--transition-fast);
    padding: var(--space-xs);
    border-radius: var(--radius-sm);
    min-height: var(--touch-target);

    @include tablet {
      padding: var(--space-sm);
    }

    &:hover,
    &:focus {
      color: var(--interactive-primary-hover);
      text-decoration: underline;
      background-color: var(--bg-secondary);
    }
  }

  .breadcrumb-icon {
    width: var(--icon-size-xs);
    height: var(--icon-size-xs);

    @include tablet {
      width: var(--icon-size-sm);
      height: var(--icon-size-sm);
    }
  }

  // ======================================
  // HERO SECTION
  // ======================================

  .playlist-hero {
    position: relative;
    margin-bottom: var(--space-lg);
    overflow: hidden;
    border-radius: var(--radius-lg);
    background: linear-gradient(
      135deg,
      var(--color-primary-800) 0%,
      var(--color-primary-900) 50%,
      var(--color-neutral-900) 100%
    );
    padding: var(--space-md);
    box-shadow: var(--shadow-xl);

    @include tablet {
      padding: var(--space-lg);
      margin-bottom: var(--space-xl);
    }

    @include desktop {
      margin-bottom: var(--space-2xl);
      border-radius: var(--radius-xl);
      padding: var(--space-xl);
    }

    @include large-desktop {
      padding: var(--space-2xl) var(--space-xl);
    }

    &__decoration {
      position: absolute;
      inset: 0;
      opacity: 0.1;
      pointer-events: none;

      &-item {
        position: absolute;
        border-radius: var(--radius-full);

        &--top-right {
          top: calc(-1 * var(--space-xl));
          right: calc(-1 * var(--space-xl));
          width: var(--space-3xl);
          height: var(--space-3xl);
          background-color: var(--color-primary-500);
        }

        &--bottom-left {
          bottom: var(--space-md);
          left: var(--space-md);
          width: var(--space-2xl);
          height: var(--space-2xl);
          background-color: var(--color-secondary-500);
        }

        &--center-right {
          top: 50%;
          right: var(--space-lg);
          transform: translateY(-50%);
          width: var(--space-lg);
          height: var(--space-lg);
          background-color: var(--color-primary-400);
        }
      }
    }

    &__content {
      position: relative;
      z-index: var(--z-fixed);
      text-align: center;
      color: var(--color-neutral-100);
    }

    &__title {
      margin-bottom: var(--space-sm);
      font-size: var(--text-2xl);
      line-height: var(--leading-tight);
      font-weight: var(--font-bold);
      text-align: center;

      @include tablet {
        font-size: var(--text-3xl);
        margin-bottom: var(--space-md);
      }

      @include desktop {
        font-size: var(--text-4xl);
      }

      @include large-desktop {
        font-size: var(--text-5xl);
      }
    }

    &__divider {
      margin: var(--space-md) auto;
      height: var(--border-width-thick);
      width: var(--space-2xl);
      border-radius: var(--radius-full);
      background: var(--color-secondary-400);

      @include tablet {
        margin: var(--space-lg) auto;
        width: var(--space-3xl);
      }
    }

    &__description {
      margin: 0 auto;
      max-width: var(--container-sm);
      font-size: var(--text-base);
      line-height: var(--leading-relaxed);
      opacity: 0.9;
      text-align: center;

      @include tablet {
        font-size: var(--text-lg);
      }

      @include desktop {
        font-size: var(--text-xl);
      }
    }
  }


  // ======================================
  // PLAYLIST GRID - Enhanced Responsive Auto-Fill Pattern
  // ======================================

  .playlist-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--space-md);
    margin: var(--space-lg) auto;
    width: 100%;
    list-style: none;
    padding: 0;
    contain: layout style;

    // Small mobile devices
    @include tablet {
      grid-template-columns: repeat(auto-fill, minmax(var(--grid-min-width-sm), 1fr));
      gap: var(--space-lg);
    }

    // Large mobile / small tablets
    @media (min-width: 640px) {
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: var(--space-lg);
    }

    // Tablets
    @include desktop {
      grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
      gap: var(--space-xl);
    }

    // Small desktop
    @include large-desktop {
      grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
      gap: var(--space-xl);
    }

    // Large desktop - limit max columns for better readability
    @include ultra-wide {
      grid-template-columns: repeat(auto-fill, minmax(450px, 1fr));
      max-width: calc(3 * 450px + 2 * var(--space-xl));
      margin: var(--space-lg) auto;
    }

    // Ultra-wide screens - maximum 4 columns
    @media (min-width: 1920px) {
      grid-template-columns: repeat(auto-fill, minmax(480px, 1fr));
      max-width: calc(4 * 480px + 3 * var(--space-xl));
    }
  }

  // ======================================
  // PLAYLIST CARDS
  // ======================================

  .playlist-card {
    transition:
      transform var(--transition-base),
      box-shadow var(--transition-base);

    // Enhanced touch targets for mobile
    @include mobile {
      margin-bottom: var(--space-xs);
    }

    // Desktop hover effects
    @include mouse-device {
      &:hover,
      &:focus-within {
        transform: translateY(calc(-1 * var(--space-xs)));
        box-shadow: var(--shadow-xl);
      }
    }

    // Touch device optimizations
    @include touch-device {
      // Larger touch targets
      min-height: var(--touch-target-enhanced);

      &:active {
        transform: scale(0.98);
        transition: transform 0.1s ease-out;
      }
    }
  }


  // ======================================
  // CONTAINER QUERIES FOR MODERN RESPONSIVE DESIGN
  // ======================================

  @include container-small {
    .playlist-hero {
      padding: var(--space-md);
    }

    .playlist-hero__title {
      font-size: var(--text-lg);
    }

    .search-container {
      margin: 0;
    }
  }

  @include container-large {
    .playlist-grid {
      grid-template-columns: repeat(auto-fill, minmax(420px, 1fr));
    }
  }

  // ======================================
  // ULTRA-SMALL SCREENS OPTIMIZATION
  // ======================================

  @media (max-width: 359px) {
    .playlist-container {
      padding: var(--space-xs);
      container-type: inline-size;
      container-name: playlist-container;
    }

    .playlist-hero {
      padding: var(--space-sm);
      margin-bottom: var(--space-md);
    }

    .playlist-hero__title {
      font-size: var(--text-xl);
    }

    .playlist-hero__description {
      font-size: var(--text-sm);
    }

    .search-container__input {
      font-size: var(--text-sm);
    }

    .breadcrumb-list {
      font-size: var(--text-xs);
    }
  }

  // Very small screens optimization
  @media (max-width: 320px) {
    .playlist-container {
      padding: var(--space-xs) calc(var(--space-xs) / 2);
    }

    .playlist-hero__title {
      font-size: var(--text-lg);
      line-height: var(--leading-tight);
    }

    .search-container {
      margin: 0 calc(var(--space-xs) / 2);
    }
  }

  // ======================================
  // PRINT OPTIMIZATIONS
  // ======================================

  @media print {
    .playlist-hero,
    .search-section,
    .breadcrumb-nav {
      display: none;
    }

    .playlist-grid {
      display: block;
      columns: 2;
      column-gap: var(--space-lg);
    }

    .playlist-card {
      break-inside: avoid;
      margin-bottom: var(--space-md);
    }
  }

  // ======================================
  // DARK MODE SPECIFIC ADJUSTMENTS
  // ======================================

  @include dark-mode {
    .playlist-hero {
      background: linear-gradient(
        135deg,
        var(--color-neutral-900) 0%,
        var(--color-primary-900) 50%,
        var(--color-neutral-800) 100%
      );
    }
  }

  // ======================================
  // ENHANCED CONTAINER QUERIES (CSS CONTAINMENT LEVEL 3)
  // ======================================

  @include container-small {
    .playlist-hero {
      padding: var(--space-md);
      border-radius: var(--radius-lg);
    }

    .playlist-hero__decoration-item {
      opacity: 0.05;
    }

    .search-container {
      margin: 0 var(--space-xs);
    }
  }

  @include container-large {
    .playlist-grid {
      grid-template-columns: repeat(auto-fill, minmax(480px, 1fr));
      max-width: calc(4 * 480px + 3 * var(--space-xl));
    }

    .playlist-hero {
      padding: var(--space-3xl) var(--space-2xl);
    }
  }

  // ======================================
  // MICRO-INTERACTIONS FOR ENHANCED UX
  // ======================================

  // Smooth grid transitions when filtering
  @supports (grid-template-rows: masonry) {
    .playlist-grid {
      grid-template-rows: masonry;
    }
  }

  // Enhanced scroll behavior
  .playlist-container {
    scroll-behavior: smooth;
  }

  @include reduced-motion {
    .playlist-container {
      scroll-behavior: auto;
    }
  }

  // ======================================
  // UTILITY CLASSES
  // ======================================

  :focus {
    outline: var(--focus-outline);
    outline-offset: var(--focus-ring-offset);

    &:not(:focus-visible) {
      outline: none;
    }
  }

  :focus-visible {
    outline: var(--focus-outline);
    outline-offset: var(--focus-ring-offset);
  }
</style>

<script>
  // ======================================
  // INTERSECTION OBSERVER FOR ANIMATIONS
  // ======================================

  /**
   * Sets up intersection observer for card animations
   */
  function setupIntersectionObserver() {
    const playlistCards = document.querySelectorAll(".playlist-card");

    const observerOptions = {
      root: null,
      rootMargin: "50px",
      threshold: 0.1,
    };

    const cardObserver = new IntersectionObserver(function(entries) {
      entries.forEach(function(entry) {
        if (entry.isIntersecting) {
          entry.target.classList.add("in-view");
        }
      });
    }, observerOptions);

    playlistCards.forEach(function(card) {
      cardObserver.observe(card);
    });
  }

  // ======================================
  // INITIALIZATION
  // ======================================

  /**
   * Initialize playlist page
   */
  function initializePlaylistPage() {
    console.log("Initializing playlist page");
    setupIntersectionObserver();
    console.log("Playlist page initialized successfully");
  }

  // Initialize when DOM is ready
  document.addEventListener("DOMContentLoaded", initializePlaylistPage);
</script>
