---
/**
 * @component TimePressureGamePage
 * @description Renders a time pressure music trivia game page with mixed difficulty questions.
 * Features strict time limits, progressive scoring, and enhanced UI for urgency feedback.
 * This page implements full WCAG AAA accessibility standards.
 *
 * @prop {Object} categoryData - Data about the selected music category
 * @prop {string} categoryData.headline - Display name of the category
 * @prop {string} categoryData.slug - URL-safe identifier for the category
 * @prop {string} lang - Language code for the page content
 */
import Layout from "@layouts/Layout.astro";
import FeedbackOverlay from "@components/Overlays/FeedbackOverlay.astro";
import EndOverlay from "@components/Overlays/EndOverlay.astro";
import LoadingSpinner from "@components/Game/LoadingSpinner.astro";

import { getLangFromUrl, useTranslations } from "@utils/i18n";
import { Icon } from "astro-icon/components";

// Server-side rendering for cookie-based authentication
export const prerender = false;

/**
 * Generates static paths for all supported languages and categories.
 * Time pressure mode doesn't use difficulty selection - all difficulties are mixed.
 * @returns {Array} Array of path objects with params and props
 */
export async function getStaticPaths() {
  // Define all supported languages for type safety
  const supportedLanguages = [
    "de",
    "en",
    "es",
    "fr",
    "it",
    "pt",
    "da",
    "nl",
    "sv",
    "fi",
    "cn",
    "ru",
    "jp",
    "uk",
  ] as const;

  const paths = [];

  for (const lang of supportedLanguages) {
    // Load categories based on language with proper fallback mechanism
    let categories;
    try {
      categories = await import(`@json/${lang}_categories.json`);
    } catch {
      // Fallback to default language if the specific language file doesn't exist
      categories = await import(`@json/en_categories.json`);
    }

    // Create a path for each category (no difficulty needed for time pressure)
    for (const categoryData of categories.default) {
      paths.push({
        params: {
          lang,
          category: categoryData.slug,
        },
        props: {
          categoryData,
          lang,
        },
      });
    }
  }

  return paths;
}

// Types for route props
interface Props {
  categoryData: {
    headline: string;
    slug: string;
  };
  lang: string;
}

// Extract props and URL parameters
const { categoryData: propsCategoryData } = Astro.props;
const lang = String(getLangFromUrl(Astro.url));
const t = useTranslations(lang);

// Guest session for game play
const guestId = `guest_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
const authResult = {
  authenticated: true,
  user: { id: guestId, email: "guest@melodymind.app" },
};

const { category } = Astro.params;

// Fallback mechanism for category data if props are not available
let categoryData = propsCategoryData;
if (!categoryData && category) {
  try {
    // Try to load category data dynamically
    const categories = await import(`@json/${lang}_categories.json`);
    categoryData = categories.default.find((cat: { slug: string }) => cat.slug === category);
  } catch (error) {
    console.error("Failed to load category data:", error);
    // Provide a fallback category data
    categoryData = {
      headline: category || "Unknown Category",
      slug: category || "unknown",
    };
  }
}

// Page metadata and SEO
const gameTitle = `${t("game.timepressure.title")} - ${categoryData.headline}`;
const gameDescription = t("game.timepressure.description").replace(
  "{category}",
  categoryData.headline
);

// Enhanced structured data for time pressure mode
const structuredData = {
  "@context": "https://schema.org",
  "@type": "Game",
  name: gameTitle,
  description: gameDescription,
  genre: "Music Trivia",
  gameLocation: "Online",
  applicationCategory: "Game",
  operatingSystem: "Web Browser",
  isAccessibleForFree: true,
  inLanguage: lang,
  offers: {
    "@type": "Offer",
    price: "0",
    priceCurrency: "EUR",
  },
  aggregateRating: {
    "@type": "AggregateRating",
    ratingValue: "4.8",
    ratingCount: "150",
  },
};
---

<Layout
  title={gameTitle}
  description={gameDescription}
  keywords={`${t("meta.keywords")}, time pressure, speed game`}
  image={`/og-images/social-share-time-pressure-${category}-${lang}.jpg`}
  type="website"
  showHeader={false}
>
  <Fragment slot="head">
    <script type="application/ld+json" set:html={JSON.stringify(structuredData)} />
    <meta name="robots" content="noindex, nofollow" />
  </Fragment>

  <main
    class="min-h-screen bg-gray-900 text-white flex flex-col relative"
    id="game-container"
    aria-live="polite"
    data-userID={authResult.user?.id || "guest"}
    data-categoryName={categoryData?.headline}
    data-genre={String(category)}
  >
    {/* Screen Reader Only Game Instructions */}
    <div class="sr-only" id="game-instructions">
      <h1>{gameTitle}</h1>
      <p>{t("game.timepressure.instructions")}</p>
      <p>{t("game.timepressure.controls")}</p>
    </div>

    {/* Loading State */}
    <div
      id="loading-container"
      class="flex items-center justify-center min-h-screen"
      aria-label={t("game.loading")}
    >
      <LoadingSpinner label={t("game.loading.questions")} />
    </div>

    {/* Game UI Container */}
    <div
      id="game-ui"
      class="flex-1 flex flex-col p-4 max-w-6xl mx-auto w-full"
      style="display: none;"
      aria-labelledby="question-text"
    >
      {/* Time Pressure Header */}
      <header
        class="bg-gradient-to-br from-purple-600 to-blue-600 rounded-2xl p-4 mb-6 shadow-2xl relative overflow-hidden"
      >
        <div class="relative z-10">
          <div class="grid grid-cols-2 gap-2 mb-4 md:grid-cols-4 md:gap-4 md:mb-6">
            <div
              class="flex flex-col items-center text-center p-2 bg-white/15 backdrop-blur-md rounded-lg border border-white/20 shadow-lg"
            >
              <Icon name="target" class="w-5 h-5 text-white/90 mb-1" aria-hidden="true" />
              <span class="text-xs text-white/80 mb-1 uppercase tracking-wider font-medium"
                >{t("game.score")}</span
              >
              <span id="score-display" class="text-lg font-bold text-white drop-shadow-sm">0</span>
            </div>

            <div
              class="flex flex-col items-center text-center p-2 bg-white/15 backdrop-blur-md rounded-lg border border-white/20 shadow-lg"
            >
              <Icon name="zap" class="w-5 h-5 text-white/90 mb-1" aria-hidden="true" />
              <span class="text-xs text-white/80 mb-1 uppercase tracking-wider font-medium"
                >{t("game.timepressure.streak")}</span
              >
              <span id="streak-display" class="text-lg font-bold text-white drop-shadow-sm">0</span>
            </div>

            <div
              class="flex flex-col items-center text-center p-2 bg-white/15 backdrop-blur-md rounded-lg border border-white/20 shadow-lg"
            >
              <Icon name="percent" class="w-5 h-5 text-white/90 mb-1" aria-hidden="true" />
              <span class="text-xs text-white/80 mb-1 uppercase tracking-wider font-medium"
                >{t("game.accuracy")}</span
              >
              <span id="accuracy-display" class="text-lg font-bold text-white drop-shadow-sm"
                >0%</span
              >
            </div>

            <div
              class="flex flex-col items-center text-center p-2 bg-white/15 backdrop-blur-md rounded-lg border border-white/20 shadow-lg relative"
            >
              <div
                id="countdown-circle"
                class="relative w-7 h-7 mb-1"
                role="timer"
                aria-label={t("game.timepressure.countdown")}
              >
                <svg class="absolute inset-0 w-full h-full -rotate-90" viewBox="0 0 40 40">
                  <circle cx="20" cy="20" r="18" class="fill-none stroke-white/30 stroke-2"
                  ></circle>
                  <circle
                    id="countdown-progress"
                    cx="20"
                    cy="20"
                    r="18"
                    class="fill-none stroke-white stroke-2 stroke-linecap-round stroke-dasharray-113 stroke-dashoffset-113 transition-all duration-300 drop-shadow-sm"
                  ></circle>
                </svg>
                <div class="absolute inset-0 flex items-center justify-center">
                  <span
                    id="countdown-time"
                    class="text-xs font-bold text-white leading-none drop-shadow-sm">0</span
                  >
                </div>
              </div>
              <span class="text-xs text-white/80 mb-1 uppercase tracking-wider font-medium"
                >{t("game.timepressure.seconds")}</span
              >
              <div id="difficulty-indicator" class="mt-1">
                <span
                  id="difficulty-text"
                  class="text-xs font-medium text-white/80 uppercase tracking-wider"></span>
              </div>
            </div>
          </div>

          <div class="flex items-center gap-4 mb-4">
            <div
              class="flex-1 h-1.5 bg-white/20 rounded-full overflow-hidden relative shadow-inner"
            >
              <div
                id="progress-fill"
                class="h-full bg-gradient-to-r from-white to-white/80 rounded-full transition-all duration-300 ease-out relative shadow-sm"
                role="progressbar"
                aria-valuenow="0"
                aria-valuemin="0"
                aria-valuemax="100"
              >
              </div>
            </div>
            <span class="text-xs font-medium text-white/90 whitespace-nowrap drop-shadow-sm">
              <span id="current-round">1</span> / <span id="total-rounds">20</span>
            </span>
          </div>
        </div>
      </header>

      {/* Question Display */}
      <div
        class="text-center mb-8 p-6 bg-gradient-to-br from-gray-800 to-gray-700 rounded-2xl shadow-2xl relative overflow-hidden"
      >
        <div
          id="question-text"
          class="relative z-10 text-lg font-semibold leading-relaxed text-white mb-6 drop-shadow-sm"
          aria-live="assertive"
        >
        </div>
        <div id="question-image" class="my-8 max-w-xs mx-auto" style="display: none;">
          <img
            id="question-img"
            alt=""
            loading="lazy"
            class="w-full h-auto rounded-2xl shadow-lg"
          />
        </div>
      </div>

      {/* Answer Options */}
      <div
        id="answer-options"
        class="grid grid-cols-1 gap-3 mb-8 md:grid-cols-2 md:gap-4 md:mb-12"
        role="radiogroup"
        aria-labelledby="question-text"
      >
        {/* Answer buttons will be dynamically generated */}
      </div>

      {/* Game Controls */}
      <div class="flex flex-col gap-3 justify-center mt-auto p-4 md:flex-row md:gap-6 md:p-6">
        <button
          type="button"
          id="pause-btn"
          class="flex items-center justify-center gap-3 px-4 py-3 bg-gradient-to-br from-gray-700 to-gray-600 border-2 border-gray-500 rounded-lg text-white text-sm font-semibold cursor-pointer transition-all duration-300 min-h-[44px] shadow-lg relative overflow-hidden whitespace-nowrap"
          aria-label={t("game.pause")}
        >
          <span class="icon flex items-center justify-center flex-shrink-0">
            <Icon name="pause" class="w-4 h-4" aria-hidden="true" />
          </span>
          <span class="text font-semibold text-sm">{t("game.pause")}</span>
        </button>

        <button
          type="button"
          id="skip-btn"
          class="flex items-center justify-center gap-3 px-4 py-3 bg-gradient-to-br from-gray-700 to-gray-600 border-2 border-gray-500 rounded-lg text-white text-sm font-semibold cursor-pointer transition-all duration-300 min-h-[44px] shadow-lg relative overflow-hidden whitespace-nowrap"
          aria-label={t("game.timepressure.skip")}
        >
          <span class="icon flex items-center justify-center flex-shrink-0">
            <Icon name="skip-forward" class="w-4 h-4" aria-hidden="true" />
          </span>
          <span class="text font-semibold text-sm">{t("game.timepressure.skip")}</span>
          <span id="skip-cost" class="text-xs opacity-80 ml-1">(-10 pts)</span>
        </button>
      </div>
    </div>

    {/* Overlays */}
    <FeedbackOverlay />
    <EndOverlay
      id="endgame-popup"
      data-score="0"
      data-category={category}
      data-categoryName={categoryData.headline}
      data-difficulty="mixed"
      data-mode="time-pressure"
    />
  </main>
</Layout>

<!-- Time Pressure Game Engine Script -->
<script>
  import { TimePressureGameEngine } from "../../utils/game/timePressureGameEngine";

  // Extend Window interface to include our game engine
  declare global {
    interface Window {
      currentGameEngine?: TimePressureGameEngine;
    }
  }

  // Function to initialize Time Pressure Game Engine
  const initTimePressureGame = async (): Promise<void> => {
    try {
      console.warn("Starting TimePressureGameEngine initialization...");

      const gameContainer = document.getElementById("game-container");
      const loadingContainer = document.getElementById("loading-container");
      const gameUI = document.getElementById("game-ui");

      if (!gameContainer || !loadingContainer || !gameUI) {
        console.error("Missing required DOM elements for game engine.");
        if (loadingContainer) {
          loadingContainer.innerHTML =
            '<div class="error-state">Failed to load game UI. Please refresh the page.</div>';
        }
        throw new Error("Missing required DOM elements");
      }

      // Extract category and language from URL
      const pathParts = document.location.pathname.split("/");
      const lang = pathParts[1];
      const categoryPart = pathParts[2];
      const category = categoryPart.startsWith("time-pressure-")
        ? categoryPart.replace("time-pressure-", "")
        : categoryPart;

      console.warn("Initializing game:", { category, lang });

      // Initialize Time Pressure Game with lang, category, and pathname
      const gameEngine = new TimePressureGameEngine({
        category,
        lang,
        gameContainer,
        loadingContainer,
        gameUI,
      });

      await gameEngine.initialize();

      // Store reference globally for cleanup if needed
      window.currentGameEngine = gameEngine;

      console.warn("Time Pressure Game Engine initialized successfully");
    } catch (err: unknown) {
      console.error("Failed to load TimePressureGameEngine:", err);
      const loadingContainer = document.getElementById("loading-container");
      if (loadingContainer) {
        loadingContainer.innerHTML =
          '<div class="error-state">Failed to load game. Please refresh the page.</div>';
      }
      throw err;
    }
  };

  // Initialize when DOM is ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initTimePressureGame);
  } else {
    initTimePressureGame();
  }
</script>
