---
/**
 * @component TimePressureGamePage
 * @description Renders a time pressure music trivia game page with mixed difficulty questions.
 * Features strict time limits, progressive scoring, and enhanced UI for urgency feedback.
 * This page implements full WCAG AAA accessibility standards.
 *
 * @prop {Object} categoryData - Data about the selected music category
 * @prop {string} categoryData.headline - Display name of the category
 * @prop {string} categoryData.slug - URL-safe identifier for the category
 * @prop {string} lang - Language code for the page content
 */
import Layout from "@layouts/Layout.astro";
import FeedbackOverlay from "@components/Overlays/FeedbackOverlay.astro";
import EndOverlay from "@components/Overlays/EndOverlay.astro";
import LoadingSpinner from "@components/Game/LoadingSpinner.astro";
import AchievementNotification from "@components/Achievements/AchievementNotification.astro";
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import { Icon } from "astro-icon/components";
import { requireAuth } from "../../middleware/auth.js";

// Server-side rendering for cookie-based authentication
export const prerender = false;

/**
 * Generates static paths for all supported languages and categories.
 * Time pressure mode doesn't use difficulty selection - all difficulties are mixed.
 * @returns {Array} Array of path objects with params and props
 */
export async function getStaticPaths() {
  // Define all supported languages for type safety
  const supportedLanguages = [
    "de",
    "en",
    "es",
    "fr",
    "it",
    "pt",
    "da",
    "nl",
    "sv",
    "fi",
    "cn",
    "ru",
    "jp",
    "uk",
  ] as const;

  const paths = [];

  for (const lang of supportedLanguages) {
    // Load categories based on language with proper fallback mechanism
    let categories;
    try {
      categories = await import(`@json/${lang}_categories.json`);
    } catch {
      // Fallback to default language if the specific language file doesn't exist
      categories = await import(`@json/en_categories.json`);
    }

    // Create a path for each category (no difficulty needed for time pressure)
    for (const categoryData of categories.default) {
      paths.push({
        params: {
          lang,
          category: categoryData.slug,
        },
        props: {
          categoryData,
          lang,
        },
      });
    }
  }

  return paths;
}

// Types for route props
interface Props {
  categoryData: {
    headline: string;
    slug: string;
  };
  lang: string;
}

// Extract props and URL parameters
const { categoryData: propsCategoryData } = Astro.props;
const lang = String(getLangFromUrl(Astro.url));
const t = useTranslations(lang);

// Require authentication for game play
// Check if Astro.request is available (for SSR compatibility)
let authResult: { authenticated: boolean; user?: { id: string; email: string } } = {
  authenticated: false,
  user: undefined,
};
if (Astro.request) {
  authResult = await requireAuth(Astro.request);
}

const { category } = Astro.params;

// Fallback mechanism for category data if props are not available
let categoryData = propsCategoryData;
if (!categoryData && category) {
  try {
    // Try to load category data dynamically
    const categories = await import(`@json/${lang}_categories.json`);
    categoryData = categories.default.find((cat: { slug: string }) => cat.slug === category);
  } catch (error) {
    console.error("Failed to load category data:", error);
    // Provide a fallback category data
    categoryData = {
      headline: category || "Unknown Category",
      slug: category || "unknown",
    };
  }
}

// Page metadata and SEO
const gameTitle = `${t("game.timepressure.title")} - ${categoryData.headline}`;
const gameDescription = t("game.timepressure.description").replace(
  "{category}",
  categoryData.headline
);

// Enhanced structured data for time pressure mode
const structuredData = {
  "@context": "https://schema.org",
  "@type": "Game",
  name: gameTitle,
  description: gameDescription,
  genre: "Music Trivia",
  gameLocation: "Online",
  applicationCategory: "Game",
  operatingSystem: "Web Browser",
  isAccessibleForFree: true,
  inLanguage: lang,
  offers: {
    "@type": "Offer",
    price: "0",
    priceCurrency: "EUR",
  },
  aggregateRating: {
    "@type": "AggregateRating",
    ratingValue: "4.8",
    ratingCount: "150",
  },
};
---

<Layout
  title={gameTitle}
  description={gameDescription}
  keywords={`${t("meta.keywords")}, time pressure, speed game`}
  image={`/og-images/social-share-time-pressure-${category}-${lang}.jpg`}
  type="website"
  showHeader={false}
>
  <Fragment slot="head">
    <script type="application/ld+json" set:html={JSON.stringify(structuredData)} />
    <meta name="robots" content="noindex, nofollow" />
  </Fragment>

  <main
    class="time-pressure-game"
    id="game-container"
    aria-live="polite"
    data-userID={authResult.user?.id || "guest"}
    data-categoryName={categoryData?.headline}
    data-genre={String(category)}
  >
    {/* Screen Reader Only Game Instructions */}
    <div class="sr-only" id="game-instructions">
      <h1>{gameTitle}</h1>
      <p>{t("game.timepressure.instructions")}</p>
      <p>{t("game.timepressure.controls")}</p>
    </div>

    {/* Loading State */}
    <div id="loading-container" class="game-loading" aria-label={t("game.loading")}>
      <LoadingSpinner label={t("game.loading.questions")} />
    </div>

    {/* Game UI Container */}
    <div id="game-ui" class="game-ui" style="display: none;" aria-labelledby="question-text">
      {/* Time Pressure Header */}
      <header class="time-pressure-header">
        <div class="game-stats">
          <div class="stat-item">
            <Icon name="target" class="stat-icon" aria-hidden="true" />
            <span class="stat-label">{t("game.score")}</span>
            <span id="score-display" class="stat-value">0</span>
          </div>
          <div class="stat-item">
            <Icon name="zap" class="stat-icon" aria-hidden="true" />
            <span class="stat-label">{t("game.timepressure.streak")}</span>
            <span id="streak-display" class="stat-value">0</span>
          </div>
          <div class="stat-item">
            <Icon name="percent" class="stat-icon" aria-hidden="true" />
            <span class="stat-label">{t("game.accuracy")}</span>
            <span id="accuracy-display" class="stat-value">0%</span>
          </div>
          <div class="stat-item timer-stat">
            <div
              id="countdown-circle"
              class="countdown-circle-stat"
              role="timer"
              aria-label={t("game.timepressure.countdown")}
            >
              <svg class="countdown-svg-stat" viewBox="0 0 40 40">
                <circle cx="20" cy="20" r="18" class="countdown-bg-stat"></circle>
                <circle
                  id="countdown-progress"
                  cx="20"
                  cy="20"
                  r="18"
                  class="countdown-progress-stat"></circle>
              </svg>
              <div class="countdown-content-stat">
                <span id="countdown-time" class="countdown-time-stat">0</span>
              </div>
            </div>
            <span class="stat-label">{t("game.timepressure.seconds")}</span>
            <div id="difficulty-indicator" class="difficulty-indicator-stat">
              <span id="difficulty-text" class="difficulty-text-stat"></span>
            </div>
          </div>
        </div>

        <div class="progress-container">
          <div class="progress-bar">
            <div
              id="progress-fill"
              class="progress-fill"
              role="progressbar"
              aria-valuenow="0"
              aria-valuemin="0"
              aria-valuemax="100"
            >
            </div>
          </div>
          <span class="progress-text">
            <span id="current-round">1</span> / <span id="total-rounds">20</span>
          </span>
        </div>
      </header>

      {/* Question Display */}
      <div class="question-container">
        <div id="question-text" class="question-text" aria-live="assertive"></div>
        <div id="question-image" class="question-image" style="display: none;">
          <img id="question-img" alt="" loading="lazy" />
        </div>
      </div>

      {/* Answer Options */}
      <div
        id="answer-options"
        class="answer-options"
        role="radiogroup"
        aria-labelledby="question-text"
      >
        {/* Answer buttons will be dynamically generated */}
      </div>

      {/* Game Controls */}
      <div class="game-controls">
        <button
          type="button"
          id="pause-btn"
          class="control-btn pause-btn"
          aria-label={t("game.pause")}
        >
          <span class="icon"><Icon name="pause" aria-hidden="true" /></span>
          <span class="text">{t("game.pause")}</span>
        </button>

        <button
          type="button"
          id="skip-btn"
          class="control-btn skip-btn"
          aria-label={t("game.timepressure.skip")}
        >
          <span class="icon"><Icon name="skip-forward" aria-hidden="true" /></span>
          <span class="text">{t("game.timepressure.skip")}</span>
          <span id="skip-cost" class="skip-cost">(-10 pts)</span>
        </button>
      </div>
    </div>

    {/* Overlays */}
    <FeedbackOverlay />
    <EndOverlay
      id="end-overlay"
      data-score="0"
      data-category={category}
      data-categoryName={categoryData.headline}
      data-difficulty="mixed"
      data-mode="time-pressure"
    />
    <AchievementNotification {lang} />
  </main>
</Layout>

<style lang="scss" is:global>
  /* ======================================
   * TIME PRESSURE GAME STYLES - OPTIMIZED FOR STYLE GUARDIAN
   * BEM Methodology + Global Variables + Mobile-First
   * ====================================== */

  .time-pressure-game {
    min-height: 100vh;
    background: var(--bg-primary);
    color: var(--text-primary);
    display: flex;
    flex-direction: column;
    position: relative;
    contain: layout style paint;
  }

  .game-loading {
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    contain: layout style paint;
  }

  .game-ui {
    flex: 1;
    display: flex;
    flex-direction: column;
    padding: var(--space-xs); // Mobile: minimal horizontal spacing
    max-width: var(--container-lg);
    margin: 0 auto;
    width: 100%;
    contain: layout style paint;

    @media (min-width: 20em) {
      padding: var(--space-sm);
    }

    @media (min-width: 48em) {
      padding: var(--space-md);
    }

    @media (min-width: 64em) {
      padding: var(--space-lg);
    }
  }

  /* ======================================
   * ANSWER BUTTON STYLES
   * ====================================== */
  .answer-btn,
  .answer-options .answer-btn,
  #answer-options .answer-btn,
  .answer-options button,
  #answer-options button {
    display: flex;
    align-items: center;
    gap: var(--space-sm);
    padding: var(--space-sm);
    background: var(--bg-primary);
    border: var(--border-width-thick) solid var(--border-primary);
    border-radius: var(--radius-md);
    color: var(--text-primary);
    font-size: var(--text-sm);
    font-weight: var(--font-medium);
    text-align: left;
    cursor: pointer;
    transition: all var(--transition-base);
    min-height: var(--touch-target-standard);
    box-shadow: var(--shadow-md);
    width: 100%;
    contain: layout style paint;

    @media (min-width: 48em) {
      padding: var(--space-md);
      font-size: var(--text-base);
      min-height: var(--touch-target-enhanced);
      border-radius: var(--radius-lg);
    }

    &:hover {
      border-color: var(--color-primary-500);
      box-shadow: var(--shadow-lg);
      background: var(--bg-secondary);
    }

    &:active {
      background: var(--bg-tertiary);
      box-shadow: var(--shadow-sm);
    }

    &:focus {
      outline: var(--focus-ring);
      outline-offset: var(--focus-ring-offset);
    }

    &.selected {
      background: var(--color-primary-100);
      border-color: var(--color-primary-600);
      box-shadow: var(--shadow-xl);
    }

    &.correct {
      background: var(--color-success-100);
      border-color: var(--color-success-600);
      color: var(--color-success-900);
    }

    &.incorrect {
      background: var(--color-error-100);
      border-color: var(--color-error-600);
      color: var(--color-error-900);
    }

    .answer-shortcut,
    .answer-text {
      pointer-events: none;
      z-index: 1;
      position: relative;
    }
  }

  .answer-shortcut {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 20px;
    height: 20px;
    background: var(--color-primary-600);
    color: var(--color-white);
    border-radius: var(--radius-sm);
    font-size: 10px;
    font-weight: var(--font-bold);
    flex-shrink: 0;
    margin-right: var(--space-sm);
    contain: layout style paint;

    @media (min-width: 48em) {
      width: var(--space-2xl);
      height: var(--space-2xl);
      font-size: var(--text-sm);
      border-radius: var(--radius-md);
    }
  }

  .answer-text {
    flex: 1;
    line-height: 1.4;
    font-weight: var(--font-medium);
    color: var(--text-primary);
    font-size: var(--text-sm);
    text-align: left;
    contain: layout style;

    @media (min-width: 48em) {
      font-size: var(--text-base);
      line-height: 1.5;
    }
  }

  /* ======================================
   * TIME PRESSURE HEADER
   * ====================================== */
  .time-pressure-header {
    background: linear-gradient(135deg, var(--primary-600) 0%, var(--secondary-600) 100%);
    border-radius: var(--radius-lg);
    padding: var(--space-sm);
    margin-bottom: var(--space-md);
    box-shadow: var(--shadow-lg);
    position: relative;
    overflow: hidden;
    contain: layout style paint;

    @media (min-width: 48em) {
      padding: var(--space-md);
      margin-bottom: var(--space-lg);
    }
  }

  .game-stats {
    position: relative;
    z-index: 1;
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: var(--space-xs);
    margin-bottom: var(--space-sm);
    contain: layout style;

    @media (min-width: 48em) {
      grid-template-columns: repeat(4, 1fr);
      gap: var(--space-sm);
      margin-bottom: var(--space-md);
    }

    @media (max-width: 19.9375em) {
      grid-template-columns: 1fr;
      grid-template-rows: repeat(4, 1fr);
    }
  }

  .stat-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    padding: var(--space-xs);
    background: rgba(255, 255, 255, 0.15);
    backdrop-filter: blur(10px);
    border-radius: var(--radius-sm);
    border: 1px solid rgba(255, 255, 255, 0.2);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    contain: layout style paint;

    @media (min-width: 48em) {
      padding: var(--space-xs) var(--space-sm);
      border-radius: var(--radius-md);
    }

    &.timer-stat {
      position: relative;
    }
  }

  .stat-icon {
    width: var(--icon-size-sm);
    height: var(--icon-size-sm);
    color: rgba(255, 255, 255, 0.9);
    margin-bottom: var(--space-xs);
    contain: layout style paint;

    @media (min-width: 48em) {
      width: var(--icon-size-md);
      height: var(--icon-size-md);
    }
  }

  .stat-label {
    font-size: 10px;
    color: rgba(255, 255, 255, 0.8);
    margin-bottom: var(--space-xs);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    font-weight: var(--font-medium);
    contain: layout style;

    @media (min-width: 48em) {
      font-size: var(--text-xs);
    }
  }

  .stat-value {
    font-size: var(--text-lg);
    font-weight: var(--font-bold);
    color: var(--color-white);
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
    contain: layout style;

    @media (min-width: 48em) {
      font-size: var(--text-xl);
    }
  }

  /* ======================================
   * COUNTDOWN CIRCLE
   * ====================================== */
  .countdown-circle-stat {
    position: relative;
    width: 28px;
    height: 28px;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: var(--space-xs);
    contain: layout style paint;

    @media (min-width: 48em) {
      width: 32px;
      height: 32px;
    }
  }

  .countdown-svg-stat {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    transform: rotate(-90deg);
    contain: layout style paint;
  }

  .countdown-bg-stat {
    fill: none;
    stroke: rgba(255, 255, 255, 0.3);
    stroke-width: 2;
  }

  .countdown-progress-stat,
  #countdown-progress {
    fill: none;
    stroke: var(--color-white);
    stroke-width: 2;
    stroke-linecap: round;
    stroke-dasharray: 113;
    stroke-dashoffset: 113;
    transition: stroke var(--transition-base);
    filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.2));
    contain: layout style paint;

    &.urgent {
      stroke: var(--color-error);
    }

    &.warning {
      stroke: var(--color-warning);
    }
  }

  .countdown-content-stat {
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    contain: layout style;
  }

  .countdown-time-stat {
    font-size: var(--text-xs);
    font-weight: var(--font-bold);
    color: var(--color-white);
    line-height: 1;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
    contain: layout style;

    @media (min-width: 48em) {
      font-size: var(--text-sm);
    }
  }

  .difficulty-indicator-stat {
    margin-top: var(--space-xs);
    contain: layout style;
  }

  .difficulty-text-stat {
    font-size: 10px;
    font-weight: var(--font-medium);
    color: rgba(255, 255, 255, 0.8);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    contain: layout style;

    @media (min-width: 48em) {
      font-size: var(--text-xs);
    }
  }

  .timer-stat {
    &.easy .difficulty-text-stat {
      color: var(--color-success);
    }

    &.medium .difficulty-text-stat {
      color: var(--color-warning);
    }

    &.hard .difficulty-text-stat {
      color: var(--color-error);
    }
  }

  /* ======================================
   * PROGRESS BAR
   * ====================================== */
  .progress-container {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    gap: var(--space-sm);
    margin-bottom: var(--space-sm);
    contain: layout style;

    @media (min-width: 48em) {
      gap: var(--space-md);
      margin-bottom: var(--space-md);
    }
  }

  .progress-bar {
    flex: 1;
    height: 6px;
    background: rgba(255, 255, 255, 0.2);
    border-radius: var(--radius-full);
    overflow: hidden;
    position: relative;
    box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
    contain: layout style paint;

    @media (min-width: 48em) {
      height: 8px;
    }
  }

  .progress-fill {
    height: 100%;
    background: linear-gradient(90deg, var(--color-white) 0%, rgba(255, 255, 255, 0.8) 100%);
    border-radius: var(--radius-full);
    transition: width var(--transition-base) ease-out;
    position: relative;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
    contain: layout style paint;
  }

  .progress-text {
    font-size: var(--text-xs);
    font-weight: var(--font-medium);
    color: rgba(255, 255, 255, 0.9);
    white-space: nowrap;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
    contain: layout style;

    @media (min-width: 48em) {
      font-size: var(--text-sm);
    }
  }

  /* ======================================
   * QUESTION CONTAINER
   * ====================================== */
  .question-container {
    text-align: center;
    margin-bottom: var(--space-lg);
    padding: var(--space-md);
    background: linear-gradient(135deg, var(--bg-secondary) 0%, var(--bg-tertiary) 100%);
    border-radius: var(--radius-lg);
    box-shadow: var(--shadow-lg);
    position: relative;
    overflow: hidden;
    contain: layout style paint;

    @media (min-width: 48em) {
      margin-bottom: var(--space-2xl);
      padding: var(--space-lg);
      border-radius: var(--radius-xl);
    }
  }

  .question-text {
    position: relative;
    z-index: 1;
    font-size: var(--text-lg);
    font-weight: var(--font-semibold);
    line-height: 1.4;
    color: var(--text-primary);
    margin-bottom: var(--space-md);
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    contain: layout style;

    @media (min-width: 48em) {
      font-size: var(--text-xl);
      line-height: var(--leading-relaxed);
      margin-bottom: var(--space-lg);
    }

    @media (min-width: 64em) {
      font-size: var(--text-2xl);
    }

    @media (max-width: 19.9375em) {
      font-size: var(--text-base);
      line-height: 1.3;
    }
  }

  .question-image {
    margin: var(--space-lg) auto;
    max-width: 300px;
    contain: layout style paint;

    img {
      width: 100%;
      height: auto;
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-md);
    }
  }

  /* ======================================
   * ANSWER OPTIONS
   * ====================================== */
  .answer-options {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--space-sm);
    margin-bottom: var(--space-lg);
    contain: layout style;

    @media (min-width: 48em) {
      grid-template-columns: repeat(2, 1fr);
      gap: var(--space-md);
      margin-bottom: var(--space-xl);
    }
  }

  /* ======================================
   * GAME CONTROLS
   * ====================================== */
  .game-controls {
    display: flex;
    justify-content: center;
    gap: var(--space-sm);
    margin-top: auto;
    padding: var(--space-sm);
    contain: layout style;

    @media (min-width: 48em) {
      flex-direction: row;
      gap: var(--space-lg);
      padding: var(--space-md);
    }

    @media (max-width: 47.9375em) {
      flex-direction: column;
    }
  }

  .control-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-sm);
    padding: var(--space-sm) var(--space-md);
    background: linear-gradient(135deg, var(--bg-secondary) 0%, var(--bg-tertiary) 100%);
    border: 2px solid var(--border-primary);
    border-radius: var(--radius-md);
    color: var(--text-primary);
    font-size: var(--text-sm);
    font-weight: var(--font-semibold);
    cursor: pointer;
    transition: all var(--transition-base);
    min-height: var(--touch-target-standard);
    box-shadow: var(--shadow-md);
    position: relative;
    overflow: hidden;
    white-space: nowrap;
    text-decoration: none;
    contain: layout style paint;

    @media (min-width: 48em) {
      padding: var(--space-md) var(--space-lg);
      font-size: var(--text-sm);
      min-height: var(--touch-target-enhanced);
      border-radius: var(--radius-lg);
    }

    @media (max-width: 47.9375em) {
      width: 100%;
    }

    .icon {
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
      contain: layout style paint;
    }

    .text {
      font-weight: var(--font-semibold);
      font-size: var(--text-sm);
      contain: layout style;
    }

    .skip-cost {
      font-size: var(--text-xs);
      opacity: 0.8;
      margin-left: var(--space-xs);
      contain: layout style;
    }

    &:hover:not(:disabled) {
      background: linear-gradient(
        135deg,
        var(--color-primary-100) 0%,
        var(--color-secondary-100) 100%
      );
      border-color: var(--color-primary-500);
      box-shadow: var(--shadow-lg);
      color: var(--color-primary-700);
    }

    &:active:not(:disabled) {
      box-shadow: var(--shadow-xs);
    }

    &:disabled {
      opacity: 0.5;
      cursor: not-allowed;
      filter: grayscale(0.5);
    }

    &:focus {
      outline: var(--focus-ring);
      outline-offset: var(--focus-ring-offset);
    }

    svg {
      width: 18px;
      height: 18px;
      transition: transform var(--transition-base);
      contain: layout style paint;
    }

    &:hover:not(:disabled) svg {
      transform: scale(1.1);
    }
  }

  .skip-cost {
    font-size: var(--text-xs);
    color: var(--text-tertiary);
    contain: layout style;
  }

  /* ======================================
   * ACCESSIBILITY
   * ====================================== */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  /* ======================================
   * REDUCED MOTION
   * ====================================== */
  @media (prefers-reduced-motion: reduce) {
    .countdown-progress-stat,
    #countdown-progress,
    .progress-fill,
    .answer-btn,
    .control-btn,
    .stat-item,
    .countdown-circle-stat {
      transition: none;
      animation: none;
      transform: none;
    }

    .countdown-circle-stat.urgent {
      animation: none;
    }

    .game-ui,
    .game-ui > * {
      animation: none;
    }

    .answer-btn:hover,
    .control-btn:hover:not(:disabled) {
      transform: none;
      animation: none;
    }
  }

  /* ======================================
   * FOCUS STYLES
   * ====================================== */
  :focus {
    outline: var(--focus-ring);
    outline-offset: var(--focus-ring-offset);

    &:not(:focus-visible) {
      outline: none;
    }
  }

  :focus-visible {
    outline: var(--focus-ring);
    outline-offset: var(--focus-ring-offset);
  }
</style>

<!-- Time Pressure Game Engine Script -->
<script type="module" is:inline>
  // Function to initialize Time Pressure Game Engine
  const initTimePressureGame = () => {
    // Import and initialize the time pressure game engine
    import("/src/scripts/timePressureGameEngine.js")
    .then(({ TimePressureGameEngine }) => {
      const gameContainer = document.getElementById("game-container");
      const loadingContainer = document.getElementById("loading-container");
      const gameUI = document.getElementById("game-ui");

      if (!gameContainer || !loadingContainer || !gameUI) {
        console.error("Missing required DOM elements for game engine.");
        if (loadingContainer) {
          loadingContainer.innerHTML =
            '<div class="error-state">Failed to load game UI. Please refresh the page.</div>';
        }
        throw new Error("Missing required DOM elements");
      }

      // Extract category and language from URL
      const pathParts = document.location.pathname.split("/");
      const lang = pathParts[1];
      const categoryPart = pathParts[2];
      const category = categoryPart.startsWith("time-pressure-")
        ? categoryPart.replace("time-pressure-", "")
        : categoryPart;

      // Initializing Time Pressure Game with lang, category, and pathname

      const gameEngine = new TimePressureGameEngine({
        category,
        lang,
        gameContainer,
        loadingContainer,
        gameUI,
      });
      gameEngine.initialize();
      return gameEngine;
    })
    .catch((err) => {
      console.error("Failed to load TimePressureGameEngine:", err);
      // Optionale Fehleranzeige im UI
      const loadingContainer = document.getElementById("loading-container");
      if (loadingContainer) {
        loadingContainer.innerHTML =
          '<div class="error-state">Failed to load game. Please refresh the page.</div>';
      }
      throw err;
    });
  };

  // Initialize on DOM ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initTimePressureGame);
  } else {
    initTimePressureGame();
  }
</script>
