---
/**
 * Daily Facts Archive Page
 * Browse and search all music history facts
 */

import Layout from "../../../layouts/Layout.astro";
import DailyFact from "../../../components/DailyFact.astro";
import {
  getDailyMusicFact,
  getFactStats,
  getAllFacts,
} from "../../../services/dailyFactsService.ts";
import { useTranslations } from "../../../utils/i18n.ts";
import { extractKeywords, generateMetaDescription } from "../../../utils/seo.ts";

const { lang } = Astro.params;
const currentLang = lang || "de";
const t = useTranslations(currentLang);

// Get statistics about facts available
const stats = await getFactStats(currentLang);

// Get today's fact for featured section
const todaysFact = await getDailyMusicFact(currentLang);

// Get all facts for the archive
const allFacts = await getAllFacts(currentLang);

// SEO content
const pageTitle = t("dailyFacts.archive.title");
const pageDescription = t("dailyFacts.archive.subtitle");
const enrichedContent = `${pageTitle} ${pageDescription} ${stats.total} Fakten verf√ºgbar`;
const optimizedDescription = generateMetaDescription(enrichedContent, 155);
const seoKeywords = extractKeywords(enrichedContent, 15, currentLang);

const baseUrl = Astro.site?.toString() || "https://melody-mind.de";
const currentUrl = `${baseUrl}/${currentLang}/daily-facts/archive`;
---

<Layout
  title={`${pageTitle} - MelodyMind`}
  description={optimizedDescription}
  keywords={seoKeywords}
  image="/images/daily-facts-archive-og.png"
  type="website"
  publishDate={new Date()}
  modifiedDate={new Date()}
>
  <Fragment slot="head">
    <link rel="canonical" href={currentUrl} />
    <meta property="article:section" content="Music History Archive" />
    <meta property="article:tag" content="Music Facts" />
    <meta property="article:tag" content="Archive" />
  </Fragment>

  <main class="archive-page">
    <div class="archive-page__container">
      <!-- Breadcrumb Navigation -->
      <nav class="archive-page__breadcrumb" aria-label="Breadcrumb">
        <ol class="archive-page__breadcrumb-list">
          <li class="archive-page__breadcrumb-item">
            <a href={`/${currentLang}`} class="archive-page__breadcrumb-link">Home</a>
          </li>
          <li class="archive-page__breadcrumb-item">
            <a href={`/${currentLang}/daily-facts`} class="archive-page__breadcrumb-link">
              {t("dailyFacts.title")}
            </a>
          </li>
          <li class="archive-page__breadcrumb-item" aria-current="page">
            {pageTitle}
          </li>
        </ol>
      </nav>

      <!-- Hero Section -->
      <header class="archive-page__hero">
        <div class="archive-page__hero-content">
          <h1 class="archive-page__title">{pageTitle}</h1>
          <p class="archive-page__subtitle">{pageDescription}</p>

          <div class="archive-page__stats">
            <div class="archive-page__stat">
              <span class="archive-page__stat-number">{stats.total}</span>
              <span class="archive-page__stat-label">Fakten insgesamt</span>
            </div>
            <div class="archive-page__stat">
              <span class="archive-page__stat-number">{stats.daysWithFacts}</span>
              <span class="archive-page__stat-label">Tage mit Fakten</span>
            </div>
          </div>
        </div>
      </header>

      <!-- Search and Filter Section -->
      <section class="archive-page__controls" aria-labelledby="controls-title">
        <h2 id="controls-title" class="sr-only">Suche und Filter</h2>

        <div class="archive-page__search-bar">
          <input
            type="search"
            class="archive-page__search-input"
            placeholder="Suche nach K√ºnstlern, Alben, oder Ereignissen..."
            aria-label="Suche Musikfakten"
            id="fact-search"
          />
          <button type="button" class="archive-page__search-btn" aria-label="Suchen"> üîç </button>
        </div>

        <div class="archive-page__filters">
          <label for="month-filter" class="archive-page__filter-label">Monat:</label>
          <select id="month-filter" class="archive-page__filter-select">
            <option value="">Alle Monate</option>
            <option value="01">Januar</option>
            <option value="02">Februar</option>
            <option value="03">M√§rz</option>
            <option value="04">April</option>
            <option value="05">Mai</option>
            <option value="06">Juni</option>
            <option value="07">Juli</option>
            <option value="08">August</option>
            <option value="09">September</option>
            <option value="10">Oktober</option>
            <option value="11">November</option>
            <option value="12">Dezember</option>
          </select>

          <label for="category-filter" class="archive-page__filter-label">Kategorie:</label>
          <select id="category-filter" class="archive-page__filter-select">
            <option value="">Alle Kategorien</option>
            <option value="birth">{t("dailyFacts.categories.birth")}</option>
            <option value="death">{t("dailyFacts.categories.death")}</option>
            <option value="release">{t("dailyFacts.categories.release")}</option>
            <option value="event">{t("dailyFacts.categories.event")}</option>
            <option value="milestone">{t("dailyFacts.categories.milestone")}</option>
            <option value="formation">{t("dailyFacts.categories.formation")}</option>
            <option value="breakthrough">{t("dailyFacts.categories.breakthrough")}</option>
          </select>
        </div>
      </section>

      <!-- Featured Today's Fact -->
      {
        todaysFact && (
          <section class="archive-page__featured" aria-labelledby="featured-title">
            <h2 id="featured-title" class="archive-page__section-title">
              ‚≠ê Heute aktuell
            </h2>
            <div class="archive-page__featured-fact">
              <DailyFact lang={currentLang} showDate={true} compact={false} />
            </div>
          </section>
        )
      }

      <!-- Results Section -->
      <section class="archive-page__results" aria-labelledby="results-title">
        <div class="archive-page__results-header">
          <h2 id="results-title" class="archive-page__section-title">üìö Alle Fakten</h2>
          <div class="archive-page__results-count" role="status" aria-live="polite">
            <span id="results-count">{stats.total} Fakten gefunden</span>
          </div>
        </div>

        <div class="archive-page__facts-grid" id="facts-container">
          {
            allFacts.slice(0, 12).map((fact) => (
              <div
                class="archive-page__fact-item"
                data-fact-id={fact.id}
                data-fact-date={fact.date}
                data-fact-title={fact.title}
                data-fact-artist={fact.artist || ""}
                data-fact-category={fact.category}
              >
                <div class="archive-page__fact-date-badge">
                  {new Date(
                    fact.year || 2024,
                    parseInt(fact.date.split("-")[0]) - 1,
                    parseInt(fact.date.split("-")[1])
                  ).toLocaleDateString(currentLang, { day: "numeric", month: "short" })}
                  {fact.year && <span class="archive-page__fact-year">{fact.year}</span>}
                </div>
                <div class="archive-page__fact-content">
                  <div class="archive-page__fact-category" data-category={fact.category}>
                    {t(`dailyFacts.categories.${fact.category}` as any)}
                  </div>
                  <h3 class="archive-page__fact-title">{fact.title}</h3>
                  <p class="archive-page__fact-description">{fact.description}</p>
                  {fact.artist && (
                    <div class="archive-page__fact-meta">
                      <span class="archive-page__fact-artist">üé§ {fact.artist}</span>
                      {fact.genre && <span class="archive-page__fact-genre">üéµ {fact.genre}</span>}
                    </div>
                  )}
                </div>
              </div>
            ))
          }
          <div class="archive-page__loading" style="display: none;">
            <p>Fakten werden geladen...</p>
          </div>
        </div>

        <div class="archive-page__load-more">
          <button type="button" class="archive-page__load-more-btn" id="load-more-btn">
            Mehr Fakten laden
          </button>
        </div>
      </section>

      <!-- Category Statistics -->
      <section class="archive-page__category-stats" aria-labelledby="stats-title">
        <h2 id="stats-title" class="archive-page__section-title">üìä Fakten nach Kategorien</h2>

        <div class="archive-page__stats-grid">
          {
            Object.entries(stats.byCategory).map(([category, count]) => (
              <div class="archive-page__category-stat">
                <div class="archive-page__category-stat-count">{count}</div>
                <div class="archive-page__category-stat-name">
                  {t(`dailyFacts.categories.${category}` as any)}
                </div>
              </div>
            ))
          }
        </div>
      </section>
    </div>
  </main>
</Layout>

<style lang="scss">
  /* ======================================
   * ARCHIVE PAGE STYLES - OPTIMIZED FOR STYLE GUARDIAN
   * BEM Methodology + Global Variables + Mobile-First
   * ====================================== */

  .archive-page {
    min-height: 100vh;
    background: var(--bg-primary);
    color: var(--text-primary);
    padding: var(--space-xs) 0; // Mobile: minimal horizontal spacing
    contain: layout style paint;

    @media (min-width: 20em) {
      padding: var(--space-sm) 0;
    }

    @media (min-width: 48em) {
      padding: var(--space-lg) 0;
    }

    @media (min-width: 64em) {
      padding: var(--space-xl) 0;
    }
  }

  .archive-page__container {
    max-width: var(--container-xl);
    margin: 0 auto;
    padding: 0 var(--space-xs); // Mobile: minimal horizontal spacing
    contain: layout style;

    @media (min-width: 20em) {
      padding: 0 var(--space-sm);
    }

    @media (min-width: 48em) {
      padding: 0 var(--space-md);
    }

    @media (min-width: 64em) {
      padding: 0 var(--space-xl);
    }
  }

  /* ======================================
   * BREADCRUMB NAVIGATION
   * ====================================== */
  .archive-page__breadcrumb {
    margin-bottom: var(--space-md);
    contain: layout style;

    @media (min-width: 48em) {
      margin-bottom: var(--space-lg);
    }
  }

  .archive-page__breadcrumb-list {
    display: flex;
    list-style: none;
    padding: 0;
    margin: 0;
    gap: var(--space-sm);
    align-items: center;
    contain: layout style;
  }

  .archive-page__breadcrumb-item {
    font-size: var(--text-xs);
    contain: layout style;

    @media (min-width: 48em) {
      font-size: var(--text-sm);
    }

    &:not(:last-child)::after {
      content: "‚Üí";
      margin-left: var(--space-sm);
      color: var(--text-tertiary);
    }

    &[aria-current="page"] {
      color: var(--text-secondary);
      font-weight: var(--font-medium);
    }
  }

  .archive-page__breadcrumb-link {
    color: var(--primary-600);
    text-decoration: none;
    transition: color var(--transition-base);
    contain: layout style;

    &:hover {
      color: var(--primary-700);
    }
  }

  /* ======================================
   * HERO SECTION
   * ====================================== */
  .archive-page__hero {
    text-align: center;
    margin-bottom: var(--space-lg);
    padding: var(--space-md) 0;
    background: linear-gradient(135deg, var(--primary-900), var(--secondary-800));
    border-radius: var(--radius-lg);
    color: var(--color-white);
    contain: layout style paint;

    @media (min-width: 48em) {
      margin-bottom: var(--space-2xl);
      padding: var(--space-xl) 0;
      border-radius: var(--radius-xl);
    }
  }

  .archive-page__title {
    font-size: var(--text-xl);
    font-weight: var(--font-bold);
    margin-bottom: var(--space-sm);
    text-shadow: var(--text-shadow-strong);
    contain: layout style;

    @media (min-width: 48em) {
      font-size: var(--text-2xl);
      margin-bottom: var(--space-md);
    }

    @media (min-width: 64em) {
      font-size: var(--text-3xl);
    }

    @media (min-width: 80em) {
      font-size: var(--text-4xl);
    }
  }

  .archive-page__subtitle {
    font-size: var(--text-sm);
    opacity: 0.9;
    margin-bottom: var(--space-lg);
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
    contain: layout style;

    @media (min-width: 48em) {
      font-size: var(--text-lg);
      margin-bottom: var(--space-xl);
    }
  }

  .archive-page__stats {
    display: flex;
    justify-content: center;
    gap: var(--space-md);
    flex-wrap: wrap;
    contain: layout style;

    @media (min-width: 48em) {
      gap: var(--space-xl);
    }
  }

  .archive-page__stat {
    display: flex;
    flex-direction: column;
    align-items: center;
    background: rgba(255, 255, 255, 0.1);
    padding: var(--space-sm) var(--space-md);
    border-radius: var(--radius-md);
    backdrop-filter: blur(10px);
    contain: layout style paint;

    @media (min-width: 48em) {
      padding: var(--space-md) var(--space-lg);
      border-radius: var(--radius-lg);
    }
  }

  .archive-page__stat-number {
    font-size: var(--text-xl);
    font-weight: var(--font-bold);
    line-height: 1;
    margin-bottom: var(--space-xs);
    contain: layout style;

    @media (min-width: 48em) {
      font-size: var(--text-2xl);
    }
  }

  .archive-page__stat-label {
    font-size: var(--text-xs);
    opacity: 0.8;
    contain: layout style;

    @media (min-width: 48em) {
      font-size: var(--text-sm);
    }
  }

  /* ======================================
   * CONTROLS SECTION
   * ====================================== */
  .archive-page__controls {
    background: var(--bg-secondary);
    border-radius: var(--radius-lg);
    padding: var(--space-md);
    margin-bottom: var(--space-lg);
    box-shadow: var(--shadow-sm);
    contain: layout style paint;

    @media (min-width: 48em) {
      border-radius: var(--radius-xl);
      padding: var(--space-lg);
      margin-bottom: var(--space-2xl);
    }
  }

  .archive-page__search-bar {
    display: flex;
    gap: var(--space-sm);
    margin-bottom: var(--space-md);
    contain: layout style;

    @media (min-width: 48em) {
      margin-bottom: var(--space-lg);
    }
  }

  .archive-page__search-input {
    flex: 1;
    padding: var(--space-sm) var(--space-md);
    border: 1px solid var(--border-color);
    border-radius: var(--radius-md);
    background: var(--bg-primary);
    color: var(--text-primary);
    font-size: var(--text-sm);
    contain: layout style paint;

    @media (min-width: 48em) {
      font-size: var(--text-base);
      border-radius: var(--radius-lg);
    }

    &:focus {
      outline: var(--focus-ring);
      outline-offset: var(--focus-ring-offset);
      border-color: var(--primary-400);
    }
  }

  .archive-page__search-btn {
    padding: var(--space-sm) var(--space-md);
    background: var(--primary-600);
    color: var(--color-white);
    border: none;
    border-radius: var(--radius-md);
    cursor: pointer;
    font-size: var(--text-sm);
    transition: all var(--transition-base);
    contain: layout style paint;

    @media (min-width: 48em) {
      font-size: var(--text-base);
      border-radius: var(--radius-lg);
    }

    &:hover {
      background: var(--primary-700);
    }
  }

  .archive-page__filters {
    display: flex;
    gap: var(--space-sm);
    align-items: center;
    flex-wrap: wrap;
    contain: layout style;

    @media (min-width: 48em) {
      gap: var(--space-md);
    }
  }

  .archive-page__filter-label {
    font-size: var(--text-xs);
    font-weight: var(--font-medium);
    color: var(--text-primary);
    contain: layout style;

    @media (min-width: 48em) {
      font-size: var(--text-sm);
    }
  }

  .archive-page__filter-select {
    padding: var(--space-xs) var(--space-sm);
    border: 1px solid var(--border-color);
    border-radius: var(--radius-md);
    background: var(--bg-primary);
    color: var(--text-primary);
    font-size: var(--text-xs);
    contain: layout style paint;

    @media (min-width: 48em) {
      font-size: var(--text-sm);
    }
  }

  /* ======================================
   * SECTION TITLES
   * ====================================== */
  .archive-page__section-title {
    font-size: var(--text-lg);
    font-weight: var(--font-bold);
    margin-bottom: var(--space-md);
    color: var(--text-primary);
    contain: layout style;

    @media (min-width: 48em) {
      font-size: var(--text-xl);
      margin-bottom: var(--space-lg);
    }
  }

  /* ======================================
   * FEATURED SECTION
   * ====================================== */
  .archive-page__featured {
    margin-bottom: var(--space-lg);
    contain: layout style;

    @media (min-width: 48em) {
      margin-bottom: var(--space-2xl);
    }
  }

  .archive-page__featured-fact {
    background: var(--bg-secondary);
    border-radius: var(--radius-lg);
    overflow: hidden;
    box-shadow: var(--shadow-lg);
    contain: layout style paint;

    @media (min-width: 48em) {
      border-radius: var(--radius-xl);
    }
  }

  /* ======================================
   * RESULTS SECTION
   * ====================================== */
  .archive-page__results-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--space-md);
    flex-wrap: wrap;
    gap: var(--space-sm);
    contain: layout style;

    @media (min-width: 48em) {
      margin-bottom: var(--space-lg);
      gap: var(--space-sm);
    }
  }

  .archive-page__results-count {
    font-size: var(--text-xs);
    color: var(--text-secondary);
    background: var(--bg-secondary);
    padding: var(--space-xs) var(--space-sm);
    border-radius: var(--radius-md);
    contain: layout style paint;

    @media (min-width: 48em) {
      font-size: var(--text-sm);
    }
  }

  .archive-page__facts-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--space-md);
    margin-bottom: var(--space-lg);
    contain: layout style;

    @media (min-width: 48em) {
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: var(--space-lg);
      margin-bottom: var(--space-xl);
    }
  }

  .archive-page__fact-item {
    background: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: var(--radius-lg);
    overflow: hidden;
    transition: all var(--transition-base);
    position: relative;
    contain: layout style paint;

    @media (min-width: 48em) {
      border-radius: var(--radius-xl);
    }

    &:hover {
      box-shadow: var(--shadow-lg);
      border-color: var(--primary-400);
    }
  }

  .archive-page__fact-date-badge {
    position: absolute;
    top: var(--space-sm);
    right: var(--space-sm);
    background: var(--primary-600);
    color: var(--color-white);
    padding: var(--space-xs) var(--space-sm);
    border-radius: var(--radius-full);
    font-size: var(--text-xs);
    font-weight: var(--font-bold);
    text-align: center;
    line-height: 1;
    z-index: 2;
    contain: layout style paint;
  }

  .archive-page__fact-year {
    display: block;
    font-size: var(--text-xs);
    opacity: 0.8;
    margin-top: var(--space-xs);
    contain: layout style;
  }

  .archive-page__fact-content {
    padding: var(--space-md);
    contain: layout style;

    @media (min-width: 48em) {
      padding: var(--space-lg);
    }
  }

  .archive-page__fact-category {
    display: inline-block;
    font-size: var(--text-xs);
    font-weight: var(--font-semibold);
    padding: var(--space-xs) var(--space-sm);
    border-radius: var(--radius-full);
    margin-bottom: var(--space-sm);
    contain: layout style paint;

    @media (min-width: 48em) {
      margin-bottom: var(--space-md);
    }

    &[data-category="birth"] {
      background: var(--bg-success-aaa);
      color: var(--color-green-600);
    }
    &[data-category="death"] {
      background: var(--bg-error-aaa);
      color: var(--color-red-600);
    }
    &[data-category="release"] {
      background: var(--bg-info-aaa);
      color: var(--color-blue-600);
    }
    &[data-category="event"] {
      background: var(--bg-warning-aaa);
      color: var(--color-purple-600);
    }
    &[data-category="milestone"] {
      background: var(--bg-warning-aaa);
      color: var(--color-yellow-700);
    }
    &[data-category="formation"] {
      background: var(--primary-100);
      color: var(--color-indigo-600);
    }
    &[data-category="breakthrough"] {
      background: var(--secondary-100);
      color: var(--color-pink-600);
    }
  }

  .archive-page__fact-title {
    font-size: var(--text-base);
    font-weight: var(--font-bold);
    color: var(--text-primary);
    margin-bottom: var(--space-sm);
    line-height: var(--leading-tight);
    contain: layout style;

    @media (min-width: 48em) {
      font-size: var(--text-lg);
    }
  }

  .archive-page__fact-description {
    color: var(--text-secondary);
    line-height: var(--leading-relaxed);
    margin-bottom: var(--space-sm);
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
    contain: layout style;

    @media (min-width: 48em) {
      margin-bottom: var(--space-md);
    }
  }

  .archive-page__fact-meta {
    display: flex;
    gap: var(--space-sm);
    flex-wrap: wrap;
    contain: layout style;

    @media (min-width: 48em) {
      gap: var(--space-md);
    }
  }

  .archive-page__fact-artist,
  .archive-page__fact-genre {
    font-size: var(--text-xs);
    color: var(--text-tertiary);
    background: var(--bg-tertiary);
    padding: var(--space-xs) var(--space-sm);
    border-radius: var(--radius-md);
    contain: layout style paint;

    @media (min-width: 48em) {
      font-size: var(--text-sm);
    }
  }

  .archive-page__loading {
    grid-column: 1 / -1;
    text-align: center;
    padding: var(--space-xl);
    color: var(--text-secondary);
    contain: layout style;
  }

  .archive-page__load-more {
    text-align: center;
    contain: layout style;
  }

  .archive-page__load-more-btn {
    padding: var(--space-sm) var(--space-md);
    background: var(--secondary-600);
    color: var(--color-white);
    border: none;
    border-radius: var(--radius-md);
    cursor: pointer;
    font-size: var(--text-sm);
    font-weight: var(--font-medium);
    transition: all var(--transition-base);
    contain: layout style paint;

    @media (min-width: 48em) {
      padding: var(--space-md) var(--space-xl);
      font-size: var(--text-base);
      border-radius: var(--radius-lg);
    }

    &:hover {
      background: var(--secondary-700);
    }

    &:disabled {
      background: var(--text-tertiary);
      cursor: not-allowed;
    }
  }

  /* ======================================
   * CATEGORY STATISTICS
   * ====================================== */
  .archive-page__stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
    gap: var(--space-sm);
    margin-bottom: var(--space-lg);
    contain: layout style;

    @media (min-width: 48em) {
      grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
      gap: var(--space-md);
      margin-bottom: var(--space-2xl);
    }
  }

  .archive-page__category-stat {
    background: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: var(--radius-md);
    padding: var(--space-sm);
    text-align: center;
    transition: all var(--transition-base);
    contain: layout style paint;

    @media (min-width: 48em) {
      border-radius: var(--radius-lg);
      padding: var(--space-md);
    }

    &:hover {
      border-color: var(--primary-400);
      box-shadow: var(--shadow-sm);
    }
  }

  .archive-page__category-stat-count {
    font-size: var(--text-lg);
    font-weight: var(--font-bold);
    color: var(--primary-600);
    margin-bottom: var(--space-xs);
    contain: layout style;

    @media (min-width: 48em) {
      font-size: var(--text-xl);
    }
  }

  .archive-page__category-stat-name {
    font-size: var(--text-xs);
    color: var(--text-secondary);
    contain: layout style;

    @media (min-width: 48em) {
      font-size: var(--text-sm);
    }
  }

  /* ======================================
   * SCREEN READER ONLY
   * ====================================== */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  /* ======================================
   * RESPONSIVE ADJUSTMENTS
   * ====================================== */
  @media (max-width: 47.9375em) {
    .archive-page__filters {
      flex-direction: column;
      align-items: flex-start;
    }

    .archive-page__results-header {
      flex-direction: column;
      align-items: flex-start;
    }
  }

  /* ======================================
   * ACCESSIBILITY
   * ====================================== */
  @media (prefers-reduced-motion: reduce) {
    .archive-page__fact-item:hover,
    .archive-page__category-stat:hover,
    .archive-page__load-more-btn:hover {
      transform: none;
    }
  }

  /* ======================================
   * FOCUS STYLES
   * ====================================== */
  :focus {
    outline: var(--focus-ring);
    outline-offset: var(--focus-ring-offset);

    &:not(:focus-visible) {
      outline: none;
    }
  }

  :focus-visible {
    outline: var(--focus-ring);
    outline-offset: var(--focus-ring-offset);
  }
</style>

<script>
  /**
   * Daily Facts Archive - Search, Filter & Sort Functionality
   */
  interface FactItem {
    id: string;
    date: string;
    title: string;
    artist: string;
    category: string;
    element: HTMLElement;
  }

  class FactsArchive {
    private facts: FactItem[] = [];
    private filteredFacts: FactItem[] = [];
    private currentPage: number = 1;
    private factsPerPage: number = 12;
    private currentSort: string = "date";
    private currentMonth: string = "";
    private currentCategory: string = "";
    private currentQuery: string = "";

    private searchInput: HTMLInputElement | null = null;
    private monthFilter: HTMLSelectElement | null = null;
    private categoryFilter: HTMLSelectElement | null = null;
    private factsContainer: HTMLElement | null = null;
    private resultsCount: HTMLElement | null = null;
    private loadMoreBtn: HTMLButtonElement | null = null;
    private loadingDiv: HTMLElement | null = null;

    constructor() {
      this.initializeElements();
      this.loadAllFacts();
      this.setupEventListeners();
    }

    private initializeElements(): void {
      this.searchInput = document.getElementById("fact-search") as HTMLInputElement;
      this.monthFilter = document.getElementById("month-filter") as HTMLSelectElement;
      this.categoryFilter = document.getElementById("category-filter") as HTMLSelectElement;
      this.factsContainer = document.getElementById("facts-container");
      this.resultsCount = document.getElementById("results-count");
      this.loadMoreBtn = document.getElementById("load-more-btn") as HTMLButtonElement;
      this.loadingDiv = this.factsContainer?.querySelector(".archive-page__loading") || null;
    }

    private loadAllFacts(): void {
      // Extract facts from the pre-rendered content
      const factItems = this.factsContainer?.querySelectorAll(".archive-page__fact-item");
      if (factItems) {
        this.facts = Array.from(factItems).map((item) => ({
          id: (item as HTMLElement).dataset.factId || "",
          date: (item as HTMLElement).dataset.factDate || "",
          title: (item as HTMLElement).dataset.factTitle || "",
          artist: (item as HTMLElement).dataset.factArtist || "",
          category: (item as HTMLElement).dataset.factCategory || "",
          element: item as HTMLElement,
        }));

        this.filteredFacts = [...this.facts];
        this.updateDisplay();
      }
    }

    private setupEventListeners(): void {
      // Search input
      if (this.searchInput) {
        this.searchInput.addEventListener("input", (e: Event) => {
          const target = e.target as HTMLInputElement;
          this.currentQuery = target.value.toLowerCase().trim();
          this.applyFilters();
        });
      }

      // Month filter
      if (this.monthFilter) {
        this.monthFilter.addEventListener("change", (e: Event) => {
          const target = e.target as HTMLSelectElement;
          this.currentMonth = target.value;
          this.applyFilters();
        });
      }

      // Category filter
      if (this.categoryFilter) {
        this.categoryFilter.addEventListener("change", (e: Event) => {
          const target = e.target as HTMLSelectElement;
          this.currentCategory = target.value;
          this.applyFilters();
        });
      }

      // Load more button
      if (this.loadMoreBtn) {
        this.loadMoreBtn.addEventListener("click", () => {
          this.loadMore();
        });
      }

      // Sort buttons (if any exist)
      document.addEventListener("click", (e: Event) => {
        const target = e.target as HTMLElement;
        if (target && target.matches("[data-sort]")) {
          this.currentSort = target.dataset.sort || "date";
          this.applySort();
        }
      });
    }

    private applyFilters(): void {
      this.filteredFacts = this.facts.filter((fact: FactItem) => {
        // Text search
        if (this.currentQuery) {
          const searchableText = `${fact.title} ${fact.artist}`.toLowerCase();
          if (!searchableText.includes(this.currentQuery)) {
            return false;
          }
        }

        // Month filter
        if (this.currentMonth) {
          const factMonth = fact.date.split("-")[0];
          if (factMonth !== this.currentMonth) {
            return false;
          }
        }

        // Category filter
        if (this.currentCategory) {
          if (fact.category !== this.currentCategory) {
            return false;
          }
        }

        return true;
      });

      this.applySort();
      this.currentPage = 1;
      this.updateDisplay();
    }

    private applySort(): void {
      this.filteredFacts.sort((a: FactItem, b: FactItem) => {
        switch (this.currentSort) {
          case "title":
            return a.title.localeCompare(b.title);
          case "artist": {
            return (a.artist || "").localeCompare(b.artist || "");
          }
          case "date":
          default: {
            // Sort by date (month-day)
            const [monthA, dayA] = a.date.split("-").map(Number);
            const [monthB, dayB] = b.date.split("-").map(Number);

            if (monthA !== monthB) {
              return monthA - monthB;
            }
            return dayA - dayB;
          }
        }
      });
    }

    private updateDisplay(): void {
      // Hide all facts first
      this.facts.forEach((fact: FactItem) => {
        (fact.element as HTMLElement).style.display = "none";
      });

      // Show filtered facts
      const startIndex = 0;
      const endIndex = this.currentPage * this.factsPerPage;
      const factsToShow = this.filteredFacts.slice(startIndex, endIndex);

      factsToShow.forEach((fact: FactItem) => {
        (fact.element as HTMLElement).style.display = "block";
      });

      // Update results count
      if (this.resultsCount) {
        const total = this.filteredFacts.length;
        const showing = Math.min(endIndex, total);
        this.resultsCount.textContent = `${showing} von ${total} Fakten angezeigt`;

        // Announce to screen readers
        this.resultsCount.setAttribute("aria-live", "polite");
      }

      // Update load more button
      if (this.loadMoreBtn) {
        const hasMore = endIndex < this.filteredFacts.length;
        this.loadMoreBtn.style.display = hasMore ? "block" : "none";
        this.loadMoreBtn.disabled = !hasMore;

        if (hasMore) {
          const remaining = this.filteredFacts.length - endIndex;
          this.loadMoreBtn.textContent = `${Math.min(remaining, this.factsPerPage)} weitere Fakten laden`;
        }
      }

      // Show no results message if needed
      if (this.filteredFacts.length === 0) {
        this.showNoResults();
      } else {
        this.hideNoResults();
      }
    }

    private loadMore(): void {
      this.currentPage++;
      this.updateDisplay();

      // Smooth scroll to new content
      const newlyVisible =
        this.factsContainer?.children[this.currentPage * this.factsPerPage - this.factsPerPage];
      if (newlyVisible) {
        newlyVisible.scrollIntoView({ behavior: "smooth", block: "start" });
      }
    }

    private showNoResults(): void {
      let noResultsDiv = this.factsContainer?.querySelector(".archive-page__no-results");
      if (!noResultsDiv) {
        noResultsDiv = document.createElement("div");
        noResultsDiv.className = "archive-page__no-results";
        noResultsDiv.innerHTML = `
        <div style="grid-column: 1 / -1; text-align: center; padding: var(--space-3xl); color: var(--text-secondary);">
          <div style="font-size: 3rem; margin-bottom: var(--space-lg);">üîç</div>
          <h3 style="font-size: var(--text-xl); margin-bottom: var(--space-md); color: var(--text-primary);">Keine Fakten gefunden</h3>
          <p style="margin-bottom: var(--space-lg);">Versuche es mit anderen Suchbegriffen oder Filtern.</p>
          <button type="button" onclick="factArchive.clearFilters()" style="padding: var(--space-sm) var(--space-lg); background: var(--primary-600); color: var(--color-white); border: none; border-radius: var(--radius-lg); cursor: pointer;">
            Filter zur√ºcksetzen
          </button>
        </div>
      `;
        this.factsContainer?.appendChild(noResultsDiv);
      }
      noResultsDiv.style.display = "block";
    }

    private hideNoResults(): void {
      const noResultsDiv = this.factsContainer?.querySelector(".archive-page__no-results");
      if (noResultsDiv) {
        noResultsDiv.style.display = "none";
      }
    }

    public clearFilters(): void {
      this.currentQuery = "";
      this.currentMonth = "";
      this.currentCategory = "";

      if (this.searchInput) {
        this.searchInput.value = "";
      }
      if (this.monthFilter) {
        this.monthFilter.value = "";
      }
      if (this.categoryFilter) {
        this.categoryFilter.value = "";
      }

      this.applyFilters();

      // Announce filter reset
      if (this.resultsCount) {
        this.resultsCount.textContent = "Filter wurden zur√ºckgesetzt";
        setTimeout(() => this.updateDisplay(), 100);
      }
    }

    // Public method for external sorting
    public sortBy(method: string): void {
      this.currentSort = method;
      this.applySort();
      this.updateDisplay();
    }
  }

  // Initialize when DOM is ready
  let factArchive: FactsArchive | undefined;
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => {
      factArchive = new FactsArchive();
    });
  } else {
    factArchive = new FactsArchive();
  }

  // Make it globally accessible
  declare global {
    interface Window {
      factArchive: FactsArchive | undefined;
    }
  }
  if (typeof window !== "undefined") {
    window.factArchive = factArchive;
  }
</script>
