---
/**
 * Daily Facts Category Page
 * Shows all facts for a specific category
 */

import Layout from "../../../../layouts/Layout.astro";
import DailyFact from "../../../../components/DailyFact.astro";
import { getFactsByCategory, type MusicFact } from "../../../../services/dailyFactsService.ts";
import { useTranslations } from "../../../../utils/i18n.ts";
import { extractKeywords, generateMetaDescription } from "../../../../utils/seo.ts";

export async function getStaticPaths() {
  const categories = ['birth', 'death', 'release', 'event', 'milestone', 'formation', 'breakthrough'];
  const languages = ['de', 'en', 'es', 'fr', 'it', 'pt', 'da', 'nl', 'sv', 'fi'];
  
  const paths = [];
  for (const lang of languages) {
    for (const category of categories) {
      paths.push({
        params: { lang, category }
      });
    }
  }
  
  return paths;
}

const { lang, category } = Astro.params;
const currentLang = lang || "de";
const t = useTranslations(currentLang);

// Validate category
const validCategories = ['birth', 'death', 'release', 'event', 'milestone', 'formation', 'breakthrough'];
if (!validCategories.includes(category as string)) {
  return Astro.redirect(`/${currentLang}/daily-facts`);
}

// Get facts for this category
const categoryFacts = await getFactsByCategory(category as MusicFact['category'], currentLang);

// Category display data
const categoryData = {
  birth: { icon: "üéÇ", color: "var(--color-green-500)" },
  death: { icon: "üïäÔ∏è", color: "var(--color-red-500)" },
  release: { icon: "üíø", color: "var(--color-blue-500)" },
  event: { icon: "üé™", color: "var(--color-purple-500)" },
  milestone: { icon: "üèÜ", color: "var(--color-yellow-500)" },
  formation: { icon: "üé∏", color: "var(--color-indigo-500)" },
  breakthrough: { icon: "‚≠ê", color: "var(--color-pink-500)" }
};

const currentCategory = categoryData[category as keyof typeof categoryData];

// SEO content
const categoryName = t(`dailyFacts.categories.${category}` as any);
const pageTitle = `${categoryName} - ${t("dailyFacts.categories")}`;
const pageDescription = `Alle Musikfakten in der Kategorie ${categoryName}. ${categoryFacts.length} Fakten verf√ºgbar.`;
const enrichedContent = `${pageTitle} ${pageDescription} ${categoryFacts.map(f => f.title).join(' ')}`;
const optimizedDescription = generateMetaDescription(enrichedContent, 155);
const seoKeywords = extractKeywords(enrichedContent, 15, currentLang);

const baseUrl = Astro.site?.toString() || "https://melody-mind.de";
const currentUrl = `${baseUrl}/${currentLang}/daily-facts/category/${category}`;
---

<Layout 
  title={`${pageTitle} - MelodyMind`}
  description={optimizedDescription}
  keywords={seoKeywords}
  image="/images/daily-facts-category-og.png"
  type="website"
  publishDate={new Date()}
  modifiedDate={new Date()}
>
  <Fragment slot="head">
    <link rel="canonical" href={currentUrl} />
    <meta property="article:section" content="Music History Category" />
    <meta property="article:tag" content="Music Facts" />
    <meta property="article:tag" content={categoryName} />
  </Fragment>

  <main class="category-page">
    <div class="category-page__container">
      <!-- Breadcrumb Navigation -->
      <nav class="category-page__breadcrumb" aria-label="Breadcrumb">
        <ol class="category-page__breadcrumb-list">
          <li class="category-page__breadcrumb-item">
            <a href={`/${currentLang}`} class="category-page__breadcrumb-link">Home</a>
          </li>
          <li class="category-page__breadcrumb-item">
            <a href={`/${currentLang}/daily-facts`} class="category-page__breadcrumb-link">
              {t("dailyFacts.title")}
            </a>
          </li>
          <li class="category-page__breadcrumb-item">
            <a href={`/${currentLang}/daily-facts/archive`} class="category-page__breadcrumb-link">
              {t("dailyFacts.archive.title")}
            </a>
          </li>
          <li class="category-page__breadcrumb-item" aria-current="page">
            {categoryName}
          </li>
        </ol>
      </nav>

      <!-- Hero Section -->
      <header class="category-page__hero" style={`--category-color: ${currentCategory.color}`}>
        <div class="category-page__hero-content">
          <div class="category-page__hero-icon" aria-hidden="true">
            {currentCategory.icon}
          </div>
          <h1 class="category-page__title">{categoryName}</h1>
          <p class="category-page__subtitle">
            {categoryFacts.length} Musikfakten in dieser Kategorie
          </p>
        </div>
      </header>

      <!-- Facts Grid -->
      <section class="category-page__content" aria-labelledby="facts-title">
        <div class="category-page__header">
          <h2 id="facts-title" class="category-page__section-title">
            Alle {categoryName} Fakten
          </h2>
          
          <div class="category-page__sort-options">
            <label for="sort-select" class="category-page__sort-label">Sortieren:</label>
            <select id="sort-select" class="category-page__sort-select">
              <option value="date">Nach Datum</option>
              <option value="title">Nach Titel</option>
              <option value="artist">Nach K√ºnstler</option>
            </select>
          </div>
        </div>

        {categoryFacts.length > 0 ? (
          <div class="category-page__facts-grid" id="facts-grid">
            {categoryFacts.map((fact, index) => (
              <div class="category-page__fact-item" data-fact-id={fact.id} data-fact-date={fact.date} data-fact-title={fact.title} data-fact-artist={fact.artist || ''} data-fact-category={fact.category}>
                <div class="category-page__fact-date-badge">
                  {new Date(fact.year || 2024, parseInt(fact.date.split('-')[0]) - 1, parseInt(fact.date.split('-')[1])).toLocaleDateString(currentLang, { day: 'numeric', month: 'short' })}
                  {fact.year && <span class="category-page__fact-year">{fact.year}</span>}
                </div>
                <div class="category-page__fact-content">
                  <h3 class="category-page__fact-title">{fact.title}</h3>
                  <p class="category-page__fact-description">{fact.description}</p>
                  {fact.artist && (
                    <div class="category-page__fact-meta">
                      <span class="category-page__fact-artist">üé§ {fact.artist}</span>
                      {fact.genre && <span class="category-page__fact-genre">üéµ {fact.genre}</span>}
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div class="category-page__empty" role="status">
            <div class="category-page__empty-icon">üòî</div>
            <h3 class="category-page__empty-title">Keine Fakten gefunden</h3>
            <p class="category-page__empty-message">
              In der Kategorie "{categoryName}" sind derzeit keine Fakten verf√ºgbar.
            </p>
            <a href={`/${currentLang}/daily-facts`} class="category-page__back-link">
              ‚Üê Zur√ºck zu den t√§glichen Fakten
            </a>
          </div>
        )}
      </section>

      <!-- Other Categories -->
      <section class="category-page__other-categories" aria-labelledby="other-categories-title">
        <h3 id="other-categories-title" class="category-page__section-title">
          Andere Kategorien erkunden
        </h3>
        
        <div class="category-page__categories-grid">
          {Object.entries(categoryData)
            .filter(([cat]) => cat !== category)
            .map(([cat, data]) => (
              <a 
                href={`/${currentLang}/daily-facts/category/${cat}`} 
                class="category-page__category-card"
                style={`--category-color: ${data.color}`}
              >
                <span class="category-page__category-icon" aria-hidden="true">
                  {data.icon}
                </span>
                <span class="category-page__category-name">
                  {t(`dailyFacts.categories.${cat}` as any)}
                </span>
              </a>
            ))
          }
        </div>
      </section>
    </div>
  </main>
</Layout>

<style lang="scss">
  /* ======================================
   * CATEGORY PAGE STYLES
   * Using global.css variables for consistency
   * ====================================== */

  .category-page {
    min-height: 100vh;
    background: var(--bg-primary);
    color: var(--text-primary);
    padding: var(--space-lg) 0;
  }

  .category-page__container {
    max-width: var(--container-xl);
    margin: 0 auto;
    padding: 0 var(--space-md);

    @media (max-width: 19.9375em) {
      padding: 0 var(--space-sm);
    }

    @media (min-width: 64em) {
      padding: 0 var(--space-xl);
    }
  }

  // Breadcrumb Navigation (same as archive)
  .category-page__breadcrumb {
    margin-bottom: var(--space-lg);
  }

  .category-page__breadcrumb-list {
    display: flex;
    list-style: none;
    padding: 0;
    margin: 0;
    gap: var(--space-sm);
    align-items: center;
  }

  .category-page__breadcrumb-item {
    font-size: var(--text-sm);
    
    &:not(:last-child)::after {
      content: "‚Üí";
      margin-left: var(--space-sm);
      color: var(--text-tertiary);
    }

    &[aria-current="page"] {
      color: var(--text-secondary);
      font-weight: var(--font-medium);
    }
  }

  .category-page__breadcrumb-link {
    color: var(--primary-600);
    text-decoration: none;
    transition: color var(--transition-fast);

    &:hover {
      color: var(--primary-700);
    }
  }

  // Hero Section with Category Theme
  .category-page__hero {
    text-align: center;
    margin-bottom: var(--space-2xl);
    padding: var(--space-xl) 0;
    background: linear-gradient(135deg, var(--category-color), var(--secondary-800));
    border-radius: var(--radius-xl);
    color: var(--color-white);
  }

  .category-page__hero-icon {
    font-size: 4rem;
    margin-bottom: var(--space-md);
    line-height: 1;
  }

  .category-page__title {
    font-size: clamp(var(--text-2xl), 4vw, var(--text-4xl));
    font-weight: var(--font-bold);
    margin-bottom: var(--space-md);
    text-shadow: var(--text-shadow-strong);
  }

  .category-page__subtitle {
    font-size: var(--text-lg);
    opacity: 0.9;
    max-width: 600px;
    margin: 0 auto;
  }

  // Content Header
  .category-page__header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--space-lg);
    flex-wrap: wrap;
    gap: var(--space-md);

    @media (max-width: 47.9375em) {
      flex-direction: column;
      align-items: flex-start;
    }
  }

  .category-page__section-title {
    font-size: var(--text-xl);
    font-weight: var(--font-bold);
    color: var(--text-primary);
    margin: 0;
  }

  .category-page__sort-options {
    display: flex;
    align-items: center;
    gap: var(--space-sm);
  }

  .category-page__sort-label {
    font-size: var(--text-sm);
    font-weight: var(--font-medium);
    color: var(--text-primary);
  }

  .category-page__sort-select {
    padding: var(--space-xs) var(--space-sm);
    border: 1px solid var(--border-color);
    border-radius: var(--radius-md);
    background: var(--bg-secondary);
    color: var(--text-primary);
    font-size: var(--text-sm);
  }

  // Facts Grid
  .category-page__facts-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: var(--space-lg);
    margin-bottom: var(--space-2xl);

    @media (max-width: 47.9375em) {
      grid-template-columns: 1fr;
    }
  }

  .category-page__fact-item {
    background: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: var(--radius-xl);
    overflow: hidden;
    box-shadow: var(--shadow-sm);
    transition: all var(--transition-base);
    position: relative;

    &:hover {
      box-shadow: var(--shadow-lg);
      transform: translateY(-4px);
      border-color: var(--category-color);
    }
  }

  .category-page__fact-date-badge {
    position: absolute;
    top: var(--space-sm);
    right: var(--space-sm);
    background: var(--category-color);
    color: var(--color-white);
    padding: var(--space-xs) var(--space-sm);
    border-radius: var(--radius-full);
    font-size: var(--text-xs);
    font-weight: var(--font-bold);
    text-align: center;
    line-height: 1;
    z-index: 2;
  }

  .category-page__fact-year {
    display: block;
    font-size: var(--text-xs);
    opacity: 0.8;
    margin-top: var(--space-xs);
  }

  .category-page__fact-content {
    padding: var(--space-lg);
  }

  .category-page__fact-title {
    font-size: var(--text-lg);
    font-weight: var(--font-bold);
    color: var(--text-primary);
    margin-bottom: var(--space-sm);
    line-height: var(--leading-tight);
  }

  .category-page__fact-description {
    color: var(--text-secondary);
    line-height: var(--leading-relaxed);
    margin-bottom: var(--space-md);
    display: -webkit-box;
    -webkit-line-clamp: 4;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .category-page__fact-meta {
    display: flex;
    gap: var(--space-md);
    flex-wrap: wrap;
  }

  .category-page__fact-artist,
  .category-page__fact-genre {
    font-size: var(--text-sm);
    color: var(--text-tertiary);
    background: var(--bg-tertiary);
    padding: var(--space-xs) var(--space-sm);
    border-radius: var(--radius-md);
  }

  // Empty State
  .category-page__empty {
    text-align: center;
    padding: var(--space-3xl) var(--space-lg);
    background: var(--bg-secondary);
    border-radius: var(--radius-xl);
    margin-bottom: var(--space-2xl);
  }

  .category-page__empty-icon {
    font-size: 4rem;
    margin-bottom: var(--space-lg);
  }

  .category-page__empty-title {
    font-size: var(--text-xl);
    font-weight: var(--font-bold);
    margin-bottom: var(--space-md);
    color: var(--text-primary);
  }

  .category-page__empty-message {
    color: var(--text-secondary);
    margin-bottom: var(--space-lg);
    max-width: 400px;
    margin-left: auto;
    margin-right: auto;
  }

  .category-page__back-link {
    display: inline-flex;
    align-items: center;
    padding: var(--space-sm) var(--space-lg);
    background: var(--primary-600);
    color: var(--color-white);
    text-decoration: none;
    border-radius: var(--radius-lg);
    font-weight: var(--font-medium);
    transition: all var(--transition-fast);

    &:hover {
      background: var(--primary-700);
      transform: translateY(-2px);
    }
  }

  // Other Categories Grid
  .category-page__categories-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: var(--space-md);
    margin-bottom: var(--space-2xl);
  }

  .category-page__category-card {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: var(--space-lg);
    background: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: var(--radius-xl);
    text-decoration: none;
    transition: all var(--transition-base);
    text-align: center;

    &:hover {
      transform: translateY(-4px);
      box-shadow: var(--shadow-lg);
      border-color: var(--category-color);
    }
  }

  .category-page__category-icon {
    font-size: 2rem;
    margin-bottom: var(--space-sm);
  }

  .category-page__category-name {
    font-weight: var(--font-semibold);
    color: var(--text-primary);
  }

  // Responsive adjustments
  @media (prefers-reduced-motion: reduce) {
    .category-page__fact-item:hover,
    .category-page__category-card:hover,
    .category-page__back-link:hover {
      transform: none;
    }
  }
</style>

<script>
/**
 * Category Page - Sorting Functionality
 */
class CategoryFactsSorter {
  constructor() {
    this.facts = [];
    this.currentSort = 'date';
    
    this.initializeElements();
    this.loadFacts();
    this.setupEventListeners();
  }

  initializeElements() {
    this.sortSelect = document.getElementById('sort-select');
    this.factsGrid = document.getElementById('facts-grid');
  }

  loadFacts() {
    if (this.factsGrid) {
      const factItems = this.factsGrid.querySelectorAll('.category-page__fact-item');
      this.facts = Array.from(factItems).map(item => ({
        id: item.dataset.factId,
        date: item.dataset.factDate,
        title: item.dataset.factTitle,
        artist: item.dataset.factArtist,
        category: item.dataset.factCategory,
        element: item
      }));
    }
  }

  setupEventListeners() {
    if (this.sortSelect) {
      this.sortSelect.addEventListener('change', (e) => {
        this.currentSort = e.target.value;
        this.sortFacts();
      });
    }
  }

  sortFacts() {
    // Sort the facts array
    this.facts.sort((a, b) => {
      switch (this.currentSort) {
        case 'title':
          return a.title.localeCompare(b.title);
        case 'artist':
          const artistA = a.artist || '';
          const artistB = b.artist || '';
          if (!artistA && !artistB) return 0;
          if (!artistA) return 1;
          if (!artistB) return -1;
          return artistA.localeCompare(artistB);
        case 'date':
        default:
          // Sort by date (month-day)
          const [monthA, dayA] = a.date.split('-').map(Number);
          const [monthB, dayB] = b.date.split('-').map(Number);
          
          if (monthA !== monthB) return monthA - monthB;
          return dayA - dayB;
      }
    });

    // Re-arrange DOM elements
    this.updateDisplay();
  }

  updateDisplay() {
    if (this.factsGrid) {
      // Create document fragment for better performance
      const fragment = document.createDocumentFragment();
      
      // Append sorted elements to fragment
      this.facts.forEach(fact => {
        fragment.appendChild(fact.element);
      });
      
      // Clear grid and append sorted elements
      this.factsGrid.innerHTML = '';
      this.factsGrid.appendChild(fragment);
      
      // Add animation class for visual feedback
      this.factsGrid.classList.add('category-page__facts-grid--updating');
      setTimeout(() => {
        this.factsGrid.classList.remove('category-page__facts-grid--updating');
      }, 300);
    }
  }

  // Public method for external sorting
  sortBy(method) {
    this.currentSort = method;
    if (this.sortSelect) {
      this.sortSelect.value = method;
    }
    this.sortFacts();
  }
}

// Initialize when DOM is ready
let categoryFactsSorter;
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => {
    categoryFactsSorter = new CategoryFactsSorter();
  });
} else {
  categoryFactsSorter = new CategoryFactsSorter();
}

// Make it globally accessible
window.categoryFactsSorter = categoryFactsSorter;
</script>