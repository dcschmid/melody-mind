---
import { getCollection, type CollectionEntry } from "astro:content";
import { languages, ui } from "../../../i18n/ui";
import Layout from "../../../layouts/Layout.astro";
import type { KnowledgeCollectionKey } from "../../../content/config";
import { Picture } from "astro:assets";
import Headline from "@components/Headline.astro";
import { Icon } from "astro-icon/components";
import ButtonLink from "@components/ButtonLink.astro";
import { calculateReadingTime } from "@utils/readingTime";
import { extractKeywords, generateMetaDescription } from "@utils/seo";

// Use SSG for best performance and SEO
export const prerender = true;

export async function getStaticPaths() {
  const allEntries = await Promise.all(
    Object.keys(languages).map(async (lang) => {
      const collectionName = `knowledge-${lang}` as KnowledgeCollectionKey;
      const entries = await getCollection(collectionName);
      return entries.map((entry) => {
        return {
          params: {
            lang,
            slug: entry.slug,
          },
          props: { entry },
        };
      });
    }),
  );
  return allEntries.flat();
}

type KnowledgeEntry = CollectionEntry<`knowledge-${keyof typeof languages}`>;
interface Props {
  entry: KnowledgeEntry;
}

const { entry } = Astro.props;
const { lang = "de" } = Astro.params;
const t = ui[lang as keyof typeof ui];

// Optimize content rendering by deferring until needed
const { Content } = await entry.render();

// Format date with proper localization
const formattedDate = entry.data.createdAt
  ? new Intl.DateTimeFormat(lang, {
      year: "numeric",
      month: "long",
      day: "numeric",
    }).format(entry.data.createdAt)
  : null;

// Default image if none provided - use optimized path
const defaultImage = "/melody-mind.jpg";
const imageSource =
  typeof entry.data.image === "string" ? entry.data.image : defaultImage;

// Reading time text with proper localization and fallback
const readingTimeText = entry.body
  ? `${calculateReadingTime(entry.body)} ${t["knowledge.reading.time"] || "min Lesezeit"}`
  : null;

// Generate SEO content from the article
const title = entry.data.title;
const description = entry.data.description;

// Enhanced SEO content using utility functions
const pageContent = `${title} ${description} ${entry.body || ""}`;

// Generate optimized meta description and keywords
const optimizedDescription =
  generateMetaDescription(description) || description;
const keywords =
  extractKeywords(pageContent) ||
  entry.data.keywords?.join(", ") ||
  t["meta.keywords"];

// Additional structured data parameters for SEO
const pageType = "article"; // Artikel sollten den Typ 'article' anstelle von 'website' haben
const publishDate = entry.data.createdAt || new Date("2024-01-01");
const modifiedDate = entry.data.updatedAt || new Date();

// Determine if this article has a playable game category
const isPlayable = entry.data.isPlayable === true;

// Prepare game category link
const gameCategorySlug = entry.slug.split("/").pop();
const gameCategoryUrl = isPlayable ? `/${lang}/${gameCategorySlug}` : null;

// Get translation for play button
const playButtonText =
  t["knowledge.play.category"] || "Diese Musikkategorie spielen";

// Structured data for article - erweitert für besseres SEO
const articleSchemaData = {
  "@context": "https://schema.org",
  "@type": "Article",
  headline: entry.data.title,
  description: optimizedDescription,
  datePublished: entry.data.createdAt?.toISOString(),
  dateModified:
    entry.data.updatedAt?.toISOString() || entry.data.createdAt?.toISOString(),
  image: imageSource,
  author: {
    "@type": "Organization",
    name: "Melody Mind",
  },
  publisher: {
    "@type": "Organization",
    name: "Melody Mind",
    logo: {
      "@type": "ImageObject",
      url: "/melody-mind.png",
    },
  },
  mainEntityOfPage: {
    "@type": "WebPage",
    "@id": Astro.url.href,
  },
  keywords: keywords,
};
---

<Layout
  title={title}
  description={optimizedDescription}
  keywords={keywords}
  image={imageSource}
  type={pageType}
  publishDate={publishDate}
  modifiedDate={modifiedDate}
>
  <script
    type="application/ld+json"
    set:html={JSON.stringify(articleSchemaData)}
  />

  <main class="max-w-3xl mx-auto px-4 sm:px-6 py-12">
    <article
      class="prose prose-lg dark:prose-invert max-w-none"
      aria-labelledby="article-title"
    >
      <nav
        class="mb-8 print:hidden"
        aria-label={t["knowledge.breadcrumb.label"] || "Breadcrumb"}
      >
        <ol class="flex flex-wrap items-center gap-2 text-md">
          <li class="flex items-center">
            <a
              href={`/${lang}`}
              class="text-zinc-300 hover:text-sky-400 transition-colors rounded-sm focus:outline-none focus-visible:ring-2 focus-visible:ring-sky-400 focus-visible:ring-offset-2 focus-visible:ring-offset-zinc-900"
              aria-label={t?.["nav.home"] || "Startseite"}
            >
              <Icon name="home" class="h-4 w-4" aria-hidden="true" />
              <span class="sr-only">{t?.["nav.home"] || "Startseite"}</span>
            </a>
          </li>
          <li class="flex items-center" aria-hidden="true">
            <Icon name="chevron-right" class="h-4 w-4 mx-1 text-zinc-500" />
          </li>
          <li>
            <a
              href={`/${lang}/knowledge`}
              class="text-zinc-300 hover:text-sky-400 transition-colors rounded-sm focus:outline-none focus-visible:ring-2 focus-visible:ring-sky-400 focus-visible:ring-offset-2 focus-visible:ring-offset-zinc-900"
            >
              {t?.["knowledge.title"] || "Wissen"}
            </a>
          </li>
          <li class="flex items-center" aria-hidden="true">
            <Icon name="chevron-right" class="h-4 w-4 mx-1 text-zinc-500" />
          </li>
          <li
            class="text-zinc-50 truncate max-w-[150px] sm:max-w-xs"
            aria-current="page"
          >
            {entry.data.title}
          </li>
        </ol>
      </nav>

      <header class="mb-10">
        <div
          class="mb-6 relative rounded-lg overflow-hidden aspect-video shadow-lg border border-zinc-700"
        >
          <Picture
            src={imageSource}
            width={1200}
            height={675}
            formats={["avif", "webp"]}
            class="w-full h-full object-cover"
            loading="eager"
            alt={`${entry.data.title} - ${t.knowledge?.featured?.image || "Titelbild"}`}
            decoding="async"
          />
        </div>

        <Headline
          level="h1"
          title={entry.data.title}
          id="article-title"
          className="text-3xl sm:text-4xl font-bold tracking-tight"
        />

        <div
          class="flex flex-wrap items-center gap-x-6 gap-y-3 mt-6 text-zinc-200 text-base"
        >
          {
            formattedDate && (
              <time
                datetime={entry.data.createdAt?.toISOString()}
                class="flex items-center gap-1.5 bg-zinc-800/50 px-3 py-1 rounded-full"
              >
                <Icon name="calendar" class="h-5 w-5" aria-hidden="true" />
                <span>{formattedDate}</span>
              </time>
            )
          }

          {
            readingTimeText && (
              <span class="flex items-center gap-1.5 text-zinc-200 bg-zinc-800/50 px-3 py-1 rounded-full">
                <Icon name="clock" class="h-5 w-5" aria-hidden="true" />
                <span>{readingTimeText}</span>
              </span>
            )
          }
        </div>

        <!-- Music & Game Buttons in separate div -->
        <div
          class="flex flex-wrap items-center gap-x-4 gap-y-2 mt-3 text-zinc-200 text-base"
        >
          {
            entry.data.category?.spotifyPlaylist && (
              <ButtonLink
                href={entry.data.category.spotifyPlaylist}
                target="_blank"
                rel="noopener noreferrer"
                aria-label={`${entry.data.title} auf Spotify anhören`}
                className="rounded-full h-10 min-w-[88px] px-3 py-1 text-sm transition-transform hover:scale-105 focus:scale-105"
              >
                <Icon name="spotify" class="h-4 w-4 mr-1" aria-hidden="true" />
                <span>Spotify</span>
              </ButtonLink>
            )
          }

          {
            entry.data.category?.deezerPlaylist && (
              <ButtonLink
                href={entry.data.category.deezerPlaylist}
                target="_blank"
                rel="noopener noreferrer"
                aria-label={`${entry.data.title} auf Deezer anhören`}
                className="rounded-full h-10 min-w-[88px] px-3 py-1 text-sm transition-transform hover:scale-105 focus:scale-105"
              >
                <Icon name="deezer" class="h-4 w-4 mr-1" aria-hidden="true" />
                <span>Deezer</span>
              </ButtonLink>
            )
          }

          {
            entry.data.category?.appleMusicPlaylist && (
              <ButtonLink
                href={entry.data.category.appleMusicPlaylist}
                target="_blank"
                rel="noopener noreferrer"
                aria-label={`${entry.data.title} auf Apple Music anhören`}
                className="rounded-full h-10 min-w-[88px] px-3 py-1 text-sm transition-transform hover:scale-105 focus:scale-105"
              >
                <Icon name="apple" class="h-4 w-4 mr-1" aria-hidden="true" />
                <span>Apple</span>
              </ButtonLink>
            )
          }

          {
            isPlayable && gameCategoryUrl && (
              <ButtonLink
                href={gameCategoryUrl}
                className="rounded-full h-10 min-w-[88px] px-3 py-1 text-sm transition-transform hover:scale-105 focus:scale-105"
                aria-label={`${playButtonText}: ${entry.data.title}`}
              >
                <Icon
                  name="game-controller"
                  class="h-4 w-4 mr-1"
                  aria-hidden="true"
                />
                <span>{playButtonText}</span>
              </ButtonLink>
            )
          }
        </div>

        <div
          class="mt-6 bg-zinc-800/30 p-5 rounded-lg border-l-4 border-sky-500"
          role="region"
          aria-label={t["knowledge.description"] || "Beschreibung"}
        >
          <p class="text-zinc-100 text-lg leading-relaxed">
            {entry.data.description}
          </p>
        </div>
      </header>

      <div class="content-wrapper relative">
        <!-- Main article content with improved accessibility -->
        <div
          role="region"
          aria-label={t["knowledge.main.content"] || "Hauptinhalt"}
        >
          <Content />
        </div>
      </div>

      <!-- Back navigation with improved accessibility -->
      <div
        class="mt-12 flex justify-between border-t border-zinc-700 pt-8 print:hidden"
      >
        <ButtonLink
          href={`/${lang}/knowledge`}
          className="group flex items-center min-h-[44px] rounded-lg hover:bg-zinc-800/30 px-3 py-2"
          aria-label={t["knowledge.back.to.list"] || "Zurück zur Wissensliste"}
        >
          <Icon
            name="arrow-left"
            class="h-4 w-4 mr-2 group-hover:translate-x-[-2px] transition-transform"
            aria-hidden="true"
          />
          <span>{t["knowledge.back.to.list"] || "Zurück zur Wissensliste"}</span
          >
        </ButtonLink>
      </div>
    </article>
  </main>
</Layout>

<style>
  /* Enhanced contrast and accessibility adjustments - WCAG AAA compliant */
  .content-wrapper :global(a) {
    text-decoration: underline;
    text-decoration-thickness: 0.1em;
    text-underline-offset: 0.15em;
    color: rgb(56, 189, 248); /* High contrast blue */
    transition:
      color 0.2s ease,
      text-decoration-thickness 0.2s ease;
    border-radius: 0.125rem;
  }

  .content-wrapper :global(a:hover) {
    color: rgb(125, 211, 252);
    text-decoration-thickness: 0.15em;
  }

  .content-wrapper :global(a:focus-visible) {
    outline: 3px solid rgb(56, 189, 248);
    outline-offset: 3px;
    text-decoration-thickness: 0.15em;
  }

  /* Optimized image styles with proper aspect ratio preservation */
  .content-wrapper :global(img) {
    border-radius: 0.375rem;
    max-width: 100%;
    height: auto;
    display: block; /* Prevents layout shifts */
    margin-left: auto;
    margin-right: auto;
  }

  /* Enhanced heading contrast and spacing for better readability */
  .content-wrapper :global(h2) {
    margin-top: 2rem;
    margin-bottom: 1rem;
    font-size: 1.75rem;
    line-height: 2.25rem;
    font-weight: 700;
    color: rgb(255, 255, 255); /* Pure white for maximum contrast */
  }

  .content-wrapper :global(h3) {
    margin-top: 1.75rem;
    margin-bottom: 0.75rem;
    font-size: 1.5rem;
    line-height: 2rem;
    font-weight: 600;
    color: rgb(255, 255, 255); /* Pure white for maximum contrast */
  }

  /* Enhanced text contrast for AAA-standard (min 7:1 ratio) */
  .content-wrapper :global(p),
  .content-wrapper :global(li) {
    color: rgb(240, 240, 245); /* Lighter text for better contrast */
    line-height: 1.8; /* Improved line height for readability */
    margin-bottom: 1.25rem;
  }

  /* Improved list styles for better visual hierarchy */
  .content-wrapper :global(ul),
  .content-wrapper :global(ol) {
    padding-left: 1.5rem;
    margin-bottom: 1.5rem;
  }

  .content-wrapper :global(li) {
    margin-bottom: 0.5rem;
  }

  /* Improved table styles for better readability */
  .content-wrapper :global(table) {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 1.5rem;
  }

  .content-wrapper :global(th),
  .content-wrapper :global(td) {
    border: 1px solid rgb(82, 82, 91);
    padding: 0.75rem;
    text-align: left;
  }

  .content-wrapper :global(th) {
    background-color: rgb(39, 39, 42);
    color: rgb(255, 255, 255);
  }

  /* Code block styles with proper contrast */
  .content-wrapper :global(pre) {
    background-color: rgb(39, 39, 42);
    border-radius: 0.375rem;
    padding: 1rem;
    overflow-x: auto;
    margin-bottom: 1.5rem;
  }

  .content-wrapper :global(code) {
    font-family:
      ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, monospace;
    font-size: 0.9em;
  }

  /* Print styles optimization */
  @media print {
    .content-wrapper :global(a) {
      text-decoration: underline;
      color: #000;
    }

    .content-wrapper :global(p),
    .content-wrapper :global(li) {
      color: #000;
    }

    .content-wrapper :global(h2),
    .content-wrapper :global(h3) {
      color: #000;
      break-after: avoid;
    }

    /* Avoid page breaks inside important elements */
    .content-wrapper :global(pre),
    .content-wrapper :global(blockquote),
    .content-wrapper :global(table) {
      break-inside: avoid;
    }
  }

  /* Reduced motion preferences for accessibility */
  @media (prefers-reduced-motion: reduce) {
    .content-wrapper :global(a) {
      transition: none;
    }
  }
</style>
