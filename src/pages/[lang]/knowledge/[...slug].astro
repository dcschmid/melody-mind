---
/**
 * @component KnowledgeArticlePage
 * @description Dynamic route for displaying knowledge articles in different languages.
 * The page supports multilingual content, structured data for SEO, and optimized
 * image display for improved performance.
 *
 * Key features:
 * - Display of knowledge content with optimized image presentation
 * - Structured data for better search engine indexing
 * - Support for multiple languages through Content Collections
 * - Table of contents for long articles
 * - Integration with music streaming platforms (Spotify, Deezer, Apple Music)
 * - Playable categories with links to the corresponding game mode
 *
 * @accessibility WCAG 2.2 AAA compliant with optimized color contrasts,
 *                semantic HTML elements, and ARIA attributes
 * @performance Optimized images with avif/webp formats and responsive sizes
 * @seo Complete structured data according to Schema.org standards
 */

// 1. Imports (using consistent @-alias paths for better maintainability)
import { Picture } from "astro:assets";
import Layout from "@layouts/Layout.astro";
import ButtonLink from "@components/ButtonLink.astro";
import { useTranslations } from "@utils/i18n";
import Headline from "@components/Headline.astro";
import Paragraph from "@components/Paragraph.astro";
import Prose from "@components/Prose.astro";
import TableOfContents from "@components/TableOfContents.astro";
import BackToTop from "@components/Shared/BackToTop.astro";
import { Icon } from "astro-icon/components";
import { getEntry } from "astro:content";
import { extractKeywords, generateMetaDescription } from "@utils/seo";

// 2. Rendering Strategy: SSG for better performance and SEO
export const prerender = true;

// 3. getStaticPaths implementation for dynamic routes
export async function getStaticPaths() {
  const { getCollection } = await import("astro:content");
  const supportedLanguages = [
    "de",
    "en",
    "es",
    "fr",
    "it",
    "pt",
    "da",
    "nl",
    "sv",
    "fi",
    "cn",
    "ru",
    "jp",
    "uk",
  ] as const;

  const paths = [];

  for (const lang of supportedLanguages) {
    try {
      const knowledgeCollection = await getCollection(`knowledge-${lang}`);
      for (const entry of knowledgeCollection) {
        if (!entry.data.draft) {
          paths.push({
            params: { lang, slug: entry.slug },
            props: { entry, lang },
          });
        }
      }
    } catch (error) {
      console.warn(`No knowledge collection found for ${lang}`);
      // Try to get English fallback
      try {
        const fallbackCollection = await getCollection("knowledge-en");
        for (const entry of fallbackCollection) {
          if (!entry.data.draft) {
            paths.push({
              params: { lang, slug: entry.slug },
              props: { entry, lang },
            });
          }
        }
      } catch (fallbackError) {
        console.error(`Failed to load fallback knowledge for ${lang}:`, fallbackError);
      }
    }
  }

  return paths;
}

// 4. TypeScript Definitions
type KnowledgeEntry = CollectionEntry<KnowledgeCollectionKey> & {
  data: {
    title: string;
    description: string;
    keywords?: string[];
    createdAt?: Date;
    updatedAt?: Date;
    image?: string;
    category?: {
      spotifyPlaylist?: string;
      deezerPlaylist?: string;
      appleMusicPlaylist?: string;
    };
    isPlayable?: boolean;
    difficulty?: string;
  };
};

// 5. Main Component Logic
const { entry, lang } = Astro.props;
const t = useTranslations(lang);

// Extract headings for table of contents
const { headings, Content } = await entry.render();

// Get image source
const imageSource = entry.data.image || "/default-cover.jpg";

// SEO optimization
const title = entry.data.title;
const description = entry.data.description;
const pageContent = `${title} ${description} ${entry.data.keywords?.join(" ") || ""}`;
const optimizedDescription = generateMetaDescription(pageContent, 158);
const keywords = extractKeywords(pageContent, 12, lang);

// Enhanced structured data for knowledge article
const articleSchema = {
  "@context": "https://schema.org",
  "@type": "Article",
  headline: title,
  description: description,
  image: imageSource,
  author: {
    "@type": "Organization",
    name: "Melody Mind",
  },
  publisher: {
    "@type": "Organization",
    name: "Melody Mind",
    logo: {
      "@type": "ImageObject",
      url: "https://melody-mind.de/melody-mind.png",
    },
  },
  datePublished: entry.data.createdAt?.toISOString(),
  dateModified: entry.data.updatedAt?.toISOString(),
  mainEntityOfPage: {
    "@type": "WebPage",
    "@id": Astro.url.href,
  },
  inLanguage: lang,
  keywords: entry.data.keywords?.join(", ") || "",
  articleSection: "Music Knowledge",
  wordCount: entry.body?.length || 0,
};

// Breadcrumb structured data
const breadcrumbSchema = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  itemListElement: [
    {
      "@type": "ListItem",
      position: 1,
      name: t("nav.home"),
      item: `${Astro.site}/${lang}/`,
    },
    {
      "@type": "ListItem",
      position: 2,
      name: t("knowledge.title"),
      item: `${Astro.site}/${lang}/knowledge`,
    },
    {
      "@type": "ListItem",
      position: 3,
      name: title,
      item: Astro.url.href,
    },
  ],
};

// Helper function for translations
function translate(key: string, fallback: string): string {
  try {
    return t(key);
  } catch {
    return fallback;
  }
}
---

<Layout
  {title}
  description={optimizedDescription}
  image={imageSource}
  type="article"
  publishDate={entry.data.createdAt ? new Date(entry.data.createdAt) : new Date()}
  modifiedDate={entry.data.updatedAt ? new Date(entry.data.updatedAt) : new Date()}
  ogMusic={{
    creator: "Melody Mind",
    album: title,
    musician: "Various Artists",
  }}
>
  <script is:inline type="application/ld+json" set:html={JSON.stringify(articleSchema)} />

  <main class="min-h-screen">
    <div class="mx-auto">
      <!-- Header Section with Image and Title -->
      <header class="mb-16">
        <div
          class="flex flex-col lg:grid lg:grid-cols-[1.2fr_0.8fr] lg:gap-12 xl:gap-16 lg:items-center"
        >
          <!-- Image Section - Larger and better responsive -->
          <div class="w-full mx-auto lg:max-w-none mb-8 lg:mb-0 order-2 lg:order-1">
            {
              imageSource ? (
                <div class="relative w-full aspect-[4/3] lg:aspect-[5/3] overflow-hidden rounded-2xl shadow-2xl border border-gray-600">
                  <Picture
                    class="w-full h-full object-cover transition-transform duration-300 hover:scale-105"
                    src={imageSource}
                    widths={[600, 800, 1000, 1200]}
                    sizes="(max-width: 640px) 100vw, (max-width: 1024px) 600px, (max-width: 1280px) 800px, 1000px"
                    formats={["avif", "webp", "jpg"]}
                    alt={entry.data.title}
                    loading="eager"
                    fetchpriority="high"
                    width={1200}
                    height={800}
                    decoding="async"
                  />
                </div>
              ) : (
                <div
                  class="flex aspect-[4/3] lg:aspect-[5/3] w-full items-center justify-center rounded-2xl bg-gray-800 p-8 text-center text-gray-400 border-2 border-dashed border-gray-600"
                  role="img"
                  aria-label="Kein Bild verfügbar"
                >
                  <div class="flex flex-col items-center gap-3">
                    <Icon name="image" class="h-16 w-16 lg:h-20 lg:w-20" aria-hidden="true" />
                    <span class="text-lg">Kein Bild verfügbar</span>
                  </div>
                </div>
              )
            }
          </div>

          <!-- Title Section - Better responsive positioning -->
          <div
            class="flex flex-col items-center gap-6 lg:items-start order-1 lg:order-2 text-center lg:text-left"
          >
            <Headline level="h1" textSize="xl" textAlign="center">
              {entry.data.title}
            </Headline>

            <Paragraph textSize="lg" textAlign="center">
              {entry.data.description}
            </Paragraph>
          </div>
        </div>
      </header>

      <!-- Meta Information and Action Buttons Section -->
      <section class="mb-12">
        <div class="max-w-5xl mx-auto">
          {/* Description */}
          <div class="mb-8 px-4"></div>

          {/* Meta Information - Better responsive grid */}
          <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4 mb-8 px-4">
            <div
              class="flex items-center justify-center sm:justify-start gap-2 px-3 sm:px-4 py-3 bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl"
            >
              <Icon
                name="calendar"
                class="h-4 w-4 sm:h-5 sm:w-5 text-blue-400"
                aria-hidden="true"
              />
              <span class="text-xs sm:text-sm text-gray-300">
                {
                  new Date(entry.data.createdAt || new Date()).toLocaleDateString(lang, {
                    year: "numeric",
                    month: "long",
                    day: "numeric",
                  })
                }
              </span>
            </div>

            <div
              class="flex items-center justify-center sm:justify-start gap-2 px-3 sm:px-4 py-3 bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl"
            >
              <Icon name="clock" class="h-4 w-4 sm:h-5 sm:w-5 text-green-400" aria-hidden="true" />
              <span class="text-xs sm:text-sm text-gray-300">
                {Math.ceil((entry.body?.length || 0) / 200)} Min. Lesezeit
              </span>
            </div>

            <div
              class="flex items-center justify-center sm:justify-start gap-2 px-3 sm:px-4 py-3 bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-xl"
            >
              <Icon
                name="file-text"
                class="h-4 w-4 sm:h-5 sm:w-5 text-purple-400"
                aria-hidden="true"
              />
              <span class="text-xs sm:text-sm text-gray-300">
                {entry.body?.length || 0} words
              </span>
            </div>
          </div>

          {/* Action Buttons - Better responsive layout */}
          <div class="flex flex-col sm:flex-row gap-3 justify-center px-4">
            <ButtonLink
              href={entry.data.category?.spotifyPlaylist || "#"}
              variant="secondary"
              icon="spotify"
              className="w-full sm:w-auto justify-center"
              aria-label="Spotify Playlist öffnen"
            >
              Spotify
            </ButtonLink>
            <ButtonLink
              href={entry.data.category?.deezerPlaylist || "#"}
              variant="secondary"
              icon="deezer"
              className="w-full sm:w-auto justify-center"
              aria-label="Deezer Playlist öffnen"
            >
              Deezer
            </ButtonLink>
            <ButtonLink
              href={entry.data.category?.appleMusicPlaylist || "#"}
              variant="secondary"
              icon="apple-music"
              className="w-full sm:w-auto justify-center"
              aria-label="Apple Music Playlist öffnen"
            >
              Apple
            </ButtonLink>
          </div>
        </div>
      </section>

      {/* Table of Contents */}
      <TableOfContents {headings} />

      {/* Article Content - Full Width */}
      <div id="article-content" class="mb-12">
        <div role="region" aria-labelledby="article-title" aria-label="Main content">
          <Prose>
            <Content />
          </Prose>
        </div>
      </div>

      <!-- Back Navigation -->
      <div class="mt-12 pt-8 border-t border-gray-700/50">
        <div class="flex justify-center">
          <ButtonLink
            href={`/${String(lang)}/knowledge`}
            icon="arrow-left"
            aria-label={translate("knowledge.back.to.list", "Back to knowledge list")}
            className="px-6 py-3 bg-gray-800 hover:bg-gray-700 border border-gray-600 hover:border-gray-500 text-gray-300 hover:text-white transition-all duration-300 rounded-xl hover:shadow-lg hover:-translate-y-1"
          >
            <span class="flex items-center gap-2">
              <Icon name="arrow-left" class="h-5 w-5" aria-hidden="true" />
              <span>{translate("knowledge.back.to.list", "Back to knowledge list")}</span>
            </span>
          </ButtonLink>
        </div>
      </div>
    </div>
  </main>

  <!-- BackToTop component for improved navigation on long articles -->
  <BackToTop lang={String(lang)} />
</Layout>
