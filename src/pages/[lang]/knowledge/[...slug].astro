---
import { getCollection, type CollectionEntry } from "astro:content";
import { languages, ui } from "../../../i18n/ui";
import Layout from "../../../layouts/Layout.astro";
import type { KnowledgeCollectionKey } from "../../../content/config";
import { Picture } from "astro:assets";
import Headline from "@components/Headline.astro";
import { Icon } from "astro-icon/components";
import ButtonLink from "@components/ButtonLink.astro";
import MusicButtons from "../../../components/MusicButtons.astro";
import { calculateReadingTime } from "@utils/readingTime";
import { extractKeywords, generateMetaDescription } from "@utils/seo";

// Use SSG for best performance and SEO
export const prerender = true;

export async function getStaticPaths() {
  const allEntries = await Promise.all(
    Object.keys(languages).map(async (lang) => {
      const collectionName = `knowledge-${lang}` as KnowledgeCollectionKey;
      const entries = await getCollection(collectionName);
      return entries.map((entry) => {
        return {
          params: {
            lang,
            slug: entry.slug,
          },
          props: { entry },
        };
      });
    }),
  );
  return allEntries.flat();
}

type KnowledgeEntry = CollectionEntry<`knowledge-${keyof typeof languages}`> & {
  data: {
    category?: {
      spotifyPlaylist?: string;
      deezerPlaylist?: string;
      appleMusicPlaylist?: string;
    };
    isPlayable?: boolean;
  };
};
interface Props {
  entry: KnowledgeEntry;
}

const { entry } = Astro.props;
const { lang = "de" } = Astro.params;
const t = ui[lang as keyof typeof ui];

// Optimize content rendering by deferring until needed
const { Content } = await entry.render();

// Format date with proper localization
const formattedDate = entry.data.createdAt
  ? new Intl.DateTimeFormat(lang, {
      year: "numeric",
      month: "long",
      day: "numeric",
    }).format(entry.data.createdAt)
  : null;

// Default image if none provided - use optimized path
const defaultImage = "/melody-mind.jpg";
const imageSource =
  typeof entry.data.image === "string" ? entry.data.image : defaultImage;

// Reading time text with proper localization and fallback
const readingTimeText = entry.body
  ? `${calculateReadingTime(entry.body)} ${t["knowledge.reading.time"] || "min Lesezeit"}`
  : null;

// Generate SEO content from the article
const title = entry.data.title;
const description = entry.data.description;

// Enhanced SEO content using utility functions
const pageContent = `${title} ${description} ${entry.body || ""}`;

// Generate optimized meta description and keywords
const optimizedDescription =
  generateMetaDescription(description) || description;
const keywords =
  extractKeywords(pageContent) ||
  entry.data.keywords?.join(", ") ||
  t["meta.keywords"];

// Additional structured data parameters for SEO
const pageType = "article"; // Artikel sollten den Typ 'article' anstelle von 'website' haben
const publishDate = entry.data.createdAt || new Date("2024-01-01");
const modifiedDate = entry.data.updatedAt || new Date();

// Determine if this article has a playable game category
const isPlayable = entry.data.isPlayable === true;

// Prepare game category link
const gameCategorySlug = entry.slug.split("/").pop();
const gameCategoryUrl = isPlayable ? `/${lang}/${gameCategorySlug}` : null;

// Get translation for play button
const playButtonText =
  t["knowledge.play.category"] || "Diese Musikkategorie spielen";

// Wortanzahl berechnen
const wordCount = entry.body ? entry.body.split(/\s+/).filter(Boolean).length : 0;

// Lesezeit in ISO 8601 Duration Format (PT{X}M für X Minuten)
const readingTimeMinutes = entry.body ? calculateReadingTime(entry.body) : 0;
const timeRequiredISO = `PT${readingTimeMinutes}M`;

// Schwierigkeitsgrad in educationalLevel umwandeln
const getEducationalLevel = (difficulty?: string): string => {
  if (!difficulty) return "beginner";
  
  const difficultyMap: Record<string, string> = {
    easy: "beginner",
    medium: "intermediate",
    hard: "advanced"
  };
  
  return difficultyMap[difficulty.toLowerCase()] || "beginner";
};

// Structured data for article - erweitert für besseres SEO
const articleSchemaData = {
  "@context": "https://schema.org",
  "@type": ["Article", "MusicGroup", "CreativeWork"],
  headline: entry.data.title,
  description: optimizedDescription,
  datePublished: entry.data.createdAt?.toISOString(),
  dateModified:
    entry.data.updatedAt?.toISOString() || entry.data.createdAt?.toISOString(),
  image: {
    "@type": "ImageObject",
    url: imageSource,
    width: 1200,
    height: 675,
    caption: `${entry.data.title} - Titelbild`,
    contentUrl: imageSource,
    encodingFormat: "image/jpeg",
    representativeOfPage: true
  },
  author: {
    "@type": "Organization",
    name: "Melody Mind",
  },
  publisher: {
    "@type": "Organization",
    name: "Melody Mind",
    logo: {
      "@type": "ImageObject",
      url: "/melody-mind.png",
    },
  },
  mainEntityOfPage: {
    "@type": "WebPage",
    "@id": Astro.url.href,
  },
  keywords: keywords,
  // Neue Eigenschaften
  wordCount: wordCount,
  articleBody: entry.body || "",
  timeRequired: timeRequiredISO,
  // MusicGroup-spezifische Eigenschaften
  genre: keywords.split(",")[0].trim(), // Erstes Keyword als Genre
  musicReleaseFormat: "Digital",
  numTracks: 0, // Standardwert, da keine Tracks-Information verfügbar ist
  musicBy: {
    "@type": "Organization",
    "name": "Melody Mind"
  },
  // CreativeWork-spezifische Eigenschaften
  copyrightYear: new Date().getFullYear(),
  license: "https://creativecommons.org/licenses/by-nc/4.0/",
  isFamilyFriendly: true,
  teaches: keywords.split(",").map(kw => kw.trim()).join(", "),
  inLanguage: lang,
  isAccessibleForFree: true,
  audience: "Musikinteressierte und Lernende aller Altersgruppen",
  educationalLevel: "beginner", // Standardwert
  // Potentielle Aktionen für Playlist-Links
  potentialAction: [
    ...(entry.data.category?.spotifyPlaylist ? [{
      "@type": "ListenAction",
      "target": {
        "@type": "EntryPoint",
        "urlTemplate": entry.data.category.spotifyPlaylist,
        "actionPlatform": "https://spotify.com"
      },
      "name": `${entry.data.title} auf Spotify anhören`
    }] : []),
    ...(entry.data.category?.deezerPlaylist ? [{
      "@type": "ListenAction",
      "target": {
        "@type": "EntryPoint",
        "urlTemplate": entry.data.category.deezerPlaylist,
        "actionPlatform": "https://deezer.com"
      },
      "name": `${entry.data.title} auf Deezer anhören`
    }] : []),
    ...(entry.data.category?.appleMusicPlaylist ? [{
      "@type": "ListenAction",
      "target": {
        "@type": "EntryPoint",
        "urlTemplate": entry.data.category.appleMusicPlaylist,
        "actionPlatform": "https://music.apple.com"
      },
      "name": `${entry.data.title} auf Apple Music anhören`
    }] : [])
  ],
  // Strukturierte AudioObject-Typen für Playlists
  audio: [
    ...(entry.data.category?.spotifyPlaylist ? [{
      "@type": "AudioObject",
      "contentUrl": entry.data.category.spotifyPlaylist,
      "encodingFormat": "audio/mpeg",
      "name": `${entry.data.title} - Spotify Playlist`,
      "description": `Spotify Playlist für ${entry.data.title}`,
      "uploadDate": entry.data.createdAt?.toISOString() || new Date().toISOString(),
      "duration": "PT0H0M0S", // Platzhalter, da die genaue Dauer nicht bekannt ist
      "potentialAction": {
        "@type": "ListenAction",
        "target": entry.data.category.spotifyPlaylist
      }
    }] : []),
    ...(entry.data.category?.deezerPlaylist ? [{
      "@type": "AudioObject",
      "contentUrl": entry.data.category.deezerPlaylist,
      "encodingFormat": "audio/mpeg",
      "name": `${entry.data.title} - Deezer Playlist`,
      "description": `Deezer Playlist für ${entry.data.title}`,
      "uploadDate": entry.data.createdAt?.toISOString() || new Date().toISOString(),
      "duration": "PT0H0M0S", // Platzhalter, da die genaue Dauer nicht bekannt ist
      "potentialAction": {
        "@type": "ListenAction",
        "target": entry.data.category.deezerPlaylist
      }
    }] : []),
    ...(entry.data.category?.appleMusicPlaylist ? [{
      "@type": "AudioObject",
      "contentUrl": entry.data.category.appleMusicPlaylist,
      "encodingFormat": "audio/mpeg",
      "name": `${entry.data.title} - Apple Music Playlist`,
      "description": `Apple Music Playlist für ${entry.data.title}`,
      "uploadDate": entry.data.createdAt?.toISOString() || new Date().toISOString(),
      "duration": "PT0H0M0S", // Platzhalter, da die genaue Dauer nicht bekannt ist
      "potentialAction": {
        "@type": "ListenAction",
        "target": entry.data.category.appleMusicPlaylist
      }
    }] : [])
  ],
  // GameItem wenn isPlayable true ist
  ...(isPlayable && gameCategoryUrl ? {
    "gameItem": {
      "@type": "Game",
      "name": `${entry.data.title} - Musikspiel`,
      "url": new URL(gameCategoryUrl, Astro.url.origin).href,
      "gamePlatform": "Web Browser",
      "applicationCategory": "Game",
      "genre": "Music Game"
    }
  } : {}),
  // BreadcrumbList Schema für die Breadcrumb-Navigation
  breadcrumb: {
    "@type": "BreadcrumbList",
    "itemListElement": [
      {
        "@type": "ListItem",
        "position": 1,
        "name": t?.["nav.home"] || "Startseite",
        "item": new URL(`/${lang}`, Astro.url.origin).href
      },
      {
        "@type": "ListItem",
        "position": 2,
        "name": t?.["knowledge.title"] || "Wissen",
        "item": new URL(`/${lang}/knowledge`, Astro.url.origin).href
      },
      {
        "@type": "ListItem",
        "position": 3,
        "name": entry.data.title,
        "item": Astro.url.href
      }
    ]
  }
};
---

<Layout
  title={title}
  description={optimizedDescription}
  keywords={keywords}
  image={imageSource}
  type={pageType}
  publishDate={publishDate}
  modifiedDate={modifiedDate}
  ogMusic={{
    creator: "Melody Mind",
    album: entry.data.title,
    musician: "Melody Mind"
  }}
>
  <script
    type="application/ld+json"
    set:html={JSON.stringify(articleSchemaData)}
  />

  <main class="max-w-3xl mx-auto px-4 sm:px-6 py-12">
    <article
      class="prose prose-lg dark:prose-invert max-w-none"
      aria-labelledby="article-title"
    >
<nav
  class="mb-8 print:hidden"
  aria-label={t["knowledge.breadcrumb.label"] || "Breadcrumb"}
>
  <ol class="flex flex-wrap items-center gap-2 text-md">
    <li class="flex items-center">
      <a
        href={`/${lang}`}
        class="flex items-center gap-1 text-zinc-400 hover:text-sky-400 transition-colors rounded-lg px-2 py-1 focus:outline-none focus-visible:ring-2 focus-visible:ring-sky-400 focus-visible:ring-offset-2 focus-visible:ring-offset-zinc-900"
        aria-label={t?.["nav.home"] || "Startseite"}
      >
        <Icon name="home" class="h-4 w-4" aria-hidden="true" />
        <span class="sr-only">{t?.["nav.home"] || "Startseite"}</span>
      </a>
    </li>
    <li class="flex items-center" aria-hidden="true">
      <Icon name="chevron-right" class="h-4 w-4 mx-1 text-zinc-500" />
    </li>
    <li>
      <a
        href={`/${lang}/knowledge`}
        class="flex items-center gap-1 text-zinc-400 hover:text-sky-400 transition-colors rounded-lg px-2 py-1 focus:outline-none focus-visible:ring-2 focus-visible:ring-sky-400 focus-visible:ring-offset-2 focus-visible:ring-offset-zinc-900"
      >
        {t?.["knowledge.title"] || "Wissen"}
      </a>
    </li>
    <li class="flex items-center" aria-hidden="true">
      <Icon name="chevron-right" class="h-4 w-4 mx-1 text-zinc-500" />
    </li>
    <li
      class="text-zinc-50 truncate max-w-[150px] sm:max-w-xs px-2 py-1 rounded-lg bg-zinc-800/30"
      aria-current="page"
    >
      {entry.data.title}
    </li>
  </ol>
</nav>

<header class="relative mb-12">
  <!-- Hero Image Container -->
  <div class="relative mb-8 rounded-2xl overflow-hidden aspect-video shadow-xl ring-1 ring-zinc-700/50">
    <Picture
      src={imageSource}
      width={1200}
      height={675}
      formats={["avif", "webp"]}
      class="w-full h-full object-cover"
      loading="eager"
      fetchpriority="high"
      alt={`Titelbild zum Artikel "${entry.data.title}" - Musikwissen auf Melody Mind - ${entry.data.description?.substring(0, 50)}...`}
      decoding="async"
      sizes="(min-width: 1280px) 1200px, (min-width: 768px) 100vw, 100vw"
    />
  </div>

  <!-- Title and Meta Container -->
  <div class="relative space-y-6">
    <Headline
      level="h1"
      title={entry.data.title}
      id="article-title"
      className="text-3xl sm:text-4xl lg:text-5xl font-bold tracking-tight text-white"
    />

    <!-- Meta Information -->
    <div class="flex flex-wrap items-center gap-4">
      {formattedDate && (
        <time
          datetime={entry.data.createdAt?.toISOString()}
          class="flex items-center gap-2 px-4 py-2 rounded-xl bg-zinc-800 text-zinc-200"
        >
          <Icon name="calendar" class="h-5 w-5 text-sky-400" aria-hidden="true" />
          <span>{formattedDate}</span>
        </time>
      )}

      {readingTimeText && (
        <span class="flex items-center gap-2 px-4 py-2 rounded-xl bg-zinc-800 text-zinc-200">
          <Icon name="clock" class="h-5 w-5 text-sky-400" aria-hidden="true" />
          <span>{readingTimeText}</span>
        </span>
      )}
    </div>

    <!-- Music & Game Buttons -->
    <div class="flex flex-wrap items-center gap-4">
      {entry.data.category && (
        <MusicButtons
          category={entry.data.category}
          title={entry.data.title}
        />
      )}

      {isPlayable && gameCategoryUrl && (
        <ButtonLink
          href={gameCategoryUrl}
          className="group flex items-center min-w-[120px] h-12 px-4 py-2 rounded-xl text-sm font-medium bg-blue-600 text-white focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-400 focus-visible:ring-offset-2 hover:bg-blue-500"
          aria-label={`${playButtonText}: ${entry.data.title}`}
        >
          <span class="flex items-center gap-2">
            <Icon name="game-controller" class="h-5 w-5" aria-hidden="true" />
            <span class="font-medium">{playButtonText}</span>
          </span>
        </ButtonLink>
      )}
    </div>

    <!-- Description Box -->
    <div class="mt-8 p-6 rounded-2xl bg-zinc-800 shadow-lg">
      <p class="text-lg text-zinc-100 leading-relaxed">
        {entry.data.description}
      </p>
    </div>
  </div>
</header>

<div class="content-wrapper relative">
  <div
    role="region"
    aria-label={"Hauptinhalt"}
    class="prose prose-lg dark:prose-invert max-w-none prose-headings:scroll-mt-20"
  >
    <div>
      <Content />
    </div>
  </div>
</div>

      <!-- Back navigation with improved accessibility -->
      <div
        class="mt-12 flex justify-between border-t border-zinc-700 pt-8 print:hidden"
      >
        <ButtonLink
          href={`/${lang}/knowledge`}
          className="group flex items-center min-h-[44px] rounded-lg hover:bg-zinc-800/30 px-3 py-2"
          aria-label={t["knowledge.back.to.list"] || "Zurück zur Wissensliste"}
        >
          <Icon
            name="arrow-left"
            class="h-4 w-4 mr-2 group-hover:translate-x-[-2px] transition-transform"
            aria-hidden="true"
          />
          <span>{t["knowledge.back.to.list"] || "Zurück zur Wissensliste"}</span
          >
        </ButtonLink>
      </div>
    </article>
  </main>
</Layout>

<style>
  .content-wrapper :global(h2),
  .content-wrapper :global(h3) {
    color: rgb(255, 255, 255);
    line-height: 1.3;
    margin-top: 2rem;
    margin-bottom: 1rem;
  }

  .content-wrapper :global(h2) {
    font-size: 1.875rem;
    font-weight: 700;
  }

  .content-wrapper :global(h3) {
    font-size: 1.5rem;
    font-weight: 600;
  }

  .content-wrapper :global(p) {
    color: rgb(226, 232, 240);
    line-height: 1.8;
    margin-bottom: 1.5rem;
    max-width: 70ch;
  }

  .content-wrapper :global(a) {
    color: rgb(56, 189, 248);
    text-decoration: underline;
    text-underline-offset: 0.2em;
    transition: color 0.2s ease;
  }

  .content-wrapper :global(a:hover) {
    color: rgb(125, 211, 252);
  }

  .content-wrapper :global(a:focus-visible) {
    outline: 2px solid rgb(56, 189, 248);
    outline-offset: 4px;
    border-radius: 2px;
  }

  .content-wrapper :global(blockquote) {
    border-left: 4px solid rgb(56, 189, 248);
    margin: 2rem 0;
    padding: 1rem 1.5rem;
    color: rgb(226, 232, 240);
  }

  .content-wrapper :global(ul),
  .content-wrapper :global(ol) {
    list-style-position: outside;
    padding-left: 1.5rem;
    margin-bottom: 1.5rem;
  }

  .content-wrapper :global(li) {
    margin-bottom: 0.75rem;
    color: rgb(226, 232, 240);
  }

  .content-wrapper :global(li::marker) {
    color: rgb(56, 189, 248);
  }

  /* High contrast mode adjustments */
  @media (forced-colors: active) {
    .content-wrapper :global(a) {
      text-decoration: underline;
    }
  }

  /* Print styles */
  @media print {
    .content-wrapper :global(*) {
      color: black !important;
    }
  }
</style>

