---
/**
 * @component KnowledgeArticlePage
 * @description Dynamic route for displaying knowledge articles in different languages.
 * The page supports multilingual content, structured data for SEO, and optimized
 * image display for improved performance.
 *
 * Key features:
 * - Display of knowledge content with optimized image presentation
 * - Structured data for better search engine indexing
 * - Support for multiple languages through Content Collections
 * - Table of contents for long articles
 * - Integration with music streaming platforms (Spotify, Deezer, Apple Music)
 * - Playable categories with links to the corresponding game mode
 *
 * @accessibility WCAG 2.2 AAA compliant with optimized color contrasts,
 *                semantic HTML elements, and ARIA attributes
 * @performance Optimized images with avif/webp formats and responsive sizes
 * @seo Complete structured data according to Schema.org standards
 */

// 1. Imports (using consistent @-alias paths for better maintainability)
import { getCollection, type CollectionEntry } from "astro:content";
import { languages, ui } from "../../../i18n/ui";
import Layout from "../../../layouts/Layout.astro";
import type { KnowledgeCollectionKey } from "../../../content/config";
import { Picture } from "astro:assets";
import Headline from "@components/Headline.astro";
import { Icon } from "astro-icon/components";
import ButtonLink from "@components/ButtonLink.astro";
import MusicButtons from "../../../components/MusicButtons.astro";
import TableOfContents from "../../../components/TableOfContents.astro";
import { calculateReadingTime } from "@utils/readingTime";
import { extractKeywords, generateMetaDescription } from "@utils/seo";

// 2. Rendering Strategy: SSG for better performance and SEO
export const prerender = true;

// 3. getStaticPaths implementation for dynamic routes
export async function getStaticPaths() {
  const allEntries = await Promise.all(
    Object.keys(languages).map(async (lang) => {
      const collectionName = `knowledge-${lang}` as KnowledgeCollectionKey;
      const entries = await getCollection(collectionName);
      return entries.map((entry) => {
        return {
          params: {
            lang,
            slug: entry.slug,
          },
          props: { entry },
        };
      });
    })
  );
  return allEntries.flat();
}

// 4. TypeScript Definitions
type KnowledgeEntry = CollectionEntry<`knowledge-${keyof typeof languages}`> & {
  data: {
    category?: {
      spotifyPlaylist?: string;
      deezerPlaylist?: string;
      appleMusicPlaylist?: string;
    };
    isPlayable?: boolean;
    difficulty?: string;
  };
};

// 5. Main Component Logic
const { entry }: { entry: KnowledgeEntry } = Astro.props;
const { lang = "en" } = Astro.params;
const t = ui[lang as keyof typeof ui];

// 6. Content Processing
// Optimize content rendering by deferring until needed
const { Content, headings } = await entry.render();

// Format date with proper localization
const formattedDate = entry.data.createdAt
  ? new Intl.DateTimeFormat(lang, {
      year: "numeric",
      month: "long",
      day: "numeric",
    }).format(entry.data.createdAt)
  : null;

// Default image if none provided - use optimized path
const defaultImage = "/melody-mind.jpg";
const imageSource = typeof entry.data.image === "string" ? entry.data.image : defaultImage;

// Reading time text with proper localization and fallback
const readingTimeText = entry.body
  ? `${calculateReadingTime(entry.body)} ${t["knowledge.reading.time"] || "min reading time"}`
  : null;

// Generate SEO content from the article
const title = entry.data.title;
const description = entry.data.description;

// Enhanced SEO content using utility functions
const pageContent = `${title} ${description} ${entry.body || ""}`;

// Generate optimized meta description and keywords
const optimizedDescription = generateMetaDescription(description) || description;
const keywords =
  extractKeywords(pageContent) || entry.data.keywords?.join(", ") || t["meta.keywords"];

// Additional structured data parameters for SEO
const pageType = "article"; // Articles should be of type 'article' instead of 'website'
const publishDate = entry.data.createdAt || new Date("2024-01-01");
const modifiedDate = entry.data.updatedAt || new Date();

// Determine if this article has a playable game category
const isPlayable = entry.data.isPlayable === true;

// Prepare game category link
const gameCategorySlug = entry.slug.split("/").pop();
const gameCategoryUrl = isPlayable ? `/${String(lang)}/${gameCategorySlug}` : null;

// Get translation for play button
const playButtonText = t["knowledge.play.category"] || "Play this music category";

// Calculate word count
const wordCount = entry.body ? entry.body.split(/\s+/).filter(Boolean).length : 0;

// Reading time in ISO 8601 Duration Format (PT{X}M for X minutes)
const readingTimeMinutes = entry.body ? calculateReadingTime(entry.body) : 0;
const timeRequiredISO = `PT${readingTimeMinutes}M`;

// Useful helper function for future extensions
// Converts difficulty levels to educational levels for structured data

const getEducationalLevel = (difficulty?: string): string => {
  if (!difficulty) {
    return "beginner";
  }

  const difficultyMap: Record<string, string> = {
    easy: "beginner",
    medium: "intermediate",
    hard: "advanced",
  };

  return difficultyMap[difficulty.toLowerCase()] || "beginner";
};
// Determine educational level based on content difficulty
const educationalLevel = getEducationalLevel(entry.data.difficulty);

// Structured data for article - enhanced for better SEO
const articleSchemaData = {
  "@context": "https://schema.org",
  "@type": ["Article", "MusicGroup", "CreativeWork"],
  headline: entry.data.title,
  description: optimizedDescription,
  datePublished: entry.data.createdAt?.toISOString(),
  dateModified: entry.data.updatedAt?.toISOString() || entry.data.createdAt?.toISOString(),
  image: {
    "@type": "ImageObject",
    url: imageSource,
    width: 1200,
    height: 675,
    caption: `${entry.data.title} - Cover image`,
    contentUrl: imageSource,
    encodingFormat: "image/jpeg",
    representativeOfPage: true,
  },
  author: {
    "@type": "Organization",
    name: "Melody Mind",
  },
  publisher: {
    "@type": "Organization",
    name: "Melody Mind",
    logo: {
      "@type": "ImageObject",
      url: "/melody-mind.png",
      width: 512,
      height: 512,
      caption: "Melody Mind Logo",
      contentUrl: "/melody-mind.png",
      encodingFormat: "image/png",
    },
  },
  mainEntityOfPage: {
    "@type": "WebPage",
    "@id": Astro.url.href,
  },
  keywords: keywords,
  // New properties
  wordCount: wordCount,
  articleBody: entry.body || "",
  timeRequired: timeRequiredISO,
  // MusicGroup-specific properties
  genre: keywords.split(",")[0].trim(), // First keyword as genre
  musicReleaseFormat: "Digital",
  numTracks: 0, // Default value, as track information is not available
  musicBy: {
    "@type": "Organization",
    name: "Melody Mind",
  },
  // CreativeWork-specific properties
  teaches: keywords
    .split(",")
    .map((kw) => kw.trim())
    .join(", "),
  inLanguage: lang,
  isAccessibleForFree: true,
  audience: "Music enthusiasts and learners of all age groups",
  educationalLevel: educationalLevel,
  // Potential actions for playlist links
  potentialAction: [
    ...(entry.data.category?.spotifyPlaylist
      ? [
          {
            "@type": "ListenAction",
            target: {
              "@type": "EntryPoint",
              urlTemplate: entry.data.category.spotifyPlaylist,
              actionPlatform: "https://spotify.com",
            },
            name: `${entry.data.title} - Listen on Spotify`,
          },
        ]
      : []),
    ...(entry.data.category?.deezerPlaylist
      ? [
          {
            "@type": "ListenAction",
            target: {
              "@type": "EntryPoint",
              urlTemplate: entry.data.category.deezerPlaylist,
              actionPlatform: "https://deezer.com",
            },
            name: `${entry.data.title} - Listen on Deezer`,
          },
        ]
      : []),
    ...(entry.data.category?.appleMusicPlaylist
      ? [
          {
            "@type": "ListenAction",
            target: {
              "@type": "EntryPoint",
              urlTemplate: entry.data.category.appleMusicPlaylist,
              actionPlatform: "https://music.apple.com",
            },
            name: `${entry.data.title} - Listen on Apple Music`,
          },
        ]
      : []),
  ],
  // Structured AudioObject types for playlists
  audio: [
    ...(entry.data.category?.spotifyPlaylist
      ? [
          {
            "@type": "AudioObject",
            contentUrl: entry.data.category.spotifyPlaylist,
            encodingFormat: "audio/mpeg",
            name: `${entry.data.title} - Spotify Playlist`,
            description: `Spotify Playlist for ${entry.data.title}`,
            uploadDate: entry.data.createdAt?.toISOString() || new Date().toISOString(),
            duration: "PT0H0M0S", // Placeholder, as the exact duration is not known
            potentialAction: {
              "@type": "ListenAction",
              target: entry.data.category.spotifyPlaylist,
            },
          },
        ]
      : []),
    ...(entry.data.category?.deezerPlaylist
      ? [
          {
            "@type": "AudioObject",
            contentUrl: entry.data.category.deezerPlaylist,
            encodingFormat: "audio/mpeg",
            name: `${entry.data.title} - Deezer Playlist`,
            description: `Deezer Playlist for ${entry.data.title}`,
            uploadDate: entry.data.createdAt?.toISOString() || new Date().toISOString(),
            duration: "PT0H0M0S", // Placeholder, as the exact duration is not known
            potentialAction: {
              "@type": "ListenAction",
              target: entry.data.category.deezerPlaylist,
            },
          },
        ]
      : []),
    ...(entry.data.category?.appleMusicPlaylist
      ? [
          {
            "@type": "AudioObject",
            contentUrl: entry.data.category.appleMusicPlaylist,
            encodingFormat: "audio/mpeg",
            name: `${entry.data.title} - Apple Music Playlist`,
            description: `Apple Music Playlist for ${entry.data.title}`,
            uploadDate: entry.data.createdAt?.toISOString() || new Date().toISOString(),
            duration: "PT0H0M0S", // Placeholder, as the exact duration is not known
            potentialAction: {
              "@type": "ListenAction",
              target: entry.data.category.appleMusicPlaylist,
            },
          },
        ]
      : []),
  ],
  // GameItem if isPlayable is true
  ...(isPlayable && gameCategoryUrl
    ? {
        gameItem: {
          "@type": "Game",
          name: `${entry.data.title} - Music Game`,
          url: new URL(gameCategoryUrl, Astro.url.origin).href,
          gamePlatform: "Web Browser",
          applicationCategory: "Game",
          genre: "Music Game",
        },
      }
    : {}),
  // BreadcrumbList Schema for the breadcrumb navigation
  breadcrumb: {
    "@type": "BreadcrumbList",
    itemListElement: [
      {
        "@type": "ListItem",
        position: 1,
        name: t?.["nav.home"] || "Home",
        item: new URL(`/${lang}`, Astro.url.origin).href,
      },
      {
        "@type": "ListItem",
        position: 2,
        name: t?.["knowledge.title"] || "Knowledge",
        item: new URL(`/${String(lang)}/knowledge`, Astro.url.origin).href,
      },
      {
        "@type": "ListItem",
        position: 3,
        name: entry.data.title,
        item: Astro.url.href,
      },
    ],
  },
};
---

<Layout
  {title}
  description={optimizedDescription}
  {keywords}
  image={imageSource}
  type={pageType}
  {publishDate}
  {modifiedDate}
  ogMusic={{
    creator: "Melody Mind",
    album: entry.data.title,
    musician: "Melody Mind",
  }}
>
  <script type="application/ld+json" set:html={JSON.stringify(articleSchemaData)} />

  <!-- 
  Accessibility Enhancement: prefers-reduced-motion support 
  This style block helps users who prefer reduced motion by minimizing
  animations and transitions throughout the component. This is especially
  important for users with vestibular disorders or other conditions that
  make motion effects uncomfortable or disorienting.
  -->
  <style>
    @media (prefers-reduced-motion: reduce) {
      *,
      *::before,
      *::after {
        animation-duration: 0.001s !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.001s !important;
        scroll-behavior: auto !important;
      }
    }
  </style>

  <main class="mx-auto max-w-3xl px-4 py-12 sm:px-6">
    <article class="prose prose-lg dark:prose-invert max-w-none" aria-labelledby="article-title">
      <nav class="mb-8 print:hidden" aria-label={t["knowledge.breadcrumb.label"] || "Breadcrumb"}>
        <ol class="text-md flex flex-wrap items-center gap-2">
          <li class="flex items-center">
            <a
              href={`/${lang}`}
              class="flex items-center gap-1 rounded-lg px-2 py-1 text-zinc-400 transition-colors hover:text-sky-600 focus:outline-none focus-visible:ring-2 focus-visible:ring-sky-600 focus-visible:ring-offset-2 focus-visible:ring-offset-zinc-900"
              aria-label={t?.["nav.home"] || "Home"}
            >
              <Icon name="home" class="h-4 w-4" aria-hidden="true" />
              <span class="sr-only">{t?.["nav.home"] || "Home"}</span>
            </a>
          </li>
          <li class="flex items-center" aria-hidden="true">
            <Icon name="chevron-right" class="mx-1 h-4 w-4 text-zinc-500" />
          </li>
          <li>
            <a
              href={`/${String(lang)}/knowledge`}
              class="flex items-center gap-1 rounded-lg px-2 py-1 text-zinc-400 transition-colors hover:text-sky-600 focus:outline-none focus-visible:ring-2 focus-visible:ring-sky-600 focus-visible:ring-offset-2 focus-visible:ring-offset-zinc-900"
            >
              {t?.["knowledge.title"] || "Knowledge"}
            </a>
          </li>
          <li class="flex items-center" aria-hidden="true">
            <Icon name="chevron-right" class="mx-1 h-4 w-4 text-zinc-500" />
          </li>
          <li
            class="max-w-[150px] truncate rounded-lg bg-zinc-800/30 px-2 py-1 text-zinc-50 sm:max-w-xs"
            aria-current="page"
          >
            {entry.data.title}
          </li>
        </ol>
      </nav>

      <header class="relative mb-12">
        <!-- Hero Image Container -->
        <div
          class="relative mb-8 aspect-video overflow-hidden rounded-2xl shadow-xl ring-1 ring-zinc-700/50"
        >
          <Picture
            src={imageSource}
            width={1200}
            height={675}
            formats={["avif", "webp"]}
            class="h-full w-full object-cover"
            loading="eager"
            fetchpriority="high"
            alt={`Cover image for article "${entry.data.title}" - Music knowledge on Melody Mind`}
            decoding="async"
            sizes="(min-width: 1280px) 1200px, (min-width: 768px) 100vw, 100vw"
            quality={90}
            widths={[640, 750, 1080, 1200]}
          />
        </div>

        <!-- Title and Meta Container -->
        <div class="relative space-y-6">
          <Headline
            level="h1"
            title={entry.data.title}
            id="article-title"
            className="text-3xl font-bold tracking-tight text-white sm:text-4xl lg:text-5xl"
          />

          <!-- Meta Information -->
          <div class="flex flex-wrap items-center gap-4">
            {
              formattedDate && (
                <time
                  datetime={entry.data.createdAt?.toISOString()}
                  class="flex min-h-[44px] items-center gap-2 rounded-xl bg-zinc-800/90 px-4 py-2 text-zinc-300"
                >
                  <Icon name="calendar" class="h-5 w-5 text-sky-400" aria-hidden="true" />
                  <span class="text-base">{formattedDate}</span>
                </time>
              )
            }

            {
              readingTimeText && (
                <span class="flex min-h-[44px] items-center gap-2 rounded-xl bg-zinc-800/90 px-4 py-2 text-zinc-300">
                  <Icon name="clock" class="h-5 w-5 text-sky-400" aria-hidden="true" />
                  <span class="text-base">{readingTimeText}</span>
                </span>
              )
            }
          </div>

          <!-- Music & Game Buttons -->
          <div class="flex flex-wrap items-center gap-4">
            {
              entry.data.category && (
                <MusicButtons category={entry.data.category} title={entry.data.title} />
              )
            }

            {
              isPlayable && gameCategoryUrl && (
                <ButtonLink
                  href={gameCategoryUrl}
                  className="group flex items-center min-w-[120px] h-12 px-4 py-2 rounded-xl text-sm font-medium bg-blue-600 text-white focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-400 focus-visible:ring-offset-2 hover:bg-blue-500 transition-colors"
                  aria-label={`${playButtonText}: ${entry.data.title}`}
                >
                  <span class="flex items-center gap-2">
                    <Icon name="game-controller" class="h-5 w-5" aria-hidden="true" />
                    <span class="font-medium">{playButtonText}</span>
                  </span>
                </ButtonLink>
              )
            }
          </div>
        </div>
      </header>

      <!-- Table of Contents Dropdown -->
      <div class="toc-wrapper relative z-10 mb-8">
        <TableOfContents {headings} title="Table of Contents" {lang} />
      </div>

      <div id="article-content" class="content-wrapper relative mt-4">
        <div
          role="region"
          aria-label="Main content"
          class="prose prose-lg dark:prose-invert prose-headings:scroll-mt-20 prose-headings:text-white prose-headings:font-bold prose-p:text-slate-200 prose-p:leading-7 prose-a:text-sky-600 hover:prose-a:text-sky-500 prose-a:underline prose-a:underline-offset-2 focus:prose-a:outline-2 focus:prose-a:outline-sky-400 focus:prose-a:outline-offset-4 focus:prose-a:rounded prose-blockquote:border-l-4 prose-blockquote:border-sky-400 prose-blockquote:pl-6 prose-blockquote:text-slate-200 prose-ul:list-outside prose-ol:list-outside prose-li:text-slate-200 prose-li:mb-3 marker:prose-li:text-sky-400 max-w-none"
        >
          <div>
            <Content />
          </div>
        </div>
      </div>

      <!-- Back navigation with improved accessibility -->
      <div class="mt-12 flex justify-between border-t border-zinc-700 pt-8 print:hidden">
        <ButtonLink
          href={`/${String(lang)}/knowledge`}
          className="group flex min-h-[44px] min-w-[44px] items-center rounded-lg px-4 py-2 transition-colors hover:bg-zinc-800/80 focus:outline-none focus-visible:ring-2 focus-visible:ring-sky-600 focus-visible:ring-offset-2 focus-visible:ring-offset-zinc-900"
          aria-label={t?.["knowledge.back.to.list"] || "Back to knowledge list"}
        >
          <Icon
            name="arrow-left"
            class="mr-3 h-5 w-5 transition-transform group-hover:translate-x-[-2px]"
            aria-hidden="true"
          />
          <span class="text-base font-medium"
            >{t["knowledge.back.to.list"] || "Back to knowledge list"}</span
          >
        </ButtonLink>
      </div>
    </article>
  </main>
</Layout>

<!-- 
Note: Custom styles have been replaced with Tailwind classes.
This change improves performance through:
1. Reduced CSS size by using utility classes
2. Improved cacheability
3. Consistent application of the design system

All styles are now directly in the HTML elements, which improves code maintainability
and aligns with the project-wide directive to use Tailwind CSS.
-->
