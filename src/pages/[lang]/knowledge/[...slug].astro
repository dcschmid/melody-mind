---
/**
 * @component KnowledgeArticlePage
 * @description Dynamic route for displaying knowledge articles in different languages.
 * The page supports multilingual content, structured data for SEO, and optimized
 * image display for improved performance.
 *
 * Key features:
 * - Display of knowledge content with optimized image presentation
 * - Structured data for better search engine indexing
 * - Support for multiple languages through Content Collections
 * - Table of contents for long articles
 * - Integration with music streaming platforms (Spotify, Deezer, Apple Music)
 * - Playable categories with links to the corresponding game mode
 *
 * @accessibility WCAG 2.2 AAA compliant with optimized color contrasts,
 *                semantic HTML elements, and ARIA attributes
 * @performance Optimized images with avif/webp formats and responsive sizes
 * @seo Complete structured data according to Schema.org standards
 */

// 1. Imports (using consistent @-alias paths for better maintainability)
import { getCollection, type CollectionEntry } from "astro:content";
import { languages, ui } from "../../../i18n/ui";
import Layout from "../../../layouts/Layout.astro";
import type { KnowledgeCollectionKey } from "../../../content/config";
import { Picture } from "astro:assets";
import Headline from "@components/Headline.astro";
import { Icon } from "astro-icon/components";
import ButtonLink from "@components/ButtonLink.astro";
import MusicButtons from "../../../components/MusicButtons.astro";
import TableOfContents from "../../../components/TableOfContents.astro";
import { calculateReadingTime } from "@utils/readingTime";
import { extractKeywords, generateMetaDescription } from "@utils/seo";

// 2. Rendering Strategy: SSG for better performance and SEO
export const prerender = true;

// 3. getStaticPaths implementation for dynamic routes
export async function getStaticPaths() {
  const allEntries = await Promise.all(
    Object.keys(languages).map(async (lang) => {
      const collectionName = `knowledge-${lang}` as KnowledgeCollectionKey;
      const entries = await getCollection(collectionName);
      return entries.map((entry) => {
        return {
          params: {
            lang,
            slug: entry.slug,
          },
          props: { entry },
        };
      });
    })
  );
  return allEntries.flat();
}

// 4. TypeScript Definitions
type KnowledgeEntry = CollectionEntry<`knowledge-${keyof typeof languages}`> & {
  data: {
    category?: {
      spotifyPlaylist?: string;
      deezerPlaylist?: string;
      appleMusicPlaylist?: string;
    };
    isPlayable?: boolean;
    difficulty?: string;
  };
};

// 5. Main Component Logic
const { entry }: { entry: KnowledgeEntry } = Astro.props;
const { lang = "en" } = Astro.params;
const t = ui[lang as keyof typeof ui];

// 6. Content Processing
// Optimize content rendering by deferring until needed
const { Content, headings } = await entry.render();

// Format date with proper localization
const formattedDate = entry.data.createdAt
  ? new Intl.DateTimeFormat(lang, {
      year: "numeric",
      month: "long",
      day: "numeric",
    }).format(entry.data.createdAt)
  : null;

// Default image if none provided - use optimized path
const defaultImage = "/melody-mind.jpg";
const imageSource = typeof entry.data.image === "string" ? entry.data.image : defaultImage;

// Reading time text with proper localization and fallback
const readingTimeText = entry.body
  ? `${calculateReadingTime(entry.body)} ${t["knowledge.reading.time"] || "min reading time"}`
  : null;

// Generate SEO content from the article
const title = entry.data.title;
const description = entry.data.description;

// Enhanced SEO content using utility functions
const pageContent = `${title} ${description} ${entry.body || ""}`;

// Generate optimized meta description and keywords
const optimizedDescription = generateMetaDescription(description) || description;
const keywords =
  extractKeywords(pageContent) || entry.data.keywords?.join(", ") || t["meta.keywords"];

// Additional structured data parameters for SEO
const pageType = "article"; // Articles should be of type 'article' instead of 'website'
const publishDate = entry.data.createdAt || new Date("2024-01-01");
const modifiedDate = entry.data.updatedAt || new Date();

// Determine if this article has a playable game category
const isPlayable = entry.data.isPlayable === true;

// Prepare game category link
const gameCategorySlug = entry.slug.split("/").pop();
const gameCategoryUrl = isPlayable ? `/${String(lang)}/${gameCategorySlug}` : null;

// Get translation for play button
const playButtonText = t["knowledge.play.category"] || "Play this music category";

// Calculate word count
const wordCount = entry.body ? entry.body.split(/\s+/).filter(Boolean).length : 0;

// Reading time in ISO 8601 Duration Format (PT{X}M for X minutes)
const readingTimeMinutes = entry.body ? calculateReadingTime(entry.body) : 0;
const timeRequiredISO = `PT${readingTimeMinutes}M`;

// Useful helper function for future extensions
// Converts difficulty levels to educational levels for structured data

const getEducationalLevel = (difficulty?: string): string => {
  if (!difficulty) {
    return "beginner";
  }

  const difficultyMap: Record<string, string> = {
    easy: "beginner",
    medium: "intermediate",
    hard: "advanced",
  };

  return difficultyMap[difficulty.toLowerCase()] || "beginner";
};
// Determine educational level based on content difficulty
const educationalLevel = getEducationalLevel(entry.data.difficulty);

// Structured data for article - enhanced for better SEO
const articleSchemaData = {
  "@context": "https://schema.org",
  "@type": ["Article", "MusicGroup", "CreativeWork"],
  headline: entry.data.title,
  description: optimizedDescription,
  datePublished: entry.data.createdAt?.toISOString(),
  dateModified: entry.data.updatedAt?.toISOString() || entry.data.createdAt?.toISOString(),
  image: {
    "@type": "ImageObject",
    url: imageSource,
    width: 1200,
    height: 675,
    caption: `${entry.data.title} - Cover image`,
    contentUrl: imageSource,
    encodingFormat: "image/jpeg",
    representativeOfPage: true,
  },
  author: {
    "@type": "Organization",
    name: "Melody Mind",
  },
  publisher: {
    "@type": "Organization",
    name: "Melody Mind",
    logo: {
      "@type": "ImageObject",
      url: "/melody-mind.png",
      width: 512,
      height: 512,
      caption: "Melody Mind Logo",
      contentUrl: "/melody-mind.png",
      encodingFormat: "image/png",
    },
  },
  mainEntityOfPage: {
    "@type": "WebPage",
    "@id": Astro.url.href,
  },
  keywords: keywords,
  // New properties
  wordCount: wordCount,
  articleBody: entry.body || "",
  timeRequired: timeRequiredISO,
  // MusicGroup-specific properties
  genre: keywords.split(",")[0].trim(), // First keyword as genre
  musicReleaseFormat: "Digital",
  numTracks: 0, // Default value, as track information is not available
  musicBy: {
    "@type": "Organization",
    name: "Melody Mind",
  },
  // CreativeWork-specific properties
  teaches: keywords
    .split(",")
    .map((kw) => kw.trim())
    .join(", "),
  inLanguage: lang,
  isAccessibleForFree: true,
  audience: "Music enthusiasts and learners of all age groups",
  educationalLevel: educationalLevel,
  // Potential actions for playlist links
  potentialAction: [
    ...(entry.data.category?.spotifyPlaylist
      ? [
          {
            "@type": "ListenAction",
            target: {
              "@type": "EntryPoint",
              urlTemplate: entry.data.category.spotifyPlaylist,
              actionPlatform: "https://spotify.com",
            },
            name: `${entry.data.title} - Listen on Spotify`,
          },
        ]
      : []),
    ...(entry.data.category?.deezerPlaylist
      ? [
          {
            "@type": "ListenAction",
            target: {
              "@type": "EntryPoint",
              urlTemplate: entry.data.category.deezerPlaylist,
              actionPlatform: "https://deezer.com",
            },
            name: `${entry.data.title} - Listen on Deezer`,
          },
        ]
      : []),
    ...(entry.data.category?.appleMusicPlaylist
      ? [
          {
            "@type": "ListenAction",
            target: {
              "@type": "EntryPoint",
              urlTemplate: entry.data.category.appleMusicPlaylist,
              actionPlatform: "https://music.apple.com",
            },
            name: `${entry.data.title} - Listen on Apple Music`,
          },
        ]
      : []),
  ],
  // Structured AudioObject types for playlists
  audio: [
    ...(entry.data.category?.spotifyPlaylist
      ? [
          {
            "@type": "AudioObject",
            contentUrl: entry.data.category.spotifyPlaylist,
            encodingFormat: "audio/mpeg",
            name: `${entry.data.title} - Spotify Playlist`,
            description: `Spotify Playlist for ${entry.data.title}`,
            uploadDate: entry.data.createdAt?.toISOString() || new Date().toISOString(),
            duration: "PT0H0M0S", // Placeholder, as the exact duration is not known
            potentialAction: {
              "@type": "ListenAction",
              target: entry.data.category.spotifyPlaylist,
            },
          },
        ]
      : []),
    ...(entry.data.category?.deezerPlaylist
      ? [
          {
            "@type": "AudioObject",
            contentUrl: entry.data.category.deezerPlaylist,
            encodingFormat: "audio/mpeg",
            name: `${entry.data.title} - Deezer Playlist`,
            description: `Deezer Playlist for ${entry.data.title}`,
            uploadDate: entry.data.createdAt?.toISOString() || new Date().toISOString(),
            duration: "PT0H0M0S", // Placeholder, as the exact duration is not known
            potentialAction: {
              "@type": "ListenAction",
              target: entry.data.category.deezerPlaylist,
            },
          },
        ]
      : []),
    ...(entry.data.category?.appleMusicPlaylist
      ? [
          {
            "@type": "AudioObject",
            contentUrl: entry.data.category.appleMusicPlaylist,
            encodingFormat: "audio/mpeg",
            name: `${entry.data.title} - Apple Music Playlist`,
            description: `Apple Music Playlist for ${entry.data.title}`,
            uploadDate: entry.data.createdAt?.toISOString() || new Date().toISOString(),
            duration: "PT0H0M0S", // Placeholder, as the exact duration is not known
            potentialAction: {
              "@type": "ListenAction",
              target: entry.data.category.appleMusicPlaylist,
            },
          },
        ]
      : []),
  ],
  // GameItem if isPlayable is true
  ...(isPlayable && gameCategoryUrl
    ? {
        gameItem: {
          "@type": "Game",
          name: `${entry.data.title} - Music Game`,
          url: new URL(gameCategoryUrl, Astro.url.origin).href,
          gamePlatform: "Web Browser",
          applicationCategory: "Game",
          genre: "Music Game",
        },
      }
    : {}),
  // BreadcrumbList Schema for the breadcrumb navigation
  breadcrumb: {
    "@type": "BreadcrumbList",
    itemListElement: [
      {
        "@type": "ListItem",
        position: 1,
        name: t?.["nav.home"] || "Home",
        item: new URL(`/${lang}`, Astro.url.origin).href,
      },
      {
        "@type": "ListItem",
        position: 2,
        name: t?.["knowledge.title"] || "Knowledge",
        item: new URL(`/${String(lang)}/knowledge`, Astro.url.origin).href,
      },
      {
        "@type": "ListItem",
        position: 3,
        name: entry.data.title,
        item: Astro.url.href,
      },
    ],
  },
};
---

<Layout
  {title}
  description={optimizedDescription}
  {keywords}
  image={imageSource}
  type={pageType}
  {publishDate}
  {modifiedDate}
  ogMusic={{
    creator: "Melody Mind",
    album: entry.data.title,
    musician: "Melody Mind",
  }}
>
  <script type="application/ld+json" set:html={JSON.stringify(articleSchemaData)} />

  <main class="article-page">
    <article class="article" aria-labelledby="article-title">
      <nav
        class="breadcrumb print:hidden"
        aria-label={t["knowledge.breadcrumb.label"] || "Breadcrumb"}
      >
        <ol class="breadcrumb__list">
          <li class="breadcrumb__item">
            <a href={`/${lang}`} class="breadcrumb__link" aria-label={t?.["nav.home"] || "Home"}>
              <Icon name="home" class="breadcrumb__icon" aria-hidden="true" />
              <span class="sr-only">{t?.["nav.home"] || "Home"}</span>
            </a>
          </li>
          <li class="breadcrumb__item" aria-hidden="true">
            <Icon name="chevron-right" class="breadcrumb__separator" />
          </li>
          <li class="breadcrumb__item">
            <a href={`/${String(lang)}/knowledge`} class="breadcrumb__link">
              {t?.["knowledge.title"] || "Knowledge"}
            </a>
          </li>
          <li class="breadcrumb__item" aria-hidden="true">
            <Icon name="chevron-right" class="breadcrumb__separator" />
          </li>
          <li class="breadcrumb__current" aria-current="page">
            {entry.data.title}
          </li>
        </ol>
      </nav>

      <header class="article__header">
        <!-- Hero Image Container -->
        <div class="article__image-container">
          <Picture
            src={imageSource}
            width={1200}
            height={675}
            formats={["avif", "webp"]}
            class="article__image"
            loading="eager"
            fetchpriority="high"
            alt={`Cover image for article "${entry.data.title}" - Music knowledge on Melody Mind`}
            decoding="async"
            sizes="(min-width: 1280px) 1200px, (min-width: 768px) 100vw, 100vw"
            quality={90}
            widths={[640, 750, 1080, 1200]}
          />
        </div>

        <!-- Title and Meta Container -->
        <div class="article__meta-container">
          <Headline
            level="h1"
            title={entry.data.title}
            id="article-title"
            className="article__title"
          />

          <!-- Meta Information -->
          <div class="meta-info">
            {
              formattedDate && (
                <time datetime={entry.data.createdAt?.toISOString()} class="meta-info__item">
                  <Icon name="calendar" class="meta-info__icon" aria-hidden="true" />
                  <span class="meta-info__text">{formattedDate}</span>
                </time>
              )
            }

            {
              readingTimeText && (
                <span class="meta-info__item">
                  <Icon name="clock" class="meta-info__icon" aria-hidden="true" />
                  <span class="meta-info__text">{readingTimeText}</span>
                </span>
              )
            }
          </div>

          <!-- Music & Game Buttons -->
          <div class="action-buttons">
            {
              entry.data.category && (
                <MusicButtons category={entry.data.category} title={entry.data.title} />
              )
            }

            {
              isPlayable && gameCategoryUrl && (
                <ButtonLink
                  href={gameCategoryUrl}
                  className="play-button"
                  aria-label={`${playButtonText}: ${entry.data.title}`}
                >
                  <span class="play-button__content">
                    <Icon name="game-controller" class="play-button__icon" aria-hidden="true" />
                    <span class="play-button__text">{playButtonText}</span>
                  </span>
                </ButtonLink>
              )
            }
          </div>
        </div>
      </header>

      <!-- Table of Contents Dropdown -->
      <div class="toc-wrapper">
        <TableOfContents {headings} title="Table of Contents" {lang} />
      </div>

      <div id="article-content" class="content-wrapper">
        <div role="region" aria-label="Main content" class="article-content">
          <div>
            <Content />
          </div>
        </div>
      </div>

      <!-- Back navigation with improved accessibility -->
      <div class="back-navigation print:hidden">
        <ButtonLink
          href={`/${String(lang)}/knowledge`}
          className="back-link"
          aria-label={t?.["knowledge.back.to.list"] || "Back to knowledge list"}
        >
          <Icon name="arrow-left" class="back-link__icon" aria-hidden="true" />
          <span class="back-link__text"
            >{t["knowledge.back.to.list"] || "Back to knowledge list"}</span
          >
        </ButtonLink>
      </div>
    </article>
  </main>
</Layout>

<style>
  /* Main layout styles */
  .article-page {
    margin: 0 auto;
    max-width: 60rem;
    padding: var(--spacing-xl) var(--spacing-lg);
  }

  /* Article container */
  .article {
    width: 100%;
  }

  /* Breadcrumb navigation */
  .breadcrumb {
    margin-bottom: var(--spacing-xl);
  }

  .breadcrumb__list {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: var(--spacing-sm);
    list-style: none;
    padding: 0;
    margin: 0;
    font-size: var(--font-size-md);
  }

  .breadcrumb__item {
    display: flex;
    align-items: center;
  }

  .breadcrumb__link {
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
    padding: var(--spacing-xs) var(--spacing-sm);
    color: var(--color-gray-400);
    text-decoration: none;
    border-radius: var(--border-radius-md);
    transition: color 0.3s;
  }

  .breadcrumb__link:hover {
    color: var(--color-purple-500);
  }

  .breadcrumb__link:focus-visible {
    outline: none;
    box-shadow: 0 0 0 2px var(--color-purple-500);
  }

  .breadcrumb__icon {
    width: 1rem;
    height: 1rem;
  }

  .breadcrumb__separator {
    color: var(--color-gray-500);
    margin: 0 var(--spacing-xs);
  }

  .breadcrumb__current {
    max-width: 150px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    background-color: rgba(31, 41, 55, 0.3);
    padding: var(--spacing-xs) var(--spacing-sm);
    border-radius: var(--border-radius-md);
    color: var(--color-white);
  }

  /* Article header */
  .article__header {
    position: relative;
    margin-bottom: var(--spacing-2xl);
  }

  /* Cover image */
  .article__image-container {
    position: relative;
    margin-bottom: var(--spacing-xl);
    aspect-ratio: 16 / 9;
    overflow: hidden;
    border-radius: var(--border-radius-lg);
    box-shadow: var(--shadow-lg);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .article__image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  /* Article meta section */
  .article__meta-container {
    position: relative;
    display: flex;
    flex-direction: column;
    gap: var(--spacing-md);
  }

  /* Meta information */
  .meta-info {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: var(--spacing-lg);
  }

  .meta-info__item {
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
    background-color: rgba(31, 41, 55, 0.9);
    padding: var(--spacing-sm) var(--spacing-lg);
    border-radius: var(--border-radius-lg);
    color: var(--color-gray-300);
    min-height: 44px;
  }

  .meta-info__icon {
    width: 1.25rem;
    height: 1.25rem;
    color: var(--color-purple-400);
  }

  .meta-info__text {
    font-size: var(--font-size-md);
  }

  /* Action buttons */
  .action-buttons {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: var(--spacing-lg);
  }

  /* Table of contents */
  .toc-wrapper {
    position: relative;
    z-index: 10;
    margin-bottom: var(--spacing-xl);
  }

  /* Article content */
  .content-wrapper {
    position: relative;
    margin-top: var(--spacing-lg);
  }

  .article-content {
    color: var(--color-gray-200);
    line-height: var(--line-height-relaxed);
  }

  .article-content h2,
  .article-content h3,
  .article-content h4,
  .article-content h5,
  .article-content h6 {
    color: var(--color-white);
    font-weight: bold;
    scroll-margin-top: 5rem;
  }

  .article-content p {
    color: var(--color-gray-200);
    line-height: var(--line-height-relaxed);
  }

  .article-content a {
    color: var(--color-purple-400);
    text-decoration: underline;
    text-underline-offset: 2px;
  }

  .article-content a:hover {
    color: var(--color-purple-300);
  }

  .article-content a:focus-visible {
    outline: 2px solid var(--color-purple-400);
    outline-offset: 4px;
    border-radius: var(--border-radius-sm);
  }

  .article-content blockquote {
    border-left: 4px solid var(--color-purple-400);
    padding-left: var(--spacing-md);
    color: var(--color-gray-200);
  }

  .article-content ul,
  .article-content ol {
    list-style-position: outside;
  }

  .article-content li {
    color: var(--color-gray-200);
    margin-bottom: var(--spacing-sm);
  }

  .article-content li::marker {
    color: var(--color-purple-400);
  }

  /* Back navigation */
  .back-navigation {
    margin-top: var(--spacing-2xl);
    display: flex;
    justify-content: space-between;
    border-top: 1px solid var(--color-gray-700);
    padding-top: var(--spacing-xl);
  }

  .back-link {
    display: flex;
    align-items: center;
    min-height: 44px;
    min-width: 44px;
    padding: var(--spacing-sm) var(--spacing-lg);
    border-radius: var(--border-radius-md);
    color: var(--color-gray-300);
    text-decoration: none;
    transition: background-color 0.3s;
  }

  .back-link:hover {
    background-color: rgba(31, 41, 55, 0.8);
  }

  .back-link:focus-visible {
    outline: none;
    box-shadow:
      0 0 0 2px var(--color-purple-500),
      0 0 0 4px var(--color-gray-900);
  }

  .back-link__icon {
    margin-right: var(--spacing-sm);
    width: 1.25rem;
    height: 1.25rem;
    transition: transform 0.3s;
  }

  .back-link:hover .back-link__icon {
    transform: translateX(-2px);
  }

  .back-link__text {
    font-size: var(--font-size-md);
    font-weight: 500;
  }

  /* Play button styles */
  .play-button {
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
    min-width: 120px;
    height: 48px;
    padding: var(--spacing-sm) var(--spacing-lg);
    border-radius: var(--border-radius-lg);
    font-size: var(--font-size-sm);
    font-weight: 500;
    background-color: var(--color-purple-600);
    color: var(--color-white);
    border: none;
    transition: background-color 0.3s;
  }

  .play-button:hover {
    background-color: var(--color-purple-500);
  }

  .play-button:focus-visible {
    outline: none;
    box-shadow:
      0 0 0 2px var(--color-purple-400),
      0 0 0 4px var(--color-gray-900);
  }

  .play-button__icon {
    width: 1.25rem;
    height: 1.25rem;
  }

  /* Print styles */
  @media print {
    .breadcrumb,
    .back-navigation {
      display: none;
    }
  }

  /* Media queries */
  @media (min-width: 640px) {
    .article-page {
      padding: var(--spacing-xl) var(--spacing-md);
    }

    .breadcrumb__current {
      max-width: unset;
    }
  }

  @media (min-width: 768px) {
    .article__header {
      margin-bottom: var(--spacing-3xl);
    }

    .article-page {
      padding: var(--spacing-xl) var(--spacing-lg);
    }
  }

  /* Reduced motion */
  @media (prefers-reduced-motion: reduce) {
    *,
    *::before,
    *::after {
      animation-duration: 0.001s !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.001s !important;
      scroll-behavior: auto !important;
    }
  }
</style>
