---
/**
 * @component KnowledgeArticlePage
 * @description Dynamic route for displaying knowledge articles in different languages.
 * The page supports multilingual content, structured data for SEO, and optimized
 * image display for improved performance.
 *
 * Key features:
 * - Display of knowledge content with optimized image presentation
 * - Structured data for better search engine indexing
 * - Support for multiple languages through Content Collections
 * - Table of contents for long articles
 * - Integration with music streaming platforms (Spotify, Deezer, Apple Music)
 * - Playable categories with links to the corresponding game mode
 *
 * @accessibility WCAG 2.2 AAA compliant with optimized color contrasts,
 *                semantic HTML elements, and ARIA attributes
 * @performance Optimized images with avif/webp formats and responsive sizes
 * @seo Complete structured data according to Schema.org standards
 */

// 1. Imports (using consistent @-alias paths for better maintainability)
import { Picture } from "astro:assets";
import Layout from "@layouts/Layout.astro";
import ButtonLink from "@components/ButtonLink.astro";
import { useTranslations } from "@utils/i18n";
import Headline from "@components/Headline.astro";
import Paragraph from "@components/Paragraph.astro";
import Prose from "@components/Prose.astro";
import TableOfContents from "@components/TableOfContents.astro";
import BackToTop from "@components/Shared/BackToTop.astro";
import { Icon } from "astro-icon/components";
// import { getEntry } from "astro:content";
import { generateMetaDescription } from "@utils/seo";
import { getCollectionCached } from "@utils/content/getCollectionCached";
import { getReadingTime } from "@utils/readingTime";
import { SUPPORTED_LANGUAGES } from "@constants/languages";

// 2. Rendering Strategy: SSG for better performance and SEO
// This route can produce a very large number of static pages via getStaticPaths.
// Disable prerender to keep the build memory usage low and rely on runtime rendering.
// We now enable prerendering for ALL knowledge articles.
// WARNING: This will generate a very large number of static pages
// (currently > 3k total across languages). Monitor build times & memory.
export const prerender = true;

// 3. getStaticPaths implementation for dynamic routes
// getStaticPaths removed: this dynamic route can generate a large number of
// static pages. Rendering at runtime prevents building all articles during CI
// which reduces peak memory usage. If you need a small set of pre-rendered
// articles, implement a limited getStaticPaths that returns only high-priority slugs.
/**
 * Generate static paths for ALL knowledge articles across all supported languages.
 * This is intentionally exhaustive and can be heavy. If build performance degrades
 * you can revert to a filtered or partial strategy.
 */
export async function getStaticPaths() {
  const paths: Array<{
    params: { lang: string; slug: string };
    props: { entry: any; lang: string };
  }> = [];
  for (const lang of SUPPORTED_LANGUAGES) {
    const collectionName = `knowledge-${lang}`;
    let entries: any[] = [];
    try {
      entries = await getCollectionCached(collectionName).catch(() => []);
    } catch {
      entries = [];
    }
    if (!entries || entries.length === 0) {
      continue;
    }
    for (const entry of entries) {
      // Ensure slug present; skip malformed entries
      const slug = entry?.slug || entry?.id;
      if (!slug) {
        continue;
      }
      paths.push({ params: { lang, slug }, props: { entry, lang } });
    }
  }
  return paths;
}

// 4. TypeScript Definitions
// type KnowledgeEntry = CollectionEntry<KnowledgeCollectionKey> & {
//   data: {
//     title: string;
//     description: string;
//     keywords?: string[];
//     createdAt?: Date;
//     updatedAt?: Date;
//     image?: string;
//     category?: {
//       spotifyPlaylist?: string;
//       deezerPlaylist?: string;
//       appleMusicPlaylist?: string;
//     };
//     isPlayable?: boolean;
//     difficulty?: string;
//   };
// };

// 5. Main Component Logic (defensive loading when no entry prop is passed)
interface IncomingProps {
  entry?: any; // Content collection entry (if pre-fetched)
  lang?: string;
}

const incoming = Astro.props as IncomingProps;
const paramLang = (Astro as any).params?.lang;
const lang: string = typeof paramLang === "string" ? paramLang : incoming.lang || "en";
let entry: any = incoming.entry;

// Runtime acquisition if entry not provided
// If entry is not supplied via static path props (should be rare), perform fallback runtime lookup
if (!entry) {
  try {
    const collectionName = `knowledge-${lang}`;
    const articles: any[] = await getCollectionCached(collectionName).catch(() => []);
    const slugParam = (Astro as any).params?.slug;
    const slug = Array.isArray(slugParam) ? slugParam.join("/") : slugParam;
    if (slug) {
      entry = articles.find((a) => a.slug === slug || a.id === slug);
    }
  } catch (e) {
    globalThis.console?.warn?.("knowledge article: collection load issue (fallback)", {
      lang,
      error: (e as any)?.message || e,
    });
  }
}

// If still no entry, return 404 response early to avoid runtime errors
if (!entry) {
  return new Response("Not found", { status: 404 });
}

// Ensure readingTime present
if (!entry.data.readingTime && entry.body) {
  try {
    entry = {
      ...entry,
      data: {
        ...entry.data,
        readingTime: getReadingTime(entry.body || "", { languageCode: lang }).minutes,
      },
    };
  } catch {
    // ignore reading time calculation errors
  }
}

const t = useTranslations(lang);

// Extract headings and compiled content safely
const { headings, Content } = await entry.render();

// Get & validate image source (runtime validation instead of build-time schema refine)
const rawImage = entry.data.image;
const isValidImage = typeof rawImage === "string" && /\.(png|jpg|jpeg|webp|avif)$/i.test(rawImage);
const imageSource = isValidImage ? rawImage : "/default-cover.jpg";

// SEO optimization / meta description
const title = entry.data.title;
const description = entry.data.description;
const pageContent = `${title} ${description} ${entry.data.keywords?.join(" ") || ""}`;
const optimizedDescription = generateMetaDescription(pageContent, 158);
// const _keywords = extractKeywords(pageContent, 12, lang);

// Enhanced structured data for knowledge article
const articleSchema = {
  "@context": "https://schema.org",
  "@type": "Article",
  headline: title,
  description: description,
  image: imageSource,
  author: {
    "@type": "Organization",
    name: "Melody Mind",
  },
  publisher: {
    "@type": "Organization",
    name: "Melody Mind",
    logo: {
      "@type": "ImageObject",
      url: "https://melody-mind.de/melody-mind.png",
    },
  },
  datePublished: entry.data.createdAt?.toISOString(),
  dateModified: entry.data.updatedAt?.toISOString(),
  mainEntityOfPage: {
    "@type": "WebPage",
    "@id": Astro.url.href,
  },
  inLanguage: lang,
  keywords: entry.data.keywords?.join(", ") || "",
  articleSection: t("knowledge.title") || "Music Knowledge",
  wordCount: entry.body?.length || 0,
};

// Compute word count and reading time using utilities (words, not characters)
const wordsCount = entry.body ? entry.body.trim().split(/\s+/).length : 0;
const readingResult = getReadingTime(entry.body || "", { languageCode: lang });

function translate(key: string, fallback: string): string {
  try {
    return t(key);
  } catch {
    return fallback;
  }
}
---

<Layout
  {title}
  description={optimizedDescription}
  image={imageSource}
  type="article"
  publishDate={entry.data.createdAt ? new Date(entry.data.createdAt) : new Date()}
  modifiedDate={entry.data.updatedAt ? new Date(entry.data.updatedAt) : new Date()}
  ogMusic={{
    creator: "Melody Mind",
    album: title,
    musician: "Various Artists",
  }}
>
  <Fragment slot="head">
    <script is:inline type="application/ld+json" set:html={JSON.stringify(articleSchema)} />

    <!-- Breadcrumbs for Knowledge Article -->
    {
      (() => {
        const base = Astro.site?.toString().replace(/\/$/, "") || "";
        const current = new URL(Astro.url.pathname, Astro.site).toString();
        const list = {
          "@context": "https://schema.org",
          "@type": "BreadcrumbList",
          itemListElement: [
            {
              "@type": "ListItem",
              position: 1,
              name: t("nav.home") || "Home",
              item: `${base}/${lang}`,
            },
            {
              "@type": "ListItem",
              position: 2,
              name: t("knowledge.title") || "Knowledge",
              item: `${base}/${lang}/knowledge`,
            },
            {
              "@type": "ListItem",
              position: 3,
              name: title,
              item: current,
            },
          ],
        };
        return <script is:inline type="application/ld+json" set:html={JSON.stringify(list)} />;
      })()
    }
  </Fragment>

  <main class="min-h-screen">
    <div class="mx-auto">
      <!-- Header Section with Image and Title -->
      <header class="mb-16">
        <div
          class="flex flex-col lg:grid lg:grid-cols-[1.2fr_0.8fr] lg:items-center lg:gap-12 xl:gap-16"
        >
          <!-- Image Section - Larger and better responsive -->
          <div class="order-2 mx-auto mb-8 w-full lg:order-1 lg:mb-0 lg:max-w-none">
            {
              imageSource ? (
                <div class="relative aspect-[4/3] w-full overflow-hidden rounded-2xl border border-gray-600 shadow-2xl lg:aspect-[5/3]">
                  <Picture
                    class="h-full w-full object-cover transition-transform duration-300 hover:scale-105"
                    src={imageSource}
                    widths={[600, 800, 1000, 1200]}
                    sizes="(max-width: 640px) 100vw, (max-width: 1024px) 600px, (max-width: 1280px) 800px, 1000px"
                    formats={["avif", "webp", "jpg"]}
                    alt={entry.data.title}
                    loading="eager"
                    fetchpriority="high"
                    width={1200}
                    height={800}
                    decoding="async"
                  />
                </div>
              ) : (
                <div
                  class="flex aspect-[4/3] w-full items-center justify-center rounded-2xl border-2 border-dashed border-gray-600 bg-gray-800 p-8 text-center text-gray-400 lg:aspect-[5/3]"
                  role="img"
                  aria-label={t("category.no_image_available")}
                >
                  <div class="flex flex-col items-center gap-3">
                    <Icon name="image" class="h-16 w-16 lg:h-20 lg:w-20" aria-hidden="true" />
                    <span class="text-lg">{t("category.no_image_available")}</span>
                  </div>
                </div>
              )
            }
          </div>

          <!-- Title Section - Better responsive positioning -->
          <div
            class="order-1 flex flex-col items-center gap-6 text-center lg:order-2 lg:items-start lg:text-left"
          >
            <Headline level="h1" textSize="xl" textAlign="center">
              {entry.data.title}
            </Headline>

            <Paragraph textSize="lg" textAlign="center">
              {entry.data.description}
            </Paragraph>
          </div>
        </div>
      </header>

      <!-- Meta Information and Action Buttons Section -->
      <section class="mb-12">
        <div class="mx-auto max-w-5xl">
          {/* Description */}
          <div class="mb-8 px-4"></div>

          {/* Meta Information - Better responsive grid */}
          <div class="mb-8 grid grid-cols-1 gap-3 px-4 sm:grid-cols-2 sm:gap-4 lg:grid-cols-4">
            <div
              class="flex items-center justify-center gap-2 rounded-xl border border-gray-700/50 bg-gray-800/50 px-3 py-3 backdrop-blur-sm sm:justify-start sm:px-4"
            >
              <Icon
                name="calendar"
                class="h-4 w-4 text-blue-400 sm:h-5 sm:w-5"
                aria-hidden="true"
              />
              <span class="text-xs text-gray-300 sm:text-sm">
                {
                  new Date(entry.data.createdAt || new Date()).toLocaleDateString(lang, {
                    year: "numeric",
                    month: "long",
                    day: "numeric",
                  })
                }
              </span>
            </div>

            <div
              class="flex items-center justify-center gap-2 rounded-xl border border-gray-700/50 bg-gray-800/50 px-3 py-3 backdrop-blur-sm sm:justify-start sm:px-4"
            >
              <Icon name="clock" class="h-4 w-4 text-green-400 sm:h-5 sm:w-5" aria-hidden="true" />
              <span class="text-xs text-gray-300 sm:text-sm">
                {readingResult.minutes}
                {t("knowledge.reading.time")}
              </span>
            </div>

            <div
              class="flex items-center justify-center gap-2 rounded-xl border border-gray-700/50 bg-gray-800/50 px-3 py-3 backdrop-blur-sm sm:justify-start sm:px-4"
            >
              <Icon
                name="file-text"
                class="h-4 w-4 text-purple-400 sm:h-5 sm:w-5"
                aria-hidden="true"
              />
              <span class="text-xs text-gray-300 sm:text-sm">
                {t("knowledge.word_count", { count: wordsCount })}
              </span>
            </div>
          </div>

          {/* Action Buttons - Better responsive layout */}
          <div class="flex flex-col justify-center gap-3 px-4 sm:flex-row">
            <ButtonLink
              href={entry.data.category?.spotifyPlaylist || "#"}
              variant="secondary"
              icon="spotify"
              className="w-full justify-center sm:w-auto"
              aria-label={t("musicPlatforms.listenOn", {
                title: entry.data.title,
                platform: t("musicPlatforms.platform.spotify"),
              })}
            >
              {t("musicPlatforms.platform.spotify")}
            </ButtonLink>
            <ButtonLink
              href={entry.data.category?.deezerPlaylist || "#"}
              variant="secondary"
              icon="deezer"
              className="w-full justify-center sm:w-auto"
              aria-label={t("musicPlatforms.listenOn", {
                title: entry.data.title,
                platform: t("musicPlatforms.platform.deezer"),
              })}
            >
              {t("musicPlatforms.platform.deezer")}
            </ButtonLink>
            <ButtonLink
              href={entry.data.category?.appleMusicPlaylist || "#"}
              variant="secondary"
              icon="apple-music"
              className="w-full justify-center sm:w-auto"
              aria-label={t("musicPlatforms.listenOn", {
                title: entry.data.title,
                platform: t("musicPlatforms.platform.apple"),
              })}
            >
              {t("musicPlatforms.platform.apple")}
            </ButtonLink>
          </div>
        </div>
      </section>

      {/* Table of Contents */}
      <TableOfContents {headings} />

      {/* Article Content - Full Width */}
      <div id="article-content" class="mb-12">
        <div
          role="region"
          aria-labelledby="article-title"
          aria-label={translate("accessibility.main_content", "Main content")}
        >
          <Prose>
            <Content />
          </Prose>
        </div>
      </div>

      <!-- Back Navigation -->
      <div class="mt-12 border-t border-gray-700/50 pt-8">
        <div class="flex justify-center">
          <ButtonLink
            href={`/${String(lang)}/knowledge`}
            icon="arrow-left"
            aria-label={translate("knowledge.back.to.list", "Back to knowledge list")}
            className="rounded-xl border border-gray-600 bg-gray-800 px-6 py-3 text-gray-300 transition-all duration-300 hover:-translate-y-1 hover:border-gray-500 hover:bg-gray-700 hover:text-white hover:shadow-lg"
          >
            <span class="flex items-center gap-2">
              <Icon name="arrow-left" class="h-5 w-5" aria-hidden="true" />
              <span>{translate("knowledge.back.to.list", "Back to knowledge list")}</span>
            </span>
          </ButtonLink>
        </div>
      </div>
    </div>
  </main>

  <!-- BackToTop component for improved navigation on long articles -->
  <BackToTop lang={String(lang)} />
</Layout>
