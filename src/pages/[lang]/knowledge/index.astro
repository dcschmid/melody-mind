---
/**
 * Knowledge Index Page - SEO Optimized Version
 *
 * A clean, simple knowledge articles listing with enhanced SEO features.
 * Uses Tailwind CSS 4 for styling and minimal JavaScript for functionality.
 */
// Content collections will be loaded at runtime when needed; avoid build-time collection loads
import Layout from "@layouts/Layout.astro";
import { buildPageSeo } from "@utils/seo/buildPageSeo";
import SearchPanel from "@components/Search/SearchPanel.astro";
// Legacy SEO helpers removed: buildPageSeo now handles description & keywords.
import { buildKnowledgeArticlesItemList } from "@utils/seo/seoSchema";
import { SUPPORTED_LANGUAGES } from "@constants/languages";
import { ui } from "../../../i18n/ui";
import { useTranslations } from "@utils/i18n";
import Headline from "@components/Headline.astro";
import Paragraph from "@components/Paragraph.astro";
import HeroSection from "@components/HeroSection.astro";
import { Icon } from "astro-icon/components";
import { calculateReadingTime } from "@utils/readingTime";
import BackToTop from "@components/Shared/BackToTop.astro";
import KnowledgeCard from "@components/KnowledgeCard.astro";
import { sortKnowledgeEntries } from "@utils/content/sortKnowledgeEntries";
import { getCollectionCached } from "@utils/content/getCollectionCached";
import { normalizeDate, derivePublishModified } from "@utils/content/dateUtils";

// SSG aktiviert: Wir prerendern die Knowledge Index Seite fÃ¼r jede unterstÃ¼tzte Sprache.
// Die eigentlichen Artikel werden weiterhin innerhalb der Page geladen, um getStaticPaths
// leichtgewichtig zu halten (kein massives Serialisieren groÃŸer Arrays in Props).
export const prerender = true;

/**
 * Generate static paths for knowledge index pages across all supported languages.
 * We only pass the language as prop; articles werden wie bisher in der Page geladen.
 */
export function getStaticPaths() {
  return SUPPORTED_LANGUAGES.map((lang) => ({
    params: { lang },
    props: { lang },
  }));
}

// Resolve language robustly: prefer dynamic route param, then prop, then fallback 'en'
const incomingProps = Astro.props as { articles?: any[]; lang?: string };
const paramLang = (Astro as any).params?.lang; // Astro.params is available in page routes
const lang: string =
  typeof paramLang === "string"
    ? paramLang
    : typeof incomingProps.lang === "string"
      ? incomingProps.lang
      : "en";

// Expectation: parent route may optionally pass articles. If absent we lazy load.
const incomingArticles = incomingProps.articles;
const t = useTranslations(String(lang));
const uiLang = lang in ui ? (lang as keyof typeof ui) : "en";

// Defensive acquisition: if articles not provided, attempt lazy import of the matching collection.
let baseArticles: any[] = Array.isArray(incomingArticles) ? incomingArticles : [];
if (baseArticles.length === 0) {
  try {
    // Use dynamic import to avoid build-time heavy loads if not necessary.
    const collectionName = `knowledge-${lang}`;
    if (lang) {
      baseArticles = await getCollectionCached(collectionName).catch(() => []);
    }

    // Fallback auf Englisch wenn leer und nicht bereits en
    const needsFallback =
      (!Array.isArray(baseArticles) || baseArticles.length === 0) && lang !== "en";
    if (needsFallback) {
      const fallback = await getCollectionCached("knowledge-en").catch(() => []);
      if (Array.isArray(fallback) && fallback.length > 0) {
        baseArticles = fallback;
      }
    }
  } catch (e) {
    // Non-fatal: leave baseArticles empty.
    globalThis.console?.warn?.("knowledge index: collection load issue", {
      lang,
      error: (e as any)?.message || e,
    });
  }
}

// Process articles: normalize dates & reading time if missing
const articlesWithReadingTime = baseArticles.map((article: any) => {
  const createdAtRaw = article?.data?.createdAt;
  const updatedAtRaw = article?.data?.updatedAt;
  const createdAt = normalizeDate(createdAtRaw);
  const updatedAt = normalizeDate(updatedAtRaw);
  const readingTime = article.data.readingTime || calculateReadingTime(article.body || "");
  return {
    ...article,
    data: {
      ...article.data,
      createdAt,
      updatedAt,
      readingTime,
    },
  };
});

// Deterministic ordering (slug fallback id) via shared utility
const sortedArticles = sortKnowledgeEntries(articlesWithReadingTime);

// SEO content - Enhanced
const safeUi = ui[uiLang] as Record<string, string>;
const title = safeUi["knowledge.title"];
const description = safeUi["knowledge.title"]; // final shaping handled by buildPageSeo

// Enhanced SEO data for structured data
const baseUrl = Astro.site?.toString().replace(/\/$/, "") || "https://melodymind.app";
const currentUrl = `${baseUrl}/${lang}/knowledge`;

// Derive overall publish / modified timestamps for collection (used in Layout timestamps)
// For collection-level dates choose earliest publish and latest modified among articles
let earliestCreated: Date | null = null;
let latestUpdated: Date | null = null;
for (const a of articlesWithReadingTime) {
  const c = normalizeDate(a.data.createdAt);
  if (c && (!earliestCreated || c.getTime() < earliestCreated.getTime())) {
    earliestCreated = c;
  }
  const u = normalizeDate(a.data.updatedAt);
  if (u && (!latestUpdated || u.getTime() > latestUpdated.getTime())) {
    latestUpdated = u;
  }
}
const collectionDates = derivePublishModified(earliestCreated, latestUpdated);

// Generate structured data for breadcrumbs
const breadcrumbs = [
  { name: safeUi["nav.home"] || "Home", url: `${baseUrl}/${lang}/` },
  { name: safeUi["knowledge.title"] || "Knowledge", url: currentUrl },
];

// Structured data for knowledge articles collection via central builder
const articleCollectionSchema = buildKnowledgeArticlesItemList({
  articles: sortedArticles.map((a: any) => ({
    slug: "slug" in a ? a.slug : a.id,
    data: {
      title: a.data.title,
      description: a.data.description,
      createdAt: a.data.createdAt,
      updatedAt: a.data.updatedAt,
      keywords: a.data.keywords,
      image: a.data.image,
    },
  })),
  baseUrl,
  lang,
  limit: 10,
  name: safeUi["knowledge.title"] || "Knowledge Articles",
  description: safeUi["knowledge.title"] || "Music knowledge articles",
});

// Generate meta keywords from articles
const keywordPool = sortedArticles.flatMap((article) => article.data.keywords || []);
// Keywords now extracted internally; still pass small curated fallback list to bias weight
const metaKeywords = keywordPool.slice(0, 10).join(", ");

// Basic translations for JavaScript
const clientTranslations = {
  search: {
    showingAll: safeUi["knowledge.search.showing.all"] || "Showing all articles",
    articlesFound: safeUi["knowledge.search.articlesFound"] || "articles found",
    placeholder: safeUi["knowledge.search.placeholder"] || "Search articles...",
    resetText: safeUi["knowledge.search.reset.text"] || "Reset",
    noResultsFor: safeUi["knowledge.search.no_results_for"] || 'No results for "{term}"',
  },
};
const pageSeo = buildPageSeo({
  title,
  description,
  url: currentUrl,
  contentKind: "generic",
  breadcrumbs,
  structuredData: [articleCollectionSchema],
  enrichedParts: [title, description, keywordPool.slice(0, 25).join(" ")],
  fallbackKeywords: metaKeywords
    .split(",")
    .map((k) => k.trim())
    .filter(Boolean),
  keywordLimit: 28,
  maxDescription: 150,
  image: "/homecategories/knowledge.png",
  publishDate: collectionDates.publishDate || undefined,
  modifiedDate: collectionDates.modifiedDate || undefined,
  index: true,
  follow: true,
  autoSocialImage: false,
});
---

<Layout {pageSeo} {breadcrumbs}>
  <!-- Make translations available for JavaScript -->
  <script is:inline define:vars={{ clientTranslations }}>
    window.knowledgeTranslations = clientTranslations;
  </script>

  <main class="min-h-screen bg-gray-900 py-8 text-white">
    <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
      <!-- Breadcrumbs -->
      <nav aria-label={t("navigation.breadcrumb")} class="mb-6">
        <ol class="flex flex-wrap items-center gap-3">
          <li class="flex items-center gap-3">
            <a
              href={`/${String(lang)}/`}
              class="flex items-center gap-2 rounded-lg p-2 text-gray-400 transition-colors duration-200 hover:bg-gray-800 hover:text-purple-400"
            >
              <Icon name="home" class="h-5 w-5" aria-hidden="true" />
              <span class="sr-only">{t("nav.home")}</span>
            </a>
            <span class="text-gray-600" aria-hidden="true">/</span>
          </li>
          <li class="font-medium text-white" aria-current="page">
            {safeUi["knowledge.title"] || "Knowledge"}
          </li>
        </ol>
      </nav>

      <HeroSection
        title={safeUi["knowledge.title"]}
        subtitle={safeUi["knowledge.description"]}
        headingLevel="h1"
        id="knowledge-heading"
        icon="ðŸ“š"
        spacing="md"
      />

      <!-- Enhanced Search section (refactored) -->
      <section class="mb-16" role="search">
        <div class="mx-auto w-full max-w-7xl">
          <div class="mb-10 text-center">
            <Headline level="h2" textSize="2xl" textAlign="center">
              {safeUi["knowledge.search.title"] || "Search Articles"}
            </Headline>
            <Paragraph textSize="lg" textAlign="center">
              {safeUi["knowledge.search.subtitle"] || t("knowledge.search.subtitle")}
            </Paragraph>
          </div>
          <SearchPanel
            idBase="knowledge-search"
            label={t("knowledge.search.label")}
            placeholder={(ui[uiLang] as any)["knowledge.search.placeholder"] ||
              "Search articles..."}
            ariaControls="articlesGrid"
            autoStatus={true}
            autoNoResults={true}
            statusAllText={safeUi["knowledge.search.initial"] || "Showing all articles"}
            statusCountTemplate={safeUi["knowledge.search.articlesFound"]
              ? `{count} ${safeUi["knowledge.search.articlesFound"]}`
              : "{count} articles found"}
            noResultsTemplate={(safeUi["knowledge.search.no_results_for"] ||
              'No results for "{term}"') as string}
          />
        </div>
      </section>

      <!-- Articles grid with enhanced SEO - Oriented on gamehome layout -->
      <section class="mb-16">
        <Headline level="h2" textSize="base" className="sr-only"
          >{t("auto._lang_.knowledge.index.knowledge_articles")}</Headline
        >
        <ul id="articlesGrid" class="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
          {
            sortedArticles.length > 0 ? (
              sortedArticles.map((article, index: number) => {
                const createdAt =
                  article.data.createdAt instanceof Date
                    ? article.data.createdAt
                    : normalizeDate(article.data.createdAt) || new Date();

                const articleSlug = "slug" in article ? article.slug : article.id;

                return (
                  <li
                    class="overflow-hidden rounded-2xl border border-gray-700 bg-gray-800 shadow-lg transition-all duration-300 hover:-translate-y-1 hover:shadow-xl"
                    itemscope
                    itemtype="https://schema.org/Article"
                  >
                    <KnowledgeCard
                      title={article.data.title}
                      description={article.data.description}
                      image={article.data.image as string}
                      createdAt={createdAt}
                      slug={articleSlug}
                      lang={lang}
                      readingTime={article.data.readingTime}
                      articleUrl={`/${String(lang)}/knowledge/${articleSlug}`}
                      keywords={article.data.keywords?.join(", ")}
                      index={index}
                    />
                    {/* Micro-data for enhanced SEO */}
                    <meta itemprop="name" content={article.data.title} />
                    <meta itemprop="description" content={article.data.description} />
                    <meta itemprop="url" content={`${baseUrl}/${lang}/knowledge/${articleSlug}`} />
                    <meta itemprop="datePublished" content={createdAt.toISOString()} />
                    {article.data.keywords && (
                      <meta itemprop="keywords" content={article.data.keywords.join(", ")} />
                    )}
                  </li>
                );
              })
            ) : (
              <li class="col-span-full py-12 text-center">
                <div class="mx-auto max-w-md">
                  <Icon
                    name="info"
                    class="mx-auto mb-6 h-16 w-16 text-gray-600"
                    aria-hidden="true"
                  />
                  <Paragraph textSize="lg" textAlign="center">
                    {safeUi["knowledge.empty"] || "No articles available"}
                  </Paragraph>
                </div>
              </li>
            )
          }
        </ul>
      </section>
    </div>

    <!-- Back to top button -->
    <BackToTop {lang} />
  </main>

  <script>
    import { initSearchPanel } from "@components/Search/initSearchPanel";
    ((): void => {
      const wire = (): void => {
        initSearchPanel({ idBase: "knowledge-search", itemSelector: "#articlesGrid li" });
      };
      const schedule = (fn: () => void): void => {
        const idle: (cb: () => void) => void = (window.requestIdleCallback ||
          ((cb: () => void): void => {
            setTimeout(cb, 1);
          })) as (cb: () => void) => void;
        idle(fn);
      };
      if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", () => schedule(wire));
      } else {
        schedule(wire);
      }
    })();
  </script>
</Layout>
