---
/**
 * Knowledge Index Page - SEO Optimized Version
 *
 * A clean, simple knowledge articles listing with enhanced SEO features.
 * Uses Tailwind CSS 4 for styling and minimal JavaScript for functionality.
 */
import { getCollection } from "astro:content";
import Layout from "@layouts/Layout.astro";
import { ui } from "../../../i18n/ui";
import Headline from "@components/Headline.astro";
import Paragraph from "@components/Paragraph.astro";
import { Icon } from "astro-icon/components";
import { calculateReadingTime } from "@utils/readingTime";
import BackToTop from "@components/Shared/BackToTop.astro";
import KnowledgeCard from "@components/KnowledgeCard.astro";

export const prerender = true;

export async function getStaticPaths() {
  const supportedLanguages = [
    "de",
    "en",
    "es",
    "fr",
    "it",
    "pt",
    "da",
    "nl",
    "sv",
    "fi",
    "cn",
    "ru",
    "jp",
    "uk",
  ] as const;

  const paths = await Promise.all(
    supportedLanguages.map(async (lang) => {
      const collectionName = `knowledge-${lang}` as const;
      const articles = await getCollection(collectionName);

      return {
        params: { lang },
        props: { articles, lang },
      };
    })
  );

  return paths.flat();
}

const { articles, lang } = Astro.props;
const uiLang = lang in ui ? (lang as keyof typeof ui) : "en";

// Process articles with reading time
const articlesWithReadingTime = articles.map((article: any) => {
  if (!article.data.readingTime) {
    const readingTime = calculateReadingTime(article.body || "");
    return {
      ...article,
      data: {
        ...article.data,
        readingTime,
      },
    };
  }
  return article;
});

// Sort articles by slug (fallback to id if slug is not available)
const sortedArticles = [...articlesWithReadingTime].sort((a, b) => {
  const aSlug = "slug" in a ? a.slug : a.id;
  const bSlug = "slug" in b ? b.slug : b.id;
  return aSlug.localeCompare(bSlug);
});

// SEO content - Enhanced
const title = ui[uiLang]["knowledge.title"];
const description = ui[uiLang]["knowledge.title"]; // Using knowledge.title as fallback since knowledge.intro doesn't exist

// Enhanced SEO data for structured data
const baseUrl = Astro.site || "https://melodymind.app";
const currentUrl = `${baseUrl}/${lang}/knowledge`;

// Generate structured data for breadcrumbs
const _breadcrumbSchema = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  itemListElement: [
    {
      "@type": "ListItem",
      position: 1,
      name: ui[uiLang]["nav.home"] || "Home",
      item: `${baseUrl}/${lang}/`,
    },
    {
      "@type": "ListItem",
      position: 2,
      name: ui[uiLang]["knowledge.title"] || "Knowledge",
      item: currentUrl,
    },
  ],
};

// Generate structured data for knowledge articles collection
const articleCollectionSchema = {
  "@context": "https://schema.org",
  "@type": "ItemList",
  name: ui[uiLang]["knowledge.title"] || "Knowledge Articles",
  description: ui[uiLang]["knowledge.title"] || "Music knowledge articles",
  numberOfItems: sortedArticles.length,
  itemListElement: sortedArticles.slice(0, 10).map((article, index: number) => ({
    "@type": "Article",
    position: index + 1,
    name: article.data.title,
    description: article.data.description,
    url: `${baseUrl}/${lang}/knowledge/${"slug" in article ? article.slug : article.id}`,
    datePublished: article.data.createdAt,
    keywords: article.data.keywords?.join(", ") || "",
    author: {
      "@type": "Organization",
      name: "MelodyMind",
    },
  })),
};

// Generate meta keywords from articles
const metaKeywords = Array.from(
  new Set(sortedArticles.flatMap((article) => article.data.keywords || []))
)
  .slice(0, 10)
  .join(", ");

// Basic translations for JavaScript
const clientTranslations = {
  search: {
    showingAll: ui[uiLang]["knowledge.search.showing.all"] || "Showing all articles",
    articlesFound: "articles found",
  },
};
---

<Layout
  {title}
  {description}
  image={`/og-images/social-share-knowledge-${lang}.jpg`}
  type="website"
  keywords={metaKeywords}
  publishDate={new Date()}
  modifiedDate={new Date()}
>
  <!-- Structured Data for SEO - Additional schemas beyond what SEO component provides -->
  <Fragment slot="head">
    <script type="application/ld+json" set:html={JSON.stringify(_breadcrumbSchema)} />
    <script type="application/ld+json" set:html={JSON.stringify(articleCollectionSchema)} />
  </Fragment>

  <!-- Make translations available for JavaScript -->
  <script is:inline define:vars={{ clientTranslations }}>
    window.knowledgeTranslations = clientTranslations;
  </script>

  <main class="min-h-screen bg-gray-900 py-8 text-white">
    <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
      <!-- Breadcrumbs -->
      <nav aria-label="Breadcrumb" class="mb-6">
        <ol class="flex flex-wrap items-center gap-3">
          <li class="flex items-center gap-3">
            <a
              href={`/${String(lang)}/`}
              class="flex items-center gap-2 rounded-lg p-2 text-gray-400 transition-colors duration-200 hover:bg-gray-800 hover:text-purple-400"
            >
              <Icon name="home" class="h-5 w-5" aria-hidden="true" />
              <span class="sr-only">{ui[uiLang]["nav.home"] || "Home"}</span>
            </a>
            <span class="text-gray-600" aria-hidden="true">/</span>
          </li>
          <li class="font-medium text-white" aria-current="page">
            {ui[uiLang]["knowledge.title"] || "Knowledge"}
          </li>
        </ol>
      </nav>

      <!-- Hero section with improved design inspired by gamehome -->
      <header
        class="relative mb-16 overflow-hidden rounded-3xl border border-purple-500/30 bg-gradient-to-br from-purple-900 via-blue-800 to-gray-900 p-8 shadow-2xl sm:p-12 lg:p-16"
      >
        <!-- Decorative background elements -->
        <div class="pointer-events-none absolute inset-0 opacity-10" aria-hidden="true">
          <div class="absolute -top-8 -right-8 h-32 w-32 rounded-full bg-white"></div>
          <div class="absolute -bottom-8 -left-8 h-24 w-24 rounded-full bg-white"></div>
          <div class="absolute top-1/2 right-4 h-16 w-16 rounded-full bg-white"></div>
        </div>

        <div class="relative z-10 w-full text-center text-white">
          <Headline level="h1" textSize="3xl" textAlign="center">
            {ui[uiLang]["knowledge.title"]}
          </Headline>
          <div class="mx-auto my-8 h-1 w-12 rounded-full bg-blue-400"></div>
          <Paragraph textSize="lg" textAlign="center">
            {ui[uiLang]["knowledge.description"]}
          </Paragraph>
        </div>
      </header>

      <!-- Enhanced Search section -->
      <section class="mb-16" role="search">
        <div class="mx-auto w-full max-w-7xl">
          <!-- Search Heading -->
          <div class="mb-10 text-center">
            <Headline level="h2" textSize="2xl" textAlign="center">
              {ui[uiLang]["knowledge.search.title"] || "Search Articles"}
            </Headline>
            <Paragraph textSize="lg" textAlign="center">
              {
                ui[uiLang]["knowledge.search.subtitle"] ||
                  "Find articles by title, description, or keywords"
              }
            </Paragraph>
          </div>

          <div class="relative mx-auto w-full max-w-5xl">
            <label for="searchInput" class="sr-only"> Search by title or description </label>

            <!-- Search Input with Glassmorphism - Full Width -->
            <div class="relative">
              <div
                class="pointer-events-none absolute inset-y-0 left-0 z-10 flex items-center pl-6"
              >
                <svg
                  class="h-7 w-7 text-purple-400"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
              </div>

              <input
                type="search"
                id="searchInput"
                placeholder={(ui[uiLang] as any)["knowledge.search.placeholder"] ||
                  "Search articles..."}
                class="block w-full rounded-3xl border-2 border-purple-500/40 bg-gray-800/90 py-5 pr-20 pl-16 text-xl font-medium text-white placeholder-gray-400 shadow-2xl backdrop-blur-md transition-all duration-300 hover:shadow-purple-500/20 focus:border-purple-400 focus:ring-4 focus:ring-purple-500/60 focus:outline-none"
                aria-controls="articlesGrid"
                autocomplete="off"
              />

              <!-- Clear Button -->
              <button
                id="clear-search"
                class="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-6 text-gray-400 opacity-0 transition-colors duration-200 hover:text-purple-400"
                type="button"
                aria-label="Clear search"
              >
                <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
          </div>

          <!-- Reset Button -->
          <div class="mt-6 text-center">
            <button
              id="reset-search"
              class="inline-flex items-center gap-3 rounded-xl bg-purple-600 px-6 py-3 font-semibold text-white shadow-lg transition-colors duration-200 hover:bg-purple-700 hover:shadow-purple-500/20"
              type="button"
              aria-controls="articlesGrid"
            >
              <Icon name="refresh" class="h-5 w-5" aria-hidden="true" />
              <span>{ui[uiLang]["knowledge.search.reset.text"] || "Reset"}</span>
            </button>
          </div>
        </div>

        <!-- Search status -->
        <div id="search-status" class="sr-only" aria-live="polite" role="status">
          {ui[uiLang]["knowledge.search.initial"] || "Showing all articles"}
        </div>
      </section>

      <!-- No results message -->
      <div
        id="no-results"
        class="mb-8 py-12 text-center"
        style="display: none;"
        role="status"
        aria-live="assertive"
      >
        <div class="mx-auto max-w-md">
          <Icon
            name="search-no-results"
            class="mx-auto mb-6 h-16 w-16 text-gray-600"
            aria-hidden="true"
          />
          <Headline level="h2" textSize="2xl" textAlign="center">
            {ui[uiLang]["knowledge.no.results"] || "No articles found"}
          </Headline>
          <Paragraph textSize="lg" textAlign="center">
            {
              ui[uiLang]["knowledge.no.results.help"] ||
                "Try different search terms or reset your search"
            }
          </Paragraph>
        </div>
      </div>

      <!-- Articles grid with enhanced SEO - Oriented on gamehome layout -->
      <section class="mb-16">
        <Headline level="h2" textSize="base" className="sr-only"> Knowledge Articles </Headline>
        <ul id="articlesGrid" class="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
          {
            sortedArticles.length > 0 ? (
              sortedArticles.map((article, index: number) => {
                const createdAt =
                  article.data.createdAt instanceof Date
                    ? article.data.createdAt
                    : new Date(article.data.createdAt || Date.now());

                const articleSlug = "slug" in article ? article.slug : article.id;

                return (
                  <li
                    class="overflow-hidden rounded-2xl border border-gray-700 bg-gray-800 shadow-lg transition-all duration-300 hover:-translate-y-1 hover:shadow-xl"
                    itemscope
                    itemtype="https://schema.org/Article"
                  >
                    <KnowledgeCard
                      title={article.data.title}
                      description={article.data.description}
                      image={article.data.image as string}
                      createdAt={createdAt}
                      slug={articleSlug}
                      lang={lang}
                      readingTime={article.data.readingTime}
                      articleUrl={`/${String(lang)}/knowledge/${articleSlug}`}
                      keywords={article.data.keywords?.join(", ")}
                      index={index}
                    />
                    {/* Micro-data for enhanced SEO */}
                    <meta itemprop="name" content={article.data.title} />
                    <meta itemprop="description" content={article.data.description} />
                    <meta itemprop="url" content={`${baseUrl}/${lang}/knowledge/${articleSlug}`} />
                    <meta itemprop="datePublished" content={createdAt.toISOString()} />
                    {article.data.keywords && (
                      <meta itemprop="keywords" content={article.data.keywords.join(", ")} />
                    )}
                  </li>
                );
              })
            ) : (
              <li class="col-span-full py-12 text-center">
                <div class="mx-auto max-w-md">
                  <Icon
                    name="info"
                    class="mx-auto mb-6 h-16 w-16 text-gray-600"
                    aria-hidden="true"
                  />
                  <Paragraph textSize="lg" textAlign="center">
                    {ui[uiLang]["knowledge.empty"] || "No articles available"}
                  </Paragraph>
                </div>
              </li>
            )
          }
        </ul>
      </section>
    </div>

    <!-- Back to top button -->
    <BackToTop {lang} />
  </main>

  <script>
    import { initGenericSearchAuto } from "../../../utils/components/searchUtils";

    // Module-based initialization (restore previous behavior) and expose instance for debugging/reset
    document.addEventListener("DOMContentLoaded", () => {
      const instance = initGenericSearchAuto({
        inputId: "searchInput",
        clearButtonId: "clear-search",
        itemSelector: "#articlesGrid li",
        examplesContainerId: undefined,
        exampleButtonSelector: undefined,
        onNoResults: (term) => {
          const noEl = document.getElementById("no-results");
          if (noEl) {
            noEl.style.display = "";
            noEl.textContent = `No results for "${term}"`;
          }
        },
        onResultsUpdated: (visibleCount, term) => {
          const status = document.getElementById("search-status");
          if (status) {
            if (!term) {
              status.textContent =
                (window.knowledgeTranslations &&
                  window.knowledgeTranslations.search &&
                  window.knowledgeTranslations.search.showingAll) ||
                "Showing all articles";
            } else {
              const label =
                (window.knowledgeTranslations &&
                  window.knowledgeTranslations.search &&
                  window.knowledgeTranslations.search.articlesFound) ||
                "articles found";
              status.textContent = `${visibleCount} ${label}`;
            }
          }

          const noEl = document.getElementById("no-results");
          if (noEl) {
            noEl.style.display = visibleCount > 0 ? "none" : "";
          }
        },
      });

      try {
        if (typeof window !== "undefined") {
          // expose last created instance for debugging and reset from other scripts
          window.__lastSearchInstance = instance;
        }
      } catch {
        // ignore in non-browser environments
      }
    });
  </script>
</Layout>
