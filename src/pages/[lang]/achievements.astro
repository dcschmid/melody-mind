---
/**
 * Achievements Page
 *
 * This page displays all available achievements and the user's progress.
 */

import Layout from "../../layouts/Layout.astro";
import { useTranslations } from "../../utils/i18n.ts";
import { getUserAchievements } from "../../services/achievementService.ts";
import { requireAuth } from "../../middleware/auth.ts";

// Extract language from URL parameters
const { lang } = Astro.params;
// Ensure lang is always a string
const langString = lang as string;
const t = useTranslations(langString);

// Check authentication
const { authenticated, user, redirectToLogin } = await requireAuth(Astro.request);

// If not authenticated, redirect to login page
if (!authenticated || !user) {
  if (redirectToLogin) {
    return redirectToLogin;
  }
}

// Retrieve user achievements
import type { LocalizedAchievement } from "../../types/achievement.ts";
import AchievementCard from "@components/Achievements/AchievementCard.astro";
import AchievementFilter from "@components/Achievements/AchievementFilter.astro";
import AchievementNotification from "@components/Achievements/AchievementNotification.astro";
let achievements: LocalizedAchievement[] = [];
let error: Error | null = null;

if (authenticated && user) {
  try {
    achievements = await getUserAchievements(user.id, langString);
  } catch (e) {
    console.error("Error retrieving achievements:", e);
    error = e instanceof Error ? e : new Error(String(e));
  }
}

// Group achievements by category
const achievementsByCategory = achievements.reduce<Record<string, LocalizedAchievement[]>>(
  (acc, achievement) => {
    const categoryId = achievement.categoryId;
    if (!acc[categoryId]) {
      acc[categoryId] = [];
    }
    acc[categoryId].push(achievement);
    return acc;
  },
  {}
);

// Sort categories
const sortedCategories = Object.entries(achievementsByCategory).sort(
  ([, achievementsA], [, achievementsB]) => {
    const sortOrderA = (achievementsA[0]?.category?.sortOrder as number) || 0;
    const sortOrderB = (achievementsB[0]?.category?.sortOrder as number) || 0;
    return sortOrderA - sortOrderB;
  }
);
---

<Layout title={t("achievements.title")} description={t("achievements.description")}>
  <main class="mx-auto max-w-7xl px-4 py-8">
    <h1 class="mb-4 text-center text-4xl">{t("achievements.title")}</h1>
    <p class="mx-auto mb-12 max-w-3xl text-center text-gray-400">
      {t("achievements.description")}
    </p>

    {
      error && (
        <div class="mb-8 rounded-lg bg-red-500 p-4 text-center text-white">
          <p>{t("achievements.error")}</p>
        </div>
      )
    }

    {
      !authenticated && (
        <div class="mb-8 rounded-lg bg-zinc-800 p-8 text-center">
          <h2 class="mt-0">{t("auth.required.title")}</h2>
          <p>{t("auth.required.description")}</p>
          <a
            href={`/${langString}/auth/login`}
            class="mt-4 inline-block rounded bg-blue-500 px-6 py-3 font-semibold text-white transition-colors duration-200 hover:bg-blue-600"
          >
            {t("auth.login.submit")}
          </a>
        </div>
      )
    }

    {
      authenticated && achievements.length === 0 && !error && (
        <div class="mb-8 rounded-lg bg-zinc-800 p-8 text-center">
          <p>{t("achievements.empty")}</p>
        </div>
      )
    }

    {
      authenticated && achievements.length > 0 && (
        <>
          <AchievementFilter lang={langString} />

          <div class="flex flex-col gap-12">
            {sortedCategories.map(([categoryId, categoryAchievements]) => (
              <section class="mb-4" data-category-id={categoryId}>
                <h2
                  class={`mb-6 border-b-2 border-zinc-600 pb-2 text-2xl ${
                    (categoryAchievements as LocalizedAchievement[])[0]?.category?.code === "bronze"
                      ? "text-amber-600"
                      : (categoryAchievements as LocalizedAchievement[])[0]?.category?.code ===
                          "silver"
                        ? "text-gray-300"
                        : (categoryAchievements as LocalizedAchievement[])[0]?.category?.code ===
                            "gold"
                          ? "text-yellow-400"
                          : (categoryAchievements as LocalizedAchievement[])[0]?.category?.code ===
                              "platinum"
                            ? "text-gray-200"
                            : "text-amber-600"
                  }`}
                >
                  {t(
                    `achievements.category.${(categoryAchievements as LocalizedAchievement[])[0]?.category?.code ?? "bronze"}`
                  )}
                </h2>
                <div class="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
                  {(categoryAchievements as LocalizedAchievement[]).map(
                    (achievement: LocalizedAchievement) => (
                      <AchievementCard achievement={achievement} lang={langString} />
                    )
                  )}
                </div>
              </section>
            ))}
          </div>

          <div class="mt-12 rounded-lg bg-zinc-800 p-6">
            <h2 class="mt-0 mb-4 text-center text-2xl">{t("achievements.summary.title")}</h2>
            <div class="flex flex-wrap justify-around gap-4">
              <div class="flex min-w-[120px] flex-col items-center p-4 md:min-w-[150px]">
                <span class="mb-2 text-sm text-gray-400">{t("achievements.summary.total")}</span>
                <span class="text-2xl font-semibold text-yellow-400">{achievements.length}</span>
              </div>
              <div class="flex min-w-[120px] flex-col items-center p-4 md:min-w-[150px]">
                <span class="mb-2 text-sm text-gray-400">{t("achievements.summary.unlocked")}</span>
                <span class="text-2xl font-semibold text-yellow-400">
                  {achievements.filter((a) => a.status === "unlocked").length}
                </span>
              </div>
              <div class="flex min-w-[120px] flex-col items-center p-4 md:min-w-[150px]">
                <span class="mb-2 text-sm text-gray-400">{t("achievements.summary.progress")}</span>
                <span class="text-2xl font-semibold text-yellow-400">
                  {Math.round(
                    (achievements.filter((a) => a.status === "unlocked").length /
                      achievements.length) *
                      100
                  )}
                  %
                </span>
              </div>
            </div>
          </div>
        </>
      )
    }
  </main>

  <!-- Achievement notification component -->
  <AchievementNotification lang={langString} />
</Layout>

<script>
  import { initAchievementEventSystem } from "../../utils/achievements/achievementEvents.ts";

  // Initialize achievement event system
  initAchievementEventSystem();
</script>
