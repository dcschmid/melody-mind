---
/**
 * @fileoverview Achievements Page - Displays all available achievements and user progress
 * @description A comprehensive achievements page with filtering capabilities and WCAG AAA accessibility
 */

// Export getStaticPaths for dynamic route generation (REQUIRED for Astro dynamic routes)
/**
 * Generates static paths for all supported languages
 *
 * @function getStaticPaths
 * @description
 * Required function for Astro dynamic routes. Generates static paths for all supported
 * languages to enable pre-rendering of achievement pages in each locale.
 *
 * @returns {Array<{params: {lang: SupportedLanguage}}>} Array of path parameters
 *
 * @example
 * ```typescript
 * // Generated paths:
 * [
 *   { params: { lang: "en" } },
 *   { params: { lang: "de" } },
 *   { params: { lang: "es" } },
 *   { params: { lang: "fr" } },
 *   { params: { lang: "it" } }
 * ]
 * ```
 *
 * @since 1.0.0
 */
export async function getStaticPaths() {
  const supportedLanguages = ["de", "en", "es", "fr", "it", "pt", "da", "nl", "sv", "fi"] as const;

  return supportedLanguages.map((lang) => ({
    params: { lang },
  }));
}

// 1. Core imports
import Layout from "../../layouts/Layout.astro";
import { useTranslations } from "../../utils/i18n.ts";
import { getUserAchievements } from "../../services/achievementService.ts";
import { requireAuth } from "../../middleware/auth.ts";
import {
  processAchievements,
  calculateAchievementStats,
} from "../../utils/achievements/categorization.ts";

// 2. Component imports
import type { LocalizedAchievement } from "../../types/achievement.ts";
import AchievementCard from "@components/Achievements/AchievementCard.astro";
import AchievementFilter from "@components/Achievements/AchievementFilter.astro";
import AchievementNotification from "@components/Achievements/AchievementNotification.astro";
import ErrorMessage from "@components/Shared/ErrorMessage.astro";
import ButtonLink from "@components/ButtonLink.astro";
import Headline from "@components/Headline.astro";
import Paragraph from "@components/Paragraph.astro";

// 3. Language and authentication setup
// Extract language from URL parameters
const { lang } = Astro.params;
// Ensure lang is always a string
const langString = lang as string;
const t = useTranslations(langString);

// 4. Authentication check with redirect handling
const { authenticated, user, redirectToLogin } = await requireAuth(Astro.request);

// If not authenticated, redirect to login page
if (!authenticated || !user) {
  if (redirectToLogin) {
    return redirectToLogin;
  }
}

// 5. Data fetching and error handling
let achievements: LocalizedAchievement[] = [];
let error: Error | null = null;

// 6. Data processing and categorization
if (authenticated && user) {
  try {
    achievements = await getUserAchievements(user.id, langString);
  } catch (e) {
    console.error("Error retrieving achievements:", e);
    error = e instanceof Error ? e : new Error(String(e));
  }
}

// 7. Achievement categorization and sorting with performance optimization
// Use existing utility function for efficient categorization and statistics
const sortedCategories = processAchievements(achievements);
const achievementStats = calculateAchievementStats(achievements);
---

<Layout title={t("achievements.title")} description={t("achievements.description")}>
  <main class="achievements-container" id="main-content" role="main">
    <!-- Hero section styled like GameHome with improved contrast and accessibility -->
    <header class="achievements-hero" aria-labelledby="achievements-heading">
      <!-- Decorative background elements with aria-hidden -->
      <div class="achievements-hero__decoration" aria-hidden="true">
        <div
          class="achievements-hero__decoration-item achievements-hero__decoration-item--top-right"
        >
        </div>
        <div
          class="achievements-hero__decoration-item achievements-hero__decoration-item--bottom-left"
        >
        </div>
        <div
          class="achievements-hero__decoration-item achievements-hero__decoration-item--center-right"
        >
        </div>
      </div>

      <div class="achievements-hero__content">
        <Headline
          level="h1"
          title={t("achievements.title")}
          className="achievements-hero__title"
          id="achievements-heading"
          size="4xl"
        />

        <div class="achievements-hero__divider"></div>

        <Paragraph
          description={t("achievements.description")}
          className="achievements-hero__description"
          align="center"
        />

        <!-- Additional descriptive content for SEO -->
        <p class="achievements-hero__seo-description sr-only">
          {t("achievements.seo.description")}
        </p>
      </div>
    </header>

    <!-- Live region for dynamic content updates -->
    <div aria-live="polite" aria-atomic="true" class="sr-only" id="achievements-status">
      {/* Dynamic status updates will be announced here */}
    </div>

    {error && <ErrorMessage message={t("achievements.error")} />}

    {
      !authenticated && (
        <div class="achievements__auth-required" role="region" aria-labelledby="auth-title">
          <Headline level="h2" id="auth-title" title={t("auth.required.title")} />
          <Paragraph description={t("auth.required.description")} />
          <ButtonLink
            href={`/${langString}/auth/login`}
            variant="primary"
            ariaLabel={t("auth.login.submit")}
          >
            {t("auth.login.submit")}
          </ButtonLink>
        </div>
      )
    }

    {
      authenticated && achievements.length === 0 && !error && (
        <div class="achievements__empty" role="status">
          <Paragraph description={t("achievements.empty")} />
        </div>
      )
    }

    {
      authenticated && achievements.length > 0 && (
        <>
          <AchievementFilter lang={langString} />

          <div class="achievements__list" role="region" aria-labelledby="achievements-categories">
            <Headline
              level="h2"
              id="achievements-categories"
              className="sr-only"
              title={t("achievements.categories")}
            />
            {sortedCategories.map(([categoryId, categoryAchievements]) => {
              const categoryCode =
                (categoryAchievements as LocalizedAchievement[])[0]?.category?.code ?? "bronze";
              const categoryTitle = t(`achievements.category.${categoryCode}`);
              const achievementCount = (categoryAchievements as LocalizedAchievement[]).length;

              return (
                <section
                  class="achievements__category"
                  data-category-id={categoryId}
                  aria-labelledby={`category-${categoryId}-title`}
                >
                  <Headline
                    level="h3"
                    id={`category-${categoryId}-title`}
                    title={categoryTitle}
                    className={`achievements__category-title achievements__category-title--${categoryCode}`}
                    ariaDescribedBy={`category-${categoryId}-count`}
                  />
                  <Paragraph
                    id={`category-${categoryId}-count`}
                    className="sr-only"
                    description={t("achievements.category.count", { count: achievementCount })}
                  />
                  <div
                    class="achievements__grid"
                    role="list"
                    aria-labelledby={`category-${categoryId}-title`}
                  >
                    {(categoryAchievements as LocalizedAchievement[]).map(
                      (achievement: LocalizedAchievement) => (
                        <div role="listitem">
                          <AchievementCard achievement={achievement} lang={langString} />
                        </div>
                      )
                    )}
                  </div>
                </section>
              );
            })}
          </div>

          <section class="achievements__summary" aria-labelledby="summary-title">
            <Headline
              level="h2"
              id="summary-title"
              className="achievements__summary-title"
              title={t("achievements.summary.title")}
            />
            <div class="achievements__summary-stats" role="list" aria-labelledby="summary-title">
              <div class="achievements__stat" role="listitem">
                <span class="achievements__stat-label">{t("achievements.summary.total")}</span>
                <span
                  class="achievements__stat-value"
                  aria-label={t("achievements.summary.total-aria", {
                    count: achievementStats.total,
                  })}
                >
                  {achievementStats.total}
                </span>
              </div>
              <div class="achievements__stat" role="listitem">
                <span class="achievements__stat-label">{t("achievements.summary.unlocked")}</span>
                <span
                  class="achievements__stat-value"
                  aria-label={t("achievements.summary.unlocked-aria", {
                    count: achievementStats.unlocked,
                  })}
                >
                  {achievementStats.unlocked}
                </span>
              </div>
              <div class="achievements__stat" role="listitem">
                <span class="achievements__stat-label">{t("achievements.summary.progress")}</span>
                <span
                  class="achievements__stat-value"
                  aria-label={t("achievements.summary.progress-aria", {
                    percent: achievementStats.progress,
                  })}
                >
                  {achievementStats.progress}%
                </span>
              </div>
            </div>
          </section>
        </>
      )
    }
  </main>

  <!-- Achievement notification component -->
  <AchievementNotification lang={langString} />
</Layout>

<style>
  /**
   * Achievements Page CSS - WCAG AAA 2.2 Compliant & Performance Optimized
   * 
   * COMPREHENSIVE OPTIMIZATION FEATURES:
   * - Mandatory CSS custom properties from global.css for design consistency
   * - Maximum DRY principles applied with consolidated repetitive patterns
   * - BEM methodology for maintainable class naming
   * - WCAG AAA 2.2 accessibility standards compliance (7:1 contrast ratios)
   * - Performance optimizations with logical CSS organization
   * - Semantic CSS variables for enhanced maintainability
   * - Modern CSS features (Grid auto-fit, Container Queries, CSS logical properties)
   * - No Tailwind CSS classes - pure CSS implementation
   * - Hero section matching GameHome design pattern
   * 
   * SPECIFIC OPTIMIZATIONS IMPLEMENTED:
   * 1. Layout System: GameHome-style container with hero section
   * 2. CSS Variables: Maximum usage of semantic variables (--text-*, --space-*, --border-*, etc.)
   * 3. DRY Consolidation: Merged repetitive patterns into shared selectors
   * 4. Grid System: Enhanced responsive grid using existing grid variables
   * 5. Media Queries: Using semantic CSS variables for breakpoints
   * 6. State Components: Consolidated auth-required/empty/summary component styles
   * 7. Accessibility: Enhanced WCAG AAA 2.2 compliance with semantic variable usage
   * 8. Print Styles: Optimized print output using semantic print variables
   * 9. Performance: Container queries and layout containment for optimal rendering
   * 10. Touch Targets: Consistent use of --min-touch-size for mobile accessibility
   * 11. Hero Section: GameHome-style visual design with decorative elements
   */

  /* ======================================
   * CSS CUSTOM PROPERTIES FOR COMPONENT
   * Enhanced with global.css variables matching GameHome pattern
   * ====================================== */

  :root {
    /* Component-specific dimensions using global scale */
    --achievements-hero-decoration-sm: var(--space-2xl); /* 48px - Small decoration */
    --achievements-hero-decoration-md: var(--space-3xl); /* 64px - Medium decoration */
    --achievements-hero-decoration-lg: calc(var(--space-3xl) * 2); /* 128px - Large decoration */

    /* Layout constraints using design system */
    --achievements-content-max-width: calc(
      var(--container-md) * 0.6
    ); /* ~460px - Content max width */

    /* Visual effects using global tokens */
    --achievements-hero-shadow: 0 2px 4px rgba(0, 0, 0, 0.3); /* Hero text shadow */
    --achievements-divider-height: var(--border-width-thick); /* 2px - Divider height */
  }

  /* ======================================
   * ACHIEVEMENTS CONTAINER LAYOUT 
   * Matching GameHome layout system for consistency
   * ====================================== */

  .achievements-container {
    width: var(--width-full);
    max-width: var(--container-xl);
    margin: 0 auto;
    padding: var(--space-lg) var(--space-md);
    min-height: 100vh;
    display: flex;
    flex-direction: column;

    /* Performance: Enable GPU acceleration for smooth scrolling */
    transform: translateZ(0);
    will-change: auto; /* Reset after initial render */

    /* Enhanced content visibility for performance optimization */
    contain: layout style;
  }

  @media (min-width: var(--breakpoint-md)) {
    .achievements-container {
      padding: var(--space-xl) var(--space-lg);
    }
  }

  /* ======================================
   * HERO SECTION STYLING
   * Matching GameHome hero pattern exactly
   * ====================================== */

  .achievements-hero {
    position: relative;
    margin-bottom: var(--space-2xl);
    overflow: hidden;
    border-radius: var(--radius-xl);
    background: linear-gradient(
      135deg,
      var(--color-primary-900) 0%,
      var(--color-primary-700) 50%,
      var(--color-secondary-800) 100%
    );
    padding: var(--space-xl);
    box-shadow: var(--shadow-xl);
    border: var(--border-width-thin) solid var(--border-primary);
  }

  @media (min-width: 768px) {
    .achievements-hero {
      margin-bottom: var(--space-3xl);
      border-radius: var(--radius-2xl);
      padding: var(--space-2xl) var(--space-xl);
    }
  }

  .achievements-hero__decoration {
    position: absolute;
    inset: 0;
    opacity: 0.1;
    pointer-events: none;
  }

  .achievements-hero__decoration-item {
    position: absolute;
    border-radius: var(--radius-full);
    background: var(--color-white);
  }

  .achievements-hero__decoration-item--top-right {
    top: calc(-1 * var(--space-xl));
    right: calc(-1 * var(--space-xl));
    width: var(--achievements-hero-decoration-md);
    height: var(--achievements-hero-decoration-md);
  }

  .achievements-hero__decoration-item--bottom-left {
    bottom: calc(-1 * var(--space-2xl));
    left: calc(-1 * var(--space-2xl));
    width: var(--achievements-hero-decoration-lg);
    height: var(--achievements-hero-decoration-lg);
  }

  .achievements-hero__decoration-item--center-right {
    top: 50%;
    right: calc(-1 * var(--space-md));
    width: var(--achievements-hero-decoration-sm);
    height: var(--achievements-hero-decoration-sm);
    transform: translateY(-50%);
  }

  .achievements-hero__content {
    position: relative;
    z-index: 1;
    text-align: center;
    color: var(--color-white);
  }

  .achievements-hero__title {
    margin-bottom: var(--space-lg);
    color: var(--color-white);
    text-shadow: var(--achievements-hero-shadow);
  }

  .achievements-hero__divider {
    width: var(--space-2xl);
    height: var(--achievements-divider-height);
    background: var(--color-secondary-400);
    margin: var(--space-lg) auto;
    border-radius: var(--radius-full);
  }

  .achievements-hero__description {
    color: var(--color-neutral-100);
    font-size: var(--text-xl);
    line-height: var(--leading-relaxed);
    max-width: var(--achievements-content-max-width);
    margin: 0 auto;
  }

  .achievements-hero__seo-description {
    /* SEO content hidden visually but available to screen readers */
  }

  /* ======================================
   * SHARED COMPONENT STYLES - Maximum DRY optimization using semantic CSS variables
   * ====================================== */

  /* Consolidated card-like components using semantic variables */
  .achievements__auth-required,
  .achievements__empty,
  .achievements__summary {
    /* Shared layout and spacing using design tokens */
    margin-bottom: var(--space-lg);
    padding: var(--space-lg);
    border-radius: var(--radius-md);
    text-align: center;
    border: var(--border-width-thin) solid var(--border-primary);
    background-color: var(--card-bg);
    box-shadow: var(--card-shadow);

    /* Enhanced accessibility and UX using existing touch target variable */
    min-height: var(--min-touch-size);
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;

    /* Performance optimizations with CSS containment */
    contain: layout style;

    /* Smooth hover effect using semantic transition variables */
    transition:
      box-shadow var(--transition-normal),
      border-color var(--transition-fast),
      background-color var(--transition-fast);
  }

  .achievements__auth-required:hover,
  .achievements__summary:hover {
    box-shadow: var(--card-shadow-hover);
    border-color: var(--border-focus);
    background-color: var(--bg-secondary);
  }

  /* Consolidated heading styles - Component-specific layout only */
  /* Note: Typography handled by Headline component, only layout-specific styles remain */

  /* Consolidated text content styles - Component-specific layout only */
  /* Note: Typography handled by Paragraph component, only layout-specific styles remain */

  /* ======================================
   * ENHANCED GRID SYSTEM - Maximum CSS variable usage with performance optimizations
   * ====================================== */

  .achievements__list {
    display: flex;
    flex-direction: column;
    gap: var(--space-2xl);

    /* Performance: Contain layout to prevent unnecessary recalculations */
    contain: layout style;
  }

  .achievements__category {
    margin-bottom: var(--space-md);

    /* Performance: Enable efficient paint containment */
    contain: layout style paint;

    /* Enhanced content visibility for performance */
    content-visibility: auto;
    contain-intrinsic-size: 0 var(--container-intrinsic-height-component);
  }

  .achievements__category-title {
    /* Note: Typography handled by Headline component, only layout styles remain */
    margin-bottom: var(--space-lg);
    padding-bottom: var(--space-sm);
    border-bottom: var(--border-width-thick) solid var(--border-primary);
  }

  /* High-performance responsive grid using existing semantic variables with max 3 columns */
  .achievements__grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(min(var(--grid-min-width-sm), 100%), 1fr));
    gap: var(--space-lg);
    max-width: 100%;

    /* CRITICAL: Limit to maximum 3 columns */
    grid-template-columns: repeat(auto-fit, minmax(min(20rem, 100%), 1fr));

    /* OPTIMIZED: Dense grid packing eliminates gaps from filtered items */
    grid-auto-flow: row dense;
    align-items: stretch; /* Equal heights for cards */
    justify-items: stretch;

    /* Performance: Optimize grid layout containment */
    contain: layout style;
  }

  /* CRITICAL: Only visible achievement cards participate in grid layout */
  .achievements__grid > *:not(.filtered-hidden) {
    position: relative;
    display: block;
  }

  /* Auto-hide empty categories when all achievements are filtered */
  .achievements__category.filtered-hidden,
  .achievements__category.all-filtered {
    display: none !important;
    margin: var(--space-none);
    padding: var(--space-none);
  }

  /* Achievement category colors using CSS custom properties - DRY optimized */
  /* Note: Category titles use component styles, only border colors applied here */
  .achievements__category-title--bronze {
    border-bottom-color: var(--achievement-bronze);
  }

  .achievements__category-title--silver {
    border-bottom-color: var(--achievement-silver);
  }

  .achievements__category-title--gold {
    border-bottom-color: var(--achievement-gold);
  }

  .achievements__category-title--platinum {
    border-bottom-color: var(--achievement-platinum);
  }

  /* ======================================
   * GRID PERFORMANCE OPTIMIZATIONS (DRY Pattern)
   * ====================================== */

  /* Utility for empty grids - performance optimization using semantic variables */
  .achievements__grid:empty {
    display: none;
    margin: var(--space-none);
    padding: var(--space-none);
  }

  /* Consolidated grid item and card height optimization using semantic variables */
  .achievements__grid > *,
  .achievements__grid .achievement-card {
    min-width: var(--space-none); /* Prevent grid overflow using semantic variable */
    width: var(--width-full);
    height: var(--width-full); /* Ensure cards stretch to fill grid cell height */
    display: flex;
    flex-direction: column;

    /* Performance: Enable efficient paint and layout containment */
    contain: layout style;

    /* Enhanced transition for smooth interactions */
    transition:
      transform var(--transition-fast),
      opacity var(--transition-normal);
  }

  /* Ensure card content fills available space using semantic variables */
  .achievements__grid .achievement-card .achievement-card__content {
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    padding: var(--space-md);
    gap: var(--space-sm);
  }

  /* ======================================
   * SUMMARY STATISTICS SECTION - Enhanced with semantic CSS variables
   * ====================================== */

  .achievements__summary-stats {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-around;
    gap: var(--space-md);

    /* Performance: Optimize flexbox layout */
    align-items: baseline;

    /* Enhanced content visibility for performance */
    contain: layout style;
  }

  .achievements__stat {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: var(--space-md);
    min-width: var(--stat-width-sm); /* Using existing semantic variable */

    /* Enhanced touch target for mobile accessibility */
    min-height: var(--min-touch-size);
    justify-content: center;

    /* Hover effect using semantic variables */
    border-radius: var(--radius-sm);
    transition:
      background-color var(--transition-normal),
      transform var(--transition-fast),
      box-shadow var(--transition-fast);
  }

  .achievements__stat:hover {
    background-color: var(--bg-tertiary);
    transform: scale(var(--scale-focus));
    box-shadow: var(--shadow-md);
  }

  /* Focus state for accessibility using semantic variables */
  .achievements__stat:focus-visible {
    outline: var(--focus-outline);
    outline-offset: var(--focus-ring-offset);
    background-color: var(--bg-tertiary);
  }

  .achievements__stat-label {
    margin-bottom: var(--space-sm);
    font-size: var(--text-sm);
    font-weight: var(--font-medium);
    color: var(--text-secondary);
    text-align: center;

    /* Enhanced text spacing for WCAG AAA 2.2 */
    letter-spacing: var(--letter-spacing-base);
    line-height: var(--leading-enhanced);
  }

  .achievements__stat-value {
    font-size: var(--text-xl);
    font-weight: var(--font-bold);
    color: var(--interactive-secondary);

    /* Enhanced number readability using semantic variables */
    font-variant-numeric: tabular-nums;
    line-height: var(--leading-enhanced);
    letter-spacing: var(--letter-spacing-base);
  }

  /* ======================================
   * EMPTY STATE STYLING - Layout only
   * Note: Typography handled by Paragraph component
   * ====================================== */

  /* ======================================
   * RESPONSIVE DESIGN - Enhanced with comprehensive CSS variables usage
   * ====================================== */

  /* Small devices and up (tablets) using semantic breakpoint variables */
  @media (min-width: var(--breakpoint-md)) {
    .achievements {
      padding: var(--space-xl);
    }

    /* Enhanced grid for tablets - max 2 columns */
    .achievements__grid {
      grid-template-columns: repeat(auto-fit, minmax(min(22rem, 100%), 1fr));
      gap: var(--space-xl);
    }

    .achievements__stat {
      min-width: var(--stat-width-md); /* Using existing semantic variable for tablets */
      padding: var(--space-lg);
    }
  }

  /* Large devices and up (desktops) using semantic variables */
  @media (min-width: var(--breakpoint-lg)) {
    .achievements {
      padding: var(--space-2xl);
    }

    /* Desktop - max 3 columns */
    .achievements__grid {
      grid-template-columns: repeat(auto-fit, minmax(min(20rem, 100%), 1fr));
      gap: var(--space-xl);
    }

    .achievements__list {
      gap: var(--space-3xl);
    }
  }

  /* Extra large devices and up using semantic variables */
  @media (min-width: var(--breakpoint-xl)) {
    /* Keep max 3 columns even on very large screens */
    .achievements__grid {
      grid-template-columns: repeat(auto-fit, minmax(min(24rem, 100%), 1fr));
      gap: var(--space-2xl);
    }

    .achievements__summary-stats {
      gap: var(--space-lg);
    }
  }

  /* ======================================
   * CONTAINER QUERIES - Modern responsive design using semantic variables
   * ====================================== */

  /* Container query for achievement cards using semantic variables */
  @container (min-width: var(--container-query-md)) {
    .achievements__grid {
      grid-template-columns: repeat(auto-fit, minmax(min(22rem, 100%), 1fr));
    }
  }

  @container (min-width: var(--container-query-lg)) {
    .achievements__grid {
      /* Max 3 columns in large containers */
      grid-template-columns: repeat(auto-fit, minmax(min(20rem, 100%), 1fr));
    }

    .achievements__stat {
      min-width: var(--stat-width-md);
      font-size: var(--text-lg);
    }
  }

  /* ======================================
   * ENHANCED ACCESSIBILITY & PRINT STYLES - Maximum DRY optimization using semantic variables
   * ====================================== */

  /* Consolidated motion and transition resets using semantic variables */
  @media (prefers-reduced-motion: reduce) {
    .achievements,
    .achievements__grid,
    .achievements__stat {
      transition: none;
      transform: none;
      will-change: auto;
      animation: none;
    }

    /* Reset hover effects for reduced motion */
    .achievements__stat:hover {
      transform: none;
    }

    .achievements-hero__decoration-item {
      animation: none;
    }
  }

  @media (prefers-contrast: high) {
    .achievements__auth-required,
    .achievements__empty,
    .achievements__summary {
      border-width: var(--border-width-enhanced);
      border-color: var(--text-primary);
      background-color: var(--bg-primary);
    }

    .achievements__category-title {
      border-bottom-width: var(--border-width-enhanced);
      color: var(--text-primary);
    }

    .achievements__stat:hover,
    .achievements__stat:focus-visible {
      background-color: var(--bg-primary);
      border: var(--border-width-thin) solid var(--text-primary);
    }

    .achievements-hero {
      border-width: var(--border-width-thick);
    }
  }

  /* Forced colors mode support (Windows High Contrast) using semantic variables */
  @media (forced-colors: active) {
    .achievements__auth-required,
    .achievements__empty,
    .achievements__summary {
      border: var(--border-width-thin) solid CanvasText;
      background: Canvas;
      color: CanvasText;
    }

    .achievements__category-title {
      color: CanvasText;
      border-bottom-color: CanvasText;
    }
  }

  /* Print styles - Optimized for printing using semantic print variables */
  @media print {
    .achievements {
      background: var(--print-bg);
      color: var(--print-text);
      padding: var(--space-none);
      max-width: var(--width-full);
    }

    /* Consolidated print styles for card-like elements using semantic variables */
    .achievements__auth-required,
    .achievements__empty,
    .achievements__summary {
      background: var(--print-bg);
      border: var(--print-border);
      color: var(--print-text);
      box-shadow: none;
      margin-bottom: var(--space-md);
    }

    .achievements__grid {
      break-inside: avoid;
      gap: var(--space-sm);
      grid-template-columns: repeat(auto-fit, minmax(var(--grid-min-width-sm), 1fr));
    }

    /* Print-specific layout optimizations */
    .achievements__title,
    .achievements__category-title,
    .achievements__summary-title {
      page-break-after: avoid;
    }
  }

  /* ======================================
   * RESPONSIVE DESIGN ENHANCEMENTS
   * Matching GameHome responsive patterns
   * ====================================== */

  @media (min-width: 1024px) {
    .achievements-hero__title {
      font-size: var(--text-4xl);
    }

    .achievements-hero__description {
      font-size: var(--text-2xl);
    }
  }
</style>

<script>
  /**
   * Achievement Page - Minimal Client-Side Enhancement
   *
   * Simplified script focusing only on essential functionality:
   * - Achievement notification system
   */

  import { initAchievementEventSystem } from "../../utils/achievements/achievementEvents.ts";

  // Minimal initialization for achievement notifications
  async function initializeAchievements(): Promise<void> {
    try {
      await initAchievementEventSystem();
    } catch (error) {
      console.error("Failed to initialize achievement system:", error);
    }
  }

  // Initialize on DOM ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeAchievements);
  } else {
    initializeAchievements();
  }

  // Astro page transition support
  document.addEventListener("astro:page-load", initializeAchievements);
</script>
