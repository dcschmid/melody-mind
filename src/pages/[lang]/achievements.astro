---
/**
 * Achievements Page
 *
 * This page displays all available achievements and the user's progress.
 */

import Layout from "../../layouts/Layout.astro";
import { useTranslations } from "../../utils/i18n.ts";
import { getUserAchievements } from "../../services/achievementService.ts";
import { requireAuth } from "../../middleware/auth.ts";

// Extract language from URL parameters
const { lang } = Astro.params;
// Ensure lang is always a string
const langString = lang as string;
const t = useTranslations(langString);

// Check authentication
const { authenticated, user, redirectToLogin } = await requireAuth(Astro.request);

// If not authenticated, redirect to login page
if (!authenticated || !user) {
  if (redirectToLogin) {
    return redirectToLogin;
  }
}

// Retrieve user achievements
import type { LocalizedAchievement } from "../../types/achievement.ts";
import AchievementCard from "@components/Achievements/AchievementCard.astro";
import AchievementFilter from "@components/Achievements/AchievementFilter.astro";
import AchievementNotification from "@components/Achievements/AchievementNotification.astro";
let achievements: LocalizedAchievement[] = [];
let error: Error | null = null;

if (authenticated && user) {
  try {
    achievements = await getUserAchievements(user.id, langString);
  } catch (e) {
    console.error("Error retrieving achievements:", e);
    error = e instanceof Error ? e : new Error(String(e));
  }
}

// Group achievements by category
const achievementsByCategory = achievements.reduce<Record<string, LocalizedAchievement[]>>(
  (acc, achievement) => {
    const categoryId = achievement.categoryId;
    if (!acc[categoryId]) {
      acc[categoryId] = [];
    }
    acc[categoryId].push(achievement);
    return acc;
  },
  {}
);

// Sort categories
const sortedCategories = Object.entries(achievementsByCategory).sort(
  ([, achievementsA], [, achievementsB]) => {
    const sortOrderA = (achievementsA[0]?.category?.sortOrder as number) || 0;
    const sortOrderB = (achievementsB[0]?.category?.sortOrder as number) || 0;
    return sortOrderA - sortOrderB;
  }
);
---

<Layout title={t("achievements.title")} description={t("achievements.description")}>
  <main class="achievements">
    <h1 class="achievements__title">{t("achievements.title")}</h1>
    <p class="achievements__description">
      {t("achievements.description")}
    </p>

    {
      error && (
        <div class="achievements__error">
          <p>{t("achievements.error")}</p>
        </div>
      )
    }

    {
      !authenticated && (
        <div class="achievements__auth-required">
          <h2>{t("auth.required.title")}</h2>
          <p>{t("auth.required.description")}</p>
          <a href={`/${langString}/auth/login`} class="achievements__login-button">
            {t("auth.login.submit")}
          </a>
        </div>
      )
    }

    {
      authenticated && achievements.length === 0 && !error && (
        <div class="achievements__empty">
          <p>{t("achievements.empty")}</p>
        </div>
      )
    }

    {
      authenticated && achievements.length > 0 && (
        <>
          <AchievementFilter lang={langString} />

          <div class="achievements__list">
            {sortedCategories.map(([categoryId, categoryAchievements]) => {
              const categoryCode =
                (categoryAchievements as LocalizedAchievement[])[0]?.category?.code ?? "bronze";
              return (
                <section class="achievements__category" data-category-id={categoryId}>
                  <h2
                    class={`achievements__category-title achievements__category-title--${categoryCode}`}
                  >
                    {t(`achievements.category.${categoryCode}`)}
                  </h2>
                  <div class="achievements__grid">
                    {(categoryAchievements as LocalizedAchievement[]).map(
                      (achievement: LocalizedAchievement) => (
                        <AchievementCard achievement={achievement} lang={langString} />
                      )
                    )}
                  </div>
                </section>
              );
            })}
          </div>

          <div class="achievements__summary">
            <h2 class="achievements__summary-title">{t("achievements.summary.title")}</h2>
            <div class="achievements__summary-stats">
              <div class="achievements__stat">
                <span class="achievements__stat-label">{t("achievements.summary.total")}</span>
                <span class="achievements__stat-value">{achievements.length}</span>
              </div>
              <div class="achievements__stat">
                <span class="achievements__stat-label">{t("achievements.summary.unlocked")}</span>
                <span class="achievements__stat-value">
                  {achievements.filter((a) => a.status === "unlocked").length}
                </span>
              </div>
              <div class="achievements__stat">
                <span class="achievements__stat-label">{t("achievements.summary.progress")}</span>
                <span class="achievements__stat-value">
                  {Math.round(
                    (achievements.filter((a) => a.status === "unlocked").length /
                      achievements.length) *
                      100
                  )}
                  %
                </span>
              </div>
            </div>
          </div>
        </>
      )
    }
  </main>

  <!-- Achievement notification component -->
  <AchievementNotification lang={langString} />
</Layout>

<style>
  /* Achievements main container */
  .achievements {
    max-width: var(--breakpoint-xl);
    margin: 0 auto;
    padding: var(--spacing-md) var(--spacing-md);
  }

  /* Title and description */
  .achievements__title {
    margin-bottom: var(--spacing-md);
    text-align: center;
    font-size: var(--font-size-3xl);
  }

  .achievements__description {
    max-width: 48rem; /* 768px */
    margin: 0 auto var(--spacing-2xl) auto;
    text-align: center;
    color: var(--color-gray-400);
  }

  /* Error message */
  .achievements__error {
    margin-bottom: var(--spacing-lg);
    padding: var(--spacing-md);
    background-color: var(--color-pink-600);
    border-radius: var(--border-radius-md);
    text-align: center;
    color: var(--color-white);
  }

  /* Auth required and empty states */
  .achievements__auth-required,
  .achievements__empty {
    margin-bottom: var(--spacing-lg);
    padding: var(--spacing-lg);
    background-color: var(--color-gray-800);
    border-radius: var(--border-radius-md);
    text-align: center;
  }

  .achievements__auth-required h2 {
    margin-top: 0;
  }

  /* Login button */
  .achievements__login-button {
    display: inline-block;
    margin-top: var(--spacing-md);
    padding: var(--spacing-sm) var(--spacing-lg);
    background-color: var(--color-purple-500);
    color: var(--color-white);
    font-weight: 600;
    border-radius: var(--border-radius-md);
    text-decoration: none;
    transition: background-color 0.2s;
  }

  .achievements__login-button:hover {
    background-color: var(--color-purple-600);
  }

  .achievements__login-button:focus-visible {
    outline: 3px solid var(--color-purple-300);
    outline-offset: 2px;
  }

  /* Achievement list and grid */
  .achievements__list {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-2xl);
  }

  .achievements__category {
    margin-bottom: var(--spacing-md);
  }

  .achievements__category-title {
    margin-bottom: var(--spacing-lg);
    padding-bottom: var(--spacing-sm);
    border-bottom: 2px solid var(--color-gray-700);
    font-size: var(--font-size-xl);
  }

  /* Category title colors based on level */
  .achievements__category-title--bronze {
    color: var(--color-pink-400);
  }

  .achievements__category-title--silver {
    color: var(--color-gray-300);
  }

  .achievements__category-title--gold {
    color: var(--color-pink-300);
  }

  .achievements__category-title--platinum {
    color: var(--color-gray-200);
  }

  /* Achievement grid - Optimized for filtering without gaps */
  .achievements__grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--spacing-lg);

    /* Grid optimization for filtered elements */
    grid-auto-flow: row;
    align-items: start;
    justify-items: stretch;

    /* Ensure smooth transitions when filtering */
    transition: grid-template-columns var(--transition-normal);
  }

  /* Utility class for empty grids */
  .achievements__grid:empty {
    display: none;
  }

  /* Ensure achievement cards maintain proper sizing */
  .achievements__grid > * {
    min-width: 0; /* Prevent grid overflow */
    width: 100%;
  }

  /* Summary section */
  .achievements__summary {
    margin-top: var(--spacing-2xl);
    padding: var(--spacing-lg);
    background-color: var(--color-gray-800);
    border-radius: var(--border-radius-md);
  }

  .achievements__summary-title {
    margin-top: 0;
    margin-bottom: var(--spacing-md);
    text-align: center;
    font-size: var(--font-size-xl);
  }

  .achievements__summary-stats {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-around;
    gap: var(--spacing-md);
  }

  .achievements__stat {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: var(--spacing-md);
    min-width: 120px;
  }

  .achievements__stat-label {
    margin-bottom: var(--spacing-sm);
    font-size: var(--font-size-sm);
    color: var(--color-gray-400);
  }

  .achievements__stat-value {
    font-size: var(--font-size-xl);
    font-weight: 600;
    color: var(--color-pink-300);
  }

  /* Responsive adjustments with auto-fit grid for gap-free filtering */
  @media (min-width: 768px) {
    .achievements {
      padding: var(--spacing-lg) var(--spacing-md);
    }

    .achievements__title {
      font-size: var(--font-size-4xl);
    }

    .achievements__grid {
      grid-template-columns: repeat(auto-fit, minmax(min(320px, 100%), 1fr));
    }

    .achievements__stat {
      min-width: 150px;
    }
  }

  @media (min-width: 1024px) {
    .achievements__grid {
      grid-template-columns: repeat(auto-fit, minmax(min(300px, 100%), 1fr));
      max-width: none;
    }
  }

  @media (min-width: 1280px) {
    .achievements__grid {
      grid-template-columns: repeat(auto-fit, minmax(min(280px, 100%), 1fr));
      gap: var(--spacing-xl);
    }
  }

  /* Accessibility - Reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .achievements__login-button {
      transition: none;
    }
  }
</style>

<script>
  import { initAchievementEventSystem } from "../../utils/achievements/achievementEvents.ts";

  // Initialize achievement event system
  initAchievementEventSystem();
</script>
