---
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import PlaylistItem from "@components/PlaylistItem.astro";
import Layout from "@layouts/Layout.astro";
import Headline from "@components/Headline.astro";
import Paragraph from "@components/Paragraph.astro";
import { extractKeywords, generateMetaDescription } from "@utils/seo";
import { Icon } from "astro-icon/components";

/**
 * Language and translation setup
 * Sets the current language based on URL and loads appropriate translations
 */
const lang = String(getLangFromUrl(Astro.url));
const t = useTranslations(String(lang));

/**
 * Interface defining the structure of a music category
 */
interface Category {
  isPlayable: boolean;
  headline: string;
  categoryUrl?: string;
  imageUrl: string;
  introSubline: string;
  slug: string;
  text: string;
}

/**
 * Asynchronously loads category data with fallback mechanisms
 * First attempts to load using the alias path, then tries relative path if that fails
 * @returns {Promise<Category[]>} Array of category objects
 */
async function loadCategoriesForLanguage(language: string): Promise<Category[]> {
  try {
    // First try using the alias path
    return await import(`@json/${language}_categories.json`)
      .then((module) => module.default)
      .catch(async () => {
        // Fallback to relative path if alias fails
        console.info(`Attempting to load ${language}_categories.json using relative path`);
        return await import(`../../json/${language}_categories.json`)
          .then((module) => module.default)
          .catch((err) => {
            console.error(`Failed to load ${language}_categories.json:`, err);
            return [];
          });
      });
  } catch (error) {
    console.error(`Error loading categories for ${language}:`, error);
    return [];
  }
}

// Load categories and ensure we have a valid array
const categoriesList = await loadCategoriesForLanguage(lang);
const categories = Array.isArray(categoriesList) ? categoriesList : [];

/**
 * Type guard that checks if an item is a valid playable category
 * @param item - The item to check
 * @returns Boolean indicating if item is a valid playable category
 */
function isPlayableCategory(item: any): item is Category & { categoryUrl: string } {
  return (
    item &&
    typeof item === "object" &&
    item.isPlayable === true &&
    typeof item.headline === "string" &&
    typeof item.imageUrl === "string" &&
    typeof item.introSubline === "string" &&
    typeof item.slug === "string" &&
    typeof item.text === "string" &&
    typeof item.categoryUrl === "string" &&
    Boolean(item.categoryUrl)
  );
}

// Filter categories by playability status
const playableCategories = categories.filter(isPlayableCategory);
const nonPlayableCategories = categories.filter((item) => item && !item.isPlayable);

// Combined categories with playable ones first
const sortedCategories = [...playableCategories, ...nonPlayableCategories];

// Generate SEO content
const title = t("game.select");
const description = t("game.welcome");

// Enhanced SEO content using utility functions
const pageContent = `${title} ${description} ${sortedCategories.map((c) => `${c.headline} ${c.introSubline}`).join(" ")}`;

// Generate optimized meta description and keywords
const optimizedDescription = generateMetaDescription(pageContent);
const keywords = extractKeywords(pageContent) || t("meta.keywords");

// Additional structured data parameters for SEO
const pageType = "website";
const publishDate = new Date("2024-01-01");
const modifiedDate = new Date();

// Prepare fallback text for empty states
const emptyCategoriesHeadline = t("game.categories.empty.headline") || "No genres found";
const emptyCategoriesText =
  t("game.categories.empty.text") ||
  "Unfortunately, no categories were found. Please try again later.";
const noPlayableCategoriesHeadline =
  t("game.categories.no.playable.headline") || "No playable genres";
const noPlayableCategoriesText =
  t("game.categories.no.playable.text") ||
  "There are currently no playable categories. Please check back later.";
---

<Layout
  {title}
  description={optimizedDescription}
  {keywords}
  image={`/og-images/social-share-gamehome-${String(lang)}.jpg`}
  type={pageType}
  {publishDate}
  {modifiedDate}
>
  <div class="gamehome-container" id="main-content">
    <!-- Hero section with improved contrast and accessibility -->
    <section class="gamehome-hero" aria-labelledby="welcome-heading">
      <!-- Decorative background elements with aria-hidden -->
      <div class="gamehome-hero__decoration" aria-hidden="true">
        <div class="gamehome-hero__decoration-item gamehome-hero__decoration-item--top-right"></div>
        <div class="gamehome-hero__decoration-item gamehome-hero__decoration-item--bottom-left">
        </div>
        <div class="gamehome-hero__decoration-item gamehome-hero__decoration-item--center-right">
        </div>
      </div>

      <div class="gamehome-hero__content">
        <Headline title={`${t("game.welcome")}`} level="h1" className="gamehome-hero__title" />
        <div class="gamehome-hero__divider"></div>
        <Paragraph className="gamehome-hero__description">
          {t("game.select")}
        </Paragraph>
      </div>
    </section>

    <section class="genre-selection" aria-labelledby="playlist-heading">
      <Headline level="h2" title={t("game.genre.list")} className="genre-selection__title" />

      <!-- Search input with improved accessibility and styling -->
      <div class="search-container">
        <div class="search-container__icon" aria-hidden="true">
          <Icon name="search" class="search-container__icon-element" />
        </div>
        <label for="filter-input" class="sr-only">
          {t("game.search.label")}
        </label>
        <input
          class="search-container__input"
          type="search"
          id="filter-input"
          placeholder={t("game.search.label")}
          aria-label={t("game.search.label")}
          aria-controls="playlist-grid"
          aria-describedby="search-description"
          autocomplete="off"
          spellcheck="false"
        />
        <span id="search-description" class="sr-only">
          {t("game.search.description")}
        </span>
      </div>

      <!-- Genre grid with improved card styling and animations -->
      <div
        id="playlist-grid"
        class="genre-grid"
        role="list"
        aria-label={t("game.genre.list")}
        aria-live="polite"
      >
        {
          categories && categories.length > 0 ? (
            playableCategories.length > 0 ? (
              categories.map(
                (item, _index) =>
                  item.isPlayable && (
                    <li class="genre-grid__item">
                      <PlaylistItem
                        headline={item.headline}
                        subheadline={item.introSubline}
                        image={item.imageUrl}
                        imageAlt={`${t("game.genre.image")} ${item.headline}`}
                        href={`/${String(lang)}${item.categoryUrl}`}
                        isDisabled={!item.isPlayable}
                        aria-label={`${item.headline} ${t("game.genre.play.label")}`}
                      />
                      <div class="genre-grid__play-indicator" aria-hidden="true">
                        {t("category.play")} â†’
                      </div>
                    </li>
                  )
              )
            ) : (
              <div class="genre-grid__empty">
                <h3 class="genre-grid__empty-title">{noPlayableCategoriesHeadline}</h3>
                <p class="genre-grid__empty-text">{noPlayableCategoriesText}</p>
              </div>
            )
          ) : (
            <div class="genre-grid__empty">
              <h3 class="genre-grid__empty-title">{emptyCategoriesHeadline}</h3>
              <p class="genre-grid__empty-text">{emptyCategoriesText}</p>
            </div>
          )
        }
      </div>
    </section>
  </div>
</Layout>

<style>
  /* ======================================
   * GAMEHOME CONTAINER LAYOUT
   * ====================================== */

  .gamehome-container {
    width: var(--width-full);
    max-width: var(--container-xl);
    margin: 0 auto;
    padding: var(--space-lg) var(--space-md);
  }

  @media (min-width: 48em) {
    .gamehome-container {
      padding: var(--space-xl) var(--space-lg);
    }
  }

  /* ======================================
   * HERO SECTION STYLING
   * ====================================== */

  .gamehome-hero {
    position: relative;
    margin-bottom: var(--space-2xl);
    overflow: hidden;
    border-radius: var(--radius-xl);
    background: linear-gradient(
      135deg,
      var(--color-primary-800) 0%,
      var(--color-primary-900) 50%,
      var(--color-neutral-900) 100%
    );
    padding: var(--space-xl);
    box-shadow: var(--shadow-xl);
  }

  .gamehome-hero__decoration {
    position: absolute;
    inset: 0;
    opacity: 0.1;
    pointer-events: none;
  }

  .gamehome-hero__decoration-item {
    position: absolute;
    border-radius: var(--radius-full);
  }

  .gamehome-hero__decoration-item--top-right {
    top: -6rem;
    right: -5rem;
    width: 16rem;
    height: 16rem;
    background-color: var(--color-primary-500);
  }

  .gamehome-hero__decoration-item--bottom-left {
    bottom: 2.5rem;
    left: 2.5rem;
    width: 10rem;
    height: 10rem;
    background-color: var(--color-secondary-500);
  }

  .gamehome-hero__decoration-item--center-right {
    top: 50%;
    right: 25%;
    width: 8rem;
    height: 8rem;
    background-color: var(--color-primary-400);
    transform: translateY(-50%);
  }

  .gamehome-hero__content {
    position: relative;
    z-index: var(--z-fixed);
    text-align: center;
  }

  .gamehome-hero__title {
    margin-bottom: var(--space-md);
    font-size: var(--text-3xl);
    font-weight: var(--font-bold);
    color: var(--text-primary);
  }

  @media (min-width: 48em) {
    .gamehome-hero__title {
      font-size: var(--text-4xl);
    }
  }

  .gamehome-hero__divider {
    margin: var(--space-sm) auto var(--space-lg);
    width: 6rem;
    height: 4px;
    border-radius: var(--radius-full);
    background-color: var(--color-secondary-400);
  }

  .gamehome-hero__description {
    max-width: 512px;
    margin: 0 auto;
    font-size: var(--text-lg);
    line-height: var(--leading-relaxed);
    color: var(--text-secondary);
  }

  /* ======================================
   * GENRE SELECTION SECTION
   * ====================================== */

  .genre-selection {
    margin-top: var(--space-2xl);
  }

  .genre-selection__title {
    margin-bottom: var(--space-md);
    text-align: center;
    font-size: var(--text-2xl);
    font-weight: var(--font-bold);
    color: var(--text-primary);
  }

  /* ======================================
   * SEARCH CONTAINER STYLING
   * ====================================== */

  .search-container {
    position: relative;
    margin: var(--space-xl) auto;
    width: var(--width-full);
    max-width: 512px;
  }

  .search-container__icon {
    position: absolute;
    top: 50%;
    left: var(--space-md);
    transform: translateY(-50%);
    pointer-events: none;
    z-index: var(--z-dropdown);
  }

  .search-container__icon-element {
    width: var(--icon-size-md);
    height: var(--icon-size-md);
    color: var(--text-tertiary);
  }

  .search-container__input {
    width: var(--width-full);
    padding: var(--space-md) var(--space-lg) var(--space-md) var(--space-2xl);
    background-color: var(--form-bg);
    border: 2px solid var(--form-border);
    border-radius: var(--radius-lg);
    color: var(--form-text);
    font-size: var(--text-base);
    line-height: var(--leading-relaxed);
    box-shadow: var(--shadow-lg);
    transition: all var(--transition-normal);
  }

  .search-container__input::placeholder {
    color: var(--form-placeholder);
  }

  .search-container__input:focus {
    outline: none;
    border-color: var(--form-border-focus);
    box-shadow: var(--focus-ring);
  }

  .search-container__input:focus-visible {
    outline: var(--focus-outline);
    outline-offset: var(--focus-ring-offset);
  }

  /* ======================================
   * GENRE GRID LAYOUT
   * ====================================== */

  .genre-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--space-lg);
    margin: var(--space-xl) auto;
    width: var(--width-full);
    max-width: var(--container-lg);
    min-height: 200px;
  }

  @media (min-width: 20em) {
    .genre-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (min-width: 48em) {
    .genre-grid {
      grid-template-columns: repeat(3, 1fr);
      gap: var(--space-xl);
    }
  }

  @media (min-width: 64em) {
    .genre-grid {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  .genre-grid__item {
    display: block;
    height: var(--width-full);
    list-style: none;
    opacity: 0;
    animation: fadeIn var(--animation-duration-slow) ease-out forwards;
  }

  .genre-grid__play-indicator {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: var(--space-sm);
    background: linear-gradient(90deg, var(--color-primary-600) 0%, var(--color-primary-700) 100%);
    border-radius: 0 0 var(--radius-md) var(--radius-md);
    color: var(--btn-primary-text);
    font-size: var(--text-sm);
    font-weight: var(--font-medium);
    opacity: 0;
    transition: opacity var(--transition-normal);
  }

  .genre-grid__item:hover .genre-grid__play-indicator,
  .genre-grid__item:focus-within .genre-grid__play-indicator {
    opacity: 1;
  }

  /* ======================================
   * EMPTY STATE STYLING
   * ====================================== */

  .genre-grid__empty {
    grid-column: 1 / -1;
    padding: var(--space-2xl) var(--space-lg);
    background: linear-gradient(135deg, var(--bg-secondary) 0%, var(--bg-tertiary) 100%);
    border: 1px solid var(--border-primary);
    border-radius: var(--radius-lg);
    text-align: center;
    box-shadow: var(--shadow-md);
  }

  .genre-grid__empty-title {
    margin-bottom: var(--space-md);
    font-size: var(--text-xl);
    font-weight: var(--font-bold);
    color: var(--text-primary);
  }

  .genre-grid__empty-text {
    color: var(--text-secondary);
    line-height: var(--leading-relaxed);
  }

  /* ======================================
   * NO RESULTS STYLING  
   * ====================================== */

  .genre-grid__no-results {
    grid-column: 1 / -1;
    padding: var(--space-xl) var(--space-lg);
    background-color: var(--bg-secondary);
    border: 1px solid var(--border-secondary);
    border-radius: var(--radius-lg);
    text-align: center;
    color: var(--text-primary);
    font-size: var(--text-lg);
    font-weight: var(--font-medium);
  }

  /* ======================================
   * SEARCH CLEAR BUTTON
   * ====================================== */

  .search-clear-button {
    position: absolute;
    top: 50%;
    right: var(--space-md);
    transform: translateY(-50%);
    width: var(--space-lg);
    height: var(--space-lg);
    background: none;
    border: none;
    color: var(--text-tertiary);
    font-size: var(--text-lg);
    cursor: pointer;
    border-radius: var(--radius-sm);
    transition: color var(--transition-fast);
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .search-clear-button:hover {
    color: var(--text-primary);
  }

  .search-clear-button:focus-visible {
    outline: var(--focus-outline);
    outline-offset: var(--focus-ring-offset);
  }

  /* ======================================
   * ACCESSIBILITY UTILITIES
   * ====================================== */

  .sr-only {
    position: absolute;
    width: var(--sr-only-width);
    height: var(--sr-only-height);
    padding: 0;
    margin: var(--sr-only-margin);
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    clip-path: var(--sr-only-clip-path);
    white-space: nowrap;
    border-width: 0;
  }

  /* ======================================
   * ANIMATION DEFINITIONS
   * ====================================== */

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(var(--animation-y-offset));
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* ======================================
   * FOCUS AND INTERACTION STATES
   * ====================================== */

  :focus-visible {
    outline: var(--focus-outline);
    outline-offset: var(--focus-ring-offset);
    border-radius: var(--radius-sm);
  }

  .genre-grid__item:focus-within {
    transform: translateY(calc(-1 * var(--space-sm)));
  }

  .genre-grid__item a:focus-visible {
    outline-width: 4px;
  }

  /* ======================================
   * REDUCED MOTION SUPPORT
   * ====================================== */

  @media (prefers-reduced-motion: reduce) {
    .genre-grid__item {
      animation: none;
      opacity: 1;
    }

    .genre-grid__item:hover,
    .genre-grid__item:focus-within {
      transform: none;
    }

    .search-container__input,
    .genre-grid__play-indicator,
    .search-clear-button {
      transition: none;
    }

    :focus-visible {
      transition: none;
    }
  }

  /* ======================================
   * HIGH CONTRAST MODE SUPPORT
   * ====================================== */

  @media (forced-colors: active) {
    .genre-grid__item a {
      border: 2px solid ButtonText;
    }

    .search-container__input {
      border: 2px solid ButtonText;
    }

    .gamehome-hero {
      border: 2px solid ButtonText;
    }
  }

  /* ======================================
   * PRINT STYLES
   * ====================================== */

  @media print {
    .search-container {
      display: none;
    }

    .genre-grid {
      gap: var(--space-md);
    }

    .genre-grid__item {
      break-inside: avoid;
      page-break-inside: avoid;
    }

    .gamehome-hero {
      background: var(--print-bg);
      color: var(--print-text);
      border: var(--print-border);
    }
  }
</style>

<script>
  /**
   * Genre Filtering and Search System
   *
   * Provides search functionality for the genre grid using modern TypeScript
   * and performance optimizations including debouncing and DOM caching.
   */

  import { getLangFromUrl } from "@utils/i18n";

  import { ui } from "../../i18n/ui";

  // Configuration constants for the filtering system
  const CONFIG = {
    DEBOUNCE_DELAY: 250,
    SELECTOR: {
      FILTER_INPUT: "#filter-input",
      GRID: "#playlist-grid",
      LIST_ITEM: "li",
      HEADLINE: ".headline",
      NO_RESULTS: ".no-results",
    },
    KEY_CODES: {
      ESCAPE: "Escape",
      ENTER: "Enter",
    },
  } as const;

  // Load translations for the current language
  const currentLang = getLangFromUrl(new URL(window.location.href));
  const translations = {
    noResults:
      (ui[currentLang] as Record<string, string>)?.["game.no.results"] || "No results found",
    resultsCount:
      (ui[currentLang] as Record<string, string>)?.["game.results.count"] || "{count} genres found",
    clearSearch:
      (ui[currentLang] as Record<string, string>)?.["game.search.clear"] || "Clear search",
  };

  // DOM elements cache
  const elements = {
    filterInput: document.querySelector(CONFIG.SELECTOR.FILTER_INPUT) as HTMLInputElement | null,
    grid: document.querySelector(CONFIG.SELECTOR.GRID) as HTMLElement | null,
    get items(): NodeListOf<HTMLElement> {
      return (
        elements.grid?.querySelectorAll(CONFIG.SELECTOR.LIST_ITEM) || document.querySelectorAll("")
      );
    },
  };

  /**
   * Creates a debounced version of a function
   */
  function debounce<T extends unknown[]>(
    func: (...args: T) => void,
    wait: number
  ): (...args: T) => void {
    let timeout: ReturnType<typeof setTimeout> | undefined;
    return function (this: unknown, ...args: T): void {
      clearTimeout(timeout);
      timeout = setTimeout(() => func.apply(this, args), wait);
    };
  }

  // Cache for genre item text content
  const textContentCache = new WeakMap<Element, string>();

  /**
   * Announces messages to screen readers
   */
  function announceToScreenReader(message: string): void {
    let liveRegion = document.querySelector(".sr-announcements") as HTMLElement;
    if (!liveRegion) {
      liveRegion = document.createElement("div");
      liveRegion.className = "sr-announcements sr-only";
      liveRegion.setAttribute("aria-live", "polite");
      liveRegion.setAttribute("aria-atomic", "true");
      document.body.appendChild(liveRegion);
    }
    liveRegion.textContent = message;
  }

  /**
   * Initializes the genre filtering system
   */
  function initGenreFilter(): void {
    if (!elements.filterInput || !elements.grid) {
      console.warn("Filter elements not found. Genre filtering disabled.");
      return;
    }

    const debouncedFilter = debounce(filterGenres, CONFIG.DEBOUNCE_DELAY);
    elements.filterInput.addEventListener("input", debouncedFilter);
    elements.filterInput.addEventListener("keydown", handleFilterKeydown);

    addClearButton();

    const initialCount = elements.items.length;
    announceToScreenReader(translations.resultsCount.replace("{count}", initialCount.toString()));
  }

  /**
   * Adds a clear button for the search input
   */
  function addClearButton(): void {
    if (!elements.filterInput) {
      return;
    }

    const inputWrapper = elements.filterInput.parentElement;
    if (!inputWrapper) {
      return;
    }

    const clearButton = document.createElement("button");
    clearButton.className = "search-clear-button";
    clearButton.setAttribute("type", "button");
    clearButton.setAttribute("aria-label", translations.clearSearch);
    clearButton.innerHTML = "Ã—";
    clearButton.style.display = "none";

    clearButton.addEventListener("click", () => {
      if (elements.filterInput) {
        elements.filterInput.value = "";
        clearButton.style.display = "none";
        filterGenres();
        elements.filterInput.focus();
      }
    });

    elements.filterInput.addEventListener("input", () => {
      const hasValue = (elements.filterInput?.value.length || 0) > 0;
      clearButton.style.display = hasValue ? "block" : "none";
    });

    inputWrapper.appendChild(clearButton);
  }

  /**
   * Handles keyboard events on the filter input
   */
  function handleFilterKeydown(event: KeyboardEvent): void {
    if (event.key === CONFIG.KEY_CODES.ESCAPE) {
      if (elements.filterInput) {
        elements.filterInput.value = "";
        filterGenres();

        const clearButton = document.querySelector(".search-clear-button") as HTMLElement;
        if (clearButton) {
          clearButton.style.display = "none";
        }
      }
      event.preventDefault();
    } else if (event.key === CONFIG.KEY_CODES.ENTER) {
      const firstVisibleItem = Array.from(elements.items).find(
        (item) => item.style.display !== "none"
      );

      if (firstVisibleItem) {
        const firstLink = firstVisibleItem.querySelector("a") as HTMLAnchorElement;
        if (firstLink) {
          event.preventDefault();
          firstLink.focus();
        }
      }
    }
  }

  /**
   * Filters the genre items based on the search query
   */
  function filterGenres(): void {
    if (!elements.filterInput || !elements.grid) {
      return;
    }

    const query = elements.filterInput.value.toLowerCase().trim();
    let visibleCount = 0;

    elements.items.forEach((item) => {
      let itemText = textContentCache.get(item);
      if (!itemText) {
        itemText = item.querySelector(CONFIG.SELECTOR.HEADLINE)?.textContent?.toLowerCase() || "";
        textContentCache.set(item, itemText);
      }

      const isVisible = itemText.includes(query);
      item.style.display = isVisible ? "" : "none";

      if (isVisible) {
        visibleCount++;
      }
    });

    updateNoResultsMessage(visibleCount > 0);
    announceToScreenReader(translations.resultsCount.replace("{count}", visibleCount.toString()));
  }

  /**
   * Updates the UI with a "no results" message when needed
   */
  function updateNoResultsMessage(hasResults: boolean): void {
    if (!elements.grid) {
      return;
    }

    let noResultsMessage = elements.grid.querySelector(CONFIG.SELECTOR.NO_RESULTS) as HTMLElement;

    if (!hasResults) {
      if (!noResultsMessage) {
        noResultsMessage = document.createElement("p");
        noResultsMessage.className = "genre-grid__no-results no-results";
        noResultsMessage.setAttribute("role", "status");
        noResultsMessage.setAttribute("aria-live", "polite");
        noResultsMessage.textContent = translations.noResults;
        elements.grid.appendChild(noResultsMessage);
      }
    } else {
      noResultsMessage?.remove();
    }
  }

  // Initialize when DOM is ready
  document.addEventListener("DOMContentLoaded", initGenreFilter);
  if (document.readyState !== "loading") {
    initGenreFilter();
  }
</script>
