---
/**
 * User Profile Page
 *
 * This page displays the user profile with personal information,
 * game statistics, and recent game results.
 *
 * Features:
 * - Display of user information (name, email, creation date)
 * - Statistics for quiz and chronology game modes
 * - List of recent game results
 * - Responsive design with CSS custom properties
 * - WCAG AAA 2.2 compliant design system
 *
 * URL: /[lang]/profile
 */
import Layout from "@layouts/Layout.astro";
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import { Icon } from "astro-icon/components";
import { formatDate } from "@utils/dateUtils";
import { checkAuth } from "src/middleware/auth";

// Disable prerendering since this page requires authentication and cookies
export const prerender = false;

/**
 * Generate static paths for all supported languages
 * Required for Astro dynamic routes to work properly
 */
export const getStaticPaths = async () => {
  const supportedLanguages = [
    "de",
    "en",
    "es",
    "fr",
    "it",
    "pt",
    "da",
    "nl",
    "sv",
    "fi",
    "cn",
    "ru",
    "jp",
    "uk",
  ] as const;

  return supportedLanguages.map((lang) => ({
    params: { lang },
  }));
};

// Interface for user profile data
interface UserProfile {
  user: {
    username: string;
    email: string;
    createdAt: string;
  };
  stats: {
    quiz: {
      totalScore: number;
      gamesPlayed: number;
      highestScore: number;
    };
    chronology: {
      totalScore: number;
      gamesPlayed: number;
      highestScore: number;
    };
  };
  recentGames: Array<{
    gameMode: "quiz" | "chronology";
    score: number;
    category: string;
    difficulty: "easy" | "medium" | "hard";
    createdAt: string;
  }>;
}

// Get language from URL and initialize translations
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(String(lang));

// Auth check: Check if the user is logged in (optional - no redirect)
const authResult = await checkAuth(Astro.request);

// Default values for user data
let profileData: UserProfile | null = null;
let isLoading = true;
let error: string | null = null;

// Show login prompt if not authenticated, but don't redirect
if (!authResult.authenticated) {
  isLoading = false;
  // User will see a login prompt in the HTML instead of being redirected
} else {
  // Fetch user data from API endpoint only if authenticated
  try {
    // No need to pass userId - the API will get it from the JWT token
    const response = await fetch(`${Astro.url.origin}/${String(lang)}/api/user/profile`, {
      headers: {
        "Content-Type": "application/json",
        Cookie: Astro.request.headers.get("cookie") || "", // Forward cookies for auth
      },
      credentials: "include", // Important: Send cookies
    });

    const data = await response.json();

    if (data.success) {
      profileData = data.profile;
    } else {
      error = data.error || t("profile.error");
    }
  } catch (err) {
    console.error("Error fetching profile data:", err);
    error = t("profile.error");
  } finally {
    isLoading = false;
  }
}

// Format the date for display using modern arrow function
const formatUserDate = (dateString: string): string => {
  try {
    return formatDate(dateString, String(lang));
  } catch {
    return dateString;
  }
};

// Game mode names for display using object destructuring
const gameModeNames = {
  quiz: t("profile.stats.quiz"),
  chronology: t("profile.stats.chronology"),
} as const;

// Difficulty level names for display using object destructuring
const difficultyNames = {
  easy: t("difficulty.easy"),
  medium: t("difficulty.medium"),
  hard: t("difficulty.hard"),
} as const;
---

<Layout title={t("profile.title")} description={t("profile.description")} type="website">
  <div class="profile">
    <h1 class="profile__title">{t("profile.title")}</h1>

    {
      !authResult.authenticated && (
        <div class="profile__login-prompt" role="alert">
          <div class="profile__login-content">
            <Icon name="user-lock" class="profile__login-icon" aria-hidden="true" />
            <h2 class="profile__login-title">{t("profile.auth.required.title")}</h2>
            <p class="profile__login-message">{t("profile.auth.required.message")}</p>
            <div class="profile__login-actions">
              <a
                href={`/${lang}/auth/login?redirect=${encodeURIComponent(Astro.url.pathname)}`}
                class="profile__login-button"
              >
                {t("profile.auth.login")}
              </a>
            </div>
          </div>
        </div>
      )
    }

    {
      isLoading && authResult.authenticated && (
        <div class="profile__loading" aria-live="polite">
          <div class="profile__loading-content">
            <Icon name="loader" class="profile__loading-icon" aria-hidden="true" />
            <p class="profile__loading-text">{t("profile.loading")}</p>
          </div>
        </div>
      )
    }

    {
      error && authResult.authenticated && (
        <div class="profile__error" role="alert">
          <p class="profile__error-message">{error}</p>
          <p class="profile__error-help">{t("profile.auth.required")}</p>
        </div>
      )
    }

    {
      profileData && (
        <div class="profile__content">
          <section class="profile-card" aria-labelledby="user-info-heading">
            <h2 id="user-info-heading" class="profile-card__title">
              {t("profile.user.info")}
            </h2>

            <div class="profile-card__user-info">
              <dl class="profile-card__user-details">
                <div class="profile-card__user-item">
                  <Icon name="user" class="profile-card__icon" aria-hidden="true" />
                  <div class="profile-card__user-text">
                    <dt class="profile-card__label">{t("profile.user.username")}</dt>
                    <dd class="profile-card__value">{profileData.user.username}</dd>
                  </div>
                </div>

                <div class="profile-card__user-item">
                  <Icon name="mail" class="profile-card__icon" aria-hidden="true" />
                  <div class="profile-card__user-text">
                    <dt class="profile-card__label">{t("profile.user.email")}</dt>
                    <dd class="profile-card__value">{profileData.user.email}</dd>
                  </div>
                </div>

                <div class="profile-card__user-item">
                  <Icon name="calendar" class="profile-card__icon" aria-hidden="true" />
                  <div class="profile-card__user-text">
                    <dt class="profile-card__label">{t("profile.user.member_since")}</dt>
                    <dd class="profile-card__value">
                      {formatUserDate(profileData.user.createdAt)}
                    </dd>
                  </div>
                </div>
              </dl>
            </div>
          </section>

          <section class="profile-card" aria-labelledby="stats-heading">
            <h2 id="stats-heading" class="profile-card__title">
              {t("profile.stats.title")}
            </h2>

            <div class="profile-card__stats">
              <div class="stats-grid">
                <div class="stat-card">
                  <h3 class="stat-card__title">{gameModeNames.quiz}</h3>
                  <dl class="stat-card__list">
                    <div class="stat-card__item">
                      <dt class="stat-card__label">{t("profile.stats.games_played")}</dt>
                      <dd class="stat-card__value">{profileData.stats.quiz.gamesPlayed}</dd>
                    </div>
                    <div class="stat-card__item">
                      <dt class="stat-card__label">{t("profile.stats.total_score")}</dt>
                      <dd class="stat-card__value">{profileData.stats.quiz.totalScore}</dd>
                    </div>
                    <div class="stat-card__item">
                      <dt class="stat-card__label">{t("profile.stats.highest_score")}</dt>
                      <dd class="stat-card__value">{profileData.stats.quiz.highestScore}</dd>
                    </div>
                  </dl>
                </div>

                <div class="stat-card">
                  <h3 class="stat-card__title">{gameModeNames.chronology}</h3>
                  <dl class="stat-card__list">
                    <div class="stat-card__item">
                      <dt class="stat-card__label">{t("profile.stats.games_played")}</dt>
                      <dd class="stat-card__value">{profileData.stats.chronology.gamesPlayed}</dd>
                    </div>
                    <div class="stat-card__item">
                      <dt class="stat-card__label">{t("profile.stats.total_score")}</dt>
                      <dd class="stat-card__value">{profileData.stats.chronology.totalScore}</dd>
                    </div>
                    <div class="stat-card__item">
                      <dt class="stat-card__label">{t("profile.stats.highest_score")}</dt>
                      <dd class="stat-card__value">{profileData.stats.chronology.highestScore}</dd>
                    </div>
                  </dl>
                </div>
              </div>
            </div>
          </section>

          <section class="profile-card" aria-labelledby="recent-games-heading">
            <h2 id="recent-games-heading" class="profile-card__title">
              {t("profile.recent_games.title")}
            </h2>

            {profileData.recentGames.length === 0 ? (
              <div class="profile-card__empty">
                <Icon name="gamepad" class="profile-card__empty-icon" aria-hidden="true" />
                <p class="profile-card__empty-text">{t("profile.recent_games.empty")}</p>
              </div>
            ) : (
              <div class="recent-games">
                <ul class="recent-games__list">
                  {profileData.recentGames.map((game) => (
                    <li class="recent-game">
                      <div class="recent-game__header">
                        <div class="recent-game__mode">
                          <Icon
                            name={game.gameMode === "quiz" ? "brain" : "clock"}
                            class="recent-game__icon"
                            aria-hidden="true"
                          />
                          <span class="recent-game__mode-text">{gameModeNames[game.gameMode]}</span>
                        </div>
                        <div class="recent-game__score">
                          <span class="recent-game__score-value">{game.score}</span>
                          <span class="recent-game__score-label">
                            {t("profile.recent_games.points")}
                          </span>
                        </div>
                      </div>
                      <div class="recent-game__details">
                        <span class="recent-game__category">{game.category}</span>
                        <span
                          class={`recent-game__difficulty recent-game__difficulty--${game.difficulty}`}
                        >
                          {difficultyNames[game.difficulty]}
                        </span>
                        <time class="recent-game__date" datetime={game.createdAt}>
                          {formatUserDate(game.createdAt)}
                        </time>
                      </div>
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </section>
        </div>
      )
    }
  </div>
</Layout>

<style lang="scss">
  /* ===========================================
   * PROFILE PAGE STYLES - WCAG AAA COMPLIANT
   * Using CSS custom properties from global.css
   * SCSS with modern responsive design
   * =========================================== */

  // Profile Container
  .profile {
    max-width: var(--container-xl);
    margin: 0 auto;
    padding: var(--space-md);

    &__title {
      font-size: var(--text-4xl);
      font-weight: var(--font-bold);
      color: var(--text-primary);
      text-align: center;
      margin-bottom: var(--space-3xl);
      line-height: var(--leading-enhanced);
    }

    // ===========================================
    // LOGIN PROMPT
    // ===========================================

    &__login-prompt {
      background: var(--card-bg);
      border: var(--border-width-thin) solid var(--card-border);
      border-radius: var(--radius-lg);
      padding: var(--space-2xl);
      margin-bottom: var(--space-xl);
      box-shadow: var(--card-shadow);

      .profile__login-content {
        text-align: center;
      }

      .profile__login-icon {
        width: var(--icon-size-xl);
        height: var(--icon-size-xl);
        margin: 0 auto var(--space-lg);
        color: var(--interactive-primary);
      }

      .profile__login-title {
        font-size: var(--text-2xl);
        font-weight: var(--font-bold);
        color: var(--text-primary);
        margin-bottom: var(--space-md);
        line-height: var(--leading-enhanced);
      }

      .profile__login-message {
        font-size: var(--text-lg);
        color: var(--text-secondary);
        margin-bottom: var(--space-xl);
        line-height: var(--leading-enhanced);
      }

      .profile__login-button {
        display: inline-block;
        background: var(--btn-primary-bg);
        color: var(--btn-primary-text);
        padding: var(--space-md) var(--space-xl);
        border-radius: var(--radius-md);
        text-decoration: none;
        font-weight: var(--font-semibold);
        transition: all var(--transition-normal);
        border: none;
        cursor: pointer;

        &:hover {
          background: var(--btn-primary-hover);
          transform: translateY(calc(-1 * var(--space-xs)));
        }

        &:focus {
          outline: var(--focus-outline);
          outline-offset: var(--focus-ring-offset);
        }
      }
    }

    // ===========================================
    // LOADING STATE
    // ===========================================

    &__loading {
      display: flex;
      align-items: center;
      justify-content: center;
      min-height: 18.75rem;
      color: var(--text-secondary);

      &-content {
        text-align: center;
      }

      &-icon {
        width: var(--icon-size-xl);
        height: var(--icon-size-xl);
        margin: 0 auto var(--space-md);
        color: var(--interactive-primary);
        animation: profile-spin var(--animation-duration-slow) linear infinite;
      }

      &-text {
        font-size: var(--text-lg);
        color: var(--text-secondary);
        line-height: var(--leading-enhanced);
      }
    }

    // ===========================================
    // ERROR STATE
    // ===========================================

    &__error {
      background-color: var(--bg-error-aaa);
      border: var(--border-width-thick) solid var(--border-error);
      border-radius: var(--radius-lg);
      padding: var(--space-lg);
      margin-bottom: var(--space-xl);
      color: var(--text-error-aaa);

      &-message {
        font-weight: var(--font-semibold);
        font-size: var(--text-lg);
        margin-bottom: var(--space-sm);
        line-height: var(--leading-enhanced);
      }

      &-help {
        font-size: var(--text-base);
        color: var(--text-error-aaa);
        line-height: var(--leading-enhanced);
      }
    }

    // ===========================================
    // PROFILE CONTENT
    // ===========================================

    &__content {
      display: flex;
      flex-direction: column;
      gap: var(--space-3xl);
    }
  }

  // ===========================================
  // PROFILE CARDS
  // ===========================================

  .profile-card {
    background-color: var(--card-bg);
    border: var(--border-width-thin) solid var(--card-border);
    border-radius: var(--radius-lg);
    padding: var(--space-2xl);
    box-shadow: var(--card-shadow);
    transition: box-shadow var(--transition-normal);

    &:focus-within {
      box-shadow: var(--card-shadow-hover);
      outline: var(--focus-outline);
      outline-offset: var(--focus-ring-offset);
    }

    &__title {
      font-size: var(--text-3xl);
      font-weight: var(--font-bold);
      color: var(--text-primary);
      margin-bottom: var(--space-xl);
      line-height: var(--leading-enhanced);
    }

    // ===========================================
    // USER INFO SECTION
    // ===========================================

    &__user-details {
      display: flex;
      flex-direction: column;
      gap: var(--space-lg);
    }

    &__user-item {
      display: flex;
      align-items: flex-start;
      gap: var(--space-md);
      padding: var(--space-md);
      background-color: var(--bg-tertiary);
      border: var(--border-width-thin) solid var(--border-secondary);
      border-radius: var(--radius-md);
    }

    &__icon {
      color: var(--interactive-primary);
      flex-shrink: 0;
      margin-top: var(--space-xs);
      width: var(--icon-size-md);
      height: var(--icon-size-md);
    }

    &__user-text {
      flex: 1;
    }

    &__label {
      display: block;
      font-size: var(--text-sm);
      font-weight: var(--font-medium);
      color: var(--text-secondary);
      margin-bottom: var(--space-xs);
    }

    &__value {
      display: block;
      font-size: var(--text-lg);
      font-weight: var(--font-semibold);
      color: var(--text-primary);
    }

    // ===========================================
    // EMPTY STATE
    // ===========================================

    &__empty {
      text-align: center;
      padding: var(--space-3xl);
      color: var(--text-tertiary);

      &-icon {
        margin: 0 auto var(--space-lg);
        color: var(--text-tertiary);
        width: var(--icon-size-xl);
        height: var(--icon-size-xl);
      }

      &-text {
        font-size: var(--text-lg);
        line-height: var(--leading-enhanced);
      }
    }
  }

  // ===========================================
  // STATS SECTION
  // ===========================================

  .stats-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--space-xl);
  }

  .stat-card {
    padding: var(--space-xl);
    background-color: var(--bg-tertiary);
    border: var(--border-width-thin) solid var(--border-secondary);
    border-radius: var(--radius-md);

    &__title {
      font-size: var(--text-2xl);
      font-weight: var(--font-bold);
      color: var(--text-primary);
      margin-bottom: var(--space-lg);
      line-height: var(--leading-enhanced);
    }

    &__list {
      display: flex;
      flex-direction: column;
      gap: var(--space-md);
    }

    &__item {
      padding: var(--space-md);
      background-color: var(--bg-secondary);
      border-radius: var(--radius-sm);
      border: var(--border-width-thin) solid var(--border-primary);
    }

    &__label {
      font-size: var(--text-base);
      color: var(--text-secondary);
      font-weight: var(--font-medium);
      display: block;
      margin-bottom: var(--space-xs);
    }

    &__value {
      font-size: var(--text-xl);
      font-weight: var(--font-bold);
      color: var(--text-primary);
      display: block;
    }
  }

  // ===========================================
  // RECENT GAMES SECTION
  // ===========================================

  .recent-games {
    &__list {
      display: flex;
      flex-direction: column;
      gap: var(--space-lg);
      list-style: none;
      padding: 0;
    }
  }

  .recent-game {
    padding: var(--space-lg);
    background-color: var(--bg-tertiary);
    border: var(--border-width-thin) solid var(--border-secondary);
    border-radius: var(--radius-md);
    transition: all var(--transition-normal);

    &:hover {
      border-color: var(--border-focus);
      transform: translateY(calc(-1 * var(--space-xs)));
    }

    &:focus-within {
      outline: var(--focus-outline);
      outline-offset: var(--focus-ring-offset);
    }

    &__header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: var(--space-md);
    }

    &__mode {
      display: flex;
      align-items: center;
      gap: var(--space-sm);

      &-text {
        font-size: var(--text-lg);
        font-weight: var(--font-semibold);
        color: var(--text-primary);
      }
    }

    &__icon {
      color: var(--interactive-primary);
      width: var(--icon-size-md);
      height: var(--icon-size-md);
    }

    &__score {
      text-align: right;

      &-value {
        display: block;
        font-size: var(--text-2xl);
        font-weight: var(--font-bold);
        color: var(--interactive-primary);
        line-height: var(--leading-tight);
      }

      &-label {
        font-size: var(--text-sm);
        color: var(--text-secondary);
        line-height: var(--leading-enhanced);
      }
    }

    &__details {
      display: flex;
      flex-wrap: wrap;
      gap: var(--space-lg);
      font-size: var(--text-base);
      color: var(--text-secondary);
      line-height: var(--leading-enhanced);
    }

    &__category {
      font-weight: var(--font-medium);
      color: var(--text-primary);
    }

    &__difficulty {
      padding: var(--space-xs) var(--space-sm);
      border-radius: var(--radius-sm);
      font-size: var(--text-sm);
      font-weight: var(--font-medium);
      text-transform: capitalize;

      &--easy {
        background-color: var(--bg-success-aaa);
        color: var(--text-success-aaa);
      }

      &--medium {
        background-color: var(--bg-warning-aaa);
        color: var(--text-warning-aaa);
      }

      &--hard {
        background-color: var(--bg-error-aaa);
        color: var(--text-error-aaa);
      }
    }

    &__date {
      color: var(--text-tertiary);
      font-size: var(--text-sm);
    }
  }

  // ===========================================
  // ANIMATIONS
  // ===========================================

  @keyframes profile-spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  // ===========================================
  // RESPONSIVE DESIGN
  // ===========================================

  @media (min-width: var(--breakpoint-sm)) {
    .profile {
      padding: var(--space-lg);
    }

    .profile-card {
      padding: var(--space-3xl);
    }
  }

  @media (min-width: var(--breakpoint-md)) {
    .profile {
      padding: var(--space-xl);
    }

    .stats-grid {
      grid-template-columns: repeat(2, 1fr);
    }

    .recent-game__details {
      justify-content: space-between;
    }
  }

  @media (min-width: var(--breakpoint-lg)) {
    .profile {
      padding: var(--space-2xl);
    }

    .profile-card {
      padding: var(--space-3xl);
    }
  }

  @media (min-width: var(--breakpoint-xl)) {
    .profile {
      padding: var(--space-3xl);
    }
  }

  // ===========================================
  // ACCESSIBILITY ENHANCEMENTS
  // ===========================================

  @media (prefers-reduced-motion: reduce) {
    .profile__loading-icon {
      animation: none;
    }

    .stat-card,
    .recent-game,
    .profile-card__user-item {
      transition: none;
    }

    .recent-game:hover {
      transform: none;
    }
  }

  @media (prefers-contrast: high) {
    .profile-card {
      border-width: var(--border-width-enhanced);
    }

    .stat-card,
    .recent-game,
    .profile-card__user-item {
      border-width: var(--border-width-thick);
    }
  }

  // ===========================================
  // PRINT STYLES
  // ===========================================

  @media print {
    .profile {
      max-width: none;
      padding: 0;
    }

    .profile-card {
      break-inside: avoid;
      box-shadow: none;
      border: var(--print-border);
    }

    .recent-game {
      break-inside: avoid;
    }
  }
</style>

<script>
  /**
   * Profile Page Client-Side Enhancements
   * Modern ES6+ features with TypeScript-like structure
   */

  // Utility functions using modern ES6+ features

  // Utility functions using modern ES6+ features
  const formatNumber = (num: number): string => {
    return new Intl.NumberFormat().format(num);
  };

  const formatDate = (dateString: string): string => {
    return new Intl.DateTimeFormat(navigator.language, {
      year: "numeric",
      month: "long",
      day: "numeric",
    }).format(new Date(dateString));
  };

  // Enhanced accessibility utilities
  const announceToScreenReader = (message: string): void => {
    const announcement = document.createElement("div");
    announcement.setAttribute("aria-live", "polite");
    announcement.setAttribute("aria-atomic", "true");
    announcement.className = "sr-only";
    announcement.textContent = message;

    document.body.appendChild(announcement);

    // Clean up after announcement
    setTimeout(() => {
      document.body.removeChild(announcement);
    }, 1000);
  };

  // Profile page enhancements
  const enhanceProfilePage = (): void => {
    // Add loading states for better UX
    const loadingElements = document.querySelectorAll(".profile__loading");
    loadingElements.forEach((element) => {
      element.setAttribute("aria-live", "polite");
    });

    // Enhance recent games with better accessibility
    const recentGames = document.querySelectorAll(".recent-game");
    recentGames.forEach((game, _index) => {
      const gameElement = game as HTMLElement;

      // Add keyboard navigation
      gameElement.setAttribute("tabindex", "0");
      gameElement.setAttribute("role", "button");

      // Add click handler for better interaction
      gameElement.addEventListener("click", () => {
        const scoreElement = gameElement.querySelector(".recent-game__score-value");
        const score = scoreElement?.textContent || "0";
        announceToScreenReader(`Game score: ${score} points`);
      });

      // Add keyboard support
      gameElement.addEventListener("keydown", (event) => {
        if (event.key === "Enter" || event.key === " ") {
          event.preventDefault();
          gameElement.click();
        }
      });
    });

    // Enhance stats cards with animations
    const statCards = document.querySelectorAll(".stat-card");
    const observerOptions = {
      threshold: 0.1,
      rootMargin: "0px 0px -50px 0px",
    };

    const statsObserver = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add("stat-card--visible");
        }
      });
    }, observerOptions);

    statCards.forEach((card) => {
      statsObserver.observe(card);
    });
  };

  // Initialize when DOM is ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", enhanceProfilePage);
  } else {
    enhanceProfilePage();
  }

  // Export for potential external use
  (window as Window & { profileEnhancements?: any }).profileEnhancements = {
    enhanceProfilePage,
    formatNumber,
    formatDate,
    announceToScreenReader,
  };
</script>
