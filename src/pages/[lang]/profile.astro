---
/**
 * User Profile Page
 *
 * This page displays the user profile with personal information,
 * game statistics, and recent game results.
 *
 * Features:
 * - Display of user information (name, email, creation date)
 * - Statistics for quiz and chronology game modes
 * - List of recent game results
 * - Responsive design with CSS custom properties
 * - WCAG AAA 2.2 compliant design system
 *
 * URL: /[lang]/profile
 */
import Layout from "@layouts/Layout.astro";
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import { Icon } from "astro-icon/components";
import { formatDate } from "@utils/dateUtils";
import AuthForm from "@components/auth/AuthForm.astro";

// Enable prerendering - we'll handle auth client-side like category.astro
export const prerender = true;

/**
 * Generate static paths for all supported languages
 * Required for Astro dynamic routes to work properly
 */
export const getStaticPaths = async () => {
  const supportedLanguages = [
    "de",
    "en",
    "es",
    "fr",
    "it",
    "pt",
    "da",
    "nl",
    "sv",
    "fi",
    "cn",
    "ru",
    "jp",
    "uk",
  ] as const;

  return supportedLanguages.map((lang) => ({
    params: { lang },
  }));
};

// Interface for user profile data
interface UserProfile {
  user: {
    username: string;
    email: string;
    createdAt: string;
  };
  stats: {
    quiz: {
      totalScore: number;
      gamesPlayed: number;
      highestScore: number;
    };
    chronology: {
      totalScore: number;
      gamesPlayed: number;
      highestScore: number;
    };
  };
  recentGames: Array<{
    gameMode: "quiz" | "chronology";
    score: number;
    category: string;
    difficulty: "easy" | "medium" | "hard";
    language: string;
    createdAt: string;
  }>;
}

// Get language from URL and initialize translations
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(String(lang));

// Static page - no server-side auth check, will be handled client-side
const profileData: UserProfile | null = null;
const isLoading = false;
const error: string | null = null;
const authResult = { authenticated: false }; // Will be updated by client-side script

// Format the date for display using modern arrow function
const formatUserDate = (dateString: string): string => {
  try {
    return formatDate(dateString, String(lang));
  } catch {
    return dateString;
  }
};

// Game mode names for display using object destructuring
const gameModeNames = {
  quiz: t("profile.stats.quiz"),
  chronology: t("profile.stats.chronology"),
} as const;

// Difficulty level names for display using object destructuring
const difficultyNames = {
  easy: t("difficulty.easy"),
  medium: t("difficulty.medium"),
  hard: t("difficulty.hard"),
} as const;

// Language names for display
const languageNames = {
  de: "Deutsch",
  en: "English",
  es: "Español",
  fr: "Français",
  it: "Italiano",
  pt: "Português",
  da: "Dansk",
  nl: "Nederlands",
  sv: "Svenska",
  fi: "Suomi",
  cn: "中文",
  ru: "Русский",
  jp: "日本語",
  uk: "Українська",
} as const;
---

<Layout title={t("profile.title")} description={t("profile.description")} type="website">
  <div class="profile">
    <h1 class="profile__title">{t("profile.title")}</h1>

    {
      !authResult.authenticated && (
        <div class="profile__login-prompt" role="alert">
          <div class="profile__login-content">
            <Icon name="user-lock" class="profile__login-icon" aria-hidden="true" />
            <h2 class="profile__login-title">{t("profile.auth.required.title")}</h2>
            <p class="profile__login-message">{t("profile.auth.required.message")}</p>
            <div class="profile__login-actions">
              <AuthForm initialMode="login" />
            </div>
          </div>
        </div>
      )
    }

    {
      isLoading && authResult.authenticated && (
        <div class="profile__loading" aria-live="polite">
          <div class="profile__loading-content">
            <Icon name="loader" class="profile__loading-icon" aria-hidden="true" />
            <p class="profile__loading-text">{t("profile.loading")}</p>
          </div>
        </div>
      )
    }

    {
      error && authResult.authenticated && (
        <div class="profile__error" role="alert">
          <p class="profile__error-message">{error}</p>
          <p class="profile__error-help">{t("profile.auth.required")}</p>
        </div>
      )
    }

    {
      profileData &&
        (() => {
          // Type assertion to help TypeScript understand profileData is not null here
          const profile = profileData as UserProfile;
          return (
            <div class="profile__content">
              <section class="profile-card" aria-labelledby="user-info-heading">
                <h2 id="user-info-heading" class="profile-card__title">
                  {t("profile.user.info")}
                </h2>

                <div class="profile-card__user-info">
                  <dl class="profile-card__user-details">
                    <div class="profile-card__user-item">
                      <Icon name="user" class="profile-card__icon" aria-hidden="true" />
                      <div class="profile-card__user-text">
                        <dt class="profile-card__label">{t("profile.user.username")}</dt>
                        <dd class="profile-card__value">{profile.user.username}</dd>
                      </div>
                    </div>

                    <div class="profile-card__user-item">
                      <Icon name="mail" class="profile-card__icon" aria-hidden="true" />
                      <div class="profile-card__user-text">
                        <dt class="profile-card__label">{t("profile.user.email")}</dt>
                        <dd class="profile-card__value">{profile.user.email}</dd>
                      </div>
                    </div>

                    <div class="profile-card__user-item">
                      <Icon name="calendar" class="profile-card__icon" aria-hidden="true" />
                      <div class="profile-card__user-text">
                        <dt class="profile-card__label">{t("profile.user.member_since")}</dt>
                        <dd class="profile-card__value">
                          {formatUserDate(profile.user.createdAt)}
                        </dd>
                      </div>
                    </div>
                  </dl>
                </div>
              </section>

              <section class="profile-card" aria-labelledby="stats-heading">
                <h2 id="stats-heading" class="profile-card__title">
                  {t("profile.stats.title")}
                </h2>

                <div class="profile-card__stats">
                  <div class="stats-grid">
                    <div class="stat-card">
                      <h3 class="stat-card__title">{gameModeNames.quiz}</h3>
                      <dl class="stat-card__list">
                        <div class="stat-card__item">
                          <dt class="stat-card__label">{t("profile.stats.games_played")}</dt>
                          <dd class="stat-card__value">{profile.stats.quiz.gamesPlayed}</dd>
                        </div>
                        <div class="stat-card__item">
                          <dt class="stat-card__label">{t("profile.stats.total_score")}</dt>
                          <dd class="stat-card__value">{profile.stats.quiz.totalScore}</dd>
                        </div>
                        <div class="stat-card__item">
                          <dt class="stat-card__label">{t("profile.stats.highest_score")}</dt>
                          <dd class="stat-card__value">{profile.stats.quiz.highestScore}</dd>
                        </div>
                      </dl>
                    </div>

                    <div class="stat-card">
                      <h3 class="stat-card__title">{gameModeNames.chronology}</h3>
                      <dl class="stat-card__list">
                        <div class="stat-card__item">
                          <dt class="stat-card__label">{t("profile.stats.games_played")}</dt>
                          <dd class="stat-card__value">{profile.stats.chronology.gamesPlayed}</dd>
                        </div>
                        <div class="stat-card__item">
                          <dt class="stat-card__label">{t("profile.stats.total_score")}</dt>
                          <dd class="stat-card__value">{profile.stats.chronology.totalScore}</dd>
                        </div>
                        <div class="stat-card__item">
                          <dt class="stat-card__label">{t("profile.stats.highest_score")}</dt>
                          <dd class="stat-card__value">{profile.stats.chronology.highestScore}</dd>
                        </div>
                      </dl>
                    </div>
                  </div>
                </div>
              </section>

              <section class="profile-card" aria-labelledby="recent-games-heading">
                <h2 id="recent-games-heading" class="profile-card__title">
                  {t("profile.recent_games.title")}
                </h2>

                {profile.recentGames.length === 0 ? (
                  <div class="profile-card__empty">
                    <Icon name="gamepad" class="profile-card__empty-icon" aria-hidden="true" />
                    <p class="profile-card__empty-text">{t("profile.recent_games.empty")}</p>
                  </div>
                ) : (
                  <div class="recent-games">
                    <ul class="recent-games__list">
                      {profile.recentGames.map((game) => (
                        <li class="recent-game">
                          <div class="recent-game__header">
                            <div class="recent-game__mode">
                              <Icon
                                name={game.gameMode === "quiz" ? "brain" : "clock"}
                                class="recent-game__icon"
                                aria-hidden="true"
                              />
                              <span class="recent-game__mode-text">
                                {gameModeNames[game.gameMode]}
                              </span>
                            </div>
                            <div class="recent-game__score">
                              <span class="recent-game__score-value">{game.score}</span>
                              <span class="recent-game__score-label">
                                {t("profile.recent_games.points")}
                              </span>
                            </div>
                          </div>
                          <div class="recent-game__details">
                            <span class="recent-game__category">{game.category}</span>
                            <span
                              class={`recent-game__difficulty recent-game__difficulty--${game.difficulty}`}
                            >
                              {difficultyNames[game.difficulty]}
                            </span>
                            <span class="recent-game__language">
                              <Icon
                                name="globe"
                                class="recent-game__language-icon"
                                aria-hidden="true"
                              />
                              {languageNames[game.language as keyof typeof languageNames] ||
                                game.language}
                            </span>
                            <time class="recent-game__date" datetime={game.createdAt}>
                              {formatUserDate(game.createdAt)}
                            </time>
                          </div>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
              </section>
            </div>
          );
        })()
    }
  </div>
</Layout>

<style lang="scss" is:global>
  /* ===========================================
   * PROFILE PAGE STYLES - OPTIMIZED FOR STYLE GUARDIAN
   * BEM Methodology + Global Variables + Mobile-First
   * =========================================== */

  .profile {
    max-width: var(--container-xl);
    margin: 0 auto;
    padding: var(--space-xs); // Mobile: minimal horizontal spacing
    contain: layout style paint;

    @media (min-width: 20em) {
      padding: var(--space-sm);
    }

    @media (min-width: 48em) {
      padding: var(--space-md);
    }

    @media (min-width: 64em) {
      padding: var(--space-lg);
    }

    @media (min-width: 80em) {
      padding: var(--space-xl);
    }

    &__title {
      font-size: var(--text-2xl);
      font-weight: var(--font-bold);
      color: var(--text-primary);
      text-align: center;
      margin-bottom: var(--space-xl);
      line-height: var(--leading-tight);
      contain: layout style;

      @media (min-width: 48em) {
        font-size: var(--text-3xl);
        margin-bottom: var(--space-2xl);
      }

      @media (min-width: 64em) {
        font-size: var(--text-4xl);
        margin-bottom: var(--space-3xl);
      }
    }

    /* ===========================================
     * LOGIN PROMPT
     * =========================================== */
    &__login-prompt {
      background: var(--card-bg);
      border: var(--border-width-thin) solid var(--card-border);
      border-radius: var(--radius-lg);
      padding: var(--space-lg);
      margin-bottom: var(--space-lg);
      box-shadow: var(--card-shadow);
      contain: layout style paint;

      @media (min-width: 48em) {
        padding: var(--space-xl);
        margin-bottom: var(--space-xl);
      }

      @media (min-width: 64em) {
        padding: var(--space-2xl);
      }

      .profile__login-content {
        text-align: center;
        contain: layout style;
      }

      .profile__login-icon {
        width: var(--icon-size-lg);
        height: var(--icon-size-lg);
        margin: 0 auto var(--space-md);
        color: var(--interactive-primary);
        contain: layout style paint;

        @media (min-width: 48em) {
          width: var(--icon-size-xl);
          height: var(--icon-size-xl);
          margin-bottom: var(--space-lg);
        }
      }

      .profile__login-title {
        font-size: var(--text-xl);
        font-weight: var(--font-bold);
        color: var(--text-primary);
        margin-bottom: var(--space-sm);
        line-height: var(--leading-tight);
        contain: layout style;

        @media (min-width: 48em) {
          font-size: var(--text-2xl);
          margin-bottom: var(--space-md);
        }
      }

      .profile__login-message {
        font-size: var(--text-base);
        color: var(--text-secondary);
        margin-bottom: var(--space-lg);
        line-height: var(--leading-relaxed);
        contain: layout style;

        @media (min-width: 48em) {
          font-size: var(--text-lg);
          margin-bottom: var(--space-xl);
        }
      }

      .profile__login-button {
        display: inline-block;
        background: var(--btn-primary-bg);
        color: var(--btn-primary-text);
        padding: var(--space-sm) var(--space-lg);
        border-radius: var(--radius-md);
        text-decoration: none;
        font-weight: var(--font-semibold);
        transition: all var(--transition-base);
        border: none;
        cursor: pointer;
        contain: layout style paint;

        @media (min-width: 48em) {
          padding: var(--space-md) var(--space-xl);
        }

        &:hover {
          background: var(--btn-primary-hover);
          transform: translateY(calc(-1 * var(--space-xs)));
        }

        &:focus {
          outline: var(--focus-ring);
          outline-offset: var(--focus-ring-offset);
        }
      }
    }

    /* ===========================================
     * LOADING STATE
     * =========================================== */
    &__loading {
      display: flex;
      align-items: center;
      justify-content: center;
      min-height: 18.75rem;
      color: var(--text-secondary);
      contain: layout style paint;

      &-content {
        text-align: center;
        contain: layout style;
      }

      &-icon {
        width: var(--icon-size-lg);
        height: var(--icon-size-lg);
        margin: 0 auto var(--space-sm);
        color: var(--interactive-primary);
        animation: profile-spin var(--animation-duration-slow) linear infinite;
        contain: layout style paint;

        @media (min-width: 48em) {
          width: var(--icon-size-xl);
          height: var(--icon-size-xl);
          margin-bottom: var(--space-md);
        }
      }

      &-text {
        font-size: var(--text-base);
        color: var(--text-secondary);
        line-height: var(--leading-relaxed);
        contain: layout style;

        @media (min-width: 48em) {
          font-size: var(--text-lg);
        }
      }
    }

    /* ===========================================
     * ERROR STATE
     * =========================================== */
    &__error {
      background-color: var(--bg-error-aaa);
      border: var(--border-width-thick) solid var(--border-error);
      border-radius: var(--radius-lg);
      padding: var(--space-md);
      margin-bottom: var(--space-lg);
      color: var(--text-error-aaa);
      contain: layout style paint;

      @media (min-width: 48em) {
        padding: var(--space-lg);
        margin-bottom: var(--space-xl);
      }

      &-message {
        font-weight: var(--font-semibold);
        font-size: var(--text-base);
        margin-bottom: var(--space-xs);
        line-height: var(--leading-relaxed);
        contain: layout style;

        @media (min-width: 48em) {
          font-size: var(--text-lg);
          margin-bottom: var(--space-sm);
        }
      }

      &-help {
        font-size: var(--text-sm);
        color: var(--text-error-aaa);
        line-height: var(--leading-relaxed);
        contain: layout style;

        @media (min-width: 48em) {
          font-size: var(--text-base);
        }
      }
    }

    /* ===========================================
     * PROFILE CONTENT
     * =========================================== */
    &__content {
      display: flex;
      flex-direction: column;
      gap: var(--space-lg);
      contain: layout style;

      @media (min-width: 48em) {
        gap: var(--space-xl);
      }

      @media (min-width: 64em) {
        gap: var(--space-2xl);
      }

      @media (min-width: 80em) {
        gap: var(--space-3xl);
      }
    }
  }

  /* ===========================================
   * PROFILE CARDS
   * =========================================== */
  .profile-card {
    background-color: var(--card-bg);
    border: var(--border-width-thin) solid var(--card-border);
    border-radius: var(--radius-lg);
    padding: var(--space-lg);
    box-shadow: var(--card-shadow);
    transition: box-shadow var(--transition-base);
    contain: layout style paint;

    @media (min-width: 48em) {
      padding: var(--space-xl);
    }

    @media (min-width: 64em) {
      padding: var(--space-2xl);
    }

    &:focus-within {
      box-shadow: var(--card-shadow-hover);
      outline: var(--focus-ring);
      outline-offset: var(--focus-ring-offset);
    }

    &__title {
      font-size: var(--text-xl);
      font-weight: var(--font-bold);
      color: var(--text-primary);
      margin-bottom: var(--space-lg);
      line-height: var(--leading-tight);
      contain: layout style;

      @media (min-width: 48em) {
        font-size: var(--text-2xl);
        margin-bottom: var(--space-xl);
      }

      @media (min-width: 64em) {
        font-size: var(--text-3xl);
      }
    }

    /* ===========================================
     * USER INFO SECTION
     * =========================================== */
    &__user-details {
      display: flex;
      flex-direction: column;
      gap: var(--space-md);
      contain: layout style;

      @media (min-width: 48em) {
        gap: var(--space-lg);
      }
    }

    &__user-item {
      display: flex;
      align-items: flex-start;
      gap: var(--space-sm);
      padding: var(--space-sm);
      background-color: var(--bg-tertiary);
      border: var(--border-width-thin) solid var(--border-secondary);
      border-radius: var(--radius-md);
      contain: layout style paint;

      @media (min-width: 48em) {
        gap: var(--space-md);
        padding: var(--space-md);
      }
    }

    &__icon {
      color: var(--interactive-primary);
      flex-shrink: 0;
      margin-top: var(--space-xs);
      width: var(--icon-size-sm);
      height: var(--icon-size-sm);
      contain: layout style paint;

      @media (min-width: 48em) {
        width: var(--icon-size-md);
        height: var(--icon-size-md);
      }
    }

    &__user-text {
      flex: 1;
      contain: layout style;
    }

    &__label {
      display: block;
      font-size: var(--text-xs);
      font-weight: var(--font-medium);
      color: var(--text-secondary);
      margin-bottom: var(--space-2xs);
      contain: layout style;

      @media (min-width: 48em) {
        font-size: var(--text-sm);
        margin-bottom: var(--space-xs);
      }
    }

    &__value {
      display: block;
      font-size: var(--text-base);
      font-weight: var(--font-semibold);
      color: var(--text-primary);
      contain: layout style;

      @media (min-width: 48em) {
        font-size: var(--text-lg);
      }
    }

    /* ===========================================
     * EMPTY STATE
     * =========================================== */
    &__empty {
      text-align: center;
      padding: var(--space-xl);
      color: var(--text-tertiary);
      contain: layout style paint;

      @media (min-width: 64em) {
        padding: var(--space-2xl);
      }

      &-icon {
        margin: 0 auto var(--space-md);
        color: var(--text-tertiary);
        width: var(--icon-size-lg);
        height: var(--icon-size-lg);
        contain: layout style paint;

        @media (min-width: 48em) {
          width: var(--icon-size-xl);
          height: var(--icon-size-xl);
          margin-bottom: var(--space-lg);
        }
      }

      &-text {
        font-size: var(--text-base);
        line-height: var(--leading-relaxed);
        contain: layout style;

        @media (min-width: 48em) {
          font-size: var(--text-lg);
        }
      }
    }
  }

  /* ===========================================
   * STATS SECTION
   * =========================================== */
  .stats-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--space-lg);
    contain: layout style;

    @media (min-width: 64em) {
      grid-template-columns: repeat(2, 1fr);
      gap: var(--space-xl);
    }
  }

  .stat-card {
    padding: var(--space-lg);
    background-color: var(--bg-tertiary);
    border: var(--border-width-thin) solid var(--border-secondary);
    border-radius: var(--radius-md);
    contain: layout style paint;

    @media (min-width: 48em) {
      padding: var(--space-xl);
    }

    &__title {
      font-size: var(--text-lg);
      font-weight: var(--font-bold);
      color: var(--text-primary);
      margin-bottom: var(--space-md);
      line-height: var(--leading-tight);
      contain: layout style;

      @media (min-width: 48em) {
        font-size: var(--text-xl);
        margin-bottom: var(--space-lg);
      }

      @media (min-width: 64em) {
        font-size: var(--text-2xl);
      }
    }

    &__list {
      display: flex;
      flex-direction: column;
      gap: var(--space-sm);
      contain: layout style;

      @media (min-width: 48em) {
        gap: var(--space-md);
      }
    }

    &__item {
      padding: var(--space-sm);
      background-color: var(--bg-secondary);
      border-radius: var(--radius-sm);
      border: var(--border-width-thin) solid var(--border-primary);
      contain: layout style paint;

      @media (min-width: 48em) {
        padding: var(--space-md);
      }
    }

    &__label {
      font-size: var(--text-xs);
      color: var(--text-secondary);
      font-weight: var(--font-medium);
      display: block;
      margin-bottom: var(--space-2xs);
      contain: layout style;

      @media (min-width: 48em) {
        font-size: var(--text-sm);
        margin-bottom: var(--space-xs);
      }
    }

    &__value {
      font-size: var(--text-lg);
      font-weight: var(--font-bold);
      color: var(--text-primary);
      display: block;
      contain: layout style;

      @media (min-width: 48em) {
        font-size: var(--text-xl);
      }
    }
  }

  /* ===========================================
   * RECENT GAMES SECTION
   * =========================================== */
  .recent-games {
    &__list {
      display: flex;
      flex-direction: column;
      gap: var(--space-md);
      list-style: none;
      padding: 0;
      contain: layout style;

      @media (min-width: 48em) {
        gap: var(--space-lg);
      }
    }
  }

  .recent-game {
    padding: var(--space-md);
    background-color: var(--bg-tertiary);
    border: var(--border-width-thin) solid var(--border-secondary);
    border-radius: var(--radius-md);
    transition: all var(--transition-base);
    contain: layout style paint;

    @media (min-width: 48em) {
      padding: var(--space-lg);
    }

    &:hover {
      border-color: var(--border-focus);
      transform: translateY(calc(-1 * var(--space-xs)));
    }

    &:focus-within {
      outline: var(--focus-ring);
      outline-offset: var(--focus-ring-offset);
    }

    &__header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: var(--space-sm);
      contain: layout style;

      @media (min-width: 48em) {
        margin-bottom: var(--space-md);
      }
    }

    &__mode {
      display: flex;
      align-items: center;
      gap: var(--space-xs);
      contain: layout style;

      @media (min-width: 48em) {
        gap: var(--space-sm);
      }

      &-text {
        font-size: var(--text-base);
        font-weight: var(--font-semibold);
        color: var(--text-primary);
        contain: layout style;

        @media (min-width: 48em) {
          font-size: var(--text-lg);
        }
      }
    }

    &__icon {
      color: var(--interactive-primary);
      width: var(--icon-size-sm);
      height: var(--icon-size-sm);
      contain: layout style paint;

      @media (min-width: 48em) {
        width: var(--icon-size-md);
        height: var(--icon-size-md);
      }
    }

    &__score {
      text-align: right;
      contain: layout style;

      &-value {
        display: block;
        font-size: var(--text-lg);
        font-weight: var(--font-bold);
        color: var(--interactive-primary);
        line-height: var(--leading-tight);
        contain: layout style;

        @media (min-width: 48em) {
          font-size: var(--text-xl);
        }

        @media (min-width: 64em) {
          font-size: var(--text-2xl);
        }
      }

      &-label {
        font-size: var(--text-xs);
        color: var(--text-secondary);
        line-height: var(--leading-relaxed);
        contain: layout style;

        @media (min-width: 48em) {
          font-size: var(--text-sm);
        }
      }
    }

    &__details {
      display: flex;
      flex-wrap: wrap;
      gap: var(--space-md);
      font-size: var(--text-xs);
      color: var(--text-secondary);
      line-height: var(--leading-relaxed);
      contain: layout style;

      @media (min-width: 48em) {
        gap: var(--space-lg);
        font-size: var(--text-sm);
      }

      @media (min-width: 64em) {
        justify-content: space-between;
        font-size: var(--text-base);
      }
    }

    &__category {
      font-weight: var(--font-medium);
      color: var(--text-primary);
      contain: layout style;
    }

    &__difficulty {
      padding: var(--space-2xs) var(--space-xs);
      border-radius: var(--radius-sm);
      font-size: var(--text-xs);
      font-weight: var(--font-medium);
      text-transform: capitalize;
      contain: layout style paint;

      @media (min-width: 48em) {
        padding: var(--space-xs) var(--space-sm);
        font-size: var(--text-sm);
      }

      &--easy {
        background-color: var(--bg-success-aaa);
        color: var(--text-success-aaa);
      }

      &--medium {
        background-color: var(--bg-warning-aaa);
        color: var(--text-warning-aaa);
      }

      &--hard {
        background-color: var(--bg-error-aaa);
        color: var(--text-error-aaa);
      }
    }

    &__language {
      display: flex;
      align-items: center;
      gap: var(--space-2xs);
      padding: var(--space-2xs) var(--space-xs);
      background-color: var(--bg-tertiary);
      border: var(--border-width-thin) solid var(--border-secondary);
      border-radius: var(--radius-sm);
      font-size: var(--text-xs);
      font-weight: var(--font-medium);
      color: var(--text-secondary);
      contain: layout style paint;

      @media (min-width: 48em) {
        gap: var(--space-xs);
        padding: var(--space-xs) var(--space-sm);
        font-size: var(--text-sm);
      }

      &-icon {
        width: var(--icon-size-xs);
        height: var(--icon-size-xs);
        color: var(--interactive-primary);
        contain: layout style paint;
      }
    }

    &__date {
      color: var(--text-tertiary);
      font-size: var(--text-xs);
      contain: layout style;

      @media (min-width: 48em) {
        font-size: var(--text-sm);
      }
    }
  }

  /* ===========================================
   * ANIMATIONS
   * =========================================== */
  @keyframes profile-spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  /* ===========================================
   * ACCESSIBILITY ENHANCEMENTS
   * =========================================== */
  @media (prefers-reduced-motion: reduce) {
    .profile__loading-icon {
      animation: none;
    }

    .stat-card,
    .recent-game,
    .profile-card__user-item {
      transition: none;
    }

    .recent-game:hover {
      transform: none;
    }
  }

  @media (prefers-contrast: high) {
    .profile-card {
      border-width: var(--border-width-thick);
    }

    .stat-card,
    .recent-game,
    .profile-card__user-item {
      border-width: var(--border-width-thick);
    }
  }

  /* ===========================================
   * MOBILE PORTRAIT OPTIMIZATIONS
   * =========================================== */
  @media (max-width: 320px) {
    .profile {
      padding: var(--space-xs) calc(var(--space-xs) / 2);
    }

    .profile-card {
      padding: var(--space-sm);
    }

    .profile__title {
      font-size: var(--text-xl);
    }

    .profile__login-title {
      font-size: var(--text-lg);
    }

    .profile__login-message {
      font-size: var(--text-sm);
    }
  }

  /* ===========================================
   * PRINT STYLES
   * =========================================== */
  @media print {
    .profile {
      max-width: none;
      padding: 0;
    }

    .profile-card {
      break-inside: avoid;
      box-shadow: none;
      border: var(--print-border);
    }

    .recent-game {
      break-inside: avoid;
    }
  }
</style>

<script>
  /**
   * Profile Page Client-Side Enhancements
   * Modern ES6+ features with TypeScript-like structure
   */

  // Utility functions using modern ES6+ features

  // Utility functions using modern ES6+ features
  const formatNumber = (num: number): string => {
    return new Intl.NumberFormat().format(num);
  };

  const formatDate = (dateString: string): string => {
    return new Intl.DateTimeFormat(navigator.language, {
      year: "numeric",
      month: "long",
      day: "numeric",
    }).format(new Date(dateString));
  };

  // Enhanced accessibility utilities
  const announceToScreenReader = (message: string): void => {
    const announcement = document.createElement("div");
    announcement.setAttribute("aria-live", "polite");
    announcement.setAttribute("aria-atomic", "true");
    announcement.className = "sr-only";
    announcement.textContent = message;

    document.body.appendChild(announcement);

    // Clean up after announcement
    setTimeout(() => {
      document.body.removeChild(announcement);
    }, 1000);
  };

  // Profile page enhancements
  const enhanceProfilePage = (): void => {
    // Add loading states for better UX
    const loadingElements = document.querySelectorAll(".profile__loading");
    loadingElements.forEach((element) => {
      element.setAttribute("aria-live", "polite");
    });

    // Enhance recent games with better accessibility
    const recentGames = document.querySelectorAll(".recent-game");
    recentGames.forEach((game, _index) => {
      const gameElement = game as HTMLElement;

      // Add keyboard navigation
      gameElement.setAttribute("tabindex", "0");
      gameElement.setAttribute("role", "button");

      // Add click handler for better interaction
      gameElement.addEventListener("click", () => {
        const scoreElement = gameElement.querySelector(".recent-game__score-value");
        const score = scoreElement?.textContent || "0";
        announceToScreenReader(`Game score: ${score} points`);
      });

      // Add keyboard support
      gameElement.addEventListener("keydown", (event) => {
        if (event.key === "Enter" || event.key === " ") {
          event.preventDefault();
          gameElement.click();
        }
      });
    });

    // Enhance stats cards with animations
    const statCards = document.querySelectorAll(".stat-card");
    const observerOptions = {
      threshold: 0.1,
      rootMargin: "0px 0px -50px 0px",
    };

    const statsObserver = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add("stat-card--visible");
        }
      });
    }, observerOptions);

    statCards.forEach((card) => {
      statsObserver.observe(card);
    });
  };

  // Initialize when DOM is ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", enhanceProfilePage);
  } else {
    enhanceProfilePage();
  }

  // Export for potential external use
  interface ProfileEnhancements {
    enhanceProfilePage: () => void;
    formatNumber: (num: number) => string;
    formatDate: (dateString: string) => string;
    announceToScreenReader: (message: string) => void;
  }

  (window as Window & { profileEnhancements?: ProfileEnhancements }).profileEnhancements = {
    enhanceProfilePage,
    formatNumber,
    formatDate,
    announceToScreenReader,
  };
</script>

<script>
  // Import auth status utilities - same as category.astro
  import {
    isUserAuthenticated,
    registerAuthEventListeners,
    initCookieWatcher,
  } from "../../utils/client/authStatus";

  // Section visibility utility
  const updateSectionVisibility = (element: HTMLElement, isVisible: boolean): void => {
    element.style.display = isVisible ? "block" : "none";
    element.setAttribute("aria-hidden", String(!isVisible));
  };

  // Main auth status check
  const checkAuthStatus = (): void => {
    const isLoggedIn = isUserAuthenticated();
    const loginPrompt = document.querySelector(".profile__login-prompt") as HTMLElement;
    const profileContent = document.querySelector(".profile__content") as HTMLElement;

    if (isLoggedIn) {
      // User is logged in - hide login form, load profile data
      if (loginPrompt) {
        updateSectionVisibility(loginPrompt, false);
      }
      loadProfileData();
    } else {
      // User is not logged in - show login form, hide content
      if (loginPrompt) {
        updateSectionVisibility(loginPrompt, true);
      }
      if (profileContent) {
        updateSectionVisibility(profileContent, false);
      }
    }
  };

  // Load profile data client-side
  const loadProfileData = async (): Promise<void> => {
    try {
      // Show loading state
      showLoadingState();

      // Get current language from URL
      const currentLang = window.location.pathname.split("/")[1] || "en";

      const response = await fetch(`/${currentLang}/api/user/profile`, {
        method: "GET",
        credentials: "include",
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (response.ok) {
        const data = await response.json();
        if (data.success) {
          displayProfileData(data.profile);
        } else {
          showErrorState(data.error || "Failed to load profile");
        }
      } else {
        // If API fails, show basic OAuth data from localStorage
        showBasicProfileData();
      }
    } catch (error) {
      console.warn("API failed, showing basic profile data:", error);
      showBasicProfileData();
    }
  };

  const showLoadingState = (): void => {
    const container = document.querySelector(".profile");
    if (!container) {
      return;
    }

    // Remove existing content except login prompt
    const existingContent = container.querySelector(".profile__content");
    const existingLoading = container.querySelector(".profile__loading");
    const existingError = container.querySelector(".profile__error");

    if (existingContent) {
      existingContent.remove();
    }
    if (existingLoading) {
      existingLoading.remove();
    }
    if (existingError) {
      existingError.remove();
    }

    // Add loading state
    const loadingDiv = document.createElement("div");
    loadingDiv.className = "profile__loading";
    loadingDiv.setAttribute("aria-live", "polite");
    loadingDiv.innerHTML = `
      <div class="profile__loading-content">
        <div class="profile__loading-icon" style="width: 48px; height: 48px; border: 4px solid #f3f3f3; border-top: 4px solid #007acc; border-radius: 50%; animation: spin 1s linear infinite; margin: 0 auto 16px;"></div>
        <p class="profile__loading-text">Loading profile...</p>
      </div>
    `;
    container.appendChild(loadingDiv);
  };

  const showErrorState = (errorMessage: string): void => {
    const container = document.querySelector(".profile");
    if (!container) {
      return;
    }

    // Remove loading state
    const loadingDiv = container.querySelector(".profile__loading");
    if (loadingDiv) {
      loadingDiv.remove();
    }

    // Add error state
    const errorDiv = document.createElement("div");
    errorDiv.className = "profile__error";
    errorDiv.setAttribute("role", "alert");
    errorDiv.innerHTML = `
      <p class="profile__error-message">${errorMessage}</p>
      <p class="profile__error-help">Please try refreshing the page or contact support.</p>
    `;
    container.appendChild(errorDiv);
  };

  const showBasicProfileData = (): void => {
    // Get user data from localStorage (fallback)
    const userData = getUserDataFromStorage();

    if (userData) {
      const profileData = {
        user: {
          username: userData.username || "OAuth User",
          email: userData.email || "N/A",
          createdAt: new Date().toISOString(),
        },
        stats: {
          quiz: { totalScore: 0, gamesPlayed: 0, highestScore: 0 },
          chronology: { totalScore: 0, gamesPlayed: 0, highestScore: 0 },
        },
        recentGames: [],
        linkedProviders: ["spotify"],
      };

      displayProfileData(profileData);
    } else {
      showErrorState("Could not load profile data");
    }
  };

  interface StoredUserData {
    username?: string;
    email?: string;
    [key: string]: unknown;
  }

  interface DisplayProfile {
    user: {
      username: string;
      email: string;
      createdAt: string;
    };
    stats: {
      quiz: {
        totalScore: number;
        gamesPlayed: number;
        highestScore: number;
      };
      chronology: {
        totalScore: number;
        gamesPlayed: number;
        highestScore: number;
      };
    };
    recentGames: Array<{
      gameMode: string;
      score: number;
      category: string;
      difficulty: string;
      createdAt: string;
    }>;
  }

  const getUserDataFromStorage = (): StoredUserData | null => {
    try {
      const userStr = localStorage.getItem("user");
      if (userStr) {
        return JSON.parse(userStr) as StoredUserData;
      }
    } catch (error) {
      console.error("Error getting user data:", error);
    }
    return null;
  };

  // Helper functions for profile display
  const createUserInfoSection = (user: DisplayProfile["user"]): string => {
    return `
      <section class="profile-card" aria-labelledby="user-info-heading">
        <h2 id="user-info-heading" class="profile-card__title">User Information</h2>
        <div class="profile-card__user-info">
          <dl class="profile-card__user-details">
            <div class="profile-card__user-item">
              <div class="profile-card__icon" style="width: 24px; height: 24px; background: #007acc; border-radius: 50%; display: flex; align-items: center; justify-content: center; color: white; font-size: 12px;">👤</div>
              <div class="profile-card__user-text">
                <dt class="profile-card__label">Username</dt>
                <dd class="profile-card__value">${user.username}</dd>
              </div>
            </div>
            <div class="profile-card__user-item">
              <div class="profile-card__icon" style="width: 24px; height: 24px; background: #007acc; border-radius: 50%; display: flex; align-items: center; justify-content: center; color: white; font-size: 12px;">✉️</div>
              <div class="profile-card__user-text">
                <dt class="profile-card__label">Email</dt>
                <dd class="profile-card__value">${user.email}</dd>
              </div>
            </div>
            <div class="profile-card__user-item">
              <div class="profile-card__icon" style="width: 24px; height: 24px; background: #007acc; border-radius: 50%; display: flex; align-items: center; justify-content: center; color: white; font-size: 12px;">📅</div>
              <div class="profile-card__user-text">
                <dt class="profile-card__label">Member Since</dt>
                <dd class="profile-card__value">${new Date(user.createdAt).toLocaleDateString()}</dd>
              </div>
            </div>
          </dl>
        </div>
      </section>
    `;
  };

  const createStatsSection = (stats: DisplayProfile["stats"]): string => {
    return `
      <section class="profile-card" aria-labelledby="stats-heading">
        <h2 id="stats-heading" class="profile-card__title">Game Statistics</h2>
        <div class="profile-card__stats">
          <div class="stats-grid">
            <div class="stat-card">
              <h3 class="stat-card__title">Quiz Mode</h3>
              <dl class="stat-card__list">
                <div class="stat-card__item">
                  <dt class="stat-card__label">Games Played</dt>
                  <dd class="stat-card__value">${stats.quiz.gamesPlayed}</dd>
                </div>
                <div class="stat-card__item">
                  <dt class="stat-card__label">Total Score</dt>
                  <dd class="stat-card__value">${stats.quiz.totalScore}</dd>
                </div>
                <div class="stat-card__item">
                  <dt class="stat-card__label">Highest Score</dt>
                  <dd class="stat-card__value">${stats.quiz.highestScore}</dd>
                </div>
              </dl>
            </div>
            <div class="stat-card">
              <h3 class="stat-card__title">Chronology Mode</h3>
              <dl class="stat-card__list">
                <div class="stat-card__item">
                  <dt class="stat-card__label">Games Played</dt>
                  <dd class="stat-card__value">${stats.chronology.gamesPlayed}</dd>
                </div>
                <div class="stat-card__item">
                  <dt class="stat-card__label">Total Score</dt>
                  <dd class="stat-card__value">${stats.chronology.totalScore}</dd>
                </div>
                <div class="stat-card__item">
                  <dt class="stat-card__label">Highest Score</dt>
                  <dd class="stat-card__value">${stats.chronology.highestScore}</dd>
                </div>
              </dl>
            </div>
            <div class="stat-card">
              <h3 class="stat-card__title">Time-Pressure Mode</h3>
              <dl class="stat-card__list">
                <div class="stat-card__item">
                  <dt class="stat-card__label">Games Played</dt>
                  <dd class="stat-card__value">${stats.timePressure?.gamesPlayed || 0}</dd>
                </div>
                <div class="stat-card__item">
                  <dt class="stat-card__label">Total Score</dt>
                  <dd class="stat-card__value">${stats.timePressure?.totalScore || 0}</dd>
                </div>
                <div class="stat-card__item">
                  <dt class="stat-card__label">Highest Score</dt>
                  <dd class="stat-card__value">${stats.timePressure?.highestScore || 0}</dd>
                </div>
              </dl>
            </div>
          </div>
        </div>
      </section>
    `;
  };

  const createRecentGamesSection = (recentGames: DisplayProfile["recentGames"]): string => {
    const gamesHTML =
      recentGames.length === 0
        ? `
        <div class="profile-card__empty">
          <div style="width: 64px; height: 64px; background: #f0f0f0; border-radius: 50%; display: flex; align-items: center; justify-content: center; margin: 0 auto 16px; font-size: 24px;">🎮</div>
          <p class="profile-card__empty-text">No games played yet</p>
          <p style="font-size: 14px; color: #999;">Start playing to see your game history here!</p>
        </div>
      `
        : `
        <div class="recent-games">
          <ul class="recent-games__list">
            ${recentGames
              .map(
                (game) => `
              <li class="recent-game">
                <div class="recent-game__header">
                  <div class="recent-game__mode">
                    <span class="recent-game__mode-text">${game.gameMode}</span>
                  </div>
                  <div class="recent-game__score">
                    <span class="recent-game__score-value">${game.score}</span>
                    <span class="recent-game__score-label">points</span>
                  </div>
                </div>
                <div class="recent-game__details">
                  <span class="recent-game__category">${game.category}</span>
                  <span class="recent-game__difficulty recent-game__difficulty--${game.difficulty}">${game.difficulty}</span>
                  <time class="recent-game__date">${new Date(game.createdAt).toLocaleDateString()}</time>
                </div>
              </li>
            `
              )
              .join("")}
          </ul>
        </div>
      `;

    return `
      <section class="profile-card" aria-labelledby="recent-games-heading">
        <h2 id="recent-games-heading" class="profile-card__title">Recent Games</h2>
        ${gamesHTML}
      </section>
    `;
  };

  const clearLoadingAndErrorStates = (container: Element): void => {
    const loadingDiv = container.querySelector(".profile__loading");
    const errorDiv = container.querySelector(".profile__error");
    if (loadingDiv) {
      loadingDiv.remove();
    }
    if (errorDiv) {
      errorDiv.remove();
    }
  };

  const getOrCreateContentDiv = (container: Element): HTMLElement => {
    let contentDiv = container.querySelector(".profile__content") as HTMLElement;
    if (!contentDiv) {
      contentDiv = document.createElement("div");
      contentDiv.className = "profile__content";
      container.appendChild(contentDiv);
    }
    return contentDiv;
  };

  const displayProfileData = (profile: DisplayProfile): void => {
    const container = document.querySelector(".profile");
    if (!container) {
      return;
    }

    clearLoadingAndErrorStates(container);
    const contentDiv = getOrCreateContentDiv(container);

    // Build the profile content HTML with original beautiful styling
    contentDiv.innerHTML = `
      ${createUserInfoSection(profile.user)}
      ${createStatsSection(profile.stats)}
      ${createRecentGamesSection(profile.recentGames)}
    `;

    updateSectionVisibility(contentDiv, true);
  };

  // Initialize page when DOM is ready
  const initializePage = (): void => {
    checkAuthStatus();
  };

  // Modern DOM ready check
  const runWhenReady = (callback: () => void): void => {
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", callback, { once: true });
    } else {
      requestAnimationFrame(callback);
    }
  };

  runWhenReady(initializePage);

  // Register auth event listeners
  const authListeners = registerAuthEventListeners(checkAuthStatus);
  const cookieWatcherId = initCookieWatcher(checkAuthStatus, 1000);

  // Cleanup on page unload
  const cleanup = (): void => {
    authListeners.remove();
    clearInterval(cookieWatcherId);
  };

  document.addEventListener("astro:page-unload", cleanup, { once: true });

  // Add spin animation for loading
  const style = document.createElement("style");
  style.textContent = `
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
  `;
  document.head.appendChild(style);
</script>
