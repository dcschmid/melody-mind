---
/**
 * User Profile Page
 *
 * This page displays the user profile with personal information,
 * game statistics, and recent game results.
 *
 * Features:
 * - Display of user information (name, email, creation date)
 * - Statistics for quiz and chronology game modes
 * - List of recent game results
 * - Responsive design with CSS custom properties
 * - WCAG AAA 2.2 compliant design system
 *
 * URL: /[lang]/profile
 */
import Layout from "@layouts/Layout.astro";
import { getLangFromUrl, useTranslations } from "@utils/i18n";
import { Icon } from "astro-icon/components";
import { formatDate } from "@utils/dateUtils";
import { requireAuth } from "src/middleware/auth";

// Enable static site generation for all supported languages
export const prerender = true;

/**
 * Generate static paths for all supported languages
 * Required for Astro dynamic routes to work properly
 */
export async function getStaticPaths() {
  const supportedLanguages = ["de", "en", "es", "fr", "it", "pt", "da", "nl", "sv", "fi"] as const;

  return supportedLanguages.map((lang) => ({
    params: { lang },
  }));
}

// Interface for user profile data
interface UserProfile {
  user: {
    username: string;
    email: string;
    createdAt: string;
  };
  stats: {
    quiz: {
      totalScore: number;
      gamesPlayed: number;
      highestScore: number;
    };
    chronology: {
      totalScore: number;
      gamesPlayed: number;
      highestScore: number;
    };
  };
  recentGames: Array<{
    gameMode: "quiz" | "chronology";
    score: number;
    category: string;
    difficulty: "easy" | "medium" | "hard";
    createdAt: string;
  }>;
}

// Get language from URL and initialize translations
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(String(lang));

// Auth check: Verify if the user is logged in
const authResult = await requireAuth(Astro.request);

// If not authenticated, the middleware will handle the redirect
if (!authResult.authenticated) {
  return authResult.redirectToLogin;
}

// Default values for user data
let profileData: UserProfile | null = null;
let isLoading = true;
let error: string | null = null;

// Fetch user data from API endpoint
try {
  // No need to pass userId - the API will get it from the JWT token
  const response = await fetch(`${Astro.url.origin}/${String(lang)}/api/user/profile`, {
    headers: {
      "Content-Type": "application/json",
      Cookie: Astro.request.headers.get("cookie") || "", // Forward cookies for auth
    },
    credentials: "include", // Important: Send cookies
  });

  const data = await response.json();

  if (data.success) {
    profileData = data.profile;
  } else {
    error = data.error || t("profile.error");
  }
} catch (err) {
  console.error("Error fetching profile data:", err);
  error = t("profile.error");
} finally {
  isLoading = false;
}

// Format the date for display
const formatUserDate = (dateString: string): string => {
  try {
    return formatDate(dateString, String(lang));
  } catch {
    return dateString;
  }
};

// Game mode names for display
const gameModeNames = {
  quiz: t("profile.stats.quiz"),
  chronology: t("profile.stats.chronology"),
};

// Difficulty level names for display
const difficultyNames = {
  easy: t("difficulty.easy"),
  medium: t("difficulty.medium"),
  hard: t("difficulty.hard"),
};
---

<Layout title={t("profile.title")} description={t("profile.description")} type="website">
  <div class="profile">
    <h1 class="profile__title">{t("profile.title")}</h1>

    {
      isLoading && (
        <div class="profile__loading" aria-live="polite">
          <div class="profile__loading-content">
            <Icon name="loader" class="profile__loading-icon" aria-hidden="true" />
            <p class="profile__loading-text">{t("profile.loading")}</p>
          </div>
        </div>
      )
    }

    {
      error && (
        <div class="profile__error" role="alert">
          <p class="profile__error-message">{error}</p>
          <p class="profile__error-help">{t("profile.auth.required")}</p>
        </div>
      )
    }

    {
      profileData && (
        <div class="profile__content">
          <section class="profile-card" aria-labelledby="user-info-heading">
            <h2 id="user-info-heading" class="profile-card__title">
              {t("profile.user.info")}
            </h2>

            <div class="profile-card__user-info">
              <dl class="profile-card__user-details flex-column text-reset">
                <div class="profile-card__user-item flex-start card-base">
                  <Icon name="user" class="profile-card__icon icon-standard" aria-hidden="true" />
                  <div class="profile-card__user-text">
                    <dt class="profile-card__label text-enhanced">{t("profile.user.username")}</dt>
                    <dd class="profile-card__value text-enhanced text-reset">
                      {profileData.user.username}
                    </dd>
                  </div>
                </div>

                <div class="profile-card__user-item flex-start card-base">
                  <Icon name="mail" class="profile-card__icon icon-standard" aria-hidden="true" />
                  <div class="profile-card__user-text">
                    <dt class="profile-card__label text-enhanced">{t("profile.user.email")}</dt>
                    <dd class="profile-card__value text-enhanced text-reset">
                      {profileData.user.email}
                    </dd>
                  </div>
                </div>

                <div class="profile-card__user-item flex-start card-base">
                  <Icon
                    name="calendar"
                    class="profile-card__icon icon-standard"
                    aria-hidden="true"
                  />
                  <div class="profile-card__user-text">
                    <dt class="profile-card__label text-enhanced">
                      {t("profile.user.member_since")}
                    </dt>
                    <dd class="profile-card__value text-enhanced text-reset">
                      {formatUserDate(profileData.user.createdAt)}
                    </dd>
                  </div>
                </div>
              </dl>
            </div>
          </section>

          <section class="profile-card" aria-labelledby="stats-heading">
            <h2 id="stats-heading" class="profile-card__title">
              {t("profile.stats.title")}
            </h2>

            <div class="profile-card__stats">
              <div class="stats-grid">
                <div class="stat-card">
                  <h3 class="stat-card__title">{gameModeNames.quiz}</h3>
                  <dl class="stat-card__list">
                    <div class="stat-card__item">
                      <dt class="stat-card__label">{t("profile.stats.games_played")}</dt>
                      <dd class="stat-card__value">{profileData.stats.quiz.gamesPlayed}</dd>
                    </div>
                    <div class="stat-card__item">
                      <dt class="stat-card__label">{t("profile.stats.total_score")}</dt>
                      <dd class="stat-card__value">{profileData.stats.quiz.totalScore}</dd>
                    </div>
                    <div class="stat-card__item">
                      <dt class="stat-card__label">{t("profile.stats.highest_score")}</dt>
                      <dd class="stat-card__value">{profileData.stats.quiz.highestScore}</dd>
                    </div>
                  </dl>
                </div>

                <div class="stat-card">
                  <h3 class="stat-card__title">{gameModeNames.chronology}</h3>
                  <dl class="stat-card__list">
                    <div class="stat-card__item">
                      <dt class="stat-card__label">{t("profile.stats.games_played")}</dt>
                      <dd class="stat-card__value">{profileData.stats.chronology.gamesPlayed}</dd>
                    </div>
                    <div class="stat-card__item">
                      <dt class="stat-card__label">{t("profile.stats.total_score")}</dt>
                      <dd class="stat-card__value">{profileData.stats.chronology.totalScore}</dd>
                    </div>
                    <div class="stat-card__item">
                      <dt class="stat-card__label">{t("profile.stats.highest_score")}</dt>
                      <dd class="stat-card__value">{profileData.stats.chronology.highestScore}</dd>
                    </div>
                  </dl>
                </div>
              </div>
            </div>
          </section>

          <section class="profile-card" aria-labelledby="recent-games-heading">
            <h2 id="recent-games-heading" class="profile-card__title">
              {t("profile.recent_games.title")}
            </h2>

            {profileData.recentGames.length === 0 ? (
              <div class="profile-card__empty">
                <Icon
                  name="gamepad"
                  class="profile-card__empty-icon icon-large"
                  aria-hidden="true"
                />
                <p class="profile-card__empty-text text-enhanced text-reset">
                  {t("profile.recent_games.empty")}
                </p>
              </div>
            ) : (
              <div class="recent-games">
                <ul class="recent-games__list flex-column text-reset">
                  {profileData.recentGames.map((game) => (
                    <li class="recent-game card-base card-transition hover-lift">
                      <div class="recent-game__header flex-between">
                        <div class="recent-game__mode flex-start">
                          <Icon
                            name={game.gameMode === "quiz" ? "brain" : "clock"}
                            class="recent-game__icon icon-standard"
                            aria-hidden="true"
                          />
                          <span class="recent-game__mode-text text-enhanced">
                            {gameModeNames[game.gameMode]}
                          </span>
                        </div>
                        <div class="recent-game__score">
                          <span class="recent-game__score-value">{game.score}</span>
                          <span class="recent-game__score-label text-enhanced">
                            {t("profile.recent_games.points")}
                          </span>
                        </div>
                      </div>
                      <div class="recent-game__details">
                        <span class="recent-game__category">{game.category}</span>
                        <span class="recent-game__difficulty recent-game__difficulty--{game.difficulty}">
                          {difficultyNames[game.difficulty]}
                        </span>
                        <time class="recent-game__date" datetime={game.createdAt}>
                          {formatUserDate(game.createdAt)}
                        </time>
                      </div>
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </section>
        </div>
      )
    }
  </div>
</Layout>

<style>
  /* ===========================================
   * PROFILE PAGE STYLES - WCAG AAA COMPLIANT
   * Using CSS custom properties from global.css
   * Applying DRY principles with utility classes
   * =========================================== */

  /* Profile Container */
  .profile {
    max-width: var(--container-xl);
    margin: 0 auto;
    padding: var(--space-md);
  }

  .profile__title {
    font-size: var(--text-4xl);
    font-weight: var(--font-bold);
    color: var(--text-primary);
    text-align: center;
    margin-bottom: var(--space-3xl);
    line-height: var(--leading-enhanced);
  }

  /* ===========================================
   * LOADING STATE
   * =========================================== */

  .profile__loading {
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 18.75rem;
    color: var(--text-secondary);
  }

  .profile__loading-content {
    text-align: center;
  }

  .profile__loading-icon {
    width: var(--icon-size-xl);
    height: var(--icon-size-xl);
    margin: 0 auto var(--space-md);
    color: var(--interactive-primary);
    animation: profile-spin var(--animation-duration-slow) linear infinite;
  }

  .profile__loading-text {
    font-size: var(--text-lg);
    color: var(--text-secondary);
    line-height: var(--leading-enhanced);
  }

  /* ===========================================
   * ERROR STATE
   * =========================================== */

  .profile__error {
    background-color: var(--bg-error-aaa);
    border: var(--border-width-thick) solid var(--border-error);
    border-radius: var(--radius-lg);
    padding: var(--space-lg);
    margin-bottom: var(--space-xl);
    color: var(--text-error-aaa);
  }

  .profile__error-message {
    font-weight: var(--font-semibold);
    font-size: var(--text-lg);
    margin-bottom: var(--space-sm);
    line-height: var(--leading-enhanced);
  }

  .profile__error-help {
    font-size: var(--text-base);
    color: var(--text-error-aaa);
    line-height: var(--leading-enhanced);
  }

  /* ===========================================
   * PROFILE CONTENT
   * =========================================== */

  .profile__content {
    display: flex;
    flex-direction: column;
    gap: var(--space-3xl);
  }

  /* ===========================================
   * PROFILE CARDS
   * =========================================== */

  .profile-card {
    background-color: var(--card-bg);
    border: var(--border-width-thin) solid var(--card-border);
    border-radius: var(--radius-lg);
    padding: var(--space-2xl);
    box-shadow: var(--card-shadow);
    transition: box-shadow var(--transition-normal);
  }

  .profile-card:focus-within {
    box-shadow: var(--card-shadow-hover);
    outline: var(--focus-outline);
    outline-offset: var(--focus-ring-offset);
  }

  .profile-card__title {
    font-size: var(--text-3xl);
    font-weight: var(--font-bold);
    color: var(--text-primary);
    margin-bottom: var(--space-xl);
    line-height: var(--leading-enhanced);
  }

  /* ===========================================
   * USER INFO SECTION
   * =========================================== */

  .profile-card__user-details {
    gap: var(--space-lg);
  }

  .profile-card__user-item {
    gap: var(--space-md);
    padding: var(--space-md);
  }

  .profile-card__icon {
    color: var(--interactive-primary);
    flex-shrink: 0;
    margin-top: var(--space-xs);
  }

  .profile-card__user-text {
    flex: 1;
  }

  .profile-card__label {
    display: block;
    font-size: var(--text-sm);
    font-weight: var(--font-medium);
    color: var(--text-secondary);
    margin-bottom: var(--space-xs);
  }

  .profile-card__value {
    display: block;
    font-size: var(--text-lg);
    font-weight: var(--font-semibold);
    color: var(--text-primary);
  }

  /* ===========================================
   * STATS SECTION
   * =========================================== */

  .stats-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--space-xl);
  }

  .stat-card {
    padding: var(--space-xl);
  }

  .stat-card__title {
    font-size: var(--text-2xl);
    font-weight: var(--font-bold);
    color: var(--text-primary);
    margin-bottom: var(--space-lg);
  }

  .stat-card__list {
    gap: var(--space-md);
  }

  .stat-card__item {
    padding: var(--space-md);
    background-color: var(--bg-secondary);
    border-radius: var(--radius-sm);
    border: var(--border-width-thin) solid var(--border-primary);
  }

  .stat-card__label {
    font-size: var(--text-base);
    color: var(--text-secondary);
    font-weight: var(--font-medium);
  }

  .stat-card__value {
    font-size: var(--text-xl);
    font-weight: var(--font-bold);
    color: var(--text-primary);
  }

  /* ===========================================
   * RECENT GAMES SECTION
   * =========================================== */

  .profile-card__empty {
    text-align: center;
    padding: var(--space-3xl);
    color: var(--text-tertiary);
  }

  .profile-card__empty-icon {
    margin: 0 auto var(--space-lg);
    color: var(--text-tertiary);
  }

  .profile-card__empty-text {
    font-size: var(--text-lg);
  }

  .recent-games__list {
    gap: var(--space-lg);
    list-style: none;
    padding: 0;
  }

  .recent-game {
    padding: var(--space-lg);
  }

  .recent-game:hover {
    border-color: var(--border-focus);
  }

  .recent-game:focus-within {
    outline: var(--focus-outline);
    outline-offset: var(--focus-ring-offset);
  }

  .recent-game__header {
    margin-bottom: var(--space-md);
  }

  .recent-game__mode {
    gap: var(--space-sm);
  }

  .recent-game__icon {
    color: var(--interactive-primary);
  }

  .recent-game__mode-text {
    font-size: var(--text-lg);
    font-weight: var(--font-semibold);
    color: var(--text-primary);
  }

  .recent-game__score {
    text-align: right;
  }

  .recent-game__score-value {
    display: block;
    font-size: var(--text-2xl);
    font-weight: var(--font-bold);
    color: var(--interactive-primary);
    line-height: var(--leading-tight);
  }

  .recent-game__score-label {
    font-size: var(--text-sm);
    color: var(--text-secondary);
    line-height: var(--leading-enhanced);
  }

  .recent-game__details {
    display: flex;
    flex-wrap: wrap;
    gap: var(--space-lg);
    font-size: var(--text-base);
    color: var(--text-secondary);
    line-height: var(--leading-enhanced);
  }

  .recent-game__category {
    font-weight: var(--font-medium);
    color: var(--text-primary);
  }

  .recent-game__difficulty {
    padding: var(--space-xs) var(--space-sm);
    border-radius: var(--radius-sm);
    font-size: var(--text-sm);
    font-weight: var(--font-medium);
    text-transform: capitalize;
  }

  .recent-game__difficulty--easy {
    background-color: var(--bg-success-aaa);
    color: var(--text-success-aaa);
  }

  .recent-game__difficulty--medium {
    background-color: var(--bg-warning-aaa);
    color: var(--text-warning-aaa);
  }

  .recent-game__difficulty--hard {
    background-color: var(--bg-error-aaa);
    color: var(--text-error-aaa);
  }

  .recent-game__date {
    color: var(--text-tertiary);
    font-size: var(--text-sm);
  }

  /* ===========================================
   * ANIMATIONS
   * =========================================== */

  @keyframes profile-spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  /* ===========================================
   * RESPONSIVE DESIGN
   * =========================================== */

  @media (min-width: var(--breakpoint-md)) {
    .profile {
      padding: var(--space-xl);
    }

    .stats-grid {
      grid-template-columns: repeat(2, 1fr);
    }

    .recent-game__details {
      justify-content: space-between;
    }
  }

  @media (min-width: var(--breakpoint-lg)) {
    .profile {
      padding: var(--space-2xl);
    }

    .profile-card {
      padding: var(--space-3xl);
    }
  }

  /* ===========================================
   * REDUCED MOTION SUPPORT
   * =========================================== */

  @media (prefers-reduced-motion: reduce) {
    .profile__loading-icon {
      animation: none;
    }

    .stat-card,
    .recent-game {
      transition: none;
    }

    .stat-card:hover,
    .recent-game:hover {
      transform: none;
    }
  }

  /* ===========================================
   * HIGH CONTRAST MODE SUPPORT
   * =========================================== */

  @media (prefers-contrast: high) {
    .profile-card {
      border-width: var(--border-width-enhanced);
    }

    .stat-card,
    .recent-game,
    .profile-card__user-item {
      border-width: var(--border-width-thick);
    }
  }

  /* ===========================================
   * UTILITY CLASSES (DRY OPTIMIZATION)
   * =========================================== */

  /* Common Flexbox Patterns */
  .flex-column {
    display: flex;
    flex-direction: column;
  }

  .flex-between {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .flex-center {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .flex-start {
    display: flex;
    align-items: flex-start;
  }

  /* Common Text Patterns */
  .text-enhanced {
    line-height: var(--leading-enhanced);
  }

  .text-reset {
    margin: 0;
  }

  /* Common Interactive Patterns */
  .card-transition {
    transition:
      transform var(--transition-normal),
      box-shadow var(--transition-normal),
      border-color var(--transition-normal);
  }

  .hover-lift:hover {
    transform: translateY(calc(-1 * var(--space-xs)));
  }

  .hover-shadow:hover {
    box-shadow: var(--shadow-lg);
  }

  /* Common Focus Patterns */
  .focus-outline:focus-within {
    outline: var(--focus-outline);
    outline-offset: var(--focus-ring-offset);
  }

  /* Icon Sizing */
  .icon-standard {
    width: var(--icon-size-md);
    height: var(--icon-size-md);
  }

  .icon-large {
    width: var(--icon-size-xl);
    height: var(--icon-size-xl);
  }

  /* Common Card Pattern */
  .card-base {
    background-color: var(--bg-tertiary);
    border: var(--border-width-thin) solid var(--border-secondary);
    border-radius: var(--radius-md);
    padding: var(--space-lg);
  }

  .card-elevated {
    background-color: var(--card-bg);
    border: var(--border-width-thin) solid var(--card-border);
    border-radius: var(--radius-lg);
    padding: var(--space-2xl);
    box-shadow: var(--card-shadow);
  }

  /* ===========================================
   * MAIN PROFILE CONTAINER
   * =========================================== */
</style>
