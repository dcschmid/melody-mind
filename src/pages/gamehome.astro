---
import { When } from "@astropub/flow";

import PlaylistItem from "@components/PlaylistItem.astro";
import Layout from "@layouts/Layout.astro";
import categoriesList from "@json/categories.json";

/**
 * Get the user object from the Astro context
 */
const user = Astro.locals.user;

/**
 * If the user is not logged in, redirect them to the login page.
 */
if (!user) {
  /**
   * Redirect the user to the login page.
   */
  return Astro.redirect("/");
}

/**
 * This function filters the categoriesList array to only include items that are playable.
 * It then randomly selects one of those items and returns it.
 * @return {Array} An array containing one playable item.
 */
const getSelectedPlayableItem = () => {
  // Filter playable items
  const playableItems = categoriesList.filter((item) => item.isPlayable);

  return playableItems;
};

/**
 * This function filters the categoriesList array to only include items that are not playable.
 * It then shuffles the array and limits it to a maximum of 5 items.
 * @return {Array} An array containing non-playable items.
 */
const getNonPlayableItems = () => {
  // Filter non-playable items
  const nonPlayableItems = categoriesList.filter((item) => !item.isPlayable);

  return nonPlayableItems;
};

// Create an array by combining the selected playable item and the non-playable items
// The selected playable item is randomly selected from the playable items
// The non-playable items are randomly shuffled and limited to a maximum of 5 items
const categories = [...getSelectedPlayableItem(), ...getNonPlayableItems()];
---

<Layout title="Spiel Kategorien">
  <main class="gameHome">
    <section class="introSection" aria-labelledby="welcome-heading">
      <h1 class="headline" id="welcome-heading">
        Willkommen <span class="name">{user?.username ?? "Mika"}</span>!
      </h1>
      <p class="subline">Wähle hier ein Genre aus, das du spielen möchtest!</p>
    </section>

    <section class="playlistSection" aria-labelledby="playlist-heading">
      <h2 id="playlist-heading" class="visually-hidden">Genre Auswahl</h2>

      <div class="searchWrapper">
        <label for="filter-input" class="visually-hidden">
          Suche nach einem Genre
        </label>
        <input
          class="filterInput"
          type="search"
          id="filter-input"
          placeholder="Suche nach einem Genre"
          aria-label="Filterung der Genre-Liste"
        />
      </div>

      <div
        class="playlistGrid"
        role="list"
        aria-label="Liste der verfügbaren Genre"
      >
        <When test={categories.length > 0}>
          {
            categories.map((item) => (
              <>
                <When test={item.isPlayable}>
                  <a
                    href={item.categoryUrl}
                    class="playlistLink"
                    aria-label={`Spiele ${item.headline}`}
                  >
                    <PlaylistItem
                      headline={item.headline}
                      image={item.imageUrl}
                    />
                  </a>
                </When>

                <When test={!item.isPlayable}>
                  <div class="playlistItem">
                    <PlaylistItem
                      isDisabled={true}
                      headline={item.headline}
                      image={item.imageUrl}
                    />
                  </div>
                </When>
              </>
            ))
          }
        </When>
      </div>
    </section>
  </main>
</Layout>

<style lang="scss">
  .visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    border: 0;
  }

  .gameHome {
    padding: var(--padding-medium);
    max-width: var(--max-line-length);
    margin: 0 auto;
  }

  .introSection {
    display: flex;
    flex-direction: column;
    gap: var(--padding-medium);
    align-items: center;
    margin-bottom: var(--padding-large);
    text-align: center;
  }

  .headline {
    font-family: var(--font-family);
    font-size: var(--header-font-size);
    line-height: var(--line-height-body);
    font-weight: 900;
    color: var(--text-color);
  }

  .name {
    color: var(--highlight-color);
  }

  .subline {
    font-family: var(--font-family);
    font-size: var(--body-font-size);
    line-height: var(--line-height-body);
    letter-spacing: var(--spacing-text);
    max-width: 768px;
  }

  .searchWrapper {
    margin-bottom: var(--padding-medium);
  }

  .filterInput {
    width: 100%;
    max-width: 1024px;
    padding: var(--padding-small);
    font-family: var(--font-family);
    font-size: var(--body-font-size);
    line-height: var(--line-height-body);
    color: var(--text-color);
    background-color: var(--background-color);
    border: 2px solid var(--highlight-color);
    border-radius: var(--border-radius);
    transition: all var(--transition-speed);

    &::placeholder {
      color: var(--text-color);
      opacity: 0.7;
    }

    &:focus {
      outline: var(--focus-outline-width) solid var(--focus-outline-color);
      outline-offset: var(--focus-outline-offset);
      border-color: var(--highlight-color);
    }

    @media (prefers-reduced-motion: reduce) {
      transition: none;
    }
  }

  .playlistGrid {
    display: grid;
    gap: var(--padding-medium);
    width: 100%;
        margin: 0 auto;
    padding: var(--padding-medium);

    grid-template-columns: repeat(
      auto-fill,
      minmax(
        clamp(
          var(--size-playlist-small),
          calc(100% / 4),
          var(--size-playlist-large)
        ),
        1fr
      )
    );

    justify-content: center;
    justify-items: center;
    align-items: start;

    // Optionale Container-Queries wenn unterstützt
    @container (min-width: 50em) {
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    }
  }

  .playlistLink {
    width: 100px;
    text-decoration: none;
    color: inherit;
    display: block;
    width: 100%;
    transition: transform var(--transition-speed) ease;
    position: relative;

    &:focus-visible {
      outline: none;
      transform: translateY(-2px);

      &::after {
        content: "";
        position: absolute;
        inset: -4px;
        border: var(--focus-outline-width) solid var(--focus-outline-color);
        border-radius: calc(var(--border-radius) + 4px);
        pointer-events: none;
      }
    }

    &:not([aria-disabled="true"]):hover {
      transform: translateY(-2px);
    }

    &[aria-disabled="true"] {
      cursor: not-allowed;
      opacity: var(--opacity-disabled);
    }

    @media (prefers-reduced-motion: reduce) {
      transition: none;
    }
  }

  // Add styles for the "No results" message
  .no-results {
    grid-column: 1 / -1;
    text-align: center;
    color: var(--text-color);
    font-size: var(--body-font-size);
    padding: var(--padding-medium);
  }
</style>

<script>
  const filterInput = document.getElementById(
    "filter-input",
  ) as HTMLInputElement;
  const playlistGrid = document.querySelector(".playlistGrid");

  filterInput?.addEventListener("input", filterPlaylists);

  function filterPlaylists(_event: Event) {
    const query = filterInput.value.toLowerCase();
    const playlistItems = document.querySelectorAll(
      ".playlistLink, .playlistItem",
    );
    let hasResults = false;

    playlistItems.forEach((item) => {
      const headlineText = item.querySelector(".headline")?.textContent;
      const isVisible = headlineText?.toLowerCase().includes(query);

      (item as HTMLElement).style.display = isVisible ? "block" : "none";
      if (isVisible) hasResults = true;
    });

    // Füge eine "Keine Ergebnisse" Nachricht hinzu
    let noResultsMsg = playlistGrid?.querySelector(".no-results");
    if (!hasResults) {
      if (!noResultsMsg) {
        noResultsMsg = document.createElement("p");
        noResultsMsg.className = "no-results";
        noResultsMsg.setAttribute("role", "status");
        noResultsMsg.textContent = "Keine Ergebnisse gefunden";
        playlistGrid?.appendChild(noResultsMsg);
      }
    } else {
      noResultsMsg?.remove();
    }
  }
</script>
