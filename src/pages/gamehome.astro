---
import { When } from "@astropub/flow";

import PlaylistItem from "@components/PlaylistItem.astro";
import Layout from "@layouts/Layout.astro";
import categoriesList from "@json/categories.json";

/**
 * Get the user object from the Astro context
 */
const user = Astro.locals.user;

/**
 * If the user is not logged in, redirect them to the login page.
 */
if (!user) {
  /**
   * Redirect the user to the login page.
   */
  return Astro.redirect("/");
}

/**
 * This function filters the categoriesList array to only include items that are playable.
 * It then randomly selects one of those items and returns it.
 * @return {Array} An array containing one playable item.
 */
const getSelectedPlayableItem = () => {
  // Filter playable items
  const playableItems = categoriesList.filter((item) => item.isPlayable);

  return playableItems;
};

/**
 * This function filters the categoriesList array to only include items that are not playable.
 * It then shuffles the array and limits it to a maximum of 5 items.
 * @return {Array} An array containing non-playable items.
 */
const getNonPlayableItems = () => {
  // Filter non-playable items
  const nonPlayableItems = categoriesList.filter((item) => !item.isPlayable);

  return nonPlayableItems;
};

// Create an array by combining the selected playable item and the non-playable items
// The selected playable item is randomly selected from the playable items
// The non-playable items are randomly shuffled and limited to a maximum of 5 items
const categories = [...getSelectedPlayableItem(), ...getNonPlayableItems()];
---

<Layout title="Spiel Kategorien">
  <div class="introText">
    <div class="headline">
      Willkommen <span class="name">{user?.username ?? "Mika"}</span>!
    </div>
    <div class="subline">
      Wähle hier ein Genre aus, das du spielen möchtest!
    </div>
  </div>

  <div class="choosePlaylist">
    <input
      class="filterInput"
      type="search"
      id="filter-input"
      placeholder="Suche nach einem Genre"
    />
    <When test={categories.length > 0}>
      {
        categories.map((item) => (
          <>
            <When test={item.isPlayable}>
              <a href={item.categoryUrl}>
                <PlaylistItem headline={item.headline} image={item.imageUrl} />
              </a>
            </When>

            <When test={!item.isPlayable}>
              <PlaylistItem
                isDisabled={true}
                headline={item.headline}
                image={item.imageUrl}
              />
            </When>
          </>
        ))
      }
    </When>
  </div>
</Layout>

<style lang="scss">
  .introText {
    display: flex;
    flex-direction: column;
    gap: var(--padding-medium);
    align-items: center;

    margin-bottom: var(--padding-medium);

    text-align: center;
  }

  .headline {
    font: 900 var(--header-font-size) / 1.5 var(--font-family);
    color: var(--text-color);
  }

  .name {
    color: var(--highlight-color);
  }

  .subline {
    max-width: 768px;
    font: 400 var(--body-font-size) / 1.5 var(--font-family);
    text-align: center;
  }

  .choosePlaylist {
    display: flex;
    flex-wrap: wrap;
    gap: var(--padding-medium);
    justify-content: center;
  }

  .filterInput {
    width: 100%;
    max-width: 1024px;
    margin: 0 var(--padding-medium);
    padding: var(--padding-small);

    font: 400 var(--body-font-size) / 1.5 var(--font-family);
    color: var(--text-color);

    background-color: var(--secondary-color);
    border: 2px solid var(--highlight-color);
    border-radius: var(--border-radius);
    outline: none;

    transition: border-color var(--transition-speed);
  }

  .filterInput:focus {
    border-color: var(--error-color);
  }

  a {
    text-decoration: none;
  }
</style>

<script>
  /**
   * Adds an event listener to the filter input element.
   * When the user types something, the filterPlaylists function is called.
   *
   * @param {HTMLInputElement} filterInput - The filter input element.
   */
  const filterInput = document.getElementById(
    "filter-input",
  ) as HTMLInputElement;
  filterInput.addEventListener("input", filterPlaylists);

  /**
   * Filters the playlist items based on the user input.
   * If the user input is found in the headline text of the playlist item,
   * the item is displayed, otherwise it is hidden.
   *
   * @param {Event} event - The event object.
   */
  function filterPlaylists(_event: Event) {
    const query = filterInput.value.toLowerCase();
    const playlistLinks = document.querySelectorAll(".choosePlaylist a");

    // Loop through each playlist link and check if the headline text
    // contains the user input. If it does, display the link, otherwise
    // hide it.
    playlistLinks.forEach((link) => {
      const headlineText = link.querySelector(".headline")?.textContent;

      if (headlineText && headlineText.toLowerCase().includes(query)) {
        // Display the link if the headline text contains the search query
        (link as HTMLElement).style.display = "block";
      } else {
        // Hide the link if the headline text does not contain the search query
        (link as HTMLElement).style.display = "none";
      }
    });
  }
</script>
