---
import { When } from "@astropub/flow";

import PlaylistItem from "../components/PlaylistItem.astro";
import Layout from "../layouts/Layout.astro";
import Help from "../components/HeaderItems/Help.astro";
import categoriesList from "../json/categories.json";
import { shuffleArray } from "../utils/share/shuffleArray";

/**
 * Get the user object from the Astro context
 */
const user = Astro.locals.user;

/**
 * If the user is not logged in, redirect them to the login page.
 */
if (!user) {
	/**
	 * Redirect the user to the login page.
	 */
	return Astro.redirect("/");
}

/**
 * This function filters the categoriesList array to only include items that are playable.
 * It then randomly selects one of those items and returns it.
 * @return {Array} An array containing one playable item.
 */
const getSelectedPlayableItem = () => {
  // Filter playable items
  const playableItems = categoriesList.filter((item) => item.isPlayable);


  return playableItems;
};

/**
 * This function filters the categoriesList array to only include items that are not playable.
 * It then shuffles the array and limits it to a maximum of 5 items.
 * @return {Array} An array containing non-playable items.
 */
const getNonPlayableItems = () => {
  // Filter non-playable items
  const nonPlayableItems = shuffleArray(categoriesList.filter((item) => !item.isPlayable));

  return nonPlayableItems;
};

// Create an array by combining the selected playable item and the non-playable items
// The selected playable item is randomly selected from the playable items
// The non-playable items are randomly shuffled and limited to a maximum of 5 items
const categories = [...getSelectedPlayableItem(), ...getNonPlayableItems()];


/**
 * Parse the user's favourite genres from the user object
 * If the user object doesn't exist, or the favourite genres are not set,
 * return an empty array
 */
const favouriteGenres = JSON.parse(user?.favoriteGenres ? JSON.stringify(user.favoriteGenres) : '[]');

/**
 * Filter the categories to only include those that are in the user's favourite genres
 */
const userFavoriteGenres = categories.filter((category) => favouriteGenres.includes(category.slug));

/**
 * Filter the categories to exclude those that are in the user's favourite genres
 */
const filteredCategories = categories.filter((category) => !favouriteGenres.includes(category.slug));
---

<Layout title="Spiel Kategorien">
  <Help slot="left-headercol" />
  <div class="introText">
    <div class="headline">Willkommen <span class="name">{user?.username ?? "Mika"}</span>!</div>
    <div class="subline">WÃ¤hlen Sie ein <span class="whiteText">Genre</span> zum spielen!</div>
  </div>

  <div class="choosePlaylist">
    <input class="filterInput" type="search" id="filter-input" placeholder="Suche nach einem Genre">

    <When test={userFavoriteGenres.length > 0}>
        <div class="dividerHeadline">Deine Genres:</div>
        {
            userFavoriteGenres.map((item) => (
                <When test={item.isPlayable}>
                    <a href={item.categoryUrl}>
                        <PlaylistItem headline={item.headline}  image={item.imageUrl} />
                    </a>
                </When>

                <When test={!item.isPlayable}>
                    <PlaylistItem headline={item.headline} image={item.imageUrl} />
                </When>
            ))
        }
    </When>

    <When test={filteredCategories.length > 0}>
        <When test={userFavoriteGenres.length > 0}><div class="dividerHeadline">Entdecke weitere Genres:</div></When>
        {
            filteredCategories.map((item) => (
                <When test={item.isPlayable}>
                    <a href={item.categoryUrl}>
                        <PlaylistItem headline={item.headline}  image={item.imageUrl} />
                    </a>
                </When>

                <When test={!item.isPlayable}>
                    <PlaylistItem headline={item.headline} image={item.imageUrl} />
                </When>
            ))
        }
    </When>
  </div>
</Layout>

<style>
  .introText {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--spacing-15);
    margin-bottom: var(--spacing-spacing-md);
  }

  .headline {
    color: var(--colour-text-primary);
    leading-trim: both;
    text-edge: cap;
    font-size: 24px;
    font-style: normal;
    font-weight: 900;
    line-height: 120%; /* 28.8px */
    letter-spacing: 0.36px;
  }

  .name {
    color: var(--colour-text-active);
  }

  .subline {
    color: var(--colour-text-secondary, #aeaeae);
    leading-trim: both;
    text-edge: cap;
    font-size: 16px;
    font-style: normal;
    font-weight: 400;
    line-height: 150%;
  }

  .whiteText {
    color: var(--colour-text-primary);
  }

  .choosePlaylist {
    display: flex;
    padding: var(--spacing-spacing-s) var(--spacing-spacing-s) var(--spacing-spacing-md) var(--spacing-spacing-s);
    flex-direction: row;
    justify-content: center;
    align-items: flex-start;
    flex-wrap: wrap;
    gap: var(--spacing-3);
    border-radius: var(--radius-radius-rounded);
    background: var(--colour-BG-secondary);
  }

  .dividerHeadline {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    color: var(--colour-text-active);
    leading-trim: both;
    text-edge: cap;
    font-size: 1.25rem;
    font-style: normal;
    font-weight: 700;
    line-height: 150%;
  }

  .filterInput {
    width: 100%;
    border: none;
    outline: none;
    font-size: 1rem;
    font-style: normal;
    font-weight: 400;
    line-height: 120%;
    letter-spacing: 0.36px;
    padding: var(--spacing-spacing-s) var(--spacing-spacing-s) var(--spacing-spacing-s) var(--spacing-spacing-s);
    color: var(--colour-text-BTN-primary);
  }

  .hidden {
    display: none;
  }
</style>

<script>
    /**
     * The search query string entered by the user.
     *
     * @type {string}
     */
    let searchQuery = '';

  /**
   * Adds an event listener to the filter input element.
   * When the user types something, the filterPlaylists function is called.
   */
  const filterInput = document.getElementById('filter-input') as HTMLInputElement;
  filterInput.addEventListener('input', filterPlaylists);

  /**
   * Filters the playlist items based on the user input.
   * If the user input is found in the headline text of the playlist item,
   * the item is displayed, otherwise it is hidden.
   */
  function filterPlaylists() {
    const query = filterInput.value.toLowerCase();
    searchQuery = query;
    const playlistItems = document.querySelectorAll('.playlistItem');

    const dividerHeadlines = document.querySelectorAll('.dividerHeadline') as NodeListOf<HTMLElement>;

    // Toggle visibility of divider headlines based on search query
    dividerHeadlines.forEach(el => el.classList.toggle('hidden', searchQuery !== ''));

    // Loop through each playlist item and check if the headline text
    // contains the user input. If it does, display the item, otherwise
    // hide it.
    playlistItems.forEach((item) => {
      const headlineText = (item as HTMLElement).querySelector('.headline')?.textContent;
      if (headlineText && headlineText.toLowerCase().includes(query)) {
        // Display the item if the headline text contains the search query
        (item as HTMLElement).style.display = 'block';
      } else {
        // Hide the item if the headline text does not contain the search query
        (item as HTMLElement).style.display = 'none';
      }
    });
  }
</script>
