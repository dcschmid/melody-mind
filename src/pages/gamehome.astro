---
import { When } from "@astropub/flow";

import PlaylistItem from "@components/PlaylistItem.astro";
import Layout from "@layouts/Layout.astro";
import categoriesList from "@json/categories.json";
import IntroText from "@components/Shared/IntroText.astro";

/**
 * Get the user object from the Astro context
 */
const user = Astro.locals.user;
const username = user?.username ?? "Gast";

/**
 * If the user is not logged in, redirect them to the login page.
 */
if (!user) {
  /**
   * Redirect the user to the login page.
   */
  return Astro.redirect("/");
}

interface Category {
  isPlayable: boolean;
  headline: string;
  categoryUrl?: string;
  imageUrl: string;
  introSubline: string;
  slug: string;
  text: string;
}

/**
 * This function filters the categoriesList array to only include items that are playable.
 * It then randomly selects one of those items and returns it.
 * @return {Array} An array containing one playable item.
 */
const getSelectedPlayableItem = (): Category[] => {
  if (!Array.isArray(categoriesList)) return [];
  return categoriesList.filter(
    (item): item is Category & { categoryUrl: string } => {
      return (
        typeof item === "object" &&
        item !== null &&
        "isPlayable" in item &&
        "headline" in item &&
        "imageUrl" in item &&
        "introSubline" in item &&
        "slug" in item &&
        "text" in item &&
        "categoryUrl" in item &&
        item.isPlayable &&
        Boolean(item.categoryUrl)
      );
    },
  );
};

/**
 * This function filters the categoriesList array to only include items that are not playable.
 * It then shuffles the array and limits it to a maximum of 5 items.
 * @return {Array} An array containing non-playable items.
 */
const getNonPlayableItems = () => {
  return categoriesList.filter((item) => !item.isPlayable);
};

const categories = [...getSelectedPlayableItem(), ...getNonPlayableItems()];
---

<Layout title="Spiel Kategorien">
  <main class="gameHome" id="main-content">
    <IntroText
      headline={`Willkommen ${username}`}
      subline="Wähle hier ein Genre aus, das du spielen möchtest!"
      headingId="welcome-heading"
    />

    <section class="playlistSection" aria-labelledby="playlist-heading">
      <h2 id="playlist-heading" class="sr-only">Genre Auswahl</h2>

      <div class="searchWrapper">
        <label for="filter-input" class="sr-only">
          Suche nach einem Genre
        </label>
        <input
          class="filterInput"
          type="search"
          id="filter-input"
          placeholder="Suche nach einem Genre"
          aria-label="Filterung der Genre-Liste"
          aria-controls="playlist-grid"
          aria-describedby="search-description"
          autocomplete="off"
          spellcheck="false"
        />
        <span id="search-description" class="sr-only">
          Die Liste wird während der Eingabe automatisch gefiltert
        </span>
      </div>

      <div
        id="playlist-grid"
        class="playlistGrid"
        role="list"
        aria-label="Liste der verfügbaren Genre"
        aria-live="polite"
      >
        <When test={categories.length > 0}>
          {
            categories.map((item) => (
              <li>
                <When test={item.isPlayable}>
                  <a
                    href={item.categoryUrl}
                    class="playlistLink"
                    aria-label={`${item.headline} Genre spielen`}
                  >
                    <PlaylistItem
                      headline={item.headline}
                      image={item.imageUrl}
                      imageAlt={`Cover-Bild für ${item.headline}`}
                    />
                  </a>
                </When>
              </li>
            ))
          }
        </When>
      </div>
    </section>
  </main>
</Layout>

<style lang="scss">
  .gameHome {
    padding: var(--padding-large);
    max-width: var(--max-line-length);
    margin: 0 auto;
    background-color: var(--background-color);
    border-radius: var(--border-radius);
  }

  .search-label {
    display: block;
    margin-bottom: 0.75rem;
    font-size: var(--body-font-size);
    font-weight: 600;
    color: var(--text-color);
  }

  .searchWrapper {
    margin: var(--padding-large) 0;
  }

  .filterInput {
    width: 100%;
    max-width: 1024px;
    padding: 1rem var(--padding-medium);
    font-family: var(--font-family);
    font-size: var(--body-font-size);
    line-height: var(--line-height-body);
    color: var(--text-color);
    background-color: var(--background-color);
    border: 2px solid var(--text-color);
    border-radius: var(--border-radius);
    -webkit-appearance: none;
    appearance: none;

    &::placeholder {
      color: var(--text-color);
      opacity: 0.8;
    }

    &:focus-visible {
      outline: var(--focus-outline-width) solid var(--focus-outline-color);
      outline-offset: var(--focus-outline-offset);
      border-color: var(--focus-outline-color);
    }

    @media (max-width: 768px) {
      font-size: 16px;
    }
  }

  .playlistGrid {
    display: grid;
    gap: var(--padding-large);
    width: 100%;
    margin: var(--padding-large) auto;
    padding: 0;
    list-style: none;
    min-height: 200px;

    grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
    max-width: 1200px;

    > li {
      display: list-item;
      width: 100%;
    }

    &[aria-busy="true"] {
      opacity: 0.7;
      pointer-events: none;
    }
  }

  .playlist-item {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .playlistLink,
  .playlistItem {
    display: flex;
    flex-direction: column;
    width: 100%;
    text-decoration: none;
    color: var(--text-color);
    background-color: var(--secondary-color);
    border: 2px solid transparent;
    border-radius: var(--border-radius);
    overflow: hidden;

    will-change: transform;
    transition: transform 0.2s ease-out;

    &:hover {
      transform: translateY(-2px);
    }

    img {
      width: 100%;
      height: auto;
      aspect-ratio: 1;
      object-fit: cover;
    }

    .headline {
      padding: var(--padding-medium);
      text-align: center;
      font-size: var(--body-font-size);
      font-weight: 600;
      line-height: var(--line-height-body);
      background-color: rgba(0, 0, 0, 0.85);
      color: #ffffff;
    }

    &:focus-visible {
      outline: var(--focus-outline-width) solid var(--focus-outline-color);
      outline-offset: var(--focus-outline-offset);
    }

    &[aria-disabled="true"] {
      opacity: 0.85;
      background-color: var(--secondary-color);
      cursor: not-allowed;

      &::after {
        content: "Nicht verfügbar";
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: rgba(0, 0, 0, 0.9);
        color: #ffffff;
        padding: 1em 1.5em;
        border-radius: var(--border-radius);
        font-weight: 600;
        font-size: var(--body-font-size);
      }
    }
  }

  .no-results {
    grid-column: 1 / -1;
    text-align: center;
    padding: var(--padding-large);
    background-color: var(--secondary-color);
    border-radius: var(--border-radius);
    font-size: var(--body-font-size);
    font-weight: 500;
    color: var(--text-color);
  }

  @media (forced-colors: active) {
    .playlistLink,
    .playlistItem {
      border: 2px solid ButtonText;
    }
  }

  @media print {
    .filterInput,
    .searchWrapper {
      display: none;
    }

    .playlistGrid {
      gap: 1rem;
    }

    .playlistLink,
    .playlistItem {
      break-inside: avoid;
      page-break-inside: avoid;
    }
  }
</style>

<script>
  /**
   * Debounces a function to limit its execution rate.
   * @param {Function} func - The function to debounce
   * @param {number} wait - The delay in milliseconds before the function can be called again
   * @returns {Function} A debounced version of the input function
   */
  function debounce<T extends (...args: any[]) => void>(
    func: T,
    wait: number,
  ): (...args: Parameters<T>) => void {
    let timeout: ReturnType<typeof setTimeout>;
    return (...args: Parameters<T>) => {
      clearTimeout(timeout);
      timeout = setTimeout(() => func(...args), wait);
    };
  }

  const filterInput = document.getElementById(
    "filter-input",
  ) as HTMLInputElement;
  const playlistGrid = document.querySelector(".playlistGrid");

  /**
   * Debounced filter function
   */
  const debouncedFilter = debounce(filterPlaylists, 300);
  filterInput?.addEventListener("input", debouncedFilter);

  /**
   * Cache for better performance
   */
  const playlistItemsCache = new Map<HTMLElement, string>();

  /**
   * Filters the playlist items based on the search query and updates their visibility.
   * @param {Event} _event - The event object (not used)
   */
  function filterPlaylists(_event: Event) {
    if (!filterInput || !playlistGrid) return;

    const query = filterInput.value.toLowerCase().trim();
    const playlistItems =
      document.querySelectorAll<HTMLElement>(".playlistGrid > li");
    let hasResults = false;

    playlistItems.forEach((item) => {
      let headlineText = playlistItemsCache.get(item);
      if (!headlineText) {
        headlineText =
          item.querySelector(".headline")?.textContent?.toLowerCase() ?? "";
        playlistItemsCache.set(item, headlineText);
      }

      const isVisible = headlineText.includes(query);
      item.style.display = isVisible ? "list-item" : "none";
      if (isVisible) hasResults = true;
    });

    updateNoResultsMessage(hasResults);
  }

  /**
   * Updates the visibility of playlist items based on the search query and shows/hides
   * a "no results" message accordingly.
   * @param {boolean} hasResults - Indicates whether any playlist items match the current filter
   * @returns {void}
   */
  function updateNoResultsMessage(hasResults: boolean) {
    let noResultsMsg = playlistGrid?.querySelector(".no-results");
    if (!hasResults) {
      if (!noResultsMsg) {
        noResultsMsg = document.createElement("p");
        noResultsMsg.className = "no-results";
        noResultsMsg.setAttribute("role", "status");
        noResultsMsg.textContent = "Keine Ergebnisse gefunden";
        playlistGrid?.appendChild(noResultsMsg);
      }
    } else {
      noResultsMsg?.remove();
    }
  }
</script>
