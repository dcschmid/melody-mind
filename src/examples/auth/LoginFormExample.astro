---
/**
 * Example Login Form using AuthFormField Component
 *
 * This example demonstrates proper usage of the AuthFormField component
 * following MelodyMind coding standards and accessibility best practices.
 *
 * Features demonstrated:
 * - Proper i18n integration
 * - WCAG AAA compliance
 * - Progressive enhancement
 * - Error handling
 * - Form validation
 * - CSS variable usage
 *
 * @example
 * This file can be referenced as a template for implementing
 * authentication forms throughout the MelodyMind application.
 */
import Layout from "@layouts/AuthLayout.astro";
import AuthFormField from "@components/auth/AuthFormField.astro";
import { getLangFromUrl, useTranslations } from "@utils/i18n";

// Get current language and translations
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// SEO and metadata
const title = t("auth.login.title");
const description = t("auth.login.description");
---

<Layout {title} {description}>
  <main class="auth-main">
    <div class="auth-container">
      <header class="auth-header">
        <h1 class="auth-title">{t("auth.login.heading")}</h1>
        <p class="auth-subtitle">{t("auth.login.subtitle")}</p>
      </header>

      <form method="POST" action="/api/auth/login" class="auth-form" novalidate data-form="login">
        <!-- CSRF Token (if needed) -->
        <input type="hidden" name="_token" value={Astro.locals.csrfToken} />

        <!-- Email Field -->
        <AuthFormField
          id="loginEmail"
          name="email"
          type="email"
          label={t("auth.login.email")}
          placeholder={t("auth.login.email.placeholder")}
          required={true}
          autocomplete="email"
          helpText={t("auth.form.email_help")}
          inputAttributes={{
            "data-testid": "login-email",
            maxlength: 254,
          }}
        />

        <!-- Password Field with Forgot Password Link -->
        <AuthFormField
          id="loginPassword"
          name="password"
          type="password"
          label={t("auth.login.password")}
          placeholder={t("auth.login.password.placeholder")}
          required={true}
          autocomplete="current-password"
          showPasswordToggle={true}
          passwordToggleLabel={t("auth.accessibility.password_toggle")}
          labelSuffix={`
            <a href="/${lang}/auth/forgot-password" class="auth-link">
              ${t("auth.forgot_password")}
            </a>
          `}
          inputAttributes={{
            "data-testid": "login-password",
            minlength: 8,
          }}
        />

        <!-- Remember Me Option -->
        <div class="auth-form-field">
          <label class="auth-checkbox-label">
            <input
              type="checkbox"
              name="remember"
              value="1"
              class="auth-checkbox"
              aria-describedby="rememberHelp"
            />
            <span class="auth-checkbox-text">{t("auth.login.remember_me")}</span>
          </label>
          <div id="rememberHelp" class="auth-help-text">
            {t("auth.login.remember_me_help")}
          </div>
        </div>

        <!-- Submit Button -->
        <button type="submit" class="btn-primary btn-full-width" data-testid="login-submit">
          {t("auth.login.submit")}
        </button>

        <!-- Alternative Actions -->
        <div class="auth-actions">
          <p class="auth-register-prompt">
            {t("auth.login.no_account")}
            <a href={`/${lang}/auth/register`} class="auth-link">
              {t("auth.register.link")}
            </a>
          </p>

          <div class="auth-social-divider">
            <span>{t("auth.or")}</span>
          </div>

          <!-- Social Login Options -->
          <div class="auth-social-buttons">
            <button type="button" class="btn-secondary btn-social" data-provider="google">
              <span class="btn-icon">
                <svg
                  width="20"
                  height="20"
                  viewBox="0 0 24 24"
                  fill="currentColor"
                  aria-hidden="true"
                >
                  <!-- Google icon SVG path -->
                  <path
                    d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                  ></path>
                </svg>
              </span>
              {t("auth.login.google")}
            </button>
          </div>
        </div>
      </form>
    </div>
  </main>
</Layout>

<style>
  /**
   * Auth Form Example Styles
   * Demonstrates proper usage of CSS variables from global.css
   * Following MelodyMind styling standards
   */

  /* Main container with consistent layout */
  .auth-main {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: var(--space-lg);
    background: var(--bg-primary);
  }

  /* Auth container with proper spacing */
  .auth-container {
    width: 100%;
    max-width: 28rem; /* 448px */
    background: var(--card-bg);
    border: var(--border-width-thin) solid var(--card-border);
    border-radius: var(--radius-lg);
    box-shadow: var(--card-shadow);
    padding: var(--space-2xl);
  }

  /* Header section */
  .auth-header {
    text-align: center;
    margin-bottom: var(--space-2xl);
  }

  .auth-title {
    font-size: var(--text-3xl);
    font-weight: var(--font-bold);
    color: var(--text-primary);
    line-height: var(--leading-tight);
    margin-bottom: var(--space-sm);
  }

  .auth-subtitle {
    font-size: var(--text-lg);
    color: var(--text-secondary);
    line-height: var(--leading-relaxed);
  }

  /* Form styles */
  .auth-form {
    display: flex;
    flex-direction: column;
    gap: var(--space-lg);
  }

  /* Checkbox field styling */
  .auth-checkbox-label {
    display: flex;
    align-items: flex-start;
    gap: var(--space-sm);
    cursor: pointer;
    font-size: var(--text-lg);
    line-height: var(--leading-relaxed);
  }

  .auth-checkbox {
    min-width: var(--min-touch-size);
    min-height: var(--min-touch-size);
    margin: 0;
    accent-color: var(--interactive-primary);
  }

  .auth-checkbox-text {
    color: var(--text-primary);
    flex: 1;
  }

  .auth-help-text {
    font-size: var(--text-base);
    color: var(--text-secondary);
    margin-top: var(--space-xs);
    padding-left: calc(var(--min-touch-size) + var(--space-sm));
    line-height: var(--leading-relaxed);
  }

  /* Button styles using CSS variables */
  .btn-primary {
    width: 100%;
    min-height: var(--min-touch-size);
    padding: var(--space-md) var(--space-lg);
    background: var(--btn-primary-bg);
    color: var(--btn-primary-text);
    border: none;
    border-radius: var(--radius-md);
    font-size: var(--text-lg);
    font-weight: var(--font-semibold);
    cursor: pointer;
    transition: all var(--transition-normal);
  }

  .btn-primary:hover {
    background: var(--btn-primary-hover);
    transform: translateY(-1px);
  }

  .btn-primary:focus {
    outline: var(--focus-outline);
    outline-offset: var(--focus-ring-offset);
    box-shadow: var(--focus-ring);
  }

  /* Alternative actions section */
  .auth-actions {
    margin-top: var(--space-xl);
    text-align: center;
  }

  .auth-register-prompt {
    font-size: var(--text-lg);
    color: var(--text-secondary);
    margin-bottom: var(--space-lg);
  }

  .auth-link {
    color: var(--interactive-primary);
    text-decoration: none;
    font-weight: var(--font-medium);
    transition: color var(--transition-fast);
  }

  .auth-link:hover {
    color: var(--interactive-primary-hover);
    text-decoration: underline;
    text-decoration-thickness: var(--text-decoration-thickness);
    text-underline-offset: var(--text-underline-offset);
  }

  .auth-link:focus {
    outline: var(--focus-outline);
    outline-offset: var(--focus-ring-offset);
    border-radius: var(--radius-sm);
  }

  /* Social divider */
  .auth-social-divider {
    position: relative;
    margin: var(--space-lg) 0;
    text-align: center;
    color: var(--text-tertiary);
    font-size: var(--text-base);
  }

  .auth-social-divider::before {
    content: "";
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    height: var(--border-width-thin);
    background: var(--border-secondary);
  }

  .auth-social-divider span {
    background: var(--card-bg);
    padding: 0 var(--space-md);
  }

  /* Social buttons */
  .auth-social-buttons {
    display: flex;
    flex-direction: column;
    gap: var(--space-md);
  }

  .btn-social {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-sm);
    min-height: var(--min-touch-size);
    padding: var(--space-md) var(--space-lg);
    background: var(--btn-secondary-bg);
    color: var(--btn-secondary-text);
    border: var(--border-width-thin) solid var(--btn-secondary-border);
    border-radius: var(--radius-md);
    font-size: var(--text-lg);
    font-weight: var(--font-medium);
    cursor: pointer;
    transition: all var(--transition-normal);
  }

  .btn-social:hover {
    background: var(--btn-secondary-hover);
    border-color: var(--interactive-primary);
  }

  .btn-social:focus {
    outline: var(--focus-outline);
    outline-offset: var(--focus-ring-offset);
    box-shadow: var(--focus-ring);
  }

  .btn-icon {
    display: flex;
    align-items: center;
  }

  /* Responsive design */
  @media (min-width: 48em) {
    .auth-container {
      max-width: 32rem; /* 512px */
      padding: var(--space-3xl);
    }

    .auth-title {
      font-size: var(--text-4xl);
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .auth-container {
      border-width: var(--border-width-enhanced);
    }

    .btn-primary,
    .btn-social {
      border-width: var(--border-width-thick);
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .btn-primary,
    .btn-social,
    .auth-link {
      transition: none;
    }

    .btn-primary:hover {
      transform: none;
    }
  }
</style>

<script>
  /**
   * Enhanced form functionality with accessibility features
   * Demonstrates proper client-side enhancement for AuthFormField
   */

  // Wait for DOM content to be loaded
  document.addEventListener("DOMContentLoaded", () => {
    const form = document.querySelector('[data-form="login"]') as HTMLFormElement;
    if (!form) {
      return;
    }

    // Enhanced form submission with loading states
    form.addEventListener("submit", async (event) => {
      event.preventDefault();

      const submitButton = form.querySelector('[data-testid="login-submit"]') as HTMLButtonElement;
      const originalText = submitButton.textContent;

      // Update button state
      submitButton.disabled = true;
      submitButton.textContent = "Signing in...";
      submitButton.setAttribute("aria-busy", "true");

      try {
        // Perform form submission
        const formData = new FormData(form);
        const response = await fetch(form.action, {
          method: "POST",
          body: formData,
        });

        if (response.ok) {
          // Handle successful login
          window.location.href = "/dashboard";
        } else {
          // Handle errors
          const error = await response.text();
          console.error("Login failed:", error);

          // Show error message (this would integrate with the AuthFormField error system)
          alert("Login failed. Please check your credentials.");
        }
      } catch (error) {
        console.error("Network error:", error);
        alert("Network error. Please try again.");
      } finally {
        // Reset button state
        submitButton.disabled = false;
        submitButton.textContent = originalText;
        submitButton.removeAttribute("aria-busy");
      }
    });

    // Social login handlers
    const socialButtons = form.querySelectorAll("[data-provider]");
    socialButtons.forEach((button) => {
      button.addEventListener("click", (event) => {
        const provider = (event.currentTarget as HTMLElement).dataset.provider;
        console.log(`Initiating ${provider} authentication`);
        // Implement social login logic here
      });
    });
  });
</script>
