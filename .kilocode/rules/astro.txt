Astro-Specific Guidelines

The following guidelines apply specifically to development with Astro and should be observed for all Astro-related tasks.

1. Component Architecture Best Practices

   - Content-based Component Division: Divide components based on content logic, not just visual aspects.
   
   - Astro Components vs. Native JavaScript: Use Astro components (.astro) for static UI elements and native JavaScript/TypeScript for interactive elements that require client-side functionality. This approach reduces bundle size, eliminates framework-specific dependencies, improves performance, and simplifies the development process by leveraging standard web technologies rather than external frameworks.
   
   - Effective Slot System Usage: Utilize Astro's named and unnamed slots for flexible component composition and improved reusability.
   
   - Component Islands: Implement the "Islands Architecture" concept by isolating interactive components and rendering the rest of the page statically.
   
   - Props Validation: Define prop types with TypeScript or JSDoc for better developer experience and error prevention.
   
   - Internationalisierung von Komponententexten: Alle statischen Texte in neuen Komponenten müssen in der 'src/i18n/ui.ts' Datei für jede unterstützte Sprache eingetragen werden. Dies ermöglicht eine konsistente mehrsprachige Unterstützung und vereinfacht die Wartung von Übersetzungen. Verwende beschreibende Schlüssel im Format 'componentname.textbeschreibung' (z.B. 'navbar.home' oder 'footer.copyright').

2. Optimal Use of Static and Dynamic Rendering

   - SSG vs. SSR: Use static rendering (SSG) as the default for maximum performance and caching benefits. Use server-side rendering (SSR) only for pages that require current data or user-specific content.
   
   - Hybrid Rendering: Combine static and dynamic rendering strategies within the same application based on the requirements of each route.
   
   - Incremental Rendering: Use Astro's On-Demand Rendering (ODR) for large websites to optimize build times.
   
   - Prerendering: Identify pages that can be pre-rendered to improve loading times and reduce server load.
   
   - Dynamic Routes: Implement dynamic routes with getStaticPaths() for optimal performance with data-driven pages.

3. Framework Integration Guidelines

   - Minimal Framework Usage: Integrate frameworks (React, Vue, Svelte, etc.) only where interactivity is needed to minimize bundle sizes.
   
   - Client Directives: Use the appropriate client:* directives (client:load, client:idle, client:visible, etc.) based on the component's loading timing.
   
   - Shared State: Implement cross-framework state management with Nano Stores or similar lightweight solutions.
   
   - Hydration Strategies: Choose the right hydration strategy based on component priority and visibility.
   
   - Framework Isolation: Keep different framework components isolated to avoid conflicts and unexpected behavior.

4. Performance Best Practices for Astro

   - Asset Optimization: Use Astro's integrated image optimization with <Image /> and <Picture /> components for optimal loading times.
   
   - CSS Optimization: Use Astro's CSS scoping and bundling for minimal CSS payloads.
   
   - Lazy Loading: Implement lazy loading for images, components, and scripts that are not immediately visible.
   
   - Prefetching: Use <link rel="prefetch"> for important navigation routes to improve perceived loading time.
   
   - Caching Strategies: Implement effective caching strategies with Astro's integrated functions and Service Workers.
   
   - Bundle Analysis: Monitor and optimize bundle sizes regularly with tools like astro-bundle-analyzer.

5. Tailwind Integration in Astro

   - Setup and Configuration: Install @astrojs/tailwind integration and configure tailwind.config.mjs to work with Astro's file structure. Use the applyBaseStyles option to control whether Tailwind's base styles are automatically included.
   
   - Component Styling Strategies: Leverage Astro's component-scoped CSS alongside Tailwind utility classes. For complex components, consider using a hybrid approach where layout is handled by Tailwind and component-specific styling uses Astro's scoped CSS.
   
   - Optimization Techniques: Enable JIT mode for faster builds and smaller CSS output. Use the safelist option for dynamic class names that might be missed by the purge process. Configure content paths properly to ensure all template files are scanned.
   
   - Common Patterns and Solutions: Use @apply directives in Astro's <style> blocks for repeated utility combinations. Create consistent design tokens by extending Tailwind's theme in the configuration. Implement dark mode using Tailwind's dark: variant with Astro's client-side scripts for toggling.
   
   - Integration with Existing Design Systems: Map design system tokens to Tailwind's theme configuration. Create component abstractions that encapsulate design system patterns while using Tailwind under the hood. Use Tailwind's plugin system to extend functionality with custom utilities that match your design system.

6. SEO Best Practices for Astro

   - SEO.astro Component: Use the project's SEO.astro component for consistent and comprehensive SEO implementation across all pages. This component centralizes SEO management and ensures best practices are followed automatically. The component handles meta tags, structured data, internationalization, performance optimizations, and accessibility features.
   
   ```astro
   <SEO
     title="Rock Music Quiz"
     description="Test your knowledge of classic rock hits"
     type="game"
   />
   ```
   
   - SEO.astro Features: The component provides extensive functionality including:
     * Dynamic meta tag generation based on page content
     * Structured data (JSON-LD) with schema.org standards for different content types (website, article, music, game)
     * Internationalization support with automatic hreflang tag generation
     * Performance optimizations with resource hints and critical resource preloading
     * Accessibility information in structured data
     * Mobile app integration meta tags
     * Music-specific OpenGraph tags for music content
   
   - Extending SEO.astro: When adding new features to the SEO component, ensure they:
     * Maintain TypeScript type safety through the Props interface
     * Follow schema.org standards for structured data
     * Support all content types (website, article, music, game)
     * Include appropriate accessibility information
     * Integrate with the existing layout components
   
   - Meta Tags Implementation: Implement comprehensive meta tags in the <head> section using the SEO.astro component. Include title, description, canonical URLs, Open Graph tags, Twitter Card tags, and language attributes. Use dynamic meta tags for content-specific pages.
   
   - Structured Data: Implement JSON-LD structured data for rich search results through the SEO.astro component. Use appropriate schemas from schema.org based on content type (Article, Product, FAQ, etc.). Validate structured data using Google's Rich Results Test.
   
   - Semantic HTML: Use proper semantic HTML elements (header, nav, main, article, section, aside, footer) to improve content structure and accessibility. Implement proper heading hierarchy (h1-h6) with a single h1 per page. Use descriptive anchor text for links.
   
   - Performance Optimization: Optimize Core Web Vitals metrics (LCP, FID/INP, CLS) using Astro's built-in performance features and the SEO.astro component's resource hints. Implement responsive images with srcset and sizes attributes. Use font display strategies to prevent layout shifts. Minimize JavaScript and CSS to reduce blocking time.
   
   - Content Structure: Organize content with clear information architecture. Implement breadcrumb navigation for deep site structures. Create XML sitemaps with prioritization. Implement proper internal linking strategies. Use descriptive URLs with relevant keywords.
   
   - Social Media Optimization: Implement platform-specific meta tags for optimal social sharing through the SEO.astro component. Create properly sized and optimized social sharing images. Use Astro's Image component for social media preview images to ensure optimal loading.
   
   - Integration with Layout Components: Ensure the SEO.astro component works seamlessly with other layout components like SkipLink.astro and Navigation.astro. The SEO component should be included in the Layout.astro file to ensure it's present on all pages.

7. WCAG AAA Compliance Requirements

   - Accessibility Standards: Implement WCAG 2.2 AAA level compliance across all components and pages. Conduct regular automated and manual accessibility audits. Document accessibility features and maintain an accessibility statement.
   
   - Color Contrast Requirements: Ensure text contrast ratio of at least 7:1 for normal text and 4.5:1 for large text. Avoid using color alone to convey information. Provide high contrast modes with contrast ratios of at least 10:1. Test all color combinations in both light and dark themes.
   
   - Keyboard Navigation: Ensure all interactive elements are accessible via keyboard with visible focus indicators. Implement logical tab order matching visual layout. Provide keyboard shortcuts for common actions with the ability to remap or disable them. Ensure no keyboard traps exist.
   
   - Screen Reader Optimization: Use ARIA attributes appropriately when HTML semantics are insufficient. Implement proper landmark roles. Provide descriptive alt text for images. Ensure dynamic content changes are announced to screen readers. Test with multiple screen readers (NVDA, JAWS, VoiceOver).
   
   - Form Accessibility: Implement proper label associations with form controls. Provide clear error messages and validation feedback. Allow sufficient time for form completion with the option to extend time limits. Ensure form controls have sufficient size for touch interaction (at least 44x44px).
   
   - Media Accessibility: Provide captions, transcripts, and audio descriptions for all media content. Ensure media players have accessible controls. Avoid auto-playing media or provide mechanisms to disable autoplay. Ensure no content flashes more than three times per second.

Context7 MCP Usage for Astro Development

The following guidelines describe how the Context7 MCP tool can be effectively used for Astro development.

1. Retrieving Current Astro Documentation

   - Current API Reference: Use Context7 to retrieve the latest Astro API documentation, especially for new features and breaking changes in Astro 4.x and higher.
   
   - Integration Documentation: Use Context7 to obtain specific information about Astro integrations (e.g., @astrojs/react, @astrojs/tailwind).
   
   - Migration Guides: Access current migration guides when projects need to be updated to newer Astro versions.
   
   - Code Examples: Retrieve relevant code examples for specific Astro functions to implement best practices.

2. Access to Best Practices and Patterns

   - Architecture Patterns: Use Context7 to identify proven architecture patterns for different types of Astro projects (blogs, e-commerce, documentation sites, etc.).
   
   - Performance Optimizations: Access current performance optimization strategies specifically developed for Astro.
   
   - SEO Best Practices: Use Context7 to retrieve SEO best practices for Astro websites, including structured data and meta tags.
   
   - Accessibility Patterns: Implement accessible components and patterns based on Context7 recommendations.
   
   - Internationalization Strategies: Gain access to proven i18n implementations for multilingual Astro websites.

3. Debugging Support

   - Error Diagnosis: Use Context7 to identify and fix common Astro-specific errors.
   
   - Build Optimization: Get help diagnosing and solving build performance problems.
   
   - Hydration Errors: Identify and fix hydration errors in framework components with Context7 support.
   
   - SSR Troubleshooting: Solve server-side rendering problems with specific debugging techniques.
   
   - Deployment Problems: Diagnose and fix problems with various hosting platforms (Vercel, Netlify, Cloudflare Pages, etc.).

When using Context7 for Astro development, the following workflow should always be followed:

1. Identify the specific Astro-related problem or requirement
2. Use the resolve-library-id tool with "astro" or specific Astro packages
3. Retrieve the relevant documentation with get-library-docs
4. Apply the obtained information in the context of the current project
5. Validate the implementation against current best practices